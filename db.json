{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/MST.png","path":"images/MST.png","modified":0,"renderable":0},{"_id":"source/images/docker-logo.png","path":"images/docker-logo.png","modified":0,"renderable":0},{"_id":"source/images/CefSharp-logo.png","path":"images/CefSharp-logo.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/Kubernetes_logo.png","path":"images/Kubernetes_logo.png","modified":0,"renderable":0},{"_id":"source/images/virtualbox-error.png","path":"images/virtualbox-error.png","modified":0,"renderable":0},{"_id":"source/images/cuda.png","path":"images/cuda.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"source/images/virtualbox-port-forward.png","path":"images/virtualbox-port-forward.png","modified":0,"renderable":0},{"_id":"source/images/k8s-dashboard.png","path":"images/k8s-dashboard.png","modified":0,"renderable":0},{"_id":"source/images/Qt-Gui-Example.png","path":"images/Qt-Gui-Example.png","modified":0,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"b362e89fb7d2d71fe49b78c43a11d033999b8531","modified":1572700615144},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1572268700960},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1572268700960},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1572268700960},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1572268700960},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1572268700960},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1572268700960},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1572268700960},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1572268700960},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1572268700960},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1572268700960},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1572268700960},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1572268700960},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1572268700960},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1572268700960},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1572268700964},{"_id":"themes/next/_config.yml","hash":"53196f5880c1579c0de423c02a54c84aaabb985b","modified":1577151457750},{"_id":"source/_posts/CefSharp_summary.md","hash":"40b6374e56926c5cb8fdf3fdd8b2784f2d177489","modified":1576068152942},{"_id":"source/_posts/Ubuntu_CUDA_cuDNN.md","hash":"d6e3f16daa69364db10ebe7261cc7d5fa3c8a938","modified":1576550604229},{"_id":"source/_posts/Jenkin_and_docker.md","hash":"a45b50ea0ebcb910ff5e20413c095e995a6a88cd","modified":1574000309064},{"_id":"source/_posts/Spring-Boot集成MyBatis操作MySQL.md","hash":"2d3ddf3f5a3ae1834cd51d9c47d1f1d99ea1c960","modified":1572760704223},{"_id":"source/_posts/arduino_DTH11.md","hash":"a130c3e074bf0a5d95b9e7c0208d5c6a01e95568","modified":1572268700936},{"_id":"source/_posts/stack_si_ze.md","hash":"86b9c2ed6bf75806ff517eba8273a70fb8777576","modified":1572268700936},{"_id":"source/_posts/min_spanning_tree.md","hash":"50e505f05c1ac8fa6e63a208ffb01ece91386c91","modified":1576550469110},{"_id":"source/images/MST.png","hash":"3232baf855e0d3940cf7f5d9404ec471f227c541","modified":1576068062536},{"_id":"source/about/index.md","hash":"5c17679e478e7f2bbc2859425dff0585caa01b64","modified":1572268700936},{"_id":"source/images/docker-logo.png","hash":"7eb0b5f3886839a658170c8860b85c0cd8f84c78","modified":1574945134607},{"_id":"source/关于/about.md","hash":"b90cb0b1db5f41731294749d33f7bd365bac2aa5","modified":1572268700936},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1572268700960},{"_id":"source/_posts/docker-Linux-Namespace-intro.md","hash":"7ee3a55a8a8d664c25f0f4b2fd301fb2eda4c8f8","modified":1575108045607},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1572268700960},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1572268700960},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1572268700960},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1572268700960},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1572268700960},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1572268700960},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1572268700960},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1572268700960},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1572268700960},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1572268700960},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1572268700960},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1572268700960},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1572268700960},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1572268700960},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1572268700960},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1572268700960},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1572268700960},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1572268700964},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1572268700960},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1572268700964},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1572268700960},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1572268700960},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1572268700964},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1572268700964},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1572268700964},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1572268700964},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1572268700964},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1572268700964},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1572268700964},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1572268700988},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1572268700988},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1572268700988},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572268700968},{"_id":"source/images/CefSharp-logo.png","hash":"01cd3aa1cd8cc3ee19c2de584d80c90d3d86e413","modified":1575108045607},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1572268700964},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1572268700964},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1572268700964},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1572268700964},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1572268700964},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1572268700964},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1572268700964},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1572268700964},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1572268700960},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1572268700960},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1572268700964},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1572268700960},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1572268700960},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1572268700960},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1572268700960},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1572268700960},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1572268700960},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7dbb60a8313525fab9699b05c0af94c996ca0655","modified":1572268700960},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1572268700960},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1572268700960},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1572268700960},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1572268700960},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1572268700964},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1572268700964},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1572268700964},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1572268700964},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1572268700964},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1572268700964},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1572268700964},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1572268700964},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1572268700964},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1572268700964},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1572268700964},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1572268700964},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1572268700968},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1572268700968},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1572268700968},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1572268700968},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1572268700968},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1572268700968},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1572268700968},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1572268700972},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1572268700972},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1572268700972},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1572268700972},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1572268700972},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1572268700972},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1572268700972},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1572268700972},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1572268700972},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1572268700972},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1572268700972},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1572268700968},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572268700964},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572268700964},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572268700968},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572268700968},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572268700968},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572268700968},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1572268700968},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1572268700960},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1572268700960},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1572268700964},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1572268700964},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1572268700964},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1572268700964},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1572268700964},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1572268700964},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1572268700964},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1572268700964},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1572268700964},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1572268700964},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1572268700964},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1572268700964},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1572268700964},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1572268700964},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1572268700964},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1572268700964},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1572268700964},{"_id":"themes/next/layout/_third-party/comments/utterances.swig","hash":"b6d7965a1dd110197204ebea993b083f4956222b","modified":1572755133174},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1572268700964},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1572268700964},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1572268700964},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1572268700964},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1572268700964},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1572268700964},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1572268700964},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1572268700968},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1572268700968},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1572268700968},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1572268700968},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1572268700968},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1572268700968},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1572268700968},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1572268700968},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1572268700972},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1572268700972},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1572268700972},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1572268700972},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1572268700972},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1572268700972},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1572268700972},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1572268700972},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1572268700972},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1572268700972},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1572268700972},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1572268700972},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1572268700976},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1572268700976},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1572268700976},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1572268700976},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1572268700976},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1572268700976},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1572268700976},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1572268700976},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1572268700976},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1572268700976},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1572268700976},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1572268700980},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1572268700980},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1572268700980},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1572268700980},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1572268700980},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1572268700980},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1572268700980},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1572268700980},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1572268700980},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1572268700980},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1572268700984},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1572268700984},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1572268700984},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1572268700984},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1572268700984},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1572268700984},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1572268700984},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1572268700984},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1572268700988},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1572268700988},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1572268700988},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1572268700980},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1572268700964},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1572268700968},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1572268700968},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1572268700968},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1572268700968},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1572268700968},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1572268700968},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1572268700968},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1572268700968},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1572268700972},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1572268700972},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1572268700972},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1572268700972},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1572268700976},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1572268700976},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1572268700976},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1572268700976},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1572268700976},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1572268700976},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1572268700984},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1572268700984},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1572268700972},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1572268700976},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1572268700980},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1572268700980},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1572268700988},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1572268700964},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1572268700968},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1572268700968},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1572268700968},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1572268700972},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1572268700972},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1572268700972},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1572268700972},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1572268700972},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1572268700976},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1572268700976},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1572268700976},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1572268700980},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1572268700980},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1572268700976},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1572268700984},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1572268700980},{"_id":"source/_posts/Vagrant_Kubernetes_cluster.md","hash":"5cf724b2e576676fc09f1b49dd3046a12bcd349d","modified":1580018078805},{"_id":"source/images/Kubernetes_logo.png","hash":"c28cb04125232bfa95cde5275e05fd92f59530f0","modified":1576467188389},{"_id":"source/images/pasted-0.png","hash":"80965aa4d35b515f30842f456ce1dd5bc3fca720","modified":1581513018521},{"_id":"source/images/virtualbox-error.png","hash":"0001f7d09a3ac640a83900f1ef7426b089cd3315","modified":1576549275631},{"_id":"source/images/cuda.png","hash":"3a43233bae96b5c4258d399eddcfbe59be1fdad4","modified":1576550582070},{"_id":"themes/next/source/images/alipay.jpg","hash":"6237946d4eacbd2851873579339d8466250faa34","modified":1577151243189},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"5b1138859cc1d6da1527026a5ab90a5294cccaa6","modified":1577151245664},{"_id":"source/images/pasted-1.png","hash":"0098a4aff2240d247aec495d75ce631343f8b7a3","modified":1577775194881},{"_id":"source/images/virtualbox-port-forward.png","hash":"0098a4aff2240d247aec495d75ce631343f8b7a3","modified":1577775194881},{"_id":"source/images/k8s-dashboard.png","hash":"d15237ef8e4aed5fdf77b895e163872125f60544","modified":1577775611376},{"_id":"source/_drafts/tun-tap.md","hash":"fe2b827ea0886bf604961d373a8ed5a0af8f8e11","modified":1578903252308},{"_id":"source/_posts/tun-tap.md","hash":"4937740a25cff390dd82c4ae6f059da7528c2009","modified":1578968929423},{"_id":"source/_drafts/Linux网络虚拟化技术之Veth和Bridge.md","hash":"9f26fc43ecfae4ff29c88c033208a8e6db8a9c3e","modified":1578978794802},{"_id":"source/_drafts/Linu_Veth_and_Bridge.md","hash":"9c047774218df8ab58b5e77097cee2275cb7e0f8","modified":1578978858576},{"_id":"source/_posts/Linu_Veth_and_Bridge.md","hash":"7137d368d010bacb5117436c01311df5cf430ced","modified":1578979082923},{"_id":"source/_drafts/Qt之初步尝试.md","hash":"30f3b52a834ef96218eec6142be69f96ba42100d","modified":1579401163801},{"_id":"source/_drafts/Qt_begin.md","hash":"dff38ef66a47d10202e2a1a860bab6c1f7e170b4","modified":1579401256015},{"_id":"source/_posts/Qt_begin.md","hash":"03c1d3c8e6059baf8c12c1396deba510dce3d87d","modified":1581309690995},{"_id":"source/images/Qt-Gui-Example.png","hash":"2d9bc040f066b69ab70b239a760038cbb6206241","modified":1580651985593},{"_id":"source/_drafts/Qt之布局管理.md","hash":"211bb278798341d6c23ea1c0b595402dc818553b","modified":1581514255323},{"_id":"source/_posts/Qt之布局管理.md","hash":"78b249c03d37a7c23ae978f5128e10b8c490cc7c","modified":1581514348932}],"Category":[{"name":"C#","_id":"ck470mea20002u8ztbw1voa2q"},{"name":"机器学习","_id":"ck470mea60007u8zt7dgnzpnk"},{"name":"ci","_id":"ck470mea9000cu8zthp5h00yh"},{"name":"Java","_id":"ck470mea9000fu8ztxdfaupse"},{"name":"单片机","_id":"ck470meaa000ku8ztkxq9xs48"},{"name":"算法","_id":"ck470meab000ou8ztzk1ld41e"},{"name":"algorithm","_id":"ck470meab000ru8zt0fkeobcn"},{"name":"kubernetes","_id":"ck495sd5v0001213eo92alh0p"},{"name":"linux","_id":"ck5c699pu00029bztgjpxklwv"},{"name":"C++","_id":"ck5keq8ni0002ap3evz63z4ef"}],"Data":[],"Page":[{"title":"about","date":"2019-08-27T02:58:30.000Z","_content":"一个数学爱好者\n* [SF](https://segmentfault.com/u/salamander)\n* [Github](https://github.com/salamander-mh)","source":"about/index.md","raw":"title: about\ndate: 2019-08-27 10:58:30\n---\n一个数学爱好者\n* [SF](https://segmentfault.com/u/salamander)\n* [Github](https://github.com/salamander-mh)","updated":"2019-10-28T13:18:20.936Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck470mecy001nu8ztraxsk801","content":"<p>一个数学爱好者</p>\n<ul>\n<li><a href=\"https://segmentfault.com/u/salamander\" target=\"_blank\" rel=\"noopener\">SF</a></li>\n<li><a href=\"https://github.com/salamander-mh\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>一个数学爱好者</p>\n<ul>\n<li><a href=\"https://segmentfault.com/u/salamander\" target=\"_blank\" rel=\"noopener\">SF</a></li>\n<li><a href=\"https://github.com/salamander-mh\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n</ul>\n"},{"title":"关于","date":"2019-08-27T02:39:53.000Z","_content":"一个数学爱好者\n* [SF](https://segmentfault.com/u/salamander)\n* [Github](https://github.com/salamander-mh)","source":"关于/about.md","raw":"title: 关于\ndate: 2019-08-27 10:39:53\n---\n一个数学爱好者\n* [SF](https://segmentfault.com/u/salamander)\n* [Github](https://github.com/salamander-mh)","updated":"2019-10-28T13:18:20.936Z","path":"关于/about.html","comments":1,"layout":"page","_id":"ck470med0001pu8ztiuyes2lk","content":"<p>一个数学爱好者</p>\n<ul>\n<li><a href=\"https://segmentfault.com/u/salamander\" target=\"_blank\" rel=\"noopener\">SF</a></li>\n<li><a href=\"https://github.com/salamander-mh\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>一个数学爱好者</p>\n<ul>\n<li><a href=\"https://segmentfault.com/u/salamander\" target=\"_blank\" rel=\"noopener\">SF</a></li>\n<li><a href=\"https://github.com/salamander-mh\" target=\"_blank\" rel=\"noopener\">Github</a></li>\n</ul>\n"}],"Post":[{"title":"CefSharp浅尝辄止","author":"Salamander","date":"2019-11-16T12:00:00.000Z","_content":"![docker logo](/images/CefSharp-logo.png)\n\n## CefSharp\n[CEF](https://github.com/chromiumembedded/cef)全称：**Chromium Embedded Framework**。  \nCefSharp是什么？[官网](http://cefsharp.github.io/)上它是这么写的：CefSharp是在C#或VB.NET应用程序中嵌入全功能标准兼容web浏览器的最简单方法。CefSharp有WinForms和WPF应用程序的浏览器控件，也有自动化项目的无标题（屏幕外）版本。CefSharp基于Chromium嵌入式框架，这是Google Chrome的开源版本。  \n说白了，就是基于C#或VB语言的**可编程浏览器**（当然CEF也有其他语言的，如[Java](https://bitbucket.org/chromiumembedded/java-cef)，[Go](https://github.com/cztomczak/cef2go)）。\n\n<!-- more -->\n\n本文环境：\n* CefSharp版本：75.1.143\n* VS版本：2015\n* 操作系统：Windows 10专业版\n\n## WPF引入CefSharp\nCefSharp有现成的NuGet包，先引入到项目中，然后在XAML中添加响应控件：\n```\n<cefSharp:ChromiumWebBrowser Name=\"myChrome\" Loaded=\"myChrome_Loaded\"/>\n```\n添加`cefSharp`命名空间：\n```\nxmlns:cefSharp=\"clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf\"\n```\n在`myChrome_Loaded`事件中，我们让浏览器打开百度首页：\n```C#\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://www.baidu.com\";\n    myChrome.Load(url);\n}\n```\n运行程序，我们就可以看到百度首页了。\n\n\n## 截断请求\n根据[文档](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_Handler_RequestHandler.htm)，我们可以看到`RequestHandler`类中的方法`GetResourceRequestHandler`会在每次发请求前被调用：\n> GetResourceRequestHandler  \n> Called on the CEF IO thread before a resource request is initiated.\n\n`RequestHandler`类是[`IRequestHandler`](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequestHandler.htm)接口的默认实现，我们自定义请求可以继承这个类：\n> Default implementation of IRequestHandler. \n> This class provides default implementations of the methods from IRequestHandler, therefore providing a convenience base class for any custom request handler.\n\n\n所以我们可以创建一个继承`RequestHandler`的类\n```\n\nclass CustomRequestHandler : RequestHandler\n{\n    protected override IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, ref bool disableDefaultHandling)\n    {\n        return new CustomResourceRequestHandler();\n    }\n}\n```\n\n`GetResourceRequestHandler`是我们要重点关注的方法，里头我们返回了一个类实例，在这个类中我们就可以**自定义请求**。  \n新版的CefSharp（75版本之后）把`OnBeforeResourceLoad`方法移动到了`IResourceRequestHandler`接口里（[文档](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IResourceRequestHandler.htm)），同样的CefSharp也提供了这个接口的默认实现：`ResourceRequestHandler`，所以我们还需要一个继承`ResourceRequestHandler`的类（也就是上面代码中的`CustomResourceRequestHandler`类）：\n```\npublic class CustomResourceRequestHandler : ResourceRequestHandler\n{\n    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n    {\n        var headers = request.Headers;\n        headers[\"Custom-Header\"] = \"My Custom Header\";\n        request.Headers = headers;\n\n        return CefReturnValue.Continue;\n    }\n}\n```\n最后，把自定义请求类设置到CefSharp实例中\n```\nmyChrome.RequestHandler = new CustomRequestHandler();\n```\n通过Fiddler这样的抓包工具，我们就会发现，自定义的`Custom-Header`头已经加上了\n\n![detail](https://s2.ax1x.com/2019/11/16/MBE5Dg.png)\n\n### 添加自定义查询参数\n上面的例子中，我们添加了自定义的header，如果我们想改写`URL`添加一些自定义的查询参数呢，譬如`name=foo`？这里有个坑，如果我们简单地把`request.Url += \"?name=foo\"`，这样会导致无限重定向（因为改了Url就会重定向）。解决方法也很简单，就是判断一下我们想要的查询参数是否已经在`Url`里了：\n```\nprotected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n{\n    var headers = request.Headers;\n    headers[\"Custom-Header\"] = \"My Custom Header\";\n    request.Headers = headers;\n\n    if (!request.Url.Contains(\"name=foo\"))\n    {\n        request.Url += \"?\" + \"name=foo\";\n    }\n\n    return CefReturnValue.Continue;\n}\n```\n\n### 添加自定义Body\n\n根据[IRequest](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequest.htm)的文档，我们可以利用`PostData`属性：\n```\nprotected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n{\n    var headers = request.Headers;\n    headers[\"Custom-Header\"] = \"My Custom Header\";\n    request.Headers = headers;\n\n    string body = \"name=foo\";\n    byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(body);\n\n    request.InitializePostData();\n    var element = request.PostData.CreatePostDataElement();\n    element.Bytes = byteArray;\n    request.PostData.AddElement(element);\n\n    return CefReturnValue.Continue;\n}\n```\n通过Fiddler这样的抓包工具，我们就会发现，POST 数据已经加上了：\n\n![detail](https://s2.ax1x.com/2019/11/30/QVjqp9.png)\n\n## 加载本地HTML字符串\n\n有时候，我们可能需要渲染一个内存中的HTML字符串，CefSharp也提供这样的接口，代码很简单：\n```\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    string html = @\"<!DOCTYPE html>\n<html>\n    <head>\n        <title>这是个标题</title>\n        <meta charset='utf-8' />\n        <meta name = 'viewport' content = 'width=device-width, initial-scale=1' />\n     </head>\n    <body>\n        <h1>这是一个一个简单的HTML</h1>\n        <p>Hello World！</p >\n    </body>\n</html>\";\n    String url = \"https://www.baidu.com\";\n    myChrome.LoadHtml(html, url);\n}\n\n```\n\n## 截断响应\n这里的关键在于`GetResourceResponseFilter`方法，它的签名如下：\n```\nIResponseFilter GetResourceResponseFilter(\n\tIWebBrowser chromiumWebBrowser,\n\tIBrowser browser,\n\tIFrame frame,\n\tIRequest request,\n\tIResponse response\n)\n```\n它返回了一个`IResponseFilter`接口，在这个接口中，我们可以截取到请求响应的内容。在CefSharp最新版本中，`GetResourceResponseFilter`已经被放入到`IResourceRequestHandler`接口中，[最新文档](http://cefsharp.github.io/api/75.1.x/html/M_CefSharp_IResourceRequestHandler_GetResourceResponseFilter.htm)。  \n下面我放了一个截断网页XHR请求的例子：\n```\npublic class TestJsonFilter : IResponseFilter\n{\n    public List<byte> DataAll = new List<byte>();\n\n    public FilterStatus Filter(System.IO.Stream dataIn, out long dataInRead, System.IO.Stream dataOut, out long dataOutWritten)\n    {\n        try\n        {\n            if (dataIn == null || dataIn.Length == 0)\n            {\n                dataInRead = 0;\n                dataOutWritten = 0;\n\n                return FilterStatus.Done;\n            }\n\n            dataInRead = dataIn.Length;\n            dataOutWritten = Math.Min(dataInRead, dataOut.Length);\n\n            dataIn.CopyTo(dataOut);\n            dataIn.Seek(0, SeekOrigin.Begin);\n            byte[] bs = new byte[dataIn.Length];\n            dataIn.Read(bs, 0, bs.Length);\n            DataAll.AddRange(bs);\n\n            dataInRead = dataIn.Length;\n            dataOutWritten = dataIn.Length;\n\n            return FilterStatus.NeedMoreData;\n        }\n        catch (Exception ex)\n        {\n            dataInRead = dataIn.Length;\n            dataOutWritten = dataIn.Length;\n\n            return FilterStatus.Done;\n        }\n    }\n\n    public bool InitFilter()\n    {\n        return true;\n    }\n\n    public void Dispose()\n    {\n\n    }\n}\n\npublic class FilterManager\n{\n    private static Dictionary<string, IResponseFilter> dataList = new Dictionary<string, IResponseFilter>();\n\n    public static IResponseFilter CreateFilter(string guid)\n    {\n        lock (dataList)\n        {\n            var filter = new TestJsonFilter();\n            dataList.Add(guid, filter);\n\n            return filter;\n        }\n    }\n\n    public static IResponseFilter GetFileter(string guid)\n    {\n        lock (dataList)\n        {\n        \n            if (dataList.ContainsKey(guid))  // 这里要检测key存在，不然会报异常，会导致ContextSwitchDeadlock\n            {\n                return dataList[guid];\n            }\n            else\n            {\n                return null;\n            }\n        }\n    }\n}\n\npublic class CustomResourceRequestHandler : ResourceRequestHandler\n{\n    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n    {\n        // 截断请求的代码...\n        return CefReturnValue.Continue;\n    }\n\n\n    protected override IResponseFilter GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response)\n    {\n        if (!(request.ResourceType == ResourceType.Xhr))  // 不是XHR类型就不去过滤\n        {\n            return null;\n        }\n        var filer = FilterManager.CreateFilter(request.Identifier.ToString());\n        return filer;\n    }\n\n    protected override void OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength)\n    {\n        var filer = FilterManager.GetFileter(request.Identifier.ToString()) as TestJsonFilter;\n        if (filer != null)\n        {\n            Console.WriteLine(ASCIIEncoding.UTF8.GetString(filer.DataAll.ToArray()));  // 打印body内容\n        }\n    }\n}\n\n\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://github.com/salamander-mh\";  // github首页上有ajax请求，可以看效果\n    myChrome.Load(url);\n}\n\n```\n运行程序，在`输出`视图就可以看到Ajax请求的body数据。\n\n## 截取cookie\n建立Cookie读取对象，继承接口 ICookieVisitor\n```\npublic class CookieVisitor : CefSharp.ICookieVisitor\n{\n    public event Action<CefSharp.Cookie> SendCookie;\n\n\n    public bool Visit(Cookie cookie, int count, int total, ref bool deleteCookie)\n    {\n        deleteCookie = false;\n        if (SendCookie != null)\n        {\n            SendCookie(cookie);\n        }\n\n        return true;\n    }\n\n    public void Dispose()\n    {\n    }\n}\n```\n在browser事件中进行处理\n```\nprivate void browser_FrameLoadEnd(object sender, CefSharp.FrameLoadEndEventArgs e)\n{\n    var cookieManager = myChrome.GetCookieManager();\n\n    CookieVisitor visitor = new CookieVisitor();\n    visitor.SendCookie += visitor_SendCookie;\n    cookieManager.VisitAllCookies(visitor);\n}\n```\n**回调事件**\n```\nprivate void visitor_SendCookie(CefSharp.Cookie obj)\n{\n    Console.WriteLine(\"获取cookie：\" + obj.Domain.TrimStart('.') + \"^\" + obj.Name + \"^\" + obj.Value + \"$\");\n}\n```\n设置CefSharp实例事件：\n```\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://www.baidu.com\";\n    myChrome.Load(url);\n    myChrome.FrameLoadEnd += browser_FrameLoadEnd;\n}\n```\n运行程序，在`输出`视图就可以看到**cookie**数据了。\n\n## Javascript交互\n\n### C#执行js方法\n```\nmyChrome.GetBrowser().MainFrame.ExecuteJavaScriptAsync(\"document.getElementById('testid').click();\");  \n```\n以上代码就会触发id为`testid`的元素的`click`事件。  \n注意：**脚本是在 Frame 级别执行**，页面永远至少有一个Frame（ MainFrame ）。\n\n### 获取Javascript方法结果\n这里需要使用`Task<JavascriptResponse> EvaluateScriptAsync(string script, TimeSpan? timeout)`方法。 JavaScript代码是异步执行的，因此使用.NET Task 类返回一个响应，其中包含错误消息，结果和一个成功（bool）标志。\n```\n// Get Document Height  \nvar task = frame.EvaluateScriptAsync(\"(function() { var body = document.body, html = document.documentElement; return  Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight ); })();\", null);\n  \ntask.ContinueWith(t =>  \n{  \n    if (!t.IsFaulted)  \n    {  \n        var response = t.Result;  \n        EvaluateJavaScriptResult = response.Success ? (response.Result ?? \"null\") : response.Message;  \n    }  \n}, TaskScheduler.FromCurrentSynchronizationContext());  \n```\n\n\n\n## 资源清理\n关闭应用，发现`CefSharp.BrowserSubprocess.exe`进程会发现没有结束，其实在退出事件中，我们需要调用`Cef.Shutdown()`方法\n```\ntry  \n{  \n    if (browser != null)  \n    {  \n        browser.Dispose();  \n        Cef.Shutdown();  \n    }  \n}  \ncatch { }  \n```\n\n\n\n示例代码[下载](http://file.51lucy.com/BroswerTest.rar)\n\n\n\n参考：\n* [StackOverflow](https://stackoverflow.com/questions/31250797/chromium-send-custom-header-info-on-initial-page-load-c-sharp)\n* [How to read the JSON response content from a XMLHttpRequest?](https://stackoverflow.com/questions/40944056/how-to-read-the-json-response-content-from-a-xmlhttprequest/43652932#43652932)\n* [**CefSharp中文帮助文档**](https://github.com/cefsharp/CefSharp/wiki/CefSharp%E4%B8%AD%E6%96%87%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3)","source":"_posts/CefSharp_summary.md","raw":"title: CefSharp浅尝辄止\nauthor: Salamander\ntags:\n  - 'C#'\n  - CefSharp\n  - WPF\ncategories:\n  - 'C#'\ndate: 2019-11-16 20:00:00\n---\n![docker logo](/images/CefSharp-logo.png)\n\n## CefSharp\n[CEF](https://github.com/chromiumembedded/cef)全称：**Chromium Embedded Framework**。  \nCefSharp是什么？[官网](http://cefsharp.github.io/)上它是这么写的：CefSharp是在C#或VB.NET应用程序中嵌入全功能标准兼容web浏览器的最简单方法。CefSharp有WinForms和WPF应用程序的浏览器控件，也有自动化项目的无标题（屏幕外）版本。CefSharp基于Chromium嵌入式框架，这是Google Chrome的开源版本。  \n说白了，就是基于C#或VB语言的**可编程浏览器**（当然CEF也有其他语言的，如[Java](https://bitbucket.org/chromiumembedded/java-cef)，[Go](https://github.com/cztomczak/cef2go)）。\n\n<!-- more -->\n\n本文环境：\n* CefSharp版本：75.1.143\n* VS版本：2015\n* 操作系统：Windows 10专业版\n\n## WPF引入CefSharp\nCefSharp有现成的NuGet包，先引入到项目中，然后在XAML中添加响应控件：\n```\n<cefSharp:ChromiumWebBrowser Name=\"myChrome\" Loaded=\"myChrome_Loaded\"/>\n```\n添加`cefSharp`命名空间：\n```\nxmlns:cefSharp=\"clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf\"\n```\n在`myChrome_Loaded`事件中，我们让浏览器打开百度首页：\n```C#\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://www.baidu.com\";\n    myChrome.Load(url);\n}\n```\n运行程序，我们就可以看到百度首页了。\n\n\n## 截断请求\n根据[文档](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_Handler_RequestHandler.htm)，我们可以看到`RequestHandler`类中的方法`GetResourceRequestHandler`会在每次发请求前被调用：\n> GetResourceRequestHandler  \n> Called on the CEF IO thread before a resource request is initiated.\n\n`RequestHandler`类是[`IRequestHandler`](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequestHandler.htm)接口的默认实现，我们自定义请求可以继承这个类：\n> Default implementation of IRequestHandler. \n> This class provides default implementations of the methods from IRequestHandler, therefore providing a convenience base class for any custom request handler.\n\n\n所以我们可以创建一个继承`RequestHandler`的类\n```\n\nclass CustomRequestHandler : RequestHandler\n{\n    protected override IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, ref bool disableDefaultHandling)\n    {\n        return new CustomResourceRequestHandler();\n    }\n}\n```\n\n`GetResourceRequestHandler`是我们要重点关注的方法，里头我们返回了一个类实例，在这个类中我们就可以**自定义请求**。  \n新版的CefSharp（75版本之后）把`OnBeforeResourceLoad`方法移动到了`IResourceRequestHandler`接口里（[文档](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IResourceRequestHandler.htm)），同样的CefSharp也提供了这个接口的默认实现：`ResourceRequestHandler`，所以我们还需要一个继承`ResourceRequestHandler`的类（也就是上面代码中的`CustomResourceRequestHandler`类）：\n```\npublic class CustomResourceRequestHandler : ResourceRequestHandler\n{\n    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n    {\n        var headers = request.Headers;\n        headers[\"Custom-Header\"] = \"My Custom Header\";\n        request.Headers = headers;\n\n        return CefReturnValue.Continue;\n    }\n}\n```\n最后，把自定义请求类设置到CefSharp实例中\n```\nmyChrome.RequestHandler = new CustomRequestHandler();\n```\n通过Fiddler这样的抓包工具，我们就会发现，自定义的`Custom-Header`头已经加上了\n\n![detail](https://s2.ax1x.com/2019/11/16/MBE5Dg.png)\n\n### 添加自定义查询参数\n上面的例子中，我们添加了自定义的header，如果我们想改写`URL`添加一些自定义的查询参数呢，譬如`name=foo`？这里有个坑，如果我们简单地把`request.Url += \"?name=foo\"`，这样会导致无限重定向（因为改了Url就会重定向）。解决方法也很简单，就是判断一下我们想要的查询参数是否已经在`Url`里了：\n```\nprotected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n{\n    var headers = request.Headers;\n    headers[\"Custom-Header\"] = \"My Custom Header\";\n    request.Headers = headers;\n\n    if (!request.Url.Contains(\"name=foo\"))\n    {\n        request.Url += \"?\" + \"name=foo\";\n    }\n\n    return CefReturnValue.Continue;\n}\n```\n\n### 添加自定义Body\n\n根据[IRequest](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequest.htm)的文档，我们可以利用`PostData`属性：\n```\nprotected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n{\n    var headers = request.Headers;\n    headers[\"Custom-Header\"] = \"My Custom Header\";\n    request.Headers = headers;\n\n    string body = \"name=foo\";\n    byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(body);\n\n    request.InitializePostData();\n    var element = request.PostData.CreatePostDataElement();\n    element.Bytes = byteArray;\n    request.PostData.AddElement(element);\n\n    return CefReturnValue.Continue;\n}\n```\n通过Fiddler这样的抓包工具，我们就会发现，POST 数据已经加上了：\n\n![detail](https://s2.ax1x.com/2019/11/30/QVjqp9.png)\n\n## 加载本地HTML字符串\n\n有时候，我们可能需要渲染一个内存中的HTML字符串，CefSharp也提供这样的接口，代码很简单：\n```\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    string html = @\"<!DOCTYPE html>\n<html>\n    <head>\n        <title>这是个标题</title>\n        <meta charset='utf-8' />\n        <meta name = 'viewport' content = 'width=device-width, initial-scale=1' />\n     </head>\n    <body>\n        <h1>这是一个一个简单的HTML</h1>\n        <p>Hello World！</p >\n    </body>\n</html>\";\n    String url = \"https://www.baidu.com\";\n    myChrome.LoadHtml(html, url);\n}\n\n```\n\n## 截断响应\n这里的关键在于`GetResourceResponseFilter`方法，它的签名如下：\n```\nIResponseFilter GetResourceResponseFilter(\n\tIWebBrowser chromiumWebBrowser,\n\tIBrowser browser,\n\tIFrame frame,\n\tIRequest request,\n\tIResponse response\n)\n```\n它返回了一个`IResponseFilter`接口，在这个接口中，我们可以截取到请求响应的内容。在CefSharp最新版本中，`GetResourceResponseFilter`已经被放入到`IResourceRequestHandler`接口中，[最新文档](http://cefsharp.github.io/api/75.1.x/html/M_CefSharp_IResourceRequestHandler_GetResourceResponseFilter.htm)。  \n下面我放了一个截断网页XHR请求的例子：\n```\npublic class TestJsonFilter : IResponseFilter\n{\n    public List<byte> DataAll = new List<byte>();\n\n    public FilterStatus Filter(System.IO.Stream dataIn, out long dataInRead, System.IO.Stream dataOut, out long dataOutWritten)\n    {\n        try\n        {\n            if (dataIn == null || dataIn.Length == 0)\n            {\n                dataInRead = 0;\n                dataOutWritten = 0;\n\n                return FilterStatus.Done;\n            }\n\n            dataInRead = dataIn.Length;\n            dataOutWritten = Math.Min(dataInRead, dataOut.Length);\n\n            dataIn.CopyTo(dataOut);\n            dataIn.Seek(0, SeekOrigin.Begin);\n            byte[] bs = new byte[dataIn.Length];\n            dataIn.Read(bs, 0, bs.Length);\n            DataAll.AddRange(bs);\n\n            dataInRead = dataIn.Length;\n            dataOutWritten = dataIn.Length;\n\n            return FilterStatus.NeedMoreData;\n        }\n        catch (Exception ex)\n        {\n            dataInRead = dataIn.Length;\n            dataOutWritten = dataIn.Length;\n\n            return FilterStatus.Done;\n        }\n    }\n\n    public bool InitFilter()\n    {\n        return true;\n    }\n\n    public void Dispose()\n    {\n\n    }\n}\n\npublic class FilterManager\n{\n    private static Dictionary<string, IResponseFilter> dataList = new Dictionary<string, IResponseFilter>();\n\n    public static IResponseFilter CreateFilter(string guid)\n    {\n        lock (dataList)\n        {\n            var filter = new TestJsonFilter();\n            dataList.Add(guid, filter);\n\n            return filter;\n        }\n    }\n\n    public static IResponseFilter GetFileter(string guid)\n    {\n        lock (dataList)\n        {\n        \n            if (dataList.ContainsKey(guid))  // 这里要检测key存在，不然会报异常，会导致ContextSwitchDeadlock\n            {\n                return dataList[guid];\n            }\n            else\n            {\n                return null;\n            }\n        }\n    }\n}\n\npublic class CustomResourceRequestHandler : ResourceRequestHandler\n{\n    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n    {\n        // 截断请求的代码...\n        return CefReturnValue.Continue;\n    }\n\n\n    protected override IResponseFilter GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response)\n    {\n        if (!(request.ResourceType == ResourceType.Xhr))  // 不是XHR类型就不去过滤\n        {\n            return null;\n        }\n        var filer = FilterManager.CreateFilter(request.Identifier.ToString());\n        return filer;\n    }\n\n    protected override void OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength)\n    {\n        var filer = FilterManager.GetFileter(request.Identifier.ToString()) as TestJsonFilter;\n        if (filer != null)\n        {\n            Console.WriteLine(ASCIIEncoding.UTF8.GetString(filer.DataAll.ToArray()));  // 打印body内容\n        }\n    }\n}\n\n\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://github.com/salamander-mh\";  // github首页上有ajax请求，可以看效果\n    myChrome.Load(url);\n}\n\n```\n运行程序，在`输出`视图就可以看到Ajax请求的body数据。\n\n## 截取cookie\n建立Cookie读取对象，继承接口 ICookieVisitor\n```\npublic class CookieVisitor : CefSharp.ICookieVisitor\n{\n    public event Action<CefSharp.Cookie> SendCookie;\n\n\n    public bool Visit(Cookie cookie, int count, int total, ref bool deleteCookie)\n    {\n        deleteCookie = false;\n        if (SendCookie != null)\n        {\n            SendCookie(cookie);\n        }\n\n        return true;\n    }\n\n    public void Dispose()\n    {\n    }\n}\n```\n在browser事件中进行处理\n```\nprivate void browser_FrameLoadEnd(object sender, CefSharp.FrameLoadEndEventArgs e)\n{\n    var cookieManager = myChrome.GetCookieManager();\n\n    CookieVisitor visitor = new CookieVisitor();\n    visitor.SendCookie += visitor_SendCookie;\n    cookieManager.VisitAllCookies(visitor);\n}\n```\n**回调事件**\n```\nprivate void visitor_SendCookie(CefSharp.Cookie obj)\n{\n    Console.WriteLine(\"获取cookie：\" + obj.Domain.TrimStart('.') + \"^\" + obj.Name + \"^\" + obj.Value + \"$\");\n}\n```\n设置CefSharp实例事件：\n```\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://www.baidu.com\";\n    myChrome.Load(url);\n    myChrome.FrameLoadEnd += browser_FrameLoadEnd;\n}\n```\n运行程序，在`输出`视图就可以看到**cookie**数据了。\n\n## Javascript交互\n\n### C#执行js方法\n```\nmyChrome.GetBrowser().MainFrame.ExecuteJavaScriptAsync(\"document.getElementById('testid').click();\");  \n```\n以上代码就会触发id为`testid`的元素的`click`事件。  \n注意：**脚本是在 Frame 级别执行**，页面永远至少有一个Frame（ MainFrame ）。\n\n### 获取Javascript方法结果\n这里需要使用`Task<JavascriptResponse> EvaluateScriptAsync(string script, TimeSpan? timeout)`方法。 JavaScript代码是异步执行的，因此使用.NET Task 类返回一个响应，其中包含错误消息，结果和一个成功（bool）标志。\n```\n// Get Document Height  \nvar task = frame.EvaluateScriptAsync(\"(function() { var body = document.body, html = document.documentElement; return  Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight ); })();\", null);\n  \ntask.ContinueWith(t =>  \n{  \n    if (!t.IsFaulted)  \n    {  \n        var response = t.Result;  \n        EvaluateJavaScriptResult = response.Success ? (response.Result ?? \"null\") : response.Message;  \n    }  \n}, TaskScheduler.FromCurrentSynchronizationContext());  \n```\n\n\n\n## 资源清理\n关闭应用，发现`CefSharp.BrowserSubprocess.exe`进程会发现没有结束，其实在退出事件中，我们需要调用`Cef.Shutdown()`方法\n```\ntry  \n{  \n    if (browser != null)  \n    {  \n        browser.Dispose();  \n        Cef.Shutdown();  \n    }  \n}  \ncatch { }  \n```\n\n\n\n示例代码[下载](http://file.51lucy.com/BroswerTest.rar)\n\n\n\n参考：\n* [StackOverflow](https://stackoverflow.com/questions/31250797/chromium-send-custom-header-info-on-initial-page-load-c-sharp)\n* [How to read the JSON response content from a XMLHttpRequest?](https://stackoverflow.com/questions/40944056/how-to-read-the-json-response-content-from-a-xmlhttprequest/43652932#43652932)\n* [**CefSharp中文帮助文档**](https://github.com/cefsharp/CefSharp/wiki/CefSharp%E4%B8%AD%E6%96%87%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3)","slug":"CefSharp_summary","published":1,"updated":"2019-12-11T12:42:32.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck470me9z0000u8ztzcu1536y","content":"<p><img src=\"/images/CefSharp-logo.png\" alt=\"docker logo\"></p>\n<h2 id=\"CefSharp\"><a href=\"#CefSharp\" class=\"headerlink\" title=\"CefSharp\"></a>CefSharp</h2><p><a href=\"https://github.com/chromiumembedded/cef\" target=\"_blank\" rel=\"noopener\">CEF</a>全称：<strong>Chromium Embedded Framework</strong>。<br>CefSharp是什么？<a href=\"http://cefsharp.github.io/\" target=\"_blank\" rel=\"noopener\">官网</a>上它是这么写的：CefSharp是在C#或VB.NET应用程序中嵌入全功能标准兼容web浏览器的最简单方法。CefSharp有WinForms和WPF应用程序的浏览器控件，也有自动化项目的无标题（屏幕外）版本。CefSharp基于Chromium嵌入式框架，这是Google Chrome的开源版本。<br>说白了，就是基于C#或VB语言的<strong>可编程浏览器</strong>（当然CEF也有其他语言的，如<a href=\"https://bitbucket.org/chromiumembedded/java-cef\" target=\"_blank\" rel=\"noopener\">Java</a>，<a href=\"https://github.com/cztomczak/cef2go\" target=\"_blank\" rel=\"noopener\">Go</a>）。</p>\n<a id=\"more\"></a>\n\n<p>本文环境：</p>\n<ul>\n<li>CefSharp版本：75.1.143</li>\n<li>VS版本：2015</li>\n<li>操作系统：Windows 10专业版</li>\n</ul>\n<h2 id=\"WPF引入CefSharp\"><a href=\"#WPF引入CefSharp\" class=\"headerlink\" title=\"WPF引入CefSharp\"></a>WPF引入CefSharp</h2><p>CefSharp有现成的NuGet包，先引入到项目中，然后在XAML中添加响应控件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;cefSharp:ChromiumWebBrowser Name=&quot;myChrome&quot; Loaded=&quot;myChrome_Loaded&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>添加<code>cefSharp</code>命名空间：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:cefSharp=&quot;clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>myChrome_Loaded</code>事件中，我们让浏览器打开百度首页：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = &quot;https://www.baidu.com&quot;;</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行程序，我们就可以看到百度首页了。</p>\n<h2 id=\"截断请求\"><a href=\"#截断请求\" class=\"headerlink\" title=\"截断请求\"></a>截断请求</h2><p>根据<a href=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_Handler_RequestHandler.htm\" target=\"_blank\" rel=\"noopener\">文档</a>，我们可以看到<code>RequestHandler</code>类中的方法<code>GetResourceRequestHandler</code>会在每次发请求前被调用：</p>\n<blockquote>\n<p>GetResourceRequestHandler<br>Called on the CEF IO thread before a resource request is initiated.</p>\n</blockquote>\n<p><code>RequestHandler</code>类是<a href=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequestHandler.htm\" target=\"_blank\" rel=\"noopener\"><code>IRequestHandler</code></a>接口的默认实现，我们自定义请求可以继承这个类：</p>\n<blockquote>\n<p>Default implementation of IRequestHandler.<br>This class provides default implementations of the methods from IRequestHandler, therefore providing a convenience base class for any custom request handler.</p>\n</blockquote>\n<p>所以我们可以创建一个继承<code>RequestHandler</code>的类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class CustomRequestHandler : RequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, ref bool disableDefaultHandling)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new CustomResourceRequestHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>GetResourceRequestHandler</code>是我们要重点关注的方法，里头我们返回了一个类实例，在这个类中我们就可以<strong>自定义请求</strong>。<br>新版的CefSharp（75版本之后）把<code>OnBeforeResourceLoad</code>方法移动到了<code>IResourceRequestHandler</code>接口里（<a href=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IResourceRequestHandler.htm\" target=\"_blank\" rel=\"noopener\">文档</a>），同样的CefSharp也提供了这个接口的默认实现：<code>ResourceRequestHandler</code>，所以我们还需要一个继承<code>ResourceRequestHandler</code>的类（也就是上面代码中的<code>CustomResourceRequestHandler</code>类）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomResourceRequestHandler : ResourceRequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var headers = request.Headers;</span><br><span class=\"line\">        headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">        request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        return CefReturnValue.Continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，把自定义请求类设置到CefSharp实例中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myChrome.RequestHandler = new CustomRequestHandler();</span><br></pre></td></tr></table></figure>\n\n<p>通过Fiddler这样的抓包工具，我们就会发现，自定义的<code>Custom-Header</code>头已经加上了</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/16/MBE5Dg.png\" alt=\"detail\"></p>\n<h3 id=\"添加自定义查询参数\"><a href=\"#添加自定义查询参数\" class=\"headerlink\" title=\"添加自定义查询参数\"></a>添加自定义查询参数</h3><p>上面的例子中，我们添加了自定义的header，如果我们想改写<code>URL</code>添加一些自定义的查询参数呢，譬如<code>name=foo</code>？这里有个坑，如果我们简单地把<code>request.Url += &quot;?name=foo&quot;</code>，这样会导致无限重定向（因为改了Url就会重定向）。解决方法也很简单，就是判断一下我们想要的查询参数是否已经在<code>Url</code>里了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var headers = request.Headers;</span><br><span class=\"line\">    headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">    request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!request.Url.Contains(&quot;name=foo&quot;))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        request.Url += &quot;?&quot; + &quot;name=foo&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return CefReturnValue.Continue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加自定义Body\"><a href=\"#添加自定义Body\" class=\"headerlink\" title=\"添加自定义Body\"></a>添加自定义Body</h3><p>根据<a href=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequest.htm\" target=\"_blank\" rel=\"noopener\">IRequest</a>的文档，我们可以利用<code>PostData</code>属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var headers = request.Headers;</span><br><span class=\"line\">    headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">    request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">    string body = &quot;name=foo&quot;;</span><br><span class=\"line\">    byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(body);</span><br><span class=\"line\"></span><br><span class=\"line\">    request.InitializePostData();</span><br><span class=\"line\">    var element = request.PostData.CreatePostDataElement();</span><br><span class=\"line\">    element.Bytes = byteArray;</span><br><span class=\"line\">    request.PostData.AddElement(element);</span><br><span class=\"line\"></span><br><span class=\"line\">    return CefReturnValue.Continue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过Fiddler这样的抓包工具，我们就会发现，POST 数据已经加上了：</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/30/QVjqp9.png\" alt=\"detail\"></p>\n<h2 id=\"加载本地HTML字符串\"><a href=\"#加载本地HTML字符串\" class=\"headerlink\" title=\"加载本地HTML字符串\"></a>加载本地HTML字符串</h2><p>有时候，我们可能需要渲染一个内存中的HTML字符串，CefSharp也提供这样的接口，代码很简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string html = @&quot;&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;这是个标题&lt;/title&gt;</span><br><span class=\"line\">        &lt;meta charset=&apos;utf-8&apos; /&gt;</span><br><span class=\"line\">        &lt;meta name = &apos;viewport&apos; content = &apos;width=device-width, initial-scale=1&apos; /&gt;</span><br><span class=\"line\">     &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;h1&gt;这是一个一个简单的HTML&lt;/h1&gt;</span><br><span class=\"line\">        &lt;p&gt;Hello World！&lt;/p &gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;&quot;;</span><br><span class=\"line\">    String url = &quot;https://www.baidu.com&quot;;</span><br><span class=\"line\">    myChrome.LoadHtml(html, url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"截断响应\"><a href=\"#截断响应\" class=\"headerlink\" title=\"截断响应\"></a>截断响应</h2><p>这里的关键在于<code>GetResourceResponseFilter</code>方法，它的签名如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IResponseFilter GetResourceResponseFilter(</span><br><span class=\"line\">\tIWebBrowser chromiumWebBrowser,</span><br><span class=\"line\">\tIBrowser browser,</span><br><span class=\"line\">\tIFrame frame,</span><br><span class=\"line\">\tIRequest request,</span><br><span class=\"line\">\tIResponse response</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>它返回了一个<code>IResponseFilter</code>接口，在这个接口中，我们可以截取到请求响应的内容。在CefSharp最新版本中，<code>GetResourceResponseFilter</code>已经被放入到<code>IResourceRequestHandler</code>接口中，<a href=\"http://cefsharp.github.io/api/75.1.x/html/M_CefSharp_IResourceRequestHandler_GetResourceResponseFilter.htm\" target=\"_blank\" rel=\"noopener\">最新文档</a>。<br>下面我放了一个截断网页XHR请求的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestJsonFilter : IResponseFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public List&lt;byte&gt; DataAll = new List&lt;byte&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public FilterStatus Filter(System.IO.Stream dataIn, out long dataInRead, System.IO.Stream dataOut, out long dataOutWritten)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        try</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (dataIn == null || dataIn.Length == 0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dataInRead = 0;</span><br><span class=\"line\">                dataOutWritten = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                return FilterStatus.Done;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = Math.Min(dataInRead, dataOut.Length);</span><br><span class=\"line\"></span><br><span class=\"line\">            dataIn.CopyTo(dataOut);</span><br><span class=\"line\">            dataIn.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">            byte[] bs = new byte[dataIn.Length];</span><br><span class=\"line\">            dataIn.Read(bs, 0, bs.Length);</span><br><span class=\"line\">            DataAll.AddRange(bs);</span><br><span class=\"line\"></span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = dataIn.Length;</span><br><span class=\"line\"></span><br><span class=\"line\">            return FilterStatus.NeedMoreData;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = dataIn.Length;</span><br><span class=\"line\"></span><br><span class=\"line\">            return FilterStatus.Done;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool InitFilter()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Dispose()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FilterManager</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private static Dictionary&lt;string, IResponseFilter&gt; dataList = new Dictionary&lt;string, IResponseFilter&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static IResponseFilter CreateFilter(string guid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lock (dataList)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            var filter = new TestJsonFilter();</span><br><span class=\"line\">            dataList.Add(guid, filter);</span><br><span class=\"line\"></span><br><span class=\"line\">            return filter;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static IResponseFilter GetFileter(string guid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lock (dataList)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">            if (dataList.ContainsKey(guid))  // 这里要检测key存在，不然会报异常，会导致ContextSwitchDeadlock</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return dataList[guid];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CustomResourceRequestHandler : ResourceRequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 截断请求的代码...</span><br><span class=\"line\">        return CefReturnValue.Continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    protected override IResponseFilter GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!(request.ResourceType == ResourceType.Xhr))  // 不是XHR类型就不去过滤</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var filer = FilterManager.CreateFilter(request.Identifier.ToString());</span><br><span class=\"line\">        return filer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected override void OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var filer = FilterManager.GetFileter(request.Identifier.ToString()) as TestJsonFilter;</span><br><span class=\"line\">        if (filer != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(ASCIIEncoding.UTF8.GetString(filer.DataAll.ToArray()));  // 打印body内容</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = &quot;https://github.com/salamander-mh&quot;;  // github首页上有ajax请求，可以看效果</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行程序，在<code>输出</code>视图就可以看到Ajax请求的body数据。</p>\n<h2 id=\"截取cookie\"><a href=\"#截取cookie\" class=\"headerlink\" title=\"截取cookie\"></a>截取cookie</h2><p>建立Cookie读取对象，继承接口 ICookieVisitor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CookieVisitor : CefSharp.ICookieVisitor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public event Action&lt;CefSharp.Cookie&gt; SendCookie;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public bool Visit(Cookie cookie, int count, int total, ref bool deleteCookie)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        deleteCookie = false;</span><br><span class=\"line\">        if (SendCookie != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SendCookie(cookie);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Dispose()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在browser事件中进行处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void browser_FrameLoadEnd(object sender, CefSharp.FrameLoadEndEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var cookieManager = myChrome.GetCookieManager();</span><br><span class=\"line\"></span><br><span class=\"line\">    CookieVisitor visitor = new CookieVisitor();</span><br><span class=\"line\">    visitor.SendCookie += visitor_SendCookie;</span><br><span class=\"line\">    cookieManager.VisitAllCookies(visitor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>回调事件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void visitor_SendCookie(CefSharp.Cookie obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(&quot;获取cookie：&quot; + obj.Domain.TrimStart(&apos;.&apos;) + &quot;^&quot; + obj.Name + &quot;^&quot; + obj.Value + &quot;$&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置CefSharp实例事件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = &quot;https://www.baidu.com&quot;;</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">    myChrome.FrameLoadEnd += browser_FrameLoadEnd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行程序，在<code>输出</code>视图就可以看到<strong>cookie</strong>数据了。</p>\n<h2 id=\"Javascript交互\"><a href=\"#Javascript交互\" class=\"headerlink\" title=\"Javascript交互\"></a>Javascript交互</h2><h3 id=\"C-执行js方法\"><a href=\"#C-执行js方法\" class=\"headerlink\" title=\"C#执行js方法\"></a>C#执行js方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myChrome.GetBrowser().MainFrame.ExecuteJavaScriptAsync(&quot;document.getElementById(&apos;testid&apos;).click();&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>以上代码就会触发id为<code>testid</code>的元素的<code>click</code>事件。<br>注意：<strong>脚本是在 Frame 级别执行</strong>，页面永远至少有一个Frame（ MainFrame ）。</p>\n<h3 id=\"获取Javascript方法结果\"><a href=\"#获取Javascript方法结果\" class=\"headerlink\" title=\"获取Javascript方法结果\"></a>获取Javascript方法结果</h3><p>这里需要使用<code>Task&lt;JavascriptResponse&gt; EvaluateScriptAsync(string script, TimeSpan? timeout)</code>方法。 JavaScript代码是异步执行的，因此使用.NET Task 类返回一个响应，其中包含错误消息，结果和一个成功（bool）标志。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Get Document Height  </span><br><span class=\"line\">var task = frame.EvaluateScriptAsync(&quot;(function() &#123; var body = document.body, html = document.documentElement; return  Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight ); &#125;)();&quot;, null);</span><br><span class=\"line\">  </span><br><span class=\"line\">task.ContinueWith(t =&gt;  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    if (!t.IsFaulted)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        var response = t.Result;  </span><br><span class=\"line\">        EvaluateJavaScriptResult = response.Success ? (response.Result ?? &quot;null&quot;) : response.Message;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;, TaskScheduler.FromCurrentSynchronizationContext());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"资源清理\"><a href=\"#资源清理\" class=\"headerlink\" title=\"资源清理\"></a>资源清理</h2><p>关闭应用，发现<code>CefSharp.BrowserSubprocess.exe</code>进程会发现没有结束，其实在退出事件中，我们需要调用<code>Cef.Shutdown()</code>方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    if (browser != null)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        browser.Dispose();  </span><br><span class=\"line\">        Cef.Shutdown();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">catch &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>示例代码<a href=\"http://file.51lucy.com/BroswerTest.rar\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/31250797/chromium-send-custom-header-info-on-initial-page-load-c-sharp\" target=\"_blank\" rel=\"noopener\">StackOverflow</a></li>\n<li><a href=\"https://stackoverflow.com/questions/40944056/how-to-read-the-json-response-content-from-a-xmlhttprequest/43652932#43652932\" target=\"_blank\" rel=\"noopener\">How to read the JSON response content from a XMLHttpRequest?</a></li>\n<li><a href=\"https://github.com/cefsharp/CefSharp/wiki/CefSharp%E4%B8%AD%E6%96%87%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3\" target=\"_blank\" rel=\"noopener\"><strong>CefSharp中文帮助文档</strong></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/CefSharp-logo.png\" alt=\"docker logo\"></p>\n<h2 id=\"CefSharp\"><a href=\"#CefSharp\" class=\"headerlink\" title=\"CefSharp\"></a>CefSharp</h2><p><a href=\"https://github.com/chromiumembedded/cef\" target=\"_blank\" rel=\"noopener\">CEF</a>全称：<strong>Chromium Embedded Framework</strong>。<br>CefSharp是什么？<a href=\"http://cefsharp.github.io/\" target=\"_blank\" rel=\"noopener\">官网</a>上它是这么写的：CefSharp是在C#或VB.NET应用程序中嵌入全功能标准兼容web浏览器的最简单方法。CefSharp有WinForms和WPF应用程序的浏览器控件，也有自动化项目的无标题（屏幕外）版本。CefSharp基于Chromium嵌入式框架，这是Google Chrome的开源版本。<br>说白了，就是基于C#或VB语言的<strong>可编程浏览器</strong>（当然CEF也有其他语言的，如<a href=\"https://bitbucket.org/chromiumembedded/java-cef\" target=\"_blank\" rel=\"noopener\">Java</a>，<a href=\"https://github.com/cztomczak/cef2go\" target=\"_blank\" rel=\"noopener\">Go</a>）。</p>","more":"<p>本文环境：</p>\n<ul>\n<li>CefSharp版本：75.1.143</li>\n<li>VS版本：2015</li>\n<li>操作系统：Windows 10专业版</li>\n</ul>\n<h2 id=\"WPF引入CefSharp\"><a href=\"#WPF引入CefSharp\" class=\"headerlink\" title=\"WPF引入CefSharp\"></a>WPF引入CefSharp</h2><p>CefSharp有现成的NuGet包，先引入到项目中，然后在XAML中添加响应控件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;cefSharp:ChromiumWebBrowser Name=&quot;myChrome&quot; Loaded=&quot;myChrome_Loaded&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>添加<code>cefSharp</code>命名空间：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:cefSharp=&quot;clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>myChrome_Loaded</code>事件中，我们让浏览器打开百度首页：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = &quot;https://www.baidu.com&quot;;</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行程序，我们就可以看到百度首页了。</p>\n<h2 id=\"截断请求\"><a href=\"#截断请求\" class=\"headerlink\" title=\"截断请求\"></a>截断请求</h2><p>根据<a href=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_Handler_RequestHandler.htm\" target=\"_blank\" rel=\"noopener\">文档</a>，我们可以看到<code>RequestHandler</code>类中的方法<code>GetResourceRequestHandler</code>会在每次发请求前被调用：</p>\n<blockquote>\n<p>GetResourceRequestHandler<br>Called on the CEF IO thread before a resource request is initiated.</p>\n</blockquote>\n<p><code>RequestHandler</code>类是<a href=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequestHandler.htm\" target=\"_blank\" rel=\"noopener\"><code>IRequestHandler</code></a>接口的默认实现，我们自定义请求可以继承这个类：</p>\n<blockquote>\n<p>Default implementation of IRequestHandler.<br>This class provides default implementations of the methods from IRequestHandler, therefore providing a convenience base class for any custom request handler.</p>\n</blockquote>\n<p>所以我们可以创建一个继承<code>RequestHandler</code>的类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class CustomRequestHandler : RequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, ref bool disableDefaultHandling)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new CustomResourceRequestHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>GetResourceRequestHandler</code>是我们要重点关注的方法，里头我们返回了一个类实例，在这个类中我们就可以<strong>自定义请求</strong>。<br>新版的CefSharp（75版本之后）把<code>OnBeforeResourceLoad</code>方法移动到了<code>IResourceRequestHandler</code>接口里（<a href=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IResourceRequestHandler.htm\" target=\"_blank\" rel=\"noopener\">文档</a>），同样的CefSharp也提供了这个接口的默认实现：<code>ResourceRequestHandler</code>，所以我们还需要一个继承<code>ResourceRequestHandler</code>的类（也就是上面代码中的<code>CustomResourceRequestHandler</code>类）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomResourceRequestHandler : ResourceRequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var headers = request.Headers;</span><br><span class=\"line\">        headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">        request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        return CefReturnValue.Continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后，把自定义请求类设置到CefSharp实例中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myChrome.RequestHandler = new CustomRequestHandler();</span><br></pre></td></tr></table></figure>\n\n<p>通过Fiddler这样的抓包工具，我们就会发现，自定义的<code>Custom-Header</code>头已经加上了</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/16/MBE5Dg.png\" alt=\"detail\"></p>\n<h3 id=\"添加自定义查询参数\"><a href=\"#添加自定义查询参数\" class=\"headerlink\" title=\"添加自定义查询参数\"></a>添加自定义查询参数</h3><p>上面的例子中，我们添加了自定义的header，如果我们想改写<code>URL</code>添加一些自定义的查询参数呢，譬如<code>name=foo</code>？这里有个坑，如果我们简单地把<code>request.Url += &quot;?name=foo&quot;</code>，这样会导致无限重定向（因为改了Url就会重定向）。解决方法也很简单，就是判断一下我们想要的查询参数是否已经在<code>Url</code>里了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var headers = request.Headers;</span><br><span class=\"line\">    headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">    request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!request.Url.Contains(&quot;name=foo&quot;))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        request.Url += &quot;?&quot; + &quot;name=foo&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return CefReturnValue.Continue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加自定义Body\"><a href=\"#添加自定义Body\" class=\"headerlink\" title=\"添加自定义Body\"></a>添加自定义Body</h3><p>根据<a href=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequest.htm\" target=\"_blank\" rel=\"noopener\">IRequest</a>的文档，我们可以利用<code>PostData</code>属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var headers = request.Headers;</span><br><span class=\"line\">    headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">    request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">    string body = &quot;name=foo&quot;;</span><br><span class=\"line\">    byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(body);</span><br><span class=\"line\"></span><br><span class=\"line\">    request.InitializePostData();</span><br><span class=\"line\">    var element = request.PostData.CreatePostDataElement();</span><br><span class=\"line\">    element.Bytes = byteArray;</span><br><span class=\"line\">    request.PostData.AddElement(element);</span><br><span class=\"line\"></span><br><span class=\"line\">    return CefReturnValue.Continue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过Fiddler这样的抓包工具，我们就会发现，POST 数据已经加上了：</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/30/QVjqp9.png\" alt=\"detail\"></p>\n<h2 id=\"加载本地HTML字符串\"><a href=\"#加载本地HTML字符串\" class=\"headerlink\" title=\"加载本地HTML字符串\"></a>加载本地HTML字符串</h2><p>有时候，我们可能需要渲染一个内存中的HTML字符串，CefSharp也提供这样的接口，代码很简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string html = @&quot;&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;这是个标题&lt;/title&gt;</span><br><span class=\"line\">        &lt;meta charset=&apos;utf-8&apos; /&gt;</span><br><span class=\"line\">        &lt;meta name = &apos;viewport&apos; content = &apos;width=device-width, initial-scale=1&apos; /&gt;</span><br><span class=\"line\">     &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;h1&gt;这是一个一个简单的HTML&lt;/h1&gt;</span><br><span class=\"line\">        &lt;p&gt;Hello World！&lt;/p &gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;&quot;;</span><br><span class=\"line\">    String url = &quot;https://www.baidu.com&quot;;</span><br><span class=\"line\">    myChrome.LoadHtml(html, url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"截断响应\"><a href=\"#截断响应\" class=\"headerlink\" title=\"截断响应\"></a>截断响应</h2><p>这里的关键在于<code>GetResourceResponseFilter</code>方法，它的签名如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IResponseFilter GetResourceResponseFilter(</span><br><span class=\"line\">\tIWebBrowser chromiumWebBrowser,</span><br><span class=\"line\">\tIBrowser browser,</span><br><span class=\"line\">\tIFrame frame,</span><br><span class=\"line\">\tIRequest request,</span><br><span class=\"line\">\tIResponse response</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>它返回了一个<code>IResponseFilter</code>接口，在这个接口中，我们可以截取到请求响应的内容。在CefSharp最新版本中，<code>GetResourceResponseFilter</code>已经被放入到<code>IResourceRequestHandler</code>接口中，<a href=\"http://cefsharp.github.io/api/75.1.x/html/M_CefSharp_IResourceRequestHandler_GetResourceResponseFilter.htm\" target=\"_blank\" rel=\"noopener\">最新文档</a>。<br>下面我放了一个截断网页XHR请求的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestJsonFilter : IResponseFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public List&lt;byte&gt; DataAll = new List&lt;byte&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public FilterStatus Filter(System.IO.Stream dataIn, out long dataInRead, System.IO.Stream dataOut, out long dataOutWritten)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        try</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (dataIn == null || dataIn.Length == 0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dataInRead = 0;</span><br><span class=\"line\">                dataOutWritten = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                return FilterStatus.Done;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = Math.Min(dataInRead, dataOut.Length);</span><br><span class=\"line\"></span><br><span class=\"line\">            dataIn.CopyTo(dataOut);</span><br><span class=\"line\">            dataIn.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">            byte[] bs = new byte[dataIn.Length];</span><br><span class=\"line\">            dataIn.Read(bs, 0, bs.Length);</span><br><span class=\"line\">            DataAll.AddRange(bs);</span><br><span class=\"line\"></span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = dataIn.Length;</span><br><span class=\"line\"></span><br><span class=\"line\">            return FilterStatus.NeedMoreData;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = dataIn.Length;</span><br><span class=\"line\"></span><br><span class=\"line\">            return FilterStatus.Done;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool InitFilter()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Dispose()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FilterManager</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private static Dictionary&lt;string, IResponseFilter&gt; dataList = new Dictionary&lt;string, IResponseFilter&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static IResponseFilter CreateFilter(string guid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lock (dataList)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            var filter = new TestJsonFilter();</span><br><span class=\"line\">            dataList.Add(guid, filter);</span><br><span class=\"line\"></span><br><span class=\"line\">            return filter;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static IResponseFilter GetFileter(string guid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lock (dataList)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">            if (dataList.ContainsKey(guid))  // 这里要检测key存在，不然会报异常，会导致ContextSwitchDeadlock</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return dataList[guid];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CustomResourceRequestHandler : ResourceRequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 截断请求的代码...</span><br><span class=\"line\">        return CefReturnValue.Continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    protected override IResponseFilter GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!(request.ResourceType == ResourceType.Xhr))  // 不是XHR类型就不去过滤</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var filer = FilterManager.CreateFilter(request.Identifier.ToString());</span><br><span class=\"line\">        return filer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected override void OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var filer = FilterManager.GetFileter(request.Identifier.ToString()) as TestJsonFilter;</span><br><span class=\"line\">        if (filer != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(ASCIIEncoding.UTF8.GetString(filer.DataAll.ToArray()));  // 打印body内容</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = &quot;https://github.com/salamander-mh&quot;;  // github首页上有ajax请求，可以看效果</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行程序，在<code>输出</code>视图就可以看到Ajax请求的body数据。</p>\n<h2 id=\"截取cookie\"><a href=\"#截取cookie\" class=\"headerlink\" title=\"截取cookie\"></a>截取cookie</h2><p>建立Cookie读取对象，继承接口 ICookieVisitor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CookieVisitor : CefSharp.ICookieVisitor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public event Action&lt;CefSharp.Cookie&gt; SendCookie;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public bool Visit(Cookie cookie, int count, int total, ref bool deleteCookie)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        deleteCookie = false;</span><br><span class=\"line\">        if (SendCookie != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SendCookie(cookie);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Dispose()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在browser事件中进行处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void browser_FrameLoadEnd(object sender, CefSharp.FrameLoadEndEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var cookieManager = myChrome.GetCookieManager();</span><br><span class=\"line\"></span><br><span class=\"line\">    CookieVisitor visitor = new CookieVisitor();</span><br><span class=\"line\">    visitor.SendCookie += visitor_SendCookie;</span><br><span class=\"line\">    cookieManager.VisitAllCookies(visitor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>回调事件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void visitor_SendCookie(CefSharp.Cookie obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(&quot;获取cookie：&quot; + obj.Domain.TrimStart(&apos;.&apos;) + &quot;^&quot; + obj.Name + &quot;^&quot; + obj.Value + &quot;$&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置CefSharp实例事件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = &quot;https://www.baidu.com&quot;;</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">    myChrome.FrameLoadEnd += browser_FrameLoadEnd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行程序，在<code>输出</code>视图就可以看到<strong>cookie</strong>数据了。</p>\n<h2 id=\"Javascript交互\"><a href=\"#Javascript交互\" class=\"headerlink\" title=\"Javascript交互\"></a>Javascript交互</h2><h3 id=\"C-执行js方法\"><a href=\"#C-执行js方法\" class=\"headerlink\" title=\"C#执行js方法\"></a>C#执行js方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myChrome.GetBrowser().MainFrame.ExecuteJavaScriptAsync(&quot;document.getElementById(&apos;testid&apos;).click();&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>以上代码就会触发id为<code>testid</code>的元素的<code>click</code>事件。<br>注意：<strong>脚本是在 Frame 级别执行</strong>，页面永远至少有一个Frame（ MainFrame ）。</p>\n<h3 id=\"获取Javascript方法结果\"><a href=\"#获取Javascript方法结果\" class=\"headerlink\" title=\"获取Javascript方法结果\"></a>获取Javascript方法结果</h3><p>这里需要使用<code>Task&lt;JavascriptResponse&gt; EvaluateScriptAsync(string script, TimeSpan? timeout)</code>方法。 JavaScript代码是异步执行的，因此使用.NET Task 类返回一个响应，其中包含错误消息，结果和一个成功（bool）标志。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Get Document Height  </span><br><span class=\"line\">var task = frame.EvaluateScriptAsync(&quot;(function() &#123; var body = document.body, html = document.documentElement; return  Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight ); &#125;)();&quot;, null);</span><br><span class=\"line\">  </span><br><span class=\"line\">task.ContinueWith(t =&gt;  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    if (!t.IsFaulted)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        var response = t.Result;  </span><br><span class=\"line\">        EvaluateJavaScriptResult = response.Success ? (response.Result ?? &quot;null&quot;) : response.Message;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;, TaskScheduler.FromCurrentSynchronizationContext());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"资源清理\"><a href=\"#资源清理\" class=\"headerlink\" title=\"资源清理\"></a>资源清理</h2><p>关闭应用，发现<code>CefSharp.BrowserSubprocess.exe</code>进程会发现没有结束，其实在退出事件中，我们需要调用<code>Cef.Shutdown()</code>方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    if (browser != null)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        browser.Dispose();  </span><br><span class=\"line\">        Cef.Shutdown();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">catch &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>示例代码<a href=\"http://file.51lucy.com/BroswerTest.rar\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/31250797/chromium-send-custom-header-info-on-initial-page-load-c-sharp\" target=\"_blank\" rel=\"noopener\">StackOverflow</a></li>\n<li><a href=\"https://stackoverflow.com/questions/40944056/how-to-read-the-json-response-content-from-a-xmlhttprequest/43652932#43652932\" target=\"_blank\" rel=\"noopener\">How to read the JSON response content from a XMLHttpRequest?</a></li>\n<li><a href=\"https://github.com/cefsharp/CefSharp/wiki/CefSharp%E4%B8%AD%E6%96%87%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3\" target=\"_blank\" rel=\"noopener\"><strong>CefSharp中文帮助文档</strong></a></li>\n</ul>"},{"title":"Ubuntu上安装NVIDIA显卡驱动和CUDA和cuDNN库","author":"Salamander","date":"2019-09-18T08:00:00.000Z","_content":"\n![upload successful](/images/cuda.png)\n\n最近需要在用[Pytorch](https://pytorch.org/)做深度学习，为了加快训练速度，需要用到GPU运算，故在此记录一下安装过程。  \n我的本机环境：\n* Ubuntu 18.04.3 LTS\n* GeForce RTX 2080s\n\n### 检查BIOS启动项\n* 在开机启动项的Security选项中检查UEFI是否开启，如果开启的话请立马关掉它（重要）  \n* 在开机启动项的Boot选项中检查Secure Boot是否开启，如果开启的话请立马关掉它（重要），对于有的BIOS，只要删除**Secure Boot Key**就好了。\n\n<!-- more -->\n\n### 禁用 nouveau\n运行命令\n```\n sudo gedit /etc/modprobe.d/blacklist.conf\n```\n将下列代码增加到blacklist.conf文件的末尾：\n```\nblacklist vga16fb\n\nblacklist nouveau\n\nblacklist rivafb\n\nblacklist rivatv\n\nblacklist nvidiafb\n```\n保存，然后在命令行中更新initramfs，运行：\n```\n sudo update-initramfs -u\n```\n之后，重启主机\n```\nreboot\n```\n在终端运行，运行以下命令，查看是否禁用nouveau成功（无输出则表示禁用成功）：\n```\nlsmod | grep nouveau\n```\n\n\n### 安装显卡驱动\n在NVIDIA官方选择对应驱动，然后[下载](https://www.geforce.com/drivers)：\n\n![图片](https://s2.ax1x.com/2019/09/18/n7DK2Q.png)\n\n在安装驱动之前，应该卸载原有的NVIDIA驱动程序\n```\nsudo apt-get remove --purge nvidia*\n```\n把下载的驱动放到用户目录下，我这里下载文件为`NVIDIA-Linux-x86_64-430.50.run`  \n为了安装新的NVIDIA驱动程序，我们需要停止当前的显示服务器。最简单的方法是使用telinit命令更改为运行级别3。执行以下linux命令后，显示服务器将停止，因此请确保在继续之前保存所有当前工作（如果有）：\n```\nsudo telinit 3\n```\n之后会进入一个新的命令行会话，使用当前的用户名密码登录，然后授予驱动文件可执行权限\n```\nchmod a+x NVIDIA-Linux-x86_64-430.50.run\n```\n然后执行安装：\n```\nsudo ./NVIDIA-Linux-x86_64-430.50.run --no-opengl-files\n```\n注意，**--no-opengl-files**参数必须加否则会循环登录，也就是loop login  \n参数介绍：\n* --no-opengl-files 只安装驱动文件，不安装OpenGL文件。这个参数最重要\n* --no-x-check 安装驱动时不检查X服务\n* --no-nouveau-check 安装驱动时不检查nouveau\n\n后面两个参数可不加。  \n\n\n安装驱动中注意，**pre-install script failed**这个提示没什么关系，之后的warning提示**unable to find a suitable destination to install 32-bit compatibility libraries**也没关系，都选ok，在询问是否修改x-configuration，请选择默认的**no**，选择yes会导致重启后无法进入系统。\n\n\n### 使用nvidia-smi命令测试\n英伟达系统管理接口（NVIDIA System Management Interface, 简称 nvidia-smi）是基于NVIDIA Management Library (NVML) 的命令行管理组件,旨在(intened to )帮助管理和监控NVIDIA GPU设备。\n\n驱动安装完成后，启动电脑，之后就能用nvidia-smi命令判断驱动是否安装成功\n```\nnvidia-smi\n```\n执行这条命令将会打印出当前系统安装的NVIDIA驱动信息，如下：\n\n![image](https://s2.ax1x.com/2019/09/18/n7y6I0.png)\n\n若出现上图中的结果则说明英伟达驱动安装成功。\n\n\n\n### 安装CUDA10.1\nCUDA是什么？  \n>> CUDA，Compute Unified Device Architecture的简称，是由NVIDIA公司创立的基于他们公司生产的图形处理器GPUs（Graphics Processing Units,可以通俗的理解为显卡）的一个并行计算平台和编程模型。\n        通过CUDA，GPUs可以很方便地被用来进行通用计算（有点像在CPU中进行的数值计算等等）。在没有CUDA之前，GPUs一般只用来进行图形渲染（如通过OpenGL，DirectX）。\n        \n   \n\n下载[地址](https://developer.nvidia.com/cuda-downloads)，选择对应版本的cuda安装包，我这里选择的是`runfile`类型的，不要选择使用`deb`版本，**安装CUDA时一定使用runfile文件，这样可以进行选择不再安装驱动**。\n\n![img](https://s2.ax1x.com/2019/09/18/n76jhV.png)\n\n在安装界面，**注意选择不安装显卡驱动**（按enter键取消选择）\n\n![img](https://s2.ax1x.com/2019/09/18/n7gC28.png)\n\n。之后，打开/usr/local文件夹，我们会发现多了cuda和cuda10.1这两个文件夹，如下所示：\n\n![img](https://s2.ax1x.com/2019/09/18/n7goZj.png)\n\n\n### 添加环境变量\n运行`sudo vim /etc/profile`，末尾加上：\n```\nexport CUDA_HOME=/usr/local/cuda \nexport PATH=$PATH:$CUDA_HOME/bin \nexport LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n之后运行`source /etc/profile`使变量起效。\n\n### 判断CUDA安装成功\n运行一下代码\n```\ncd /usr/local/cuda/samples/1_Utilities/deviceQuery \nsudo make\n./deviceQuery\n```\n如果输出如下类似信息，说明CUDA安装成功：\n\n![img](https://s2.ax1x.com/2019/09/18/n72x9P.png)\n\n在CUDA安装之后，我们其实已经可以用PyTorch判断是否支持GPU了，进入python控制台：\n```\nimport torch\nprint(torch.cuda.is_available())\n```\n\n### CUDA与cuDNN的关系\ncuDNN是GPU加速计算深层神经网络的库。把CUDA看作是一个工作台，上面配有很多工具，如锤子、螺丝刀等。cuDNN是基于CUDA的深度学习GPU加速库，有了它才能在GPU上完成深度学习的计算。它就相当于工作的工具，比如它就是个扳手。但是CUDA这个工作台买来的时候，并没有送扳手。想要在CUDA上运行深度神经网络，就要安装cuDNN，就像你想要拧个螺帽就要把扳手买回来。这样才能使GPU进行深度神经网络的工作，工作速度相较CPU快很多。\n\n\n\n### 安装cuDNN\n[官方安装cuDNN指南](https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#install-linux)  \n从官方安装指南可以看出，只要把**cuDNN文件复制到CUDA的对应文件夹**里就可以，即是所谓插入式设计，把cuDNN数据库添加CUDA里，cuDNN是CUDA的扩展计算库，不会对CUDA造成其他影响。\n![官方安装cuDNN指南](https://s2.ax1x.com/2019/09/20/njMwDK.png)\n\n首先去[官网](https://developer.nvidia.com/rdp/cudnn-archive)下载cuDNN，需要注册一个账号才能下载。注意要选择对应版本的**cuDNN Library for Linux**（与CUDA 10.1对应）： \n\n![img](https://s2.ax1x.com/2019/09/18/n7W98x.png)\n下载后进行解压：\n```\ntar -zxvf cudnn-10.1-linux-x64-v7.6.2.24.tgz\n```\n进入cudnn 10.1解压之后的include目录，在命令行进行如下操作：\n```\ncd cuda/include\nsudo cp cudnn.h /usr/local/cuda/include  #复制头文件\n```\n再将进入lib64目录下的动态文件进行复制和链接：\n```\ncd ..\ncd lib64\nsudo cp libcudnn* /usr/local/cuda/lib64/    #复制动态链接库\ncd /usr/local/cuda/lib64/\nsudo chmod +r libcudnn.so.7.6.2\nsudo ln -sf libcudnn.so.7.6.2 libcudnn.so.7\nsudo ln -sf libcudnn.so.7 libcudnn.so\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\nsudo ldconfig\n```\n\n\n参考文章：\n* https://blog.csdn.net/oTengYue/article/details/79506758\n* https://shomy.top/2016/12/29/gpu-tensorflow-install\n* [简书——CUDA与cuDNN](https://www.jianshu.com/p/622f47f94784)","source":"_posts/Ubuntu_CUDA_cuDNN.md","raw":"title: Ubuntu上安装NVIDIA显卡驱动和CUDA和cuDNN库\nauthor: Salamander\ntags:\n  - NVI\n  - CUDA\n  - cuDNN\ncategories:\n  - 机器学习\ndate: 2019-09-18 16:00:00\n---\n\n![upload successful](/images/cuda.png)\n\n最近需要在用[Pytorch](https://pytorch.org/)做深度学习，为了加快训练速度，需要用到GPU运算，故在此记录一下安装过程。  \n我的本机环境：\n* Ubuntu 18.04.3 LTS\n* GeForce RTX 2080s\n\n### 检查BIOS启动项\n* 在开机启动项的Security选项中检查UEFI是否开启，如果开启的话请立马关掉它（重要）  \n* 在开机启动项的Boot选项中检查Secure Boot是否开启，如果开启的话请立马关掉它（重要），对于有的BIOS，只要删除**Secure Boot Key**就好了。\n\n<!-- more -->\n\n### 禁用 nouveau\n运行命令\n```\n sudo gedit /etc/modprobe.d/blacklist.conf\n```\n将下列代码增加到blacklist.conf文件的末尾：\n```\nblacklist vga16fb\n\nblacklist nouveau\n\nblacklist rivafb\n\nblacklist rivatv\n\nblacklist nvidiafb\n```\n保存，然后在命令行中更新initramfs，运行：\n```\n sudo update-initramfs -u\n```\n之后，重启主机\n```\nreboot\n```\n在终端运行，运行以下命令，查看是否禁用nouveau成功（无输出则表示禁用成功）：\n```\nlsmod | grep nouveau\n```\n\n\n### 安装显卡驱动\n在NVIDIA官方选择对应驱动，然后[下载](https://www.geforce.com/drivers)：\n\n![图片](https://s2.ax1x.com/2019/09/18/n7DK2Q.png)\n\n在安装驱动之前，应该卸载原有的NVIDIA驱动程序\n```\nsudo apt-get remove --purge nvidia*\n```\n把下载的驱动放到用户目录下，我这里下载文件为`NVIDIA-Linux-x86_64-430.50.run`  \n为了安装新的NVIDIA驱动程序，我们需要停止当前的显示服务器。最简单的方法是使用telinit命令更改为运行级别3。执行以下linux命令后，显示服务器将停止，因此请确保在继续之前保存所有当前工作（如果有）：\n```\nsudo telinit 3\n```\n之后会进入一个新的命令行会话，使用当前的用户名密码登录，然后授予驱动文件可执行权限\n```\nchmod a+x NVIDIA-Linux-x86_64-430.50.run\n```\n然后执行安装：\n```\nsudo ./NVIDIA-Linux-x86_64-430.50.run --no-opengl-files\n```\n注意，**--no-opengl-files**参数必须加否则会循环登录，也就是loop login  \n参数介绍：\n* --no-opengl-files 只安装驱动文件，不安装OpenGL文件。这个参数最重要\n* --no-x-check 安装驱动时不检查X服务\n* --no-nouveau-check 安装驱动时不检查nouveau\n\n后面两个参数可不加。  \n\n\n安装驱动中注意，**pre-install script failed**这个提示没什么关系，之后的warning提示**unable to find a suitable destination to install 32-bit compatibility libraries**也没关系，都选ok，在询问是否修改x-configuration，请选择默认的**no**，选择yes会导致重启后无法进入系统。\n\n\n### 使用nvidia-smi命令测试\n英伟达系统管理接口（NVIDIA System Management Interface, 简称 nvidia-smi）是基于NVIDIA Management Library (NVML) 的命令行管理组件,旨在(intened to )帮助管理和监控NVIDIA GPU设备。\n\n驱动安装完成后，启动电脑，之后就能用nvidia-smi命令判断驱动是否安装成功\n```\nnvidia-smi\n```\n执行这条命令将会打印出当前系统安装的NVIDIA驱动信息，如下：\n\n![image](https://s2.ax1x.com/2019/09/18/n7y6I0.png)\n\n若出现上图中的结果则说明英伟达驱动安装成功。\n\n\n\n### 安装CUDA10.1\nCUDA是什么？  \n>> CUDA，Compute Unified Device Architecture的简称，是由NVIDIA公司创立的基于他们公司生产的图形处理器GPUs（Graphics Processing Units,可以通俗的理解为显卡）的一个并行计算平台和编程模型。\n        通过CUDA，GPUs可以很方便地被用来进行通用计算（有点像在CPU中进行的数值计算等等）。在没有CUDA之前，GPUs一般只用来进行图形渲染（如通过OpenGL，DirectX）。\n        \n   \n\n下载[地址](https://developer.nvidia.com/cuda-downloads)，选择对应版本的cuda安装包，我这里选择的是`runfile`类型的，不要选择使用`deb`版本，**安装CUDA时一定使用runfile文件，这样可以进行选择不再安装驱动**。\n\n![img](https://s2.ax1x.com/2019/09/18/n76jhV.png)\n\n在安装界面，**注意选择不安装显卡驱动**（按enter键取消选择）\n\n![img](https://s2.ax1x.com/2019/09/18/n7gC28.png)\n\n。之后，打开/usr/local文件夹，我们会发现多了cuda和cuda10.1这两个文件夹，如下所示：\n\n![img](https://s2.ax1x.com/2019/09/18/n7goZj.png)\n\n\n### 添加环境变量\n运行`sudo vim /etc/profile`，末尾加上：\n```\nexport CUDA_HOME=/usr/local/cuda \nexport PATH=$PATH:$CUDA_HOME/bin \nexport LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n之后运行`source /etc/profile`使变量起效。\n\n### 判断CUDA安装成功\n运行一下代码\n```\ncd /usr/local/cuda/samples/1_Utilities/deviceQuery \nsudo make\n./deviceQuery\n```\n如果输出如下类似信息，说明CUDA安装成功：\n\n![img](https://s2.ax1x.com/2019/09/18/n72x9P.png)\n\n在CUDA安装之后，我们其实已经可以用PyTorch判断是否支持GPU了，进入python控制台：\n```\nimport torch\nprint(torch.cuda.is_available())\n```\n\n### CUDA与cuDNN的关系\ncuDNN是GPU加速计算深层神经网络的库。把CUDA看作是一个工作台，上面配有很多工具，如锤子、螺丝刀等。cuDNN是基于CUDA的深度学习GPU加速库，有了它才能在GPU上完成深度学习的计算。它就相当于工作的工具，比如它就是个扳手。但是CUDA这个工作台买来的时候，并没有送扳手。想要在CUDA上运行深度神经网络，就要安装cuDNN，就像你想要拧个螺帽就要把扳手买回来。这样才能使GPU进行深度神经网络的工作，工作速度相较CPU快很多。\n\n\n\n### 安装cuDNN\n[官方安装cuDNN指南](https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#install-linux)  \n从官方安装指南可以看出，只要把**cuDNN文件复制到CUDA的对应文件夹**里就可以，即是所谓插入式设计，把cuDNN数据库添加CUDA里，cuDNN是CUDA的扩展计算库，不会对CUDA造成其他影响。\n![官方安装cuDNN指南](https://s2.ax1x.com/2019/09/20/njMwDK.png)\n\n首先去[官网](https://developer.nvidia.com/rdp/cudnn-archive)下载cuDNN，需要注册一个账号才能下载。注意要选择对应版本的**cuDNN Library for Linux**（与CUDA 10.1对应）： \n\n![img](https://s2.ax1x.com/2019/09/18/n7W98x.png)\n下载后进行解压：\n```\ntar -zxvf cudnn-10.1-linux-x64-v7.6.2.24.tgz\n```\n进入cudnn 10.1解压之后的include目录，在命令行进行如下操作：\n```\ncd cuda/include\nsudo cp cudnn.h /usr/local/cuda/include  #复制头文件\n```\n再将进入lib64目录下的动态文件进行复制和链接：\n```\ncd ..\ncd lib64\nsudo cp libcudnn* /usr/local/cuda/lib64/    #复制动态链接库\ncd /usr/local/cuda/lib64/\nsudo chmod +r libcudnn.so.7.6.2\nsudo ln -sf libcudnn.so.7.6.2 libcudnn.so.7\nsudo ln -sf libcudnn.so.7 libcudnn.so\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\nsudo ldconfig\n```\n\n\n参考文章：\n* https://blog.csdn.net/oTengYue/article/details/79506758\n* https://shomy.top/2016/12/29/gpu-tensorflow-install\n* [简书——CUDA与cuDNN](https://www.jianshu.com/p/622f47f94784)","slug":"Ubuntu_CUDA_cuDNN","published":1,"updated":"2019-12-17T02:43:24.229Z","_id":"ck470mea10001u8ztndko7bxb","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/cuda.png\" alt=\"upload successful\"></p>\n<p>最近需要在用<a href=\"https://pytorch.org/\" target=\"_blank\" rel=\"noopener\">Pytorch</a>做深度学习，为了加快训练速度，需要用到GPU运算，故在此记录一下安装过程。<br>我的本机环境：</p>\n<ul>\n<li>Ubuntu 18.04.3 LTS</li>\n<li>GeForce RTX 2080s</li>\n</ul>\n<h3 id=\"检查BIOS启动项\"><a href=\"#检查BIOS启动项\" class=\"headerlink\" title=\"检查BIOS启动项\"></a>检查BIOS启动项</h3><ul>\n<li>在开机启动项的Security选项中检查UEFI是否开启，如果开启的话请立马关掉它（重要）  </li>\n<li>在开机启动项的Boot选项中检查Secure Boot是否开启，如果开启的话请立马关掉它（重要），对于有的BIOS，只要删除<strong>Secure Boot Key</strong>就好了。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"禁用-nouveau\"><a href=\"#禁用-nouveau\" class=\"headerlink\" title=\"禁用 nouveau\"></a>禁用 nouveau</h3><p>运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n\n<p>将下列代码增加到blacklist.conf文件的末尾：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist vga16fb</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist nouveau</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist rivafb</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist rivatv</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist nvidiafb</span><br></pre></td></tr></table></figure>\n\n<p>保存，然后在命令行中更新initramfs，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n\n<p>之后，重启主机</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>在终端运行，运行以下命令，查看是否禁用nouveau成功（无输出则表示禁用成功）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装显卡驱动\"><a href=\"#安装显卡驱动\" class=\"headerlink\" title=\"安装显卡驱动\"></a>安装显卡驱动</h3><p>在NVIDIA官方选择对应驱动，然后<a href=\"https://www.geforce.com/drivers\" target=\"_blank\" rel=\"noopener\">下载</a>：</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7DK2Q.png\" alt=\"图片\"></p>\n<p>在安装驱动之前，应该卸载原有的NVIDIA驱动程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove --purge nvidia*</span><br></pre></td></tr></table></figure>\n\n<p>把下载的驱动放到用户目录下，我这里下载文件为<code>NVIDIA-Linux-x86_64-430.50.run</code><br>为了安装新的NVIDIA驱动程序，我们需要停止当前的显示服务器。最简单的方法是使用telinit命令更改为运行级别3。执行以下linux命令后，显示服务器将停止，因此请确保在继续之前保存所有当前工作（如果有）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo telinit 3</span><br></pre></td></tr></table></figure>\n\n<p>之后会进入一个新的命令行会话，使用当前的用户名密码登录，然后授予驱动文件可执行权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x NVIDIA-Linux-x86_64-430.50.run</span><br></pre></td></tr></table></figure>\n\n<p>然后执行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./NVIDIA-Linux-x86_64-430.50.run --no-opengl-files</span><br></pre></td></tr></table></figure>\n\n<p>注意，<strong>–no-opengl-files</strong>参数必须加否则会循环登录，也就是loop login<br>参数介绍：</p>\n<ul>\n<li>–no-opengl-files 只安装驱动文件，不安装OpenGL文件。这个参数最重要</li>\n<li>–no-x-check 安装驱动时不检查X服务</li>\n<li>–no-nouveau-check 安装驱动时不检查nouveau</li>\n</ul>\n<p>后面两个参数可不加。  </p>\n<p>安装驱动中注意，<strong>pre-install script failed</strong>这个提示没什么关系，之后的warning提示<strong>unable to find a suitable destination to install 32-bit compatibility libraries</strong>也没关系，都选ok，在询问是否修改x-configuration，请选择默认的<strong>no</strong>，选择yes会导致重启后无法进入系统。</p>\n<h3 id=\"使用nvidia-smi命令测试\"><a href=\"#使用nvidia-smi命令测试\" class=\"headerlink\" title=\"使用nvidia-smi命令测试\"></a>使用nvidia-smi命令测试</h3><p>英伟达系统管理接口（NVIDIA System Management Interface, 简称 nvidia-smi）是基于NVIDIA Management Library (NVML) 的命令行管理组件,旨在(intened to )帮助管理和监控NVIDIA GPU设备。</p>\n<p>驱动安装完成后，启动电脑，之后就能用nvidia-smi命令判断驱动是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>执行这条命令将会打印出当前系统安装的NVIDIA驱动信息，如下：</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7y6I0.png\" alt=\"image\"></p>\n<p>若出现上图中的结果则说明英伟达驱动安装成功。</p>\n<h3 id=\"安装CUDA10-1\"><a href=\"#安装CUDA10-1\" class=\"headerlink\" title=\"安装CUDA10.1\"></a>安装CUDA10.1</h3><p>CUDA是什么？  </p>\n<blockquote>\n<blockquote>\n<p>CUDA，Compute Unified Device Architecture的简称，是由NVIDIA公司创立的基于他们公司生产的图形处理器GPUs（Graphics Processing Units,可以通俗的理解为显卡）的一个并行计算平台和编程模型。<br>        通过CUDA，GPUs可以很方便地被用来进行通用计算（有点像在CPU中进行的数值计算等等）。在没有CUDA之前，GPUs一般只用来进行图形渲染（如通过OpenGL，DirectX）。</p>\n</blockquote>\n</blockquote>\n<p>下载<a href=\"https://developer.nvidia.com/cuda-downloads\" target=\"_blank\" rel=\"noopener\">地址</a>，选择对应版本的cuda安装包，我这里选择的是<code>runfile</code>类型的，不要选择使用<code>deb</code>版本，<strong>安装CUDA时一定使用runfile文件，这样可以进行选择不再安装驱动</strong>。</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n76jhV.png\" alt=\"img\"></p>\n<p>在安装界面，<strong>注意选择不安装显卡驱动</strong>（按enter键取消选择）</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7gC28.png\" alt=\"img\"></p>\n<p>。之后，打开/usr/local文件夹，我们会发现多了cuda和cuda10.1这两个文件夹，如下所示：</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7goZj.png\" alt=\"img\"></p>\n<h3 id=\"添加环境变量\"><a href=\"#添加环境变量\" class=\"headerlink\" title=\"添加环境变量\"></a>添加环境变量</h3><p>运行<code>sudo vim /etc/profile</code>，末尾加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CUDA_HOME=/usr/local/cuda </span><br><span class=\"line\">export PATH=$PATH:$CUDA_HOME/bin </span><br><span class=\"line\">export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后运行<code>source /etc/profile</code>使变量起效。</p>\n<h3 id=\"判断CUDA安装成功\"><a href=\"#判断CUDA安装成功\" class=\"headerlink\" title=\"判断CUDA安装成功\"></a>判断CUDA安装成功</h3><p>运行一下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/cuda/samples/1_Utilities/deviceQuery </span><br><span class=\"line\">sudo make</span><br><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n\n<p>如果输出如下类似信息，说明CUDA安装成功：</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n72x9P.png\" alt=\"img\"></p>\n<p>在CUDA安装之后，我们其实已经可以用PyTorch判断是否支持GPU了，进入python控制台：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import torch</span><br><span class=\"line\">print(torch.cuda.is_available())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CUDA与cuDNN的关系\"><a href=\"#CUDA与cuDNN的关系\" class=\"headerlink\" title=\"CUDA与cuDNN的关系\"></a>CUDA与cuDNN的关系</h3><p>cuDNN是GPU加速计算深层神经网络的库。把CUDA看作是一个工作台，上面配有很多工具，如锤子、螺丝刀等。cuDNN是基于CUDA的深度学习GPU加速库，有了它才能在GPU上完成深度学习的计算。它就相当于工作的工具，比如它就是个扳手。但是CUDA这个工作台买来的时候，并没有送扳手。想要在CUDA上运行深度神经网络，就要安装cuDNN，就像你想要拧个螺帽就要把扳手买回来。这样才能使GPU进行深度神经网络的工作，工作速度相较CPU快很多。</p>\n<h3 id=\"安装cuDNN\"><a href=\"#安装cuDNN\" class=\"headerlink\" title=\"安装cuDNN\"></a>安装cuDNN</h3><p><a href=\"https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#install-linux\" target=\"_blank\" rel=\"noopener\">官方安装cuDNN指南</a><br>从官方安装指南可以看出，只要把<strong>cuDNN文件复制到CUDA的对应文件夹</strong>里就可以，即是所谓插入式设计，把cuDNN数据库添加CUDA里，cuDNN是CUDA的扩展计算库，不会对CUDA造成其他影响。<br><img src=\"https://s2.ax1x.com/2019/09/20/njMwDK.png\" alt=\"官方安装cuDNN指南\"></p>\n<p>首先去<a href=\"https://developer.nvidia.com/rdp/cudnn-archive\" target=\"_blank\" rel=\"noopener\">官网</a>下载cuDNN，需要注册一个账号才能下载。注意要选择对应版本的<strong>cuDNN Library for Linux</strong>（与CUDA 10.1对应）： </p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7W98x.png\" alt=\"img\"><br>下载后进行解压：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf cudnn-10.1-linux-x64-v7.6.2.24.tgz</span><br></pre></td></tr></table></figure>\n\n<p>进入cudnn 10.1解压之后的include目录，在命令行进行如下操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd cuda/include</span><br><span class=\"line\">sudo cp cudnn.h /usr/local/cuda/include  #复制头文件</span><br></pre></td></tr></table></figure>\n\n<p>再将进入lib64目录下的动态文件进行复制和链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">cd lib64</span><br><span class=\"line\">sudo cp libcudnn* /usr/local/cuda/lib64/    #复制动态链接库</span><br><span class=\"line\">cd /usr/local/cuda/lib64/</span><br><span class=\"line\">sudo chmod +r libcudnn.so.7.6.2</span><br><span class=\"line\">sudo ln -sf libcudnn.so.7.6.2 libcudnn.so.7</span><br><span class=\"line\">sudo ln -sf libcudnn.so.7 libcudnn.so</span><br><span class=\"line\">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span><br><span class=\"line\">sudo ldconfig</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/oTengYue/article/details/79506758\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/oTengYue/article/details/79506758</a></li>\n<li><a href=\"https://shomy.top/2016/12/29/gpu-tensorflow-install\" target=\"_blank\" rel=\"noopener\">https://shomy.top/2016/12/29/gpu-tensorflow-install</a></li>\n<li><a href=\"https://www.jianshu.com/p/622f47f94784\" target=\"_blank\" rel=\"noopener\">简书——CUDA与cuDNN</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/cuda.png\" alt=\"upload successful\"></p>\n<p>最近需要在用<a href=\"https://pytorch.org/\" target=\"_blank\" rel=\"noopener\">Pytorch</a>做深度学习，为了加快训练速度，需要用到GPU运算，故在此记录一下安装过程。<br>我的本机环境：</p>\n<ul>\n<li>Ubuntu 18.04.3 LTS</li>\n<li>GeForce RTX 2080s</li>\n</ul>\n<h3 id=\"检查BIOS启动项\"><a href=\"#检查BIOS启动项\" class=\"headerlink\" title=\"检查BIOS启动项\"></a>检查BIOS启动项</h3><ul>\n<li>在开机启动项的Security选项中检查UEFI是否开启，如果开启的话请立马关掉它（重要）  </li>\n<li>在开机启动项的Boot选项中检查Secure Boot是否开启，如果开启的话请立马关掉它（重要），对于有的BIOS，只要删除<strong>Secure Boot Key</strong>就好了。</li>\n</ul>","more":"<h3 id=\"禁用-nouveau\"><a href=\"#禁用-nouveau\" class=\"headerlink\" title=\"禁用 nouveau\"></a>禁用 nouveau</h3><p>运行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure>\n\n<p>将下列代码增加到blacklist.conf文件的末尾：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist vga16fb</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist nouveau</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist rivafb</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist rivatv</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist nvidiafb</span><br></pre></td></tr></table></figure>\n\n<p>保存，然后在命令行中更新initramfs，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\n\n<p>之后，重启主机</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>在终端运行，运行以下命令，查看是否禁用nouveau成功（无输出则表示禁用成功）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装显卡驱动\"><a href=\"#安装显卡驱动\" class=\"headerlink\" title=\"安装显卡驱动\"></a>安装显卡驱动</h3><p>在NVIDIA官方选择对应驱动，然后<a href=\"https://www.geforce.com/drivers\" target=\"_blank\" rel=\"noopener\">下载</a>：</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7DK2Q.png\" alt=\"图片\"></p>\n<p>在安装驱动之前，应该卸载原有的NVIDIA驱动程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove --purge nvidia*</span><br></pre></td></tr></table></figure>\n\n<p>把下载的驱动放到用户目录下，我这里下载文件为<code>NVIDIA-Linux-x86_64-430.50.run</code><br>为了安装新的NVIDIA驱动程序，我们需要停止当前的显示服务器。最简单的方法是使用telinit命令更改为运行级别3。执行以下linux命令后，显示服务器将停止，因此请确保在继续之前保存所有当前工作（如果有）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo telinit 3</span><br></pre></td></tr></table></figure>\n\n<p>之后会进入一个新的命令行会话，使用当前的用户名密码登录，然后授予驱动文件可执行权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x NVIDIA-Linux-x86_64-430.50.run</span><br></pre></td></tr></table></figure>\n\n<p>然后执行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./NVIDIA-Linux-x86_64-430.50.run --no-opengl-files</span><br></pre></td></tr></table></figure>\n\n<p>注意，<strong>–no-opengl-files</strong>参数必须加否则会循环登录，也就是loop login<br>参数介绍：</p>\n<ul>\n<li>–no-opengl-files 只安装驱动文件，不安装OpenGL文件。这个参数最重要</li>\n<li>–no-x-check 安装驱动时不检查X服务</li>\n<li>–no-nouveau-check 安装驱动时不检查nouveau</li>\n</ul>\n<p>后面两个参数可不加。  </p>\n<p>安装驱动中注意，<strong>pre-install script failed</strong>这个提示没什么关系，之后的warning提示<strong>unable to find a suitable destination to install 32-bit compatibility libraries</strong>也没关系，都选ok，在询问是否修改x-configuration，请选择默认的<strong>no</strong>，选择yes会导致重启后无法进入系统。</p>\n<h3 id=\"使用nvidia-smi命令测试\"><a href=\"#使用nvidia-smi命令测试\" class=\"headerlink\" title=\"使用nvidia-smi命令测试\"></a>使用nvidia-smi命令测试</h3><p>英伟达系统管理接口（NVIDIA System Management Interface, 简称 nvidia-smi）是基于NVIDIA Management Library (NVML) 的命令行管理组件,旨在(intened to )帮助管理和监控NVIDIA GPU设备。</p>\n<p>驱动安装完成后，启动电脑，之后就能用nvidia-smi命令判断驱动是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p>执行这条命令将会打印出当前系统安装的NVIDIA驱动信息，如下：</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7y6I0.png\" alt=\"image\"></p>\n<p>若出现上图中的结果则说明英伟达驱动安装成功。</p>\n<h3 id=\"安装CUDA10-1\"><a href=\"#安装CUDA10-1\" class=\"headerlink\" title=\"安装CUDA10.1\"></a>安装CUDA10.1</h3><p>CUDA是什么？  </p>\n<blockquote>\n<blockquote>\n<p>CUDA，Compute Unified Device Architecture的简称，是由NVIDIA公司创立的基于他们公司生产的图形处理器GPUs（Graphics Processing Units,可以通俗的理解为显卡）的一个并行计算平台和编程模型。<br>        通过CUDA，GPUs可以很方便地被用来进行通用计算（有点像在CPU中进行的数值计算等等）。在没有CUDA之前，GPUs一般只用来进行图形渲染（如通过OpenGL，DirectX）。</p>\n</blockquote>\n</blockquote>\n<p>下载<a href=\"https://developer.nvidia.com/cuda-downloads\" target=\"_blank\" rel=\"noopener\">地址</a>，选择对应版本的cuda安装包，我这里选择的是<code>runfile</code>类型的，不要选择使用<code>deb</code>版本，<strong>安装CUDA时一定使用runfile文件，这样可以进行选择不再安装驱动</strong>。</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n76jhV.png\" alt=\"img\"></p>\n<p>在安装界面，<strong>注意选择不安装显卡驱动</strong>（按enter键取消选择）</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7gC28.png\" alt=\"img\"></p>\n<p>。之后，打开/usr/local文件夹，我们会发现多了cuda和cuda10.1这两个文件夹，如下所示：</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7goZj.png\" alt=\"img\"></p>\n<h3 id=\"添加环境变量\"><a href=\"#添加环境变量\" class=\"headerlink\" title=\"添加环境变量\"></a>添加环境变量</h3><p>运行<code>sudo vim /etc/profile</code>，末尾加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CUDA_HOME=/usr/local/cuda </span><br><span class=\"line\">export PATH=$PATH:$CUDA_HOME/bin </span><br><span class=\"line\">export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后运行<code>source /etc/profile</code>使变量起效。</p>\n<h3 id=\"判断CUDA安装成功\"><a href=\"#判断CUDA安装成功\" class=\"headerlink\" title=\"判断CUDA安装成功\"></a>判断CUDA安装成功</h3><p>运行一下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/cuda/samples/1_Utilities/deviceQuery </span><br><span class=\"line\">sudo make</span><br><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\n\n<p>如果输出如下类似信息，说明CUDA安装成功：</p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n72x9P.png\" alt=\"img\"></p>\n<p>在CUDA安装之后，我们其实已经可以用PyTorch判断是否支持GPU了，进入python控制台：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import torch</span><br><span class=\"line\">print(torch.cuda.is_available())</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CUDA与cuDNN的关系\"><a href=\"#CUDA与cuDNN的关系\" class=\"headerlink\" title=\"CUDA与cuDNN的关系\"></a>CUDA与cuDNN的关系</h3><p>cuDNN是GPU加速计算深层神经网络的库。把CUDA看作是一个工作台，上面配有很多工具，如锤子、螺丝刀等。cuDNN是基于CUDA的深度学习GPU加速库，有了它才能在GPU上完成深度学习的计算。它就相当于工作的工具，比如它就是个扳手。但是CUDA这个工作台买来的时候，并没有送扳手。想要在CUDA上运行深度神经网络，就要安装cuDNN，就像你想要拧个螺帽就要把扳手买回来。这样才能使GPU进行深度神经网络的工作，工作速度相较CPU快很多。</p>\n<h3 id=\"安装cuDNN\"><a href=\"#安装cuDNN\" class=\"headerlink\" title=\"安装cuDNN\"></a>安装cuDNN</h3><p><a href=\"https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#install-linux\" target=\"_blank\" rel=\"noopener\">官方安装cuDNN指南</a><br>从官方安装指南可以看出，只要把<strong>cuDNN文件复制到CUDA的对应文件夹</strong>里就可以，即是所谓插入式设计，把cuDNN数据库添加CUDA里，cuDNN是CUDA的扩展计算库，不会对CUDA造成其他影响。<br><img src=\"https://s2.ax1x.com/2019/09/20/njMwDK.png\" alt=\"官方安装cuDNN指南\"></p>\n<p>首先去<a href=\"https://developer.nvidia.com/rdp/cudnn-archive\" target=\"_blank\" rel=\"noopener\">官网</a>下载cuDNN，需要注册一个账号才能下载。注意要选择对应版本的<strong>cuDNN Library for Linux</strong>（与CUDA 10.1对应）： </p>\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7W98x.png\" alt=\"img\"><br>下载后进行解压：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf cudnn-10.1-linux-x64-v7.6.2.24.tgz</span><br></pre></td></tr></table></figure>\n\n<p>进入cudnn 10.1解压之后的include目录，在命令行进行如下操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd cuda/include</span><br><span class=\"line\">sudo cp cudnn.h /usr/local/cuda/include  #复制头文件</span><br></pre></td></tr></table></figure>\n\n<p>再将进入lib64目录下的动态文件进行复制和链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">cd lib64</span><br><span class=\"line\">sudo cp libcudnn* /usr/local/cuda/lib64/    #复制动态链接库</span><br><span class=\"line\">cd /usr/local/cuda/lib64/</span><br><span class=\"line\">sudo chmod +r libcudnn.so.7.6.2</span><br><span class=\"line\">sudo ln -sf libcudnn.so.7.6.2 libcudnn.so.7</span><br><span class=\"line\">sudo ln -sf libcudnn.so.7 libcudnn.so</span><br><span class=\"line\">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span><br><span class=\"line\">sudo ldconfig</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/oTengYue/article/details/79506758\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/oTengYue/article/details/79506758</a></li>\n<li><a href=\"https://shomy.top/2016/12/29/gpu-tensorflow-install\" target=\"_blank\" rel=\"noopener\">https://shomy.top/2016/12/29/gpu-tensorflow-install</a></li>\n<li><a href=\"https://www.jianshu.com/p/622f47f94784\" target=\"_blank\" rel=\"noopener\">简书——CUDA与cuDNN</a></li>\n</ul>"},{"title":"Jenkins在Docker中运行中的坑","author":"Salamander","date":"2019-11-07T12:00:00.000Z","_content":"## jenkins是什么？\n  Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。  \n上面的介绍是抄的（逃，简单讲，就是Jenkins能帮我们**自动编译，测试，发布软件**。\n\n<!-- more -->\n\n\n## 安装运行\nJenkins有单独的war包，通过`java -jar jenkins.war`直接就可以运行（[官网下载](https://jenkins.io/zh/download/)，选择`Generic Java package (.war)`，或者[官方镜像](http://mirrors.jenkins.io/)），选择LTS Releases\t中的`war-stable`），但是jre环境，当然对于熟悉Java的人来说，这个是配置一下即可。本文介绍在Docker中运行Jenkins以及会遇到的一些问题。  \n* 操作系统：Ubuntu 18.04.3 LTS\n* docker版本：19.03.4\n* jdk版本：java version \"1.8.0_221\"\n\n在`vim`中打开中文有时候会乱码，可以通过下面命令解决：\n```\nsudo locale-gen zh_CN.UTF-8\n```\n好了，让我们开始安装`Jenkins`。  \n首先，编写一份自定义的`Dockerfile`：\n```\nFROM jenkins/jenkins:lts\n\nUSER root\n\nRUN echo ' \\n\\\ndeb http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\\ndeb http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\\ndeb http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free ' > /etc/apt/sources.list\n\nRUN cat /etc/apt/sources.list\n\n#更新源并安装缺少的包\nRUN apt-get update && apt-get install -y gcc g++ make openssl pkg-config\n\n\nUSER jenkins\n```\n基础镜像是`jenkins/jenkins:lts`，观察一下这个镜像\n![](https://s2.ax1x.com/2019/11/07/MAz11g.png)  \n发现它是基于`FROM openjdk:8-jdk-stretch`，这是带有jdk的debian 9镜像。所以我在`Dockerfile`中修改了apt源，这里使用了阿里云的apt源（`\\n\\`是换行加上续行符）。\n\n再配合`docker-compose.yml`：\n```\nversion: '3'\nservices:\n  jenkins:\n    build: .\n    volumes:\n      - ./data:/var/jenkins_home\n    environment:\n      - \"JAVA_OPTS=-Duser.timezone=Asia/Shanghai -Xms1g -Xmx1g\"\n    ports: \n      - 127.0.0.1:8080:8080\n      - 50000:50000\n```\n现在我们就可以启动Jenkins了，打开终端，键入命令：\n```\ndocker-compose up\n```\n这时候，我们会遇到错误：\n```\njenkins_1  | touch: cannot touch '/var/jenkins_home/copy_reference_file.log': Permission denied\njenkins_1  | Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?\n```\n看描述是**权限问题**，观察一下目录下的`data`文件夹：\n```\ndrwxr-xr-x  2 root       root       4096 11月 17 20:47 data\n```\n发现目录的属主是`root`用户，这是什么原因呢？\n\n## 原因探究\n查看`Jenkins`容器的当前用户和目录`/var/jenkins_home`属主，我们发现当前用户是`Jenkins`，`/var/jenkins_home`属主用户是`jenkins`：\n```\ndocker run -ti --rm --entrypoint=\"/bin/bash\"  jenkins/jenkins:lts  -c \"whoami && id\"\njenkins\nuid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins)\n\ndocker run -ti --rm --entrypoint=\"/bin/bash\" jenkins/jenkins:lts -c \"ls -la /var\"\ndrwxr-xr-x 1 root    root    4096 Oct 17 08:29 cache\ndrwxr-xr-x 2 jenkins jenkins 4096 Nov 17 14:05 jenkins_home\n\n```\n上述命令中，`--rm`选项是让容器退出时自动清除，`--entrypoint`是覆盖镜像中的`ENTRYPOINT`。  \n现在我们知道了，因为`/var/jenkins_home`映射到本地数据卷时，目录的拥有者变成了root用户，所以出现了`Permission denied`的问题。  \n发现问题之后，相应的解决方法也很简单：把当前目录的拥有者赋值给uid 1000，再启动\"jenkins\"容器就一切正常了。\n```\nsudo chown -R 1000:1000 data\n```\n这时利用浏览器访问 \"http://localhost:8080/\" 就可以看到Jenkins的经典Web界面了。\n\n\n\n\n参考：\n* [谈谈 Docker Volume 之权限管理（一）](https://yq.aliyun.com/articles/53990)","source":"_posts/Jenkin_and_docker.md","raw":"title: Jenkins在Docker中运行中的坑\nauthor: Salamander\ntags:\n  - jenkins\n  - ci\n  - docker\ncategories:\n  - ci\ndate: 2019-11-07 20:00:00\n---\n## jenkins是什么？\n  Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。  \n上面的介绍是抄的（逃，简单讲，就是Jenkins能帮我们**自动编译，测试，发布软件**。\n\n<!-- more -->\n\n\n## 安装运行\nJenkins有单独的war包，通过`java -jar jenkins.war`直接就可以运行（[官网下载](https://jenkins.io/zh/download/)，选择`Generic Java package (.war)`，或者[官方镜像](http://mirrors.jenkins.io/)），选择LTS Releases\t中的`war-stable`），但是jre环境，当然对于熟悉Java的人来说，这个是配置一下即可。本文介绍在Docker中运行Jenkins以及会遇到的一些问题。  \n* 操作系统：Ubuntu 18.04.3 LTS\n* docker版本：19.03.4\n* jdk版本：java version \"1.8.0_221\"\n\n在`vim`中打开中文有时候会乱码，可以通过下面命令解决：\n```\nsudo locale-gen zh_CN.UTF-8\n```\n好了，让我们开始安装`Jenkins`。  \n首先，编写一份自定义的`Dockerfile`：\n```\nFROM jenkins/jenkins:lts\n\nUSER root\n\nRUN echo ' \\n\\\ndeb http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\\ndeb http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\\ndeb http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free ' > /etc/apt/sources.list\n\nRUN cat /etc/apt/sources.list\n\n#更新源并安装缺少的包\nRUN apt-get update && apt-get install -y gcc g++ make openssl pkg-config\n\n\nUSER jenkins\n```\n基础镜像是`jenkins/jenkins:lts`，观察一下这个镜像\n![](https://s2.ax1x.com/2019/11/07/MAz11g.png)  \n发现它是基于`FROM openjdk:8-jdk-stretch`，这是带有jdk的debian 9镜像。所以我在`Dockerfile`中修改了apt源，这里使用了阿里云的apt源（`\\n\\`是换行加上续行符）。\n\n再配合`docker-compose.yml`：\n```\nversion: '3'\nservices:\n  jenkins:\n    build: .\n    volumes:\n      - ./data:/var/jenkins_home\n    environment:\n      - \"JAVA_OPTS=-Duser.timezone=Asia/Shanghai -Xms1g -Xmx1g\"\n    ports: \n      - 127.0.0.1:8080:8080\n      - 50000:50000\n```\n现在我们就可以启动Jenkins了，打开终端，键入命令：\n```\ndocker-compose up\n```\n这时候，我们会遇到错误：\n```\njenkins_1  | touch: cannot touch '/var/jenkins_home/copy_reference_file.log': Permission denied\njenkins_1  | Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?\n```\n看描述是**权限问题**，观察一下目录下的`data`文件夹：\n```\ndrwxr-xr-x  2 root       root       4096 11月 17 20:47 data\n```\n发现目录的属主是`root`用户，这是什么原因呢？\n\n## 原因探究\n查看`Jenkins`容器的当前用户和目录`/var/jenkins_home`属主，我们发现当前用户是`Jenkins`，`/var/jenkins_home`属主用户是`jenkins`：\n```\ndocker run -ti --rm --entrypoint=\"/bin/bash\"  jenkins/jenkins:lts  -c \"whoami && id\"\njenkins\nuid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins)\n\ndocker run -ti --rm --entrypoint=\"/bin/bash\" jenkins/jenkins:lts -c \"ls -la /var\"\ndrwxr-xr-x 1 root    root    4096 Oct 17 08:29 cache\ndrwxr-xr-x 2 jenkins jenkins 4096 Nov 17 14:05 jenkins_home\n\n```\n上述命令中，`--rm`选项是让容器退出时自动清除，`--entrypoint`是覆盖镜像中的`ENTRYPOINT`。  \n现在我们知道了，因为`/var/jenkins_home`映射到本地数据卷时，目录的拥有者变成了root用户，所以出现了`Permission denied`的问题。  \n发现问题之后，相应的解决方法也很简单：把当前目录的拥有者赋值给uid 1000，再启动\"jenkins\"容器就一切正常了。\n```\nsudo chown -R 1000:1000 data\n```\n这时利用浏览器访问 \"http://localhost:8080/\" 就可以看到Jenkins的经典Web界面了。\n\n\n\n\n参考：\n* [谈谈 Docker Volume 之权限管理（一）](https://yq.aliyun.com/articles/53990)","slug":"Jenkin_and_docker","published":1,"updated":"2019-11-17T14:18:29.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck470mea40004u8ztdjqntpd7","content":"<h2 id=\"jenkins是什么？\"><a href=\"#jenkins是什么？\" class=\"headerlink\" title=\"jenkins是什么？\"></a>jenkins是什么？</h2><p>  Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。<br>上面的介绍是抄的（逃，简单讲，就是Jenkins能帮我们<strong>自动编译，测试，发布软件</strong>。</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"安装运行\"><a href=\"#安装运行\" class=\"headerlink\" title=\"安装运行\"></a>安装运行</h2><p>Jenkins有单独的war包，通过<code>java -jar jenkins.war</code>直接就可以运行（<a href=\"https://jenkins.io/zh/download/\" target=\"_blank\" rel=\"noopener\">官网下载</a>，选择<code>Generic Java package (.war)</code>，或者<a href=\"http://mirrors.jenkins.io/\" target=\"_blank\" rel=\"noopener\">官方镜像</a>），选择LTS Releases    中的<code>war-stable</code>），但是jre环境，当然对于熟悉Java的人来说，这个是配置一下即可。本文介绍在Docker中运行Jenkins以及会遇到的一些问题。  </p>\n<ul>\n<li>操作系统：Ubuntu 18.04.3 LTS</li>\n<li>docker版本：19.03.4</li>\n<li>jdk版本：java version “1.8.0_221”</li>\n</ul>\n<p>在<code>vim</code>中打开中文有时候会乱码，可以通过下面命令解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo locale-gen zh_CN.UTF-8</span><br></pre></td></tr></table></figure>\n\n<p>好了，让我们开始安装<code>Jenkins</code>。<br>首先，编写一份自定义的<code>Dockerfile</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM jenkins/jenkins:lts</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\"></span><br><span class=\"line\">RUN echo &apos; \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free &apos; &gt; /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cat /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">#更新源并安装缺少的包</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y gcc g++ make openssl pkg-config</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">USER jenkins</span><br></pre></td></tr></table></figure>\n\n<p>基础镜像是<code>jenkins/jenkins:lts</code>，观察一下这个镜像<br><img src=\"https://s2.ax1x.com/2019/11/07/MAz11g.png\" alt><br>发现它是基于<code>FROM openjdk:8-jdk-stretch</code>，这是带有jdk的debian 9镜像。所以我在<code>Dockerfile</code>中修改了apt源，这里使用了阿里云的apt源（<code>\\n\\</code>是换行加上续行符）。</p>\n<p>再配合<code>docker-compose.yml</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  jenkins:</span><br><span class=\"line\">    build: .</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data:/var/jenkins_home</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - &quot;JAVA_OPTS=-Duser.timezone=Asia/Shanghai -Xms1g -Xmx1g&quot;</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - 127.0.0.1:8080:8080</span><br><span class=\"line\">      - 50000:50000</span><br></pre></td></tr></table></figure>\n\n<p>现在我们就可以启动Jenkins了，打开终端，键入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure>\n\n<p>这时候，我们会遇到错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenkins_1  | touch: cannot touch &apos;/var/jenkins_home/copy_reference_file.log&apos;: Permission denied</span><br><span class=\"line\">jenkins_1  | Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?</span><br></pre></td></tr></table></figure>\n\n<p>看描述是<strong>权限问题</strong>，观察一下目录下的<code>data</code>文件夹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x  2 root       root       4096 11月 17 20:47 data</span><br></pre></td></tr></table></figure>\n\n<p>发现目录的属主是<code>root</code>用户，这是什么原因呢？</p>\n<h2 id=\"原因探究\"><a href=\"#原因探究\" class=\"headerlink\" title=\"原因探究\"></a>原因探究</h2><p>查看<code>Jenkins</code>容器的当前用户和目录<code>/var/jenkins_home</code>属主，我们发现当前用户是<code>Jenkins</code>，<code>/var/jenkins_home</code>属主用户是<code>jenkins</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -ti --rm --entrypoint=&quot;/bin/bash&quot;  jenkins/jenkins:lts  -c &quot;whoami &amp;&amp; id&quot;</span><br><span class=\"line\">jenkins</span><br><span class=\"line\">uid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins)</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -ti --rm --entrypoint=&quot;/bin/bash&quot; jenkins/jenkins:lts -c &quot;ls -la /var&quot;</span><br><span class=\"line\">drwxr-xr-x 1 root    root    4096 Oct 17 08:29 cache</span><br><span class=\"line\">drwxr-xr-x 2 jenkins jenkins 4096 Nov 17 14:05 jenkins_home</span><br></pre></td></tr></table></figure>\n\n<p>上述命令中，<code>--rm</code>选项是让容器退出时自动清除，<code>--entrypoint</code>是覆盖镜像中的<code>ENTRYPOINT</code>。<br>现在我们知道了，因为<code>/var/jenkins_home</code>映射到本地数据卷时，目录的拥有者变成了root用户，所以出现了<code>Permission denied</code>的问题。<br>发现问题之后，相应的解决方法也很简单：把当前目录的拥有者赋值给uid 1000，再启动”jenkins”容器就一切正常了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R 1000:1000 data</span><br></pre></td></tr></table></figure>\n\n<p>这时利用浏览器访问 “<a href=\"http://localhost:8080/&quot;\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/&quot;</a> 就可以看到Jenkins的经典Web界面了。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://yq.aliyun.com/articles/53990\" target=\"_blank\" rel=\"noopener\">谈谈 Docker Volume 之权限管理（一）</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"jenkins是什么？\"><a href=\"#jenkins是什么？\" class=\"headerlink\" title=\"jenkins是什么？\"></a>jenkins是什么？</h2><p>  Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。<br>上面的介绍是抄的（逃，简单讲，就是Jenkins能帮我们<strong>自动编译，测试，发布软件</strong>。</p>","more":"<h2 id=\"安装运行\"><a href=\"#安装运行\" class=\"headerlink\" title=\"安装运行\"></a>安装运行</h2><p>Jenkins有单独的war包，通过<code>java -jar jenkins.war</code>直接就可以运行（<a href=\"https://jenkins.io/zh/download/\" target=\"_blank\" rel=\"noopener\">官网下载</a>，选择<code>Generic Java package (.war)</code>，或者<a href=\"http://mirrors.jenkins.io/\" target=\"_blank\" rel=\"noopener\">官方镜像</a>），选择LTS Releases    中的<code>war-stable</code>），但是jre环境，当然对于熟悉Java的人来说，这个是配置一下即可。本文介绍在Docker中运行Jenkins以及会遇到的一些问题。  </p>\n<ul>\n<li>操作系统：Ubuntu 18.04.3 LTS</li>\n<li>docker版本：19.03.4</li>\n<li>jdk版本：java version “1.8.0_221”</li>\n</ul>\n<p>在<code>vim</code>中打开中文有时候会乱码，可以通过下面命令解决：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo locale-gen zh_CN.UTF-8</span><br></pre></td></tr></table></figure>\n\n<p>好了，让我们开始安装<code>Jenkins</code>。<br>首先，编写一份自定义的<code>Dockerfile</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM jenkins/jenkins:lts</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\"></span><br><span class=\"line\">RUN echo &apos; \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free &apos; &gt; /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cat /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">#更新源并安装缺少的包</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y gcc g++ make openssl pkg-config</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">USER jenkins</span><br></pre></td></tr></table></figure>\n\n<p>基础镜像是<code>jenkins/jenkins:lts</code>，观察一下这个镜像<br><img src=\"https://s2.ax1x.com/2019/11/07/MAz11g.png\" alt><br>发现它是基于<code>FROM openjdk:8-jdk-stretch</code>，这是带有jdk的debian 9镜像。所以我在<code>Dockerfile</code>中修改了apt源，这里使用了阿里云的apt源（<code>\\n\\</code>是换行加上续行符）。</p>\n<p>再配合<code>docker-compose.yml</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &apos;3&apos;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  jenkins:</span><br><span class=\"line\">    build: .</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data:/var/jenkins_home</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - &quot;JAVA_OPTS=-Duser.timezone=Asia/Shanghai -Xms1g -Xmx1g&quot;</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - 127.0.0.1:8080:8080</span><br><span class=\"line\">      - 50000:50000</span><br></pre></td></tr></table></figure>\n\n<p>现在我们就可以启动Jenkins了，打开终端，键入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure>\n\n<p>这时候，我们会遇到错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenkins_1  | touch: cannot touch &apos;/var/jenkins_home/copy_reference_file.log&apos;: Permission denied</span><br><span class=\"line\">jenkins_1  | Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?</span><br></pre></td></tr></table></figure>\n\n<p>看描述是<strong>权限问题</strong>，观察一下目录下的<code>data</code>文件夹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x  2 root       root       4096 11月 17 20:47 data</span><br></pre></td></tr></table></figure>\n\n<p>发现目录的属主是<code>root</code>用户，这是什么原因呢？</p>\n<h2 id=\"原因探究\"><a href=\"#原因探究\" class=\"headerlink\" title=\"原因探究\"></a>原因探究</h2><p>查看<code>Jenkins</code>容器的当前用户和目录<code>/var/jenkins_home</code>属主，我们发现当前用户是<code>Jenkins</code>，<code>/var/jenkins_home</code>属主用户是<code>jenkins</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -ti --rm --entrypoint=&quot;/bin/bash&quot;  jenkins/jenkins:lts  -c &quot;whoami &amp;&amp; id&quot;</span><br><span class=\"line\">jenkins</span><br><span class=\"line\">uid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins)</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -ti --rm --entrypoint=&quot;/bin/bash&quot; jenkins/jenkins:lts -c &quot;ls -la /var&quot;</span><br><span class=\"line\">drwxr-xr-x 1 root    root    4096 Oct 17 08:29 cache</span><br><span class=\"line\">drwxr-xr-x 2 jenkins jenkins 4096 Nov 17 14:05 jenkins_home</span><br></pre></td></tr></table></figure>\n\n<p>上述命令中，<code>--rm</code>选项是让容器退出时自动清除，<code>--entrypoint</code>是覆盖镜像中的<code>ENTRYPOINT</code>。<br>现在我们知道了，因为<code>/var/jenkins_home</code>映射到本地数据卷时，目录的拥有者变成了root用户，所以出现了<code>Permission denied</code>的问题。<br>发现问题之后，相应的解决方法也很简单：把当前目录的拥有者赋值给uid 1000，再启动”jenkins”容器就一切正常了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R 1000:1000 data</span><br></pre></td></tr></table></figure>\n\n<p>这时利用浏览器访问 “<a href=\"http://localhost:8080/&quot;\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/&quot;</a> 就可以看到Jenkins的经典Web界面了。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://yq.aliyun.com/articles/53990\" target=\"_blank\" rel=\"noopener\">谈谈 Docker Volume 之权限管理（一）</a></li>\n</ul>"},{"title":"Spring Boot集成MyBatis操作MySQL","author":"Salamander","date":"2019-10-27T11:05:00.000Z","_content":"最近学习了一下Spring Boot，它确实做到了简单快速创建Java Web应用。这是一篇简单的笔记，记录了Spring Boot集成MyBatis，实现基本的CURD。\n\n## MyBatis集成方式\n* 注解版集成\n* XML版本集成\n\nXML版本为老式的配置集成方式，重度集成XML文件，SQL语句也是全部写在XML中的，我以前配SSM（Spring+SpringMVC+MyBatis）用的就是这种方式；注解版版本，相对来说比较简约，不需要XML配置，只需要使用注解和代码来操作数据，本文这里不作介绍（其实挺好学的，^_^）。 \n\n\n\n<!-- more -->\n\n## 准备\n启动MySQL服务  \n创建数据库`spring_db`\n```\nCREATE DATABASE spring_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n```\n\n创建`user`表\n```\ncreate table user\n(\n\tuid int(11) unsigned auto_increment comment '主键Id'\n\t\tprimary key,\n\tname varchar(255) null comment '名称',\n\tage int null comment '年龄',\n\taddress varchar(255) null comment '地址',\n\tcreated_time datetime null comment '创建时间',\n\tupdated_time datetime null comment '更新时间'\n)\ncomment '用户表' collate=utf8_general_ci;\n```\n\n\n## 添加依赖\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.41</version>\n</dependency>\n\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.25</version>\n</dependency>\n```\n\n## 配置数据库连接\n设置application.properties文件，添加如下配置\n```\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/spring_db?useUnicode=true&characterEncoding=UTF-8\nspring.datasource.username=root\nspring.datasource.password=2LCqvSOJ6m0Ut6ui\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n* spring.datasource.url 数据库连接字符串\n* spring.datasource.username 数据库用户名\n* spring.datasource.password 数据库密码\n* spring.datasource.driver-class-name 驱动类型（注意MySQL 8.0的值是com.mysql.cj.jdbc.Driver和之前不同）\n\n## 设置 MapperScan 包路径\n直接在启动文件SpringbootApplication.java的类上配置@MapperScan，这样就可以省去，单独给每个Mapper（就是我们这里的dao层）上标识@Mapper的麻烦。\n```\n@SpringBootApplication\n@MapperScan(\"com.salamander.springbootdemo.dao\")\npublic class SpringbootdemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootdemoApplication.class, args);\n    }\n}\n```\n\n## 添加Entity和Dao层类\n`com.salamander.springbootdemo.entity`下`User`类（使用了lombok的@Data注解）：\n```\n@Data\npublic class User implements Serializable {\n    private Long id;\n\n    private String name;\n\n    private String address;\n\n    private int age;\n\n    private Date createdDatetime;\n}\n```\n`com.salamander.springbootdemo.dao`下`UserDao`接口：\n```\npublic interface UserDao {\n    User findByName(String name);\n    \n    int insertUser(User user);\n}\n```\n\n### XML方式MyBatis 集成\n修改application.properties，添加配置\n```\nmybatis.config-locations=classpath:mybatis/mybatis-config.xml\nmybatis.mapper-locations=classpath:mybatis/mapper/*.xml\n```\n* mybatis.config-locations 配置MyBatis基础属性\n* mybatis.mapper-locations 配置Mapper XML文件\n\n## 配置XML文件\n本例创建两个xml文件，在resource/mybatis下的mybatis-config.xml（配置MyBatis基础属性）和在resource/mybatis/mapper下的UserMapper.xml（用户和数据交互的SQL语句）。\n`mybatis-config.xml`\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\n<configuration>\n    <typeAliases>\n        <typeAlias alias=\"Integer\" type=\"java.lang.Integer\"/>\n        <typeAlias alias=\"Long\" type=\"java.lang.Long\"/>\n        <typeAlias alias=\"HashMap\" type=\"java.util.HashMap\"/>\n        <typeAlias alias=\"LinkedHashMap\" type=\"java.util.LinkedHashMap\"/>\n        <typeAlias alias=\"ArrayList\" type=\"java.util.ArrayList\"/>\n        <typeAlias alias=\"LinkedList\" type=\"java.util.LinkedList\"/>\n    </typeAliases>\n</configuration>\n```\n\n`UserMapper.xml`\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace是命名空间，是dao接口的全路径-->\n<mapper namespace=\"com.salamander.springbootdemo.dao.UserDao\">\n    <resultMap id=\"userResultMap\" type=\"com.salamander.springbootdemo.entity.User\">\n        <id property=\"id\" column=\"uid\"></id>\n        <result column=\"name\" property=\"name\" />\n        <result column=\"age\" property=\"age\" />\n        <result column=\"address\" property=\"address\" />\n        <result column=\"created_time\" property=\"createdDatetime\" />\n    </resultMap>\n\n\n    <select id=\"findByName\" parameterType=\"java.lang.String\"  resultMap=\"userResultMap\">\n        select  uid, name, age, address, created_time\n        from  user\n        where name = #{name}\n    </select>\n    \n    <insert id=\"insertUser\" parameterType=\"com.salamander.springbootdemo.entity.User\">\n        insert into user(name, age, address, created_time) VALUES (\n        #{name}, #{age}, #{address}, #{createdDatetime}\n        )\n    </insert>\n</mapper>\n```\n\n## 调用Dao类\n`HomeController.java`类\n```\n@RestController\npublic class HomeController {\n    @Resource\n    private UserDao userDao;\n\n\n    @RequestMapping(\"/\")\n    public String index() {\n        return \"Hello World!\";\n    }\n\n\n    @RequestMapping(\"/user/{username}\")\n    @ResponseBody\n    public User getUser(@PathVariable(name = \"username\") String name) {\n        return userDao.findByName(name);\n    }\n    \n    @RequestMapping(\"/user/add/{username}\")\n    @ResponseBody\n    public String addUser(@PathVariable(name = \"username\") String name) {\n        User user = new User();\n        user.setName(name);\n        user.setAge(20);\n        user.setCreatedDatetime(new Date());\n        userDao.insertUser(user);\n        return \"insert succesfully\";\n    }\n}\n```\n好了，访问链接`http://localhost:8080/user/wang`，就会输出`wang`这个用户的数据，而访问`http://localhost:8080/user/add/zhao`,会添加一条name为`zhao`的数据到数据库。\n\n\n## 事务支持\n\n在SpringBoot中开启事务非常简单，只需在业务层添加事务注解(`@Transactional`)即可快速开启事务。好的，让我们来尝试一下。   \n在上面的使用中，我们是直接把`Dao`类在控制层中使用的，但一般情况下，我们是在业务层中使用`Dao`类的。  \n在`com.salamander.springbootdemo`下新建`Service`的package，之后创建`接口`UserService：\n```\npackage com.salamander.springbootdemo.service;\n\npublic interface UserService {\n    void addUsers(String name) throws Exception;\n}\n```\n之后在`impl`的子package中添加实现类`UserServiceImpl`：\n```\n\npackage com.salamander.springbootdemo.service.impl;\n\nimport com.salamander.springbootdemo.dao.UserDao;\nimport com.salamander.springbootdemo.entity.User;\nimport com.salamander.springbootdemo.service.UserService;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.util.Date;\n\n@Service\npublic class UserServiceImpl implements UserService {\n    @Resource\n    private UserDao userDao;\n\n\n    @Transactional\n    @Override\n    public void addUsers(String name) throws Exception {\n        int num = 5;\n        for (int i = 0; i < num; i++) {\n            User user = getNewUser(name + (i + 1));\n            userDao.insertUser(user);\n            if (i == 3) {\n                throw new Exception(\"发生内部错误了\");\n            }\n        }\n    }\n\n    private User getNewUser(String name) {\n        User user = new User();\n        user.setName(name);\n        user.setAge(20);\n        user.setCreatedDatetime(new Date());\n        return user;\n    }\n}\n```\n然后我们在`HomeController`中注入`UserService`，并添加路由\n```\n@Resource\nprivate UserService userService;\n\n@RequestMapping(\"/users/add/{username}\")\n@ResponseBody\npublic String addUsers(@PathVariable(name = \"username\") String name) {\n    try {\n        userService.addUsers(name);\n        return \"batch insert succesfully\";\n    } catch (Exception e) {\n        return e.getMessage();\n    }\n}\n\n```\n\n可以看到，我们在`addUsers`方法上添加了`@Transactional`注解开启了事务，并在插入第4条数据后抛出了异常。好了，让我们访问链接`http://localhost:8080/users/add/sun`，我们发现数据库多出了四条`name`为`sun`的数据，**回滚并没有起效果**  \n![](https://s2.ax1x.com/2019/11/03/KXiGOe.png)\n\n这是一个常见的坑点，因为`Spring`的默认的事务规则是遇到**运行异常**（`RuntimeException`及其子类）和程序错误（Error）才会进行事务回滚，而`Exception`是基类就不行了，让我们看下Java的异常类层次图  \n![](https://s2.ax1x.com/2019/11/03/KXkgGq.jpg)\n如果想针对检测异常进行事务回滚，可以在`@Transactional`注解里使用\n`rollbackFor`属性明确指定异常（或者你可以自己定义一个继承`RuntimeException`的类，然后抛出这个类）。  \n现在`addUsers`改成这样，就可以正常回滚了：\n```\n@Transactional(rollbackFor = Exception.class)\n@Override\npublic void addUsers(String name) throws Exception {\n    int num = 5;\n    for (int i = 0; i < num; i++) {\n        User user = getNewUser(name + (i + 1));\n        userDao.insertUser(user);\n        if (i == 3) {\n            throw new Exception(\"发生内部错误了\");\n        }\n    }\n}\n```\n\n\n项目代码[下载](http://file.51lucy.com/SpringBootDemo.zip)","source":"_posts/Spring-Boot集成MyBatis操作MySQL.md","raw":"title: Spring Boot集成MyBatis操作MySQL\nauthor: Salamander\ntags:\n  - Spring\n  - Spring Boot\n  - MyBatis\ncategories:\n  - Java\ndate: 2019-10-27 19:05:00\n---\n最近学习了一下Spring Boot，它确实做到了简单快速创建Java Web应用。这是一篇简单的笔记，记录了Spring Boot集成MyBatis，实现基本的CURD。\n\n## MyBatis集成方式\n* 注解版集成\n* XML版本集成\n\nXML版本为老式的配置集成方式，重度集成XML文件，SQL语句也是全部写在XML中的，我以前配SSM（Spring+SpringMVC+MyBatis）用的就是这种方式；注解版版本，相对来说比较简约，不需要XML配置，只需要使用注解和代码来操作数据，本文这里不作介绍（其实挺好学的，^_^）。 \n\n\n\n<!-- more -->\n\n## 准备\n启动MySQL服务  \n创建数据库`spring_db`\n```\nCREATE DATABASE spring_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n```\n\n创建`user`表\n```\ncreate table user\n(\n\tuid int(11) unsigned auto_increment comment '主键Id'\n\t\tprimary key,\n\tname varchar(255) null comment '名称',\n\tage int null comment '年龄',\n\taddress varchar(255) null comment '地址',\n\tcreated_time datetime null comment '创建时间',\n\tupdated_time datetime null comment '更新时间'\n)\ncomment '用户表' collate=utf8_general_ci;\n```\n\n\n## 添加依赖\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.41</version>\n</dependency>\n\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.25</version>\n</dependency>\n```\n\n## 配置数据库连接\n设置application.properties文件，添加如下配置\n```\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/spring_db?useUnicode=true&characterEncoding=UTF-8\nspring.datasource.username=root\nspring.datasource.password=2LCqvSOJ6m0Ut6ui\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n* spring.datasource.url 数据库连接字符串\n* spring.datasource.username 数据库用户名\n* spring.datasource.password 数据库密码\n* spring.datasource.driver-class-name 驱动类型（注意MySQL 8.0的值是com.mysql.cj.jdbc.Driver和之前不同）\n\n## 设置 MapperScan 包路径\n直接在启动文件SpringbootApplication.java的类上配置@MapperScan，这样就可以省去，单独给每个Mapper（就是我们这里的dao层）上标识@Mapper的麻烦。\n```\n@SpringBootApplication\n@MapperScan(\"com.salamander.springbootdemo.dao\")\npublic class SpringbootdemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootdemoApplication.class, args);\n    }\n}\n```\n\n## 添加Entity和Dao层类\n`com.salamander.springbootdemo.entity`下`User`类（使用了lombok的@Data注解）：\n```\n@Data\npublic class User implements Serializable {\n    private Long id;\n\n    private String name;\n\n    private String address;\n\n    private int age;\n\n    private Date createdDatetime;\n}\n```\n`com.salamander.springbootdemo.dao`下`UserDao`接口：\n```\npublic interface UserDao {\n    User findByName(String name);\n    \n    int insertUser(User user);\n}\n```\n\n### XML方式MyBatis 集成\n修改application.properties，添加配置\n```\nmybatis.config-locations=classpath:mybatis/mybatis-config.xml\nmybatis.mapper-locations=classpath:mybatis/mapper/*.xml\n```\n* mybatis.config-locations 配置MyBatis基础属性\n* mybatis.mapper-locations 配置Mapper XML文件\n\n## 配置XML文件\n本例创建两个xml文件，在resource/mybatis下的mybatis-config.xml（配置MyBatis基础属性）和在resource/mybatis/mapper下的UserMapper.xml（用户和数据交互的SQL语句）。\n`mybatis-config.xml`\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\n<configuration>\n    <typeAliases>\n        <typeAlias alias=\"Integer\" type=\"java.lang.Integer\"/>\n        <typeAlias alias=\"Long\" type=\"java.lang.Long\"/>\n        <typeAlias alias=\"HashMap\" type=\"java.util.HashMap\"/>\n        <typeAlias alias=\"LinkedHashMap\" type=\"java.util.LinkedHashMap\"/>\n        <typeAlias alias=\"ArrayList\" type=\"java.util.ArrayList\"/>\n        <typeAlias alias=\"LinkedList\" type=\"java.util.LinkedList\"/>\n    </typeAliases>\n</configuration>\n```\n\n`UserMapper.xml`\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace是命名空间，是dao接口的全路径-->\n<mapper namespace=\"com.salamander.springbootdemo.dao.UserDao\">\n    <resultMap id=\"userResultMap\" type=\"com.salamander.springbootdemo.entity.User\">\n        <id property=\"id\" column=\"uid\"></id>\n        <result column=\"name\" property=\"name\" />\n        <result column=\"age\" property=\"age\" />\n        <result column=\"address\" property=\"address\" />\n        <result column=\"created_time\" property=\"createdDatetime\" />\n    </resultMap>\n\n\n    <select id=\"findByName\" parameterType=\"java.lang.String\"  resultMap=\"userResultMap\">\n        select  uid, name, age, address, created_time\n        from  user\n        where name = #{name}\n    </select>\n    \n    <insert id=\"insertUser\" parameterType=\"com.salamander.springbootdemo.entity.User\">\n        insert into user(name, age, address, created_time) VALUES (\n        #{name}, #{age}, #{address}, #{createdDatetime}\n        )\n    </insert>\n</mapper>\n```\n\n## 调用Dao类\n`HomeController.java`类\n```\n@RestController\npublic class HomeController {\n    @Resource\n    private UserDao userDao;\n\n\n    @RequestMapping(\"/\")\n    public String index() {\n        return \"Hello World!\";\n    }\n\n\n    @RequestMapping(\"/user/{username}\")\n    @ResponseBody\n    public User getUser(@PathVariable(name = \"username\") String name) {\n        return userDao.findByName(name);\n    }\n    \n    @RequestMapping(\"/user/add/{username}\")\n    @ResponseBody\n    public String addUser(@PathVariable(name = \"username\") String name) {\n        User user = new User();\n        user.setName(name);\n        user.setAge(20);\n        user.setCreatedDatetime(new Date());\n        userDao.insertUser(user);\n        return \"insert succesfully\";\n    }\n}\n```\n好了，访问链接`http://localhost:8080/user/wang`，就会输出`wang`这个用户的数据，而访问`http://localhost:8080/user/add/zhao`,会添加一条name为`zhao`的数据到数据库。\n\n\n## 事务支持\n\n在SpringBoot中开启事务非常简单，只需在业务层添加事务注解(`@Transactional`)即可快速开启事务。好的，让我们来尝试一下。   \n在上面的使用中，我们是直接把`Dao`类在控制层中使用的，但一般情况下，我们是在业务层中使用`Dao`类的。  \n在`com.salamander.springbootdemo`下新建`Service`的package，之后创建`接口`UserService：\n```\npackage com.salamander.springbootdemo.service;\n\npublic interface UserService {\n    void addUsers(String name) throws Exception;\n}\n```\n之后在`impl`的子package中添加实现类`UserServiceImpl`：\n```\n\npackage com.salamander.springbootdemo.service.impl;\n\nimport com.salamander.springbootdemo.dao.UserDao;\nimport com.salamander.springbootdemo.entity.User;\nimport com.salamander.springbootdemo.service.UserService;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.util.Date;\n\n@Service\npublic class UserServiceImpl implements UserService {\n    @Resource\n    private UserDao userDao;\n\n\n    @Transactional\n    @Override\n    public void addUsers(String name) throws Exception {\n        int num = 5;\n        for (int i = 0; i < num; i++) {\n            User user = getNewUser(name + (i + 1));\n            userDao.insertUser(user);\n            if (i == 3) {\n                throw new Exception(\"发生内部错误了\");\n            }\n        }\n    }\n\n    private User getNewUser(String name) {\n        User user = new User();\n        user.setName(name);\n        user.setAge(20);\n        user.setCreatedDatetime(new Date());\n        return user;\n    }\n}\n```\n然后我们在`HomeController`中注入`UserService`，并添加路由\n```\n@Resource\nprivate UserService userService;\n\n@RequestMapping(\"/users/add/{username}\")\n@ResponseBody\npublic String addUsers(@PathVariable(name = \"username\") String name) {\n    try {\n        userService.addUsers(name);\n        return \"batch insert succesfully\";\n    } catch (Exception e) {\n        return e.getMessage();\n    }\n}\n\n```\n\n可以看到，我们在`addUsers`方法上添加了`@Transactional`注解开启了事务，并在插入第4条数据后抛出了异常。好了，让我们访问链接`http://localhost:8080/users/add/sun`，我们发现数据库多出了四条`name`为`sun`的数据，**回滚并没有起效果**  \n![](https://s2.ax1x.com/2019/11/03/KXiGOe.png)\n\n这是一个常见的坑点，因为`Spring`的默认的事务规则是遇到**运行异常**（`RuntimeException`及其子类）和程序错误（Error）才会进行事务回滚，而`Exception`是基类就不行了，让我们看下Java的异常类层次图  \n![](https://s2.ax1x.com/2019/11/03/KXkgGq.jpg)\n如果想针对检测异常进行事务回滚，可以在`@Transactional`注解里使用\n`rollbackFor`属性明确指定异常（或者你可以自己定义一个继承`RuntimeException`的类，然后抛出这个类）。  \n现在`addUsers`改成这样，就可以正常回滚了：\n```\n@Transactional(rollbackFor = Exception.class)\n@Override\npublic void addUsers(String name) throws Exception {\n    int num = 5;\n    for (int i = 0; i < num; i++) {\n        User user = getNewUser(name + (i + 1));\n        userDao.insertUser(user);\n        if (i == 3) {\n            throw new Exception(\"发生内部错误了\");\n        }\n    }\n}\n```\n\n\n项目代码[下载](http://file.51lucy.com/SpringBootDemo.zip)","slug":"Spring-Boot集成MyBatis操作MySQL","published":1,"updated":"2019-11-03T05:58:24.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck470mea50005u8ztppywsuqg","content":"<p>最近学习了一下Spring Boot，它确实做到了简单快速创建Java Web应用。这是一篇简单的笔记，记录了Spring Boot集成MyBatis，实现基本的CURD。</p>\n<h2 id=\"MyBatis集成方式\"><a href=\"#MyBatis集成方式\" class=\"headerlink\" title=\"MyBatis集成方式\"></a>MyBatis集成方式</h2><ul>\n<li>注解版集成</li>\n<li>XML版本集成</li>\n</ul>\n<p>XML版本为老式的配置集成方式，重度集成XML文件，SQL语句也是全部写在XML中的，我以前配SSM（Spring+SpringMVC+MyBatis）用的就是这种方式；注解版版本，相对来说比较简约，不需要XML配置，只需要使用注解和代码来操作数据，本文这里不作介绍（其实挺好学的，^_^）。 </p>\n<a id=\"more\"></a>\n\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>启动MySQL服务<br>创建数据库<code>spring_db</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE spring_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>user</code>表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table user</span><br><span class=\"line\">(</span><br><span class=\"line\">\tuid int(11) unsigned auto_increment comment &apos;主键Id&apos;</span><br><span class=\"line\">\t\tprimary key,</span><br><span class=\"line\">\tname varchar(255) null comment &apos;名称&apos;,</span><br><span class=\"line\">\tage int null comment &apos;年龄&apos;,</span><br><span class=\"line\">\taddress varchar(255) null comment &apos;地址&apos;,</span><br><span class=\"line\">\tcreated_time datetime null comment &apos;创建时间&apos;,</span><br><span class=\"line\">\tupdated_time datetime null comment &apos;更新时间&apos;</span><br><span class=\"line\">)</span><br><span class=\"line\">comment &apos;用户表&apos; collate=utf8_general_ci;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.1.41&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.25&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置数据库连接\"><a href=\"#配置数据库连接\" class=\"headerlink\" title=\"配置数据库连接\"></a>配置数据库连接</h2><p>设置application.properties文件，添加如下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/spring_db?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">spring.datasource.username=root</span><br><span class=\"line\">spring.datasource.password=2LCqvSOJ6m0Ut6ui</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>spring.datasource.url 数据库连接字符串</li>\n<li>spring.datasource.username 数据库用户名</li>\n<li>spring.datasource.password 数据库密码</li>\n<li>spring.datasource.driver-class-name 驱动类型（注意MySQL 8.0的值是com.mysql.cj.jdbc.Driver和之前不同）</li>\n</ul>\n<h2 id=\"设置-MapperScan-包路径\"><a href=\"#设置-MapperScan-包路径\" class=\"headerlink\" title=\"设置 MapperScan 包路径\"></a>设置 MapperScan 包路径</h2><p>直接在启动文件SpringbootApplication.java的类上配置@MapperScan，这样就可以省去，单独给每个Mapper（就是我们这里的dao层）上标识@Mapper的麻烦。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@MapperScan(&quot;com.salamander.springbootdemo.dao&quot;)</span><br><span class=\"line\">public class SpringbootdemoApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringbootdemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加Entity和Dao层类\"><a href=\"#添加Entity和Dao层类\" class=\"headerlink\" title=\"添加Entity和Dao层类\"></a>添加Entity和Dao层类</h2><p><code>com.salamander.springbootdemo.entity</code>下<code>User</code>类（使用了lombok的@Data注解）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Data</span><br><span class=\"line\">public class User implements Serializable &#123;</span><br><span class=\"line\">    private Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Date createdDatetime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>com.salamander.springbootdemo.dao</code>下<code>UserDao</code>接口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface UserDao &#123;</span><br><span class=\"line\">    User findByName(String name);</span><br><span class=\"line\">    </span><br><span class=\"line\">    int insertUser(User user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"XML方式MyBatis-集成\"><a href=\"#XML方式MyBatis-集成\" class=\"headerlink\" title=\"XML方式MyBatis 集成\"></a>XML方式MyBatis 集成</h3><p>修改application.properties，添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybatis.config-locations=classpath:mybatis/mybatis-config.xml</span><br><span class=\"line\">mybatis.mapper-locations=classpath:mybatis/mapper/*.xml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mybatis.config-locations 配置MyBatis基础属性</li>\n<li>mybatis.mapper-locations 配置Mapper XML文件</li>\n</ul>\n<h2 id=\"配置XML文件\"><a href=\"#配置XML文件\" class=\"headerlink\" title=\"配置XML文件\"></a>配置XML文件</h2><p>本例创建两个xml文件，在resource/mybatis下的mybatis-config.xml（配置MyBatis基础属性）和在resource/mybatis/mapper下的UserMapper.xml（用户和数据交互的SQL语句）。<br><code>mybatis-config.xml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;typeAliases&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;Integer&quot; type=&quot;java.lang.Integer&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;Long&quot; type=&quot;java.lang.Long&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;HashMap&quot; type=&quot;java.util.HashMap&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;LinkedHashMap&quot; type=&quot;java.util.LinkedHashMap&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;ArrayList&quot; type=&quot;java.util.ArrayList&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;LinkedList&quot; type=&quot;java.util.LinkedList&quot;/&gt;</span><br><span class=\"line\">    &lt;/typeAliases&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>UserMapper.xml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--namespace是命名空间，是dao接口的全路径--&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;com.salamander.springbootdemo.dao.UserDao&quot;&gt;</span><br><span class=\"line\">    &lt;resultMap id=&quot;userResultMap&quot; type=&quot;com.salamander.springbootdemo.entity.User&quot;&gt;</span><br><span class=\"line\">        &lt;id property=&quot;id&quot; column=&quot;uid&quot;&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result column=&quot;name&quot; property=&quot;name&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;age&quot; property=&quot;age&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;created_time&quot; property=&quot;createdDatetime&quot; /&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;select id=&quot;findByName&quot; parameterType=&quot;java.lang.String&quot;  resultMap=&quot;userResultMap&quot;&gt;</span><br><span class=\"line\">        select  uid, name, age, address, created_time</span><br><span class=\"line\">        from  user</span><br><span class=\"line\">        where name = #&#123;name&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.salamander.springbootdemo.entity.User&quot;&gt;</span><br><span class=\"line\">        insert into user(name, age, address, created_time) VALUES (</span><br><span class=\"line\">        #&#123;name&#125;, #&#123;age&#125;, #&#123;address&#125;, #&#123;createdDatetime&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &lt;/insert&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用Dao类\"><a href=\"#调用Dao类\" class=\"headerlink\" title=\"调用Dao类\"></a>调用Dao类</h2><p><code>HomeController.java</code>类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HomeController &#123;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    public String index() &#123;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/user/&#123;username&#125;&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public User getUser(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">        return userDao.findByName(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/user/add/&#123;username&#125;&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String addUser(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">        User user = new User();</span><br><span class=\"line\">        user.setName(name);</span><br><span class=\"line\">        user.setAge(20);</span><br><span class=\"line\">        user.setCreatedDatetime(new Date());</span><br><span class=\"line\">        userDao.insertUser(user);</span><br><span class=\"line\">        return &quot;insert succesfully&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，访问链接<code>http://localhost:8080/user/wang</code>，就会输出<code>wang</code>这个用户的数据，而访问<code>http://localhost:8080/user/add/zhao</code>,会添加一条name为<code>zhao</code>的数据到数据库。</p>\n<h2 id=\"事务支持\"><a href=\"#事务支持\" class=\"headerlink\" title=\"事务支持\"></a>事务支持</h2><p>在SpringBoot中开启事务非常简单，只需在业务层添加事务注解(<code>@Transactional</code>)即可快速开启事务。好的，让我们来尝试一下。<br>在上面的使用中，我们是直接把<code>Dao</code>类在控制层中使用的，但一般情况下，我们是在业务层中使用<code>Dao</code>类的。<br>在<code>com.salamander.springbootdemo</code>下新建<code>Service</code>的package，之后创建<code>接口</code>UserService：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.salamander.springbootdemo.service;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserService &#123;</span><br><span class=\"line\">    void addUsers(String name) throws Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后在<code>impl</code>的子package中添加实现类<code>UserServiceImpl</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.salamander.springbootdemo.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.salamander.springbootdemo.dao.UserDao;</span><br><span class=\"line\">import com.salamander.springbootdemo.entity.User;</span><br><span class=\"line\">import com.salamander.springbootdemo.service.UserService;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.annotation.Resource;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Transactional</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addUsers(String name) throws Exception &#123;</span><br><span class=\"line\">        int num = 5;</span><br><span class=\"line\">        for (int i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">            User user = getNewUser(name + (i + 1));</span><br><span class=\"line\">            userDao.insertUser(user);</span><br><span class=\"line\">            if (i == 3) &#123;</span><br><span class=\"line\">                throw new Exception(&quot;发生内部错误了&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private User getNewUser(String name) &#123;</span><br><span class=\"line\">        User user = new User();</span><br><span class=\"line\">        user.setName(name);</span><br><span class=\"line\">        user.setAge(20);</span><br><span class=\"line\">        user.setCreatedDatetime(new Date());</span><br><span class=\"line\">        return user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们在<code>HomeController</code>中注入<code>UserService</code>，并添加路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Resource</span><br><span class=\"line\">private UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">@RequestMapping(&quot;/users/add/&#123;username&#125;&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public String addUsers(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        userService.addUsers(name);</span><br><span class=\"line\">        return &quot;batch insert succesfully&quot;;</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        return e.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，我们在<code>addUsers</code>方法上添加了<code>@Transactional</code>注解开启了事务，并在插入第4条数据后抛出了异常。好了，让我们访问链接<code>http://localhost:8080/users/add/sun</code>，我们发现数据库多出了四条<code>name</code>为<code>sun</code>的数据，<strong>回滚并没有起效果</strong><br><img src=\"https://s2.ax1x.com/2019/11/03/KXiGOe.png\" alt></p>\n<p>这是一个常见的坑点，因为<code>Spring</code>的默认的事务规则是遇到<strong>运行异常</strong>（<code>RuntimeException</code>及其子类）和程序错误（Error）才会进行事务回滚，而<code>Exception</code>是基类就不行了，让我们看下Java的异常类层次图<br><img src=\"https://s2.ax1x.com/2019/11/03/KXkgGq.jpg\" alt><br>如果想针对检测异常进行事务回滚，可以在<code>@Transactional</code>注解里使用<br><code>rollbackFor</code>属性明确指定异常（或者你可以自己定义一个继承<code>RuntimeException</code>的类，然后抛出这个类）。<br>现在<code>addUsers</code>改成这样，就可以正常回滚了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(rollbackFor = Exception.class)</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void addUsers(String name) throws Exception &#123;</span><br><span class=\"line\">    int num = 5;</span><br><span class=\"line\">    for (int i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">        User user = getNewUser(name + (i + 1));</span><br><span class=\"line\">        userDao.insertUser(user);</span><br><span class=\"line\">        if (i == 3) &#123;</span><br><span class=\"line\">            throw new Exception(&quot;发生内部错误了&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>项目代码<a href=\"http://file.51lucy.com/SpringBootDemo.zip\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n","site":{"data":{}},"excerpt":"<p>最近学习了一下Spring Boot，它确实做到了简单快速创建Java Web应用。这是一篇简单的笔记，记录了Spring Boot集成MyBatis，实现基本的CURD。</p>\n<h2 id=\"MyBatis集成方式\"><a href=\"#MyBatis集成方式\" class=\"headerlink\" title=\"MyBatis集成方式\"></a>MyBatis集成方式</h2><ul>\n<li>注解版集成</li>\n<li>XML版本集成</li>\n</ul>\n<p>XML版本为老式的配置集成方式，重度集成XML文件，SQL语句也是全部写在XML中的，我以前配SSM（Spring+SpringMVC+MyBatis）用的就是这种方式；注解版版本，相对来说比较简约，不需要XML配置，只需要使用注解和代码来操作数据，本文这里不作介绍（其实挺好学的，^_^）。 </p>","more":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>启动MySQL服务<br>创建数据库<code>spring_db</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE spring_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>user</code>表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table user</span><br><span class=\"line\">(</span><br><span class=\"line\">\tuid int(11) unsigned auto_increment comment &apos;主键Id&apos;</span><br><span class=\"line\">\t\tprimary key,</span><br><span class=\"line\">\tname varchar(255) null comment &apos;名称&apos;,</span><br><span class=\"line\">\tage int null comment &apos;年龄&apos;,</span><br><span class=\"line\">\taddress varchar(255) null comment &apos;地址&apos;,</span><br><span class=\"line\">\tcreated_time datetime null comment &apos;创建时间&apos;,</span><br><span class=\"line\">\tupdated_time datetime null comment &apos;更新时间&apos;</span><br><span class=\"line\">)</span><br><span class=\"line\">comment &apos;用户表&apos; collate=utf8_general_ci;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.1.41&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.25&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置数据库连接\"><a href=\"#配置数据库连接\" class=\"headerlink\" title=\"配置数据库连接\"></a>配置数据库连接</h2><p>设置application.properties文件，添加如下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/spring_db?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">spring.datasource.username=root</span><br><span class=\"line\">spring.datasource.password=2LCqvSOJ6m0Ut6ui</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>spring.datasource.url 数据库连接字符串</li>\n<li>spring.datasource.username 数据库用户名</li>\n<li>spring.datasource.password 数据库密码</li>\n<li>spring.datasource.driver-class-name 驱动类型（注意MySQL 8.0的值是com.mysql.cj.jdbc.Driver和之前不同）</li>\n</ul>\n<h2 id=\"设置-MapperScan-包路径\"><a href=\"#设置-MapperScan-包路径\" class=\"headerlink\" title=\"设置 MapperScan 包路径\"></a>设置 MapperScan 包路径</h2><p>直接在启动文件SpringbootApplication.java的类上配置@MapperScan，这样就可以省去，单独给每个Mapper（就是我们这里的dao层）上标识@Mapper的麻烦。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@MapperScan(&quot;com.salamander.springbootdemo.dao&quot;)</span><br><span class=\"line\">public class SpringbootdemoApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringbootdemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加Entity和Dao层类\"><a href=\"#添加Entity和Dao层类\" class=\"headerlink\" title=\"添加Entity和Dao层类\"></a>添加Entity和Dao层类</h2><p><code>com.salamander.springbootdemo.entity</code>下<code>User</code>类（使用了lombok的@Data注解）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Data</span><br><span class=\"line\">public class User implements Serializable &#123;</span><br><span class=\"line\">    private Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Date createdDatetime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>com.salamander.springbootdemo.dao</code>下<code>UserDao</code>接口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface UserDao &#123;</span><br><span class=\"line\">    User findByName(String name);</span><br><span class=\"line\">    </span><br><span class=\"line\">    int insertUser(User user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"XML方式MyBatis-集成\"><a href=\"#XML方式MyBatis-集成\" class=\"headerlink\" title=\"XML方式MyBatis 集成\"></a>XML方式MyBatis 集成</h3><p>修改application.properties，添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybatis.config-locations=classpath:mybatis/mybatis-config.xml</span><br><span class=\"line\">mybatis.mapper-locations=classpath:mybatis/mapper/*.xml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mybatis.config-locations 配置MyBatis基础属性</li>\n<li>mybatis.mapper-locations 配置Mapper XML文件</li>\n</ul>\n<h2 id=\"配置XML文件\"><a href=\"#配置XML文件\" class=\"headerlink\" title=\"配置XML文件\"></a>配置XML文件</h2><p>本例创建两个xml文件，在resource/mybatis下的mybatis-config.xml（配置MyBatis基础属性）和在resource/mybatis/mapper下的UserMapper.xml（用户和数据交互的SQL语句）。<br><code>mybatis-config.xml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;typeAliases&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;Integer&quot; type=&quot;java.lang.Integer&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;Long&quot; type=&quot;java.lang.Long&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;HashMap&quot; type=&quot;java.util.HashMap&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;LinkedHashMap&quot; type=&quot;java.util.LinkedHashMap&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;ArrayList&quot; type=&quot;java.util.ArrayList&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;LinkedList&quot; type=&quot;java.util.LinkedList&quot;/&gt;</span><br><span class=\"line\">    &lt;/typeAliases&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>UserMapper.xml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--namespace是命名空间，是dao接口的全路径--&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;com.salamander.springbootdemo.dao.UserDao&quot;&gt;</span><br><span class=\"line\">    &lt;resultMap id=&quot;userResultMap&quot; type=&quot;com.salamander.springbootdemo.entity.User&quot;&gt;</span><br><span class=\"line\">        &lt;id property=&quot;id&quot; column=&quot;uid&quot;&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result column=&quot;name&quot; property=&quot;name&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;age&quot; property=&quot;age&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;created_time&quot; property=&quot;createdDatetime&quot; /&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;select id=&quot;findByName&quot; parameterType=&quot;java.lang.String&quot;  resultMap=&quot;userResultMap&quot;&gt;</span><br><span class=\"line\">        select  uid, name, age, address, created_time</span><br><span class=\"line\">        from  user</span><br><span class=\"line\">        where name = #&#123;name&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.salamander.springbootdemo.entity.User&quot;&gt;</span><br><span class=\"line\">        insert into user(name, age, address, created_time) VALUES (</span><br><span class=\"line\">        #&#123;name&#125;, #&#123;age&#125;, #&#123;address&#125;, #&#123;createdDatetime&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &lt;/insert&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用Dao类\"><a href=\"#调用Dao类\" class=\"headerlink\" title=\"调用Dao类\"></a>调用Dao类</h2><p><code>HomeController.java</code>类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HomeController &#123;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    public String index() &#123;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/user/&#123;username&#125;&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public User getUser(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">        return userDao.findByName(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/user/add/&#123;username&#125;&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String addUser(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">        User user = new User();</span><br><span class=\"line\">        user.setName(name);</span><br><span class=\"line\">        user.setAge(20);</span><br><span class=\"line\">        user.setCreatedDatetime(new Date());</span><br><span class=\"line\">        userDao.insertUser(user);</span><br><span class=\"line\">        return &quot;insert succesfully&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，访问链接<code>http://localhost:8080/user/wang</code>，就会输出<code>wang</code>这个用户的数据，而访问<code>http://localhost:8080/user/add/zhao</code>,会添加一条name为<code>zhao</code>的数据到数据库。</p>\n<h2 id=\"事务支持\"><a href=\"#事务支持\" class=\"headerlink\" title=\"事务支持\"></a>事务支持</h2><p>在SpringBoot中开启事务非常简单，只需在业务层添加事务注解(<code>@Transactional</code>)即可快速开启事务。好的，让我们来尝试一下。<br>在上面的使用中，我们是直接把<code>Dao</code>类在控制层中使用的，但一般情况下，我们是在业务层中使用<code>Dao</code>类的。<br>在<code>com.salamander.springbootdemo</code>下新建<code>Service</code>的package，之后创建<code>接口</code>UserService：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.salamander.springbootdemo.service;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserService &#123;</span><br><span class=\"line\">    void addUsers(String name) throws Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后在<code>impl</code>的子package中添加实现类<code>UserServiceImpl</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.salamander.springbootdemo.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.salamander.springbootdemo.dao.UserDao;</span><br><span class=\"line\">import com.salamander.springbootdemo.entity.User;</span><br><span class=\"line\">import com.salamander.springbootdemo.service.UserService;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.annotation.Resource;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Transactional</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addUsers(String name) throws Exception &#123;</span><br><span class=\"line\">        int num = 5;</span><br><span class=\"line\">        for (int i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">            User user = getNewUser(name + (i + 1));</span><br><span class=\"line\">            userDao.insertUser(user);</span><br><span class=\"line\">            if (i == 3) &#123;</span><br><span class=\"line\">                throw new Exception(&quot;发生内部错误了&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private User getNewUser(String name) &#123;</span><br><span class=\"line\">        User user = new User();</span><br><span class=\"line\">        user.setName(name);</span><br><span class=\"line\">        user.setAge(20);</span><br><span class=\"line\">        user.setCreatedDatetime(new Date());</span><br><span class=\"line\">        return user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们在<code>HomeController</code>中注入<code>UserService</code>，并添加路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Resource</span><br><span class=\"line\">private UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">@RequestMapping(&quot;/users/add/&#123;username&#125;&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public String addUsers(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        userService.addUsers(name);</span><br><span class=\"line\">        return &quot;batch insert succesfully&quot;;</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        return e.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，我们在<code>addUsers</code>方法上添加了<code>@Transactional</code>注解开启了事务，并在插入第4条数据后抛出了异常。好了，让我们访问链接<code>http://localhost:8080/users/add/sun</code>，我们发现数据库多出了四条<code>name</code>为<code>sun</code>的数据，<strong>回滚并没有起效果</strong><br><img src=\"https://s2.ax1x.com/2019/11/03/KXiGOe.png\" alt></p>\n<p>这是一个常见的坑点，因为<code>Spring</code>的默认的事务规则是遇到<strong>运行异常</strong>（<code>RuntimeException</code>及其子类）和程序错误（Error）才会进行事务回滚，而<code>Exception</code>是基类就不行了，让我们看下Java的异常类层次图<br><img src=\"https://s2.ax1x.com/2019/11/03/KXkgGq.jpg\" alt><br>如果想针对检测异常进行事务回滚，可以在<code>@Transactional</code>注解里使用<br><code>rollbackFor</code>属性明确指定异常（或者你可以自己定义一个继承<code>RuntimeException</code>的类，然后抛出这个类）。<br>现在<code>addUsers</code>改成这样，就可以正常回滚了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(rollbackFor = Exception.class)</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void addUsers(String name) throws Exception &#123;</span><br><span class=\"line\">    int num = 5;</span><br><span class=\"line\">    for (int i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">        User user = getNewUser(name + (i + 1));</span><br><span class=\"line\">        userDao.insertUser(user);</span><br><span class=\"line\">        if (i == 3) &#123;</span><br><span class=\"line\">            throw new Exception(&quot;发生内部错误了&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>项目代码<a href=\"http://file.51lucy.com/SpringBootDemo.zip\" target=\"_blank\" rel=\"noopener\">下载</a></p>"},{"title":"Arduino使用DHT11测量温湿度","author":"Salamander","date":"2019-08-30T02:37:00.000Z","_content":"## 概览\n这篇文章很简单（就是一点电工知识），就是利用[DHT11](https://baike.baidu.com/item/DHT11/1206271)温湿度传感器测量温湿度值，并把结果显示在[1602 LCD](https://baike.baidu.com/item/LCD1602/6014393)显示器上。\n\n<!-- more -->\n\n## 实验元器件列表\n| 元器件    | 型号          | 数量 | 备注 |\n|--------|-------------|----|----|\n| 主控板    | arduino Uno   | 1     |    |\n| 温湿度传感器 | DHT11      | 1   |     |\n| 液晶屏    | 1602 LCD      | 1     |    |\n| 电阻     | 1K电阻         | 4   |    |\n| 面包板    |               | 1     |    |\n| 面包板条线    |               | 若个   |    |\n| 数据线    | Uno数据线      | 1   |    |\n\n## 工具和元器件介绍\n### DHT11温湿度传感器\n![](https://s2.ax1x.com/2019/08/29/mLoDuF.png)\nDHT11 传感器接线方法并不复杂，DHT11封装有4个引脚，各个引脚说明如下：\n\n| Pin | 名称   | 注释             |\n|-----|------|----------------|\n| 1   | VDD  | 供电 3\\-5\\.5 VDC |\n| 2   | DATA | 串行数据，单总线       |\n| 3   | NC   | 空脚             |\n| 4   | GND  | 接地，电源负极        |\n\n### 1602 LCD\n![1602图片](https://s2.ax1x.com/2019/09/04/nE8k7R.jpg)\n\n1602字符型液晶，是一种专门用来显示字母、数字、符号等的点阵型液晶模块，能够同时显示16x02即32个字符。\n\n1602 LCD分为两种：带背光和不带背光，带背光的要后一些，引脚多2个，为16个引脚，如下：\n\n![](https://s2.ax1x.com/2019/08/29/mLTcqg.png)\n\n##### 引脚说明\n1602 LCD通常有14条引脚或16条引脚，14与16引脚的差别在于16条引脚多了背光电源线VCC(15脚)和地线GND(16脚)，其它引脚与14脚的LCD完全一样，如下：\n\n| 引脚 | 符号  | 功能说明                                                                   |\n|----|-----|------------------------------------------------------------------------|\n| 1  | VSS | 一般接地                                                                   |\n| 2  | VDD | 接电源（\\+5V）                                                              |\n| 3  | V0  | 液晶显示器对比度调整端，接正电源时对比度最弱，接地电源时对比度最高（对比度过高时会产生“鬼影”，使用时可以通过一个10K的电位器调整对比度） |\n| 4  | RS  | RS为寄存器选择，高电平1时选择数据寄存器、低电平0时选择指令寄存器                                     |\n| 5  | R/W | R/W为读写信号线，高电平\\(1\\)时进行读操作，低电平\\(0\\)时进行写操作                                |\n| 6  | E   | E\\(或EN\\)端为使能\\(enable\\)端，写操作时，下降沿使能；读操作时，E高电平有效                         |\n| 7  | DB0 | 低4位三态、 双向数据总线 0位（最低位）                                                  |\n| 8  | DB1 | 高4位三态、 双向数据总线 1位                                                       |\n| 9  | DB2 | 高4位三态、 双向数据总线 2位                                                       |\n| 10 | DB3 | 高4位三态、 双向数据总线 3位                                                       |\n| 11 | DB4 | 高4位三态、 双向数据总线 4位                                                       |\n| 12 | DB5 | 高4位三态、 双向数据总线 5位                                                       |\n| 13 | DB6 | 高4位三态、 双向数据总线 6位                                                       |\n| 14 | DB7 | 高4位三态、 双向数据总线 7位（busy flag）                                            |\n| 15 | BLA | 背光电源正极                                                                 |\n| 16 | BLK | 背光电源负极                                                                 |","source":"_posts/arduino_DTH11.md","raw":"title: Arduino使用DHT11测量温湿度\nauthor: Salamander\ntags:\n  - arduino\n  - 传感器\ncategories:\n  - 单片机\ndate: 2019-08-30 10:37:00\n---\n## 概览\n这篇文章很简单（就是一点电工知识），就是利用[DHT11](https://baike.baidu.com/item/DHT11/1206271)温湿度传感器测量温湿度值，并把结果显示在[1602 LCD](https://baike.baidu.com/item/LCD1602/6014393)显示器上。\n\n<!-- more -->\n\n## 实验元器件列表\n| 元器件    | 型号          | 数量 | 备注 |\n|--------|-------------|----|----|\n| 主控板    | arduino Uno   | 1     |    |\n| 温湿度传感器 | DHT11      | 1   |     |\n| 液晶屏    | 1602 LCD      | 1     |    |\n| 电阻     | 1K电阻         | 4   |    |\n| 面包板    |               | 1     |    |\n| 面包板条线    |               | 若个   |    |\n| 数据线    | Uno数据线      | 1   |    |\n\n## 工具和元器件介绍\n### DHT11温湿度传感器\n![](https://s2.ax1x.com/2019/08/29/mLoDuF.png)\nDHT11 传感器接线方法并不复杂，DHT11封装有4个引脚，各个引脚说明如下：\n\n| Pin | 名称   | 注释             |\n|-----|------|----------------|\n| 1   | VDD  | 供电 3\\-5\\.5 VDC |\n| 2   | DATA | 串行数据，单总线       |\n| 3   | NC   | 空脚             |\n| 4   | GND  | 接地，电源负极        |\n\n### 1602 LCD\n![1602图片](https://s2.ax1x.com/2019/09/04/nE8k7R.jpg)\n\n1602字符型液晶，是一种专门用来显示字母、数字、符号等的点阵型液晶模块，能够同时显示16x02即32个字符。\n\n1602 LCD分为两种：带背光和不带背光，带背光的要后一些，引脚多2个，为16个引脚，如下：\n\n![](https://s2.ax1x.com/2019/08/29/mLTcqg.png)\n\n##### 引脚说明\n1602 LCD通常有14条引脚或16条引脚，14与16引脚的差别在于16条引脚多了背光电源线VCC(15脚)和地线GND(16脚)，其它引脚与14脚的LCD完全一样，如下：\n\n| 引脚 | 符号  | 功能说明                                                                   |\n|----|-----|------------------------------------------------------------------------|\n| 1  | VSS | 一般接地                                                                   |\n| 2  | VDD | 接电源（\\+5V）                                                              |\n| 3  | V0  | 液晶显示器对比度调整端，接正电源时对比度最弱，接地电源时对比度最高（对比度过高时会产生“鬼影”，使用时可以通过一个10K的电位器调整对比度） |\n| 4  | RS  | RS为寄存器选择，高电平1时选择数据寄存器、低电平0时选择指令寄存器                                     |\n| 5  | R/W | R/W为读写信号线，高电平\\(1\\)时进行读操作，低电平\\(0\\)时进行写操作                                |\n| 6  | E   | E\\(或EN\\)端为使能\\(enable\\)端，写操作时，下降沿使能；读操作时，E高电平有效                         |\n| 7  | DB0 | 低4位三态、 双向数据总线 0位（最低位）                                                  |\n| 8  | DB1 | 高4位三态、 双向数据总线 1位                                                       |\n| 9  | DB2 | 高4位三态、 双向数据总线 2位                                                       |\n| 10 | DB3 | 高4位三态、 双向数据总线 3位                                                       |\n| 11 | DB4 | 高4位三态、 双向数据总线 4位                                                       |\n| 12 | DB5 | 高4位三态、 双向数据总线 5位                                                       |\n| 13 | DB6 | 高4位三态、 双向数据总线 6位                                                       |\n| 14 | DB7 | 高4位三态、 双向数据总线 7位（busy flag）                                            |\n| 15 | BLA | 背光电源正极                                                                 |\n| 16 | BLK | 背光电源负极                                                                 |","slug":"arduino_DTH11","published":1,"updated":"2019-10-28T13:18:20.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck470mea60006u8ztlyfjqw23","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>这篇文章很简单（就是一点电工知识），就是利用<a href=\"https://baike.baidu.com/item/DHT11/1206271\" target=\"_blank\" rel=\"noopener\">DHT11</a>温湿度传感器测量温湿度值，并把结果显示在<a href=\"https://baike.baidu.com/item/LCD1602/6014393\" target=\"_blank\" rel=\"noopener\">1602 LCD</a>显示器上。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"实验元器件列表\"><a href=\"#实验元器件列表\" class=\"headerlink\" title=\"实验元器件列表\"></a>实验元器件列表</h2><table>\n<thead>\n<tr>\n<th>元器件</th>\n<th>型号</th>\n<th>数量</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主控板</td>\n<td>arduino Uno</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>温湿度传感器</td>\n<td>DHT11</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>液晶屏</td>\n<td>1602 LCD</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>电阻</td>\n<td>1K电阻</td>\n<td>4</td>\n<td></td>\n</tr>\n<tr>\n<td>面包板</td>\n<td></td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>面包板条线</td>\n<td></td>\n<td>若个</td>\n<td></td>\n</tr>\n<tr>\n<td>数据线</td>\n<td>Uno数据线</td>\n<td>1</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"工具和元器件介绍\"><a href=\"#工具和元器件介绍\" class=\"headerlink\" title=\"工具和元器件介绍\"></a>工具和元器件介绍</h2><h3 id=\"DHT11温湿度传感器\"><a href=\"#DHT11温湿度传感器\" class=\"headerlink\" title=\"DHT11温湿度传感器\"></a>DHT11温湿度传感器</h3><p><img src=\"https://s2.ax1x.com/2019/08/29/mLoDuF.png\" alt><br>DHT11 传感器接线方法并不复杂，DHT11封装有4个引脚，各个引脚说明如下：</p>\n<table>\n<thead>\n<tr>\n<th>Pin</th>\n<th>名称</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>VDD</td>\n<td>供电 3-5.5 VDC</td>\n</tr>\n<tr>\n<td>2</td>\n<td>DATA</td>\n<td>串行数据，单总线</td>\n</tr>\n<tr>\n<td>3</td>\n<td>NC</td>\n<td>空脚</td>\n</tr>\n<tr>\n<td>4</td>\n<td>GND</td>\n<td>接地，电源负极</td>\n</tr>\n</tbody></table>\n<h3 id=\"1602-LCD\"><a href=\"#1602-LCD\" class=\"headerlink\" title=\"1602 LCD\"></a>1602 LCD</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nE8k7R.jpg\" alt=\"1602图片\"></p>\n<p>1602字符型液晶，是一种专门用来显示字母、数字、符号等的点阵型液晶模块，能够同时显示16x02即32个字符。</p>\n<p>1602 LCD分为两种：带背光和不带背光，带背光的要后一些，引脚多2个，为16个引脚，如下：</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/29/mLTcqg.png\" alt></p>\n<h5 id=\"引脚说明\"><a href=\"#引脚说明\" class=\"headerlink\" title=\"引脚说明\"></a>引脚说明</h5><p>1602 LCD通常有14条引脚或16条引脚，14与16引脚的差别在于16条引脚多了背光电源线VCC(15脚)和地线GND(16脚)，其它引脚与14脚的LCD完全一样，如下：</p>\n<table>\n<thead>\n<tr>\n<th>引脚</th>\n<th>符号</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>VSS</td>\n<td>一般接地</td>\n</tr>\n<tr>\n<td>2</td>\n<td>VDD</td>\n<td>接电源（+5V）</td>\n</tr>\n<tr>\n<td>3</td>\n<td>V0</td>\n<td>液晶显示器对比度调整端，接正电源时对比度最弱，接地电源时对比度最高（对比度过高时会产生“鬼影”，使用时可以通过一个10K的电位器调整对比度）</td>\n</tr>\n<tr>\n<td>4</td>\n<td>RS</td>\n<td>RS为寄存器选择，高电平1时选择数据寄存器、低电平0时选择指令寄存器</td>\n</tr>\n<tr>\n<td>5</td>\n<td>R/W</td>\n<td>R/W为读写信号线，高电平(1)时进行读操作，低电平(0)时进行写操作</td>\n</tr>\n<tr>\n<td>6</td>\n<td>E</td>\n<td>E(或EN)端为使能(enable)端，写操作时，下降沿使能；读操作时，E高电平有效</td>\n</tr>\n<tr>\n<td>7</td>\n<td>DB0</td>\n<td>低4位三态、 双向数据总线 0位（最低位）</td>\n</tr>\n<tr>\n<td>8</td>\n<td>DB1</td>\n<td>高4位三态、 双向数据总线 1位</td>\n</tr>\n<tr>\n<td>9</td>\n<td>DB2</td>\n<td>高4位三态、 双向数据总线 2位</td>\n</tr>\n<tr>\n<td>10</td>\n<td>DB3</td>\n<td>高4位三态、 双向数据总线 3位</td>\n</tr>\n<tr>\n<td>11</td>\n<td>DB4</td>\n<td>高4位三态、 双向数据总线 4位</td>\n</tr>\n<tr>\n<td>12</td>\n<td>DB5</td>\n<td>高4位三态、 双向数据总线 5位</td>\n</tr>\n<tr>\n<td>13</td>\n<td>DB6</td>\n<td>高4位三态、 双向数据总线 6位</td>\n</tr>\n<tr>\n<td>14</td>\n<td>DB7</td>\n<td>高4位三态、 双向数据总线 7位（busy flag）</td>\n</tr>\n<tr>\n<td>15</td>\n<td>BLA</td>\n<td>背光电源正极</td>\n</tr>\n<tr>\n<td>16</td>\n<td>BLK</td>\n<td>背光电源负极</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>这篇文章很简单（就是一点电工知识），就是利用<a href=\"https://baike.baidu.com/item/DHT11/1206271\" target=\"_blank\" rel=\"noopener\">DHT11</a>温湿度传感器测量温湿度值，并把结果显示在<a href=\"https://baike.baidu.com/item/LCD1602/6014393\" target=\"_blank\" rel=\"noopener\">1602 LCD</a>显示器上。</p>","more":"<h2 id=\"实验元器件列表\"><a href=\"#实验元器件列表\" class=\"headerlink\" title=\"实验元器件列表\"></a>实验元器件列表</h2><table>\n<thead>\n<tr>\n<th>元器件</th>\n<th>型号</th>\n<th>数量</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主控板</td>\n<td>arduino Uno</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>温湿度传感器</td>\n<td>DHT11</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>液晶屏</td>\n<td>1602 LCD</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>电阻</td>\n<td>1K电阻</td>\n<td>4</td>\n<td></td>\n</tr>\n<tr>\n<td>面包板</td>\n<td></td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>面包板条线</td>\n<td></td>\n<td>若个</td>\n<td></td>\n</tr>\n<tr>\n<td>数据线</td>\n<td>Uno数据线</td>\n<td>1</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"工具和元器件介绍\"><a href=\"#工具和元器件介绍\" class=\"headerlink\" title=\"工具和元器件介绍\"></a>工具和元器件介绍</h2><h3 id=\"DHT11温湿度传感器\"><a href=\"#DHT11温湿度传感器\" class=\"headerlink\" title=\"DHT11温湿度传感器\"></a>DHT11温湿度传感器</h3><p><img src=\"https://s2.ax1x.com/2019/08/29/mLoDuF.png\" alt><br>DHT11 传感器接线方法并不复杂，DHT11封装有4个引脚，各个引脚说明如下：</p>\n<table>\n<thead>\n<tr>\n<th>Pin</th>\n<th>名称</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>VDD</td>\n<td>供电 3-5.5 VDC</td>\n</tr>\n<tr>\n<td>2</td>\n<td>DATA</td>\n<td>串行数据，单总线</td>\n</tr>\n<tr>\n<td>3</td>\n<td>NC</td>\n<td>空脚</td>\n</tr>\n<tr>\n<td>4</td>\n<td>GND</td>\n<td>接地，电源负极</td>\n</tr>\n</tbody></table>\n<h3 id=\"1602-LCD\"><a href=\"#1602-LCD\" class=\"headerlink\" title=\"1602 LCD\"></a>1602 LCD</h3><p><img src=\"https://s2.ax1x.com/2019/09/04/nE8k7R.jpg\" alt=\"1602图片\"></p>\n<p>1602字符型液晶，是一种专门用来显示字母、数字、符号等的点阵型液晶模块，能够同时显示16x02即32个字符。</p>\n<p>1602 LCD分为两种：带背光和不带背光，带背光的要后一些，引脚多2个，为16个引脚，如下：</p>\n<p><img src=\"https://s2.ax1x.com/2019/08/29/mLTcqg.png\" alt></p>\n<h5 id=\"引脚说明\"><a href=\"#引脚说明\" class=\"headerlink\" title=\"引脚说明\"></a>引脚说明</h5><p>1602 LCD通常有14条引脚或16条引脚，14与16引脚的差别在于16条引脚多了背光电源线VCC(15脚)和地线GND(16脚)，其它引脚与14脚的LCD完全一样，如下：</p>\n<table>\n<thead>\n<tr>\n<th>引脚</th>\n<th>符号</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>VSS</td>\n<td>一般接地</td>\n</tr>\n<tr>\n<td>2</td>\n<td>VDD</td>\n<td>接电源（+5V）</td>\n</tr>\n<tr>\n<td>3</td>\n<td>V0</td>\n<td>液晶显示器对比度调整端，接正电源时对比度最弱，接地电源时对比度最高（对比度过高时会产生“鬼影”，使用时可以通过一个10K的电位器调整对比度）</td>\n</tr>\n<tr>\n<td>4</td>\n<td>RS</td>\n<td>RS为寄存器选择，高电平1时选择数据寄存器、低电平0时选择指令寄存器</td>\n</tr>\n<tr>\n<td>5</td>\n<td>R/W</td>\n<td>R/W为读写信号线，高电平(1)时进行读操作，低电平(0)时进行写操作</td>\n</tr>\n<tr>\n<td>6</td>\n<td>E</td>\n<td>E(或EN)端为使能(enable)端，写操作时，下降沿使能；读操作时，E高电平有效</td>\n</tr>\n<tr>\n<td>7</td>\n<td>DB0</td>\n<td>低4位三态、 双向数据总线 0位（最低位）</td>\n</tr>\n<tr>\n<td>8</td>\n<td>DB1</td>\n<td>高4位三态、 双向数据总线 1位</td>\n</tr>\n<tr>\n<td>9</td>\n<td>DB2</td>\n<td>高4位三态、 双向数据总线 2位</td>\n</tr>\n<tr>\n<td>10</td>\n<td>DB3</td>\n<td>高4位三态、 双向数据总线 3位</td>\n</tr>\n<tr>\n<td>11</td>\n<td>DB4</td>\n<td>高4位三态、 双向数据总线 4位</td>\n</tr>\n<tr>\n<td>12</td>\n<td>DB5</td>\n<td>高4位三态、 双向数据总线 5位</td>\n</tr>\n<tr>\n<td>13</td>\n<td>DB6</td>\n<td>高4位三态、 双向数据总线 6位</td>\n</tr>\n<tr>\n<td>14</td>\n<td>DB7</td>\n<td>高4位三态、 双向数据总线 7位（busy flag）</td>\n</tr>\n<tr>\n<td>15</td>\n<td>BLA</td>\n<td>背光电源正极</td>\n</tr>\n<tr>\n<td>16</td>\n<td>BLK</td>\n<td>背光电源负极</td>\n</tr>\n</tbody></table>"},{"title":"栈应用之四则运算","author":"Salamander","date":"2019-08-19T09:02:00.000Z","_content":"## 四则运算\n四则运算表达式是我们小学就接触的内容，它遵循“先乘除，后加减，从左到右，括号内先算”的法则，例如“7 + (5 - 3) * 4 + 6 / 3”，这个表达式先算**5 - 3**得**2**，再算**2 \\* 4**和**6 / 3**，最后计算**7 + 8 +2**，这个过程很简单，口算就能完成，但是如果让我们在程序里实现这个功能，该如何实现呢？我们遇到的困难在于乘除优在加减的后面，却要先运算，另外还要考虑括号，问题就复杂了。\n\n<!-- more -->\n\n## 后缀表达式\n波兰有位科学家也想到了这个问题，他想出了一种新的**不需要括号**的表达式：“后缀表达式”，它更有利于计算机计算。让我们看看它的样子：对于“7 + (5 - 3) * 4 + 6 / 3”，后缀表达式为“7 5 3 - 4 * + 6 3 / +”，叫后缀的原因在于**运算符在操作数之后**。我们人类喜欢看到的表达式叫“中缀表达式”（因为运算符在操作数中间），但是计算机不喜欢它。\n\n### 后缀表达式的方法\n为了看到后缀表达式的好处，我们先看看，计算机如何利用后缀表达式计算出最终结果。\n* 后缀表达式：**7 5 3 - 4 \\* + 6 3 / +**\n* 规则：从左到右遍历字符串，遇到数字则进栈，遇到符号则将栈顶的两个数字出栈，进行计算，运算结果进栈，一直到最终获得结果。\n\n1. 初始化一个空栈，此栈用来对要运算的数字进出使用。\n2. 字符串中前三个都是数字，所以7，5，3进栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGkVZ6.jpg)\n\n\n3. 接下来是“-”，所以5和3出栈，5作为被减数，3作为减数，5减3得到2，并将2入栈。\n4. 接着是4入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGkByn.jpg)\n\n5. 接下来是”\\*“，所以4和2出栈，4乘以2得8，8入栈。\n6. 下面是“+”，7和8出栈，7加8得15，15入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGk7TK.jpg)\n\n7. 接下来6和3数字入栈。\n8. 遇到符号“/”，所以6和3出栈，6作为被除数，3作为除数，6除3得2，2入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGA9Tf.jpg)\n\n9. 最后遇到符号“+”，15和2出栈，15加2得17，17入栈，遍历结束，将最后结果出栈，得到17。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGAV6s.jpg)\n\n\n### 中缀表达式转后缀表达式\n可以看到利用**栈**就很容易计算后缀表达式的值，那么现在我们的问题就是中缀转后缀。\n\n* 中缀表达式：“8 + (7 - 2 * 3 + 2) * 3 + 10 / 2”\n* 规则：遍历字符串，遇到数字则输出，即成为后缀表达式一部分；若是操作符，则判断与栈顶符号的优先级（乘除优先级比加减优先级高，乘除优先级一样，加和减也一样），如果高于栈顶符号，则压栈，否则从栈顶开始弹出元素直到遇到遇到优先级更低的符号（或者遇到“(”，“(”只有遇到“)”才会弹出），弹出完这些符号后，把当前符号压栈。\n\n\n1. 初始化一空栈，用来对符号进出栈使用。\n2. 第一个字符是数字8，输出8，后面符号是“+”，进栈。\n\n![过程](https://s2.ax1x.com/2019/08/21/mUD2S1.png)\n\n3. 第三个字符是“(”，因为是左括号，所以压栈，第四个字符是7，输出，总表达式为8 7。\n4. 接着是“-”，因为栈顶是“(”，所以压栈。后面字符是2，输出，总表达式为8 7 2。\n\n![过程](https://s2.ax1x.com/2019/08/25/mgNyRO.png)\n\n5. 之后符号是“\\*”，它的优先级比栈顶“-”高，所以压栈，再之后是数字3，输出，总表达式为8 7 2 3。\n6. 接着是符号“+”，它比“\\*”的优先级低，所以“\\*”弹出栈输出，而“-”优先级和“+”一样，也要弹出栈输出，接下来碰到符号“(”，就要把“+”压栈。接着是数字2，输出，总表达式为8 7 2 3 \\* - 2。\n\n![过程](https://s2.ax1x.com/2019/08/25/mgUPlF.png)\n\n7. 接着是符号“)”，这时需要从栈顶开始依次弹出符号输出，直到遇到“(”（“(”也要弹出，只是不输出），“(”之后只剩一个“+”，所以弹出“+”输出，接下来是符号“\\*”，优先级比“+”高，所以压栈，总表达式为8 7 2 3 \\* - 2 +。\n8. 接下来是数字3，输出，紧接着是符号“+”，它比栈顶“\\*”优先级低，所以弹出“\\*”输出，而之后比较的“+”优先级一样，也弹出栈输出，最后“+”压栈，总表达式为8 7 2 3 \\* - 2 + 3 \\* +。\n\n![过程](https://s2.ax1x.com/2019/08/28/moOHG6.jpg)\n\n9. 接着是数字10，输出，接下来是符号“/”，比符号“+”优先级高，所以压栈，总表达式为8 7 2 3 \\* - 2 + 3 \\* + 10。\n10. 接着是数字2，输出。遍历结束，依次弹出栈中元素，最后总表达式为8 7 2 3 \\* - 2 + 3 \\* + 10 2 / +。\n\n![过程](https://s2.ax1x.com/2019/08/28/moXELQ.jpg)\n\n### 代码示例\n```\n// 预先生成运算符的tokens\nprepareTokens() {\n    this.tokens = [\n        new Token('#', TOKEN_TYPE.ENDEXPR),\n        new Token('(', TOKEN_TYPE.LEFTPAREN),\n        new Token(')', TOKEN_TYPE.RIGHTPAREN),\n        new Token('~', TOKEN_TYPE.UNARYOP, 6),       // 负号\n        new Token('abs', TOKEN_TYPE.UNARYOP, 6),     // 求绝对值\n        new Token('sqrt', TOKEN_TYPE.UNARYOP, 6),    // 开平方根\n        new Token('exp', TOKEN_TYPE.UNARYOP, 6),     // e的x次\n        new Token('ln', TOKEN_TYPE.UNARYOP, 6),      // e为底数的对数\n        new Token('log10', TOKEN_TYPE.UNARYOP, 6),   // 10为底数的对数\n        new Token('sin', TOKEN_TYPE.UNARYOP, 6),     // 求sin x\n        new Token('cos', TOKEN_TYPE.UNARYOP, 6),     // 求cos x\n        new Token('tan', TOKEN_TYPE.UNARYOP, 6),     // 求tan x\n        new Token('+', TOKEN_TYPE.BINARYOP, 4),      // 二元+\n        new Token('-', TOKEN_TYPE.BINARYOP, 4),      // 二元-\n        new Token('*', TOKEN_TYPE.BINARYOP, 5),      // 乘法\n        new Token('/', TOKEN_TYPE.BINARYOP, 5),      // 除法\n        new Token('%', TOKEN_TYPE.BINARYOP, 5),      // 除模取余\n        new Token('^', TOKEN_TYPE.BINARYOP, 6),      // 指数运算\n    ]\n}\n\n/**\n * 中缀表达式转化为后缀表达式\n * @return {Array}\n */\ntransform() {\n    const postExp = []\n    const opStack = []\n    for (let i = 0; i < this.infixExp.length; i++) {\n        const pos = this.infixExp[i]\n        const token = this.tokens[pos]\n        switch (token.type) {\n            case TOKEN_TYPE.OPRAND:\n                postExp.push(pos)\n                break;\n            case TOKEN_TYPE.LEFTPAREN:  // “(”直接入栈\n                opStack.push(pos)\n                break;\n            case TOKEN_TYPE.RIGHTPAREN: // 为“)”，出栈直到遇到运算符“(”\n                let prePos = opStack.pop()\n                while (prePos in this.tokens && opStack.length >= 0 &&\n                this.tokens[prePos].type !== TOKEN_TYPE.LEFTPAREN) {\n                    postExp.push(prePos)\n                    prePos = opStack.pop()\n                }\n                break;\n            case TOKEN_TYPE.UNARYOP:\n            case TOKEN_TYPE.BINARYOP:\n                let endright = 0\n                while (endright === 0) {\n                    if (opStack.length <= 0)\n                        endright = 1\n                    else if (this.tokens[opStack[opStack.length - 1]].type === TOKEN_TYPE.LEFTPAREN) {\n                        endright = 1\n                    } else if (this.tokens[opStack[opStack.length - 1]].priority < token.priority) {\n                        endright = 1\n                    } else if (this.tokens[opStack[opStack.length - 1]].priority === token.priority &&\n                                token.priority === MAX_PRIORITY) {\n                        endright = 1\n                    } else {\n                        postExp.push(opStack.pop())\n                        endright = 0\n                    }\n                }\n                opStack.push(pos)\n                break\n            case TOKEN_TYPE.ENDEXPR:\n                while (opStack.length >= 1) {\n                    postExp.push(opStack.pop())\n                }\n                break\n            default:\n                break\n        }\n    }\n\n    postExp.push(0)  // 添加终止符\n    return postExp\n}\n\n```\n中缀表达式`infixExp`中存的是`this.tokens`中的索引，完整代码[Github](https://github.com/salamander-mh/calculator)","source":"_posts/stack_si_ze.md","raw":"title: 栈应用之四则运算\ntags:\n  - 栈\n  - 四则运算\ncategories:\n  - 算法\nauthor: Salamander\ndate: 2019-08-19 17:02:00\n---\n## 四则运算\n四则运算表达式是我们小学就接触的内容，它遵循“先乘除，后加减，从左到右，括号内先算”的法则，例如“7 + (5 - 3) * 4 + 6 / 3”，这个表达式先算**5 - 3**得**2**，再算**2 \\* 4**和**6 / 3**，最后计算**7 + 8 +2**，这个过程很简单，口算就能完成，但是如果让我们在程序里实现这个功能，该如何实现呢？我们遇到的困难在于乘除优在加减的后面，却要先运算，另外还要考虑括号，问题就复杂了。\n\n<!-- more -->\n\n## 后缀表达式\n波兰有位科学家也想到了这个问题，他想出了一种新的**不需要括号**的表达式：“后缀表达式”，它更有利于计算机计算。让我们看看它的样子：对于“7 + (5 - 3) * 4 + 6 / 3”，后缀表达式为“7 5 3 - 4 * + 6 3 / +”，叫后缀的原因在于**运算符在操作数之后**。我们人类喜欢看到的表达式叫“中缀表达式”（因为运算符在操作数中间），但是计算机不喜欢它。\n\n### 后缀表达式的方法\n为了看到后缀表达式的好处，我们先看看，计算机如何利用后缀表达式计算出最终结果。\n* 后缀表达式：**7 5 3 - 4 \\* + 6 3 / +**\n* 规则：从左到右遍历字符串，遇到数字则进栈，遇到符号则将栈顶的两个数字出栈，进行计算，运算结果进栈，一直到最终获得结果。\n\n1. 初始化一个空栈，此栈用来对要运算的数字进出使用。\n2. 字符串中前三个都是数字，所以7，5，3进栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGkVZ6.jpg)\n\n\n3. 接下来是“-”，所以5和3出栈，5作为被减数，3作为减数，5减3得到2，并将2入栈。\n4. 接着是4入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGkByn.jpg)\n\n5. 接下来是”\\*“，所以4和2出栈，4乘以2得8，8入栈。\n6. 下面是“+”，7和8出栈，7加8得15，15入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGk7TK.jpg)\n\n7. 接下来6和3数字入栈。\n8. 遇到符号“/”，所以6和3出栈，6作为被除数，3作为除数，6除3得2，2入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGA9Tf.jpg)\n\n9. 最后遇到符号“+”，15和2出栈，15加2得17，17入栈，遍历结束，将最后结果出栈，得到17。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGAV6s.jpg)\n\n\n### 中缀表达式转后缀表达式\n可以看到利用**栈**就很容易计算后缀表达式的值，那么现在我们的问题就是中缀转后缀。\n\n* 中缀表达式：“8 + (7 - 2 * 3 + 2) * 3 + 10 / 2”\n* 规则：遍历字符串，遇到数字则输出，即成为后缀表达式一部分；若是操作符，则判断与栈顶符号的优先级（乘除优先级比加减优先级高，乘除优先级一样，加和减也一样），如果高于栈顶符号，则压栈，否则从栈顶开始弹出元素直到遇到遇到优先级更低的符号（或者遇到“(”，“(”只有遇到“)”才会弹出），弹出完这些符号后，把当前符号压栈。\n\n\n1. 初始化一空栈，用来对符号进出栈使用。\n2. 第一个字符是数字8，输出8，后面符号是“+”，进栈。\n\n![过程](https://s2.ax1x.com/2019/08/21/mUD2S1.png)\n\n3. 第三个字符是“(”，因为是左括号，所以压栈，第四个字符是7，输出，总表达式为8 7。\n4. 接着是“-”，因为栈顶是“(”，所以压栈。后面字符是2，输出，总表达式为8 7 2。\n\n![过程](https://s2.ax1x.com/2019/08/25/mgNyRO.png)\n\n5. 之后符号是“\\*”，它的优先级比栈顶“-”高，所以压栈，再之后是数字3，输出，总表达式为8 7 2 3。\n6. 接着是符号“+”，它比“\\*”的优先级低，所以“\\*”弹出栈输出，而“-”优先级和“+”一样，也要弹出栈输出，接下来碰到符号“(”，就要把“+”压栈。接着是数字2，输出，总表达式为8 7 2 3 \\* - 2。\n\n![过程](https://s2.ax1x.com/2019/08/25/mgUPlF.png)\n\n7. 接着是符号“)”，这时需要从栈顶开始依次弹出符号输出，直到遇到“(”（“(”也要弹出，只是不输出），“(”之后只剩一个“+”，所以弹出“+”输出，接下来是符号“\\*”，优先级比“+”高，所以压栈，总表达式为8 7 2 3 \\* - 2 +。\n8. 接下来是数字3，输出，紧接着是符号“+”，它比栈顶“\\*”优先级低，所以弹出“\\*”输出，而之后比较的“+”优先级一样，也弹出栈输出，最后“+”压栈，总表达式为8 7 2 3 \\* - 2 + 3 \\* +。\n\n![过程](https://s2.ax1x.com/2019/08/28/moOHG6.jpg)\n\n9. 接着是数字10，输出，接下来是符号“/”，比符号“+”优先级高，所以压栈，总表达式为8 7 2 3 \\* - 2 + 3 \\* + 10。\n10. 接着是数字2，输出。遍历结束，依次弹出栈中元素，最后总表达式为8 7 2 3 \\* - 2 + 3 \\* + 10 2 / +。\n\n![过程](https://s2.ax1x.com/2019/08/28/moXELQ.jpg)\n\n### 代码示例\n```\n// 预先生成运算符的tokens\nprepareTokens() {\n    this.tokens = [\n        new Token('#', TOKEN_TYPE.ENDEXPR),\n        new Token('(', TOKEN_TYPE.LEFTPAREN),\n        new Token(')', TOKEN_TYPE.RIGHTPAREN),\n        new Token('~', TOKEN_TYPE.UNARYOP, 6),       // 负号\n        new Token('abs', TOKEN_TYPE.UNARYOP, 6),     // 求绝对值\n        new Token('sqrt', TOKEN_TYPE.UNARYOP, 6),    // 开平方根\n        new Token('exp', TOKEN_TYPE.UNARYOP, 6),     // e的x次\n        new Token('ln', TOKEN_TYPE.UNARYOP, 6),      // e为底数的对数\n        new Token('log10', TOKEN_TYPE.UNARYOP, 6),   // 10为底数的对数\n        new Token('sin', TOKEN_TYPE.UNARYOP, 6),     // 求sin x\n        new Token('cos', TOKEN_TYPE.UNARYOP, 6),     // 求cos x\n        new Token('tan', TOKEN_TYPE.UNARYOP, 6),     // 求tan x\n        new Token('+', TOKEN_TYPE.BINARYOP, 4),      // 二元+\n        new Token('-', TOKEN_TYPE.BINARYOP, 4),      // 二元-\n        new Token('*', TOKEN_TYPE.BINARYOP, 5),      // 乘法\n        new Token('/', TOKEN_TYPE.BINARYOP, 5),      // 除法\n        new Token('%', TOKEN_TYPE.BINARYOP, 5),      // 除模取余\n        new Token('^', TOKEN_TYPE.BINARYOP, 6),      // 指数运算\n    ]\n}\n\n/**\n * 中缀表达式转化为后缀表达式\n * @return {Array}\n */\ntransform() {\n    const postExp = []\n    const opStack = []\n    for (let i = 0; i < this.infixExp.length; i++) {\n        const pos = this.infixExp[i]\n        const token = this.tokens[pos]\n        switch (token.type) {\n            case TOKEN_TYPE.OPRAND:\n                postExp.push(pos)\n                break;\n            case TOKEN_TYPE.LEFTPAREN:  // “(”直接入栈\n                opStack.push(pos)\n                break;\n            case TOKEN_TYPE.RIGHTPAREN: // 为“)”，出栈直到遇到运算符“(”\n                let prePos = opStack.pop()\n                while (prePos in this.tokens && opStack.length >= 0 &&\n                this.tokens[prePos].type !== TOKEN_TYPE.LEFTPAREN) {\n                    postExp.push(prePos)\n                    prePos = opStack.pop()\n                }\n                break;\n            case TOKEN_TYPE.UNARYOP:\n            case TOKEN_TYPE.BINARYOP:\n                let endright = 0\n                while (endright === 0) {\n                    if (opStack.length <= 0)\n                        endright = 1\n                    else if (this.tokens[opStack[opStack.length - 1]].type === TOKEN_TYPE.LEFTPAREN) {\n                        endright = 1\n                    } else if (this.tokens[opStack[opStack.length - 1]].priority < token.priority) {\n                        endright = 1\n                    } else if (this.tokens[opStack[opStack.length - 1]].priority === token.priority &&\n                                token.priority === MAX_PRIORITY) {\n                        endright = 1\n                    } else {\n                        postExp.push(opStack.pop())\n                        endright = 0\n                    }\n                }\n                opStack.push(pos)\n                break\n            case TOKEN_TYPE.ENDEXPR:\n                while (opStack.length >= 1) {\n                    postExp.push(opStack.pop())\n                }\n                break\n            default:\n                break\n        }\n    }\n\n    postExp.push(0)  // 添加终止符\n    return postExp\n}\n\n```\n中缀表达式`infixExp`中存的是`this.tokens`中的索引，完整代码[Github](https://github.com/salamander-mh/calculator)","slug":"stack_si_ze","published":1,"updated":"2019-10-28T13:18:20.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck470mea70009u8zt8fzkuv0n","content":"<h2 id=\"四则运算\"><a href=\"#四则运算\" class=\"headerlink\" title=\"四则运算\"></a>四则运算</h2><p>四则运算表达式是我们小学就接触的内容，它遵循“先乘除，后加减，从左到右，括号内先算”的法则，例如“7 + (5 - 3) * 4 + 6 / 3”，这个表达式先算<strong>5 - 3</strong>得<strong>2</strong>，再算<strong>2 * 4</strong>和<strong>6 / 3</strong>，最后计算<strong>7 + 8 +2</strong>，这个过程很简单，口算就能完成，但是如果让我们在程序里实现这个功能，该如何实现呢？我们遇到的困难在于乘除优在加减的后面，却要先运算，另外还要考虑括号，问题就复杂了。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"后缀表达式\"><a href=\"#后缀表达式\" class=\"headerlink\" title=\"后缀表达式\"></a>后缀表达式</h2><p>波兰有位科学家也想到了这个问题，他想出了一种新的<strong>不需要括号</strong>的表达式：“后缀表达式”，它更有利于计算机计算。让我们看看它的样子：对于“7 + (5 - 3) * 4 + 6 / 3”，后缀表达式为“7 5 3 - 4 * + 6 3 / +”，叫后缀的原因在于<strong>运算符在操作数之后</strong>。我们人类喜欢看到的表达式叫“中缀表达式”（因为运算符在操作数中间），但是计算机不喜欢它。</p>\n<h3 id=\"后缀表达式的方法\"><a href=\"#后缀表达式的方法\" class=\"headerlink\" title=\"后缀表达式的方法\"></a>后缀表达式的方法</h3><p>为了看到后缀表达式的好处，我们先看看，计算机如何利用后缀表达式计算出最终结果。</p>\n<ul>\n<li>后缀表达式：<strong>7 5 3 - 4 * + 6 3 / +</strong></li>\n<li>规则：从左到右遍历字符串，遇到数字则进栈，遇到符号则将栈顶的两个数字出栈，进行计算，运算结果进栈，一直到最终获得结果。</li>\n</ul>\n<ol>\n<li>初始化一个空栈，此栈用来对要运算的数字进出使用。</li>\n<li>字符串中前三个都是数字，所以7，5，3进栈。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/20/mGkVZ6.jpg\" alt=\"过程\"></p>\n<ol start=\"3\">\n<li>接下来是“-”，所以5和3出栈，5作为被减数，3作为减数，5减3得到2，并将2入栈。</li>\n<li>接着是4入栈。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/20/mGkByn.jpg\" alt=\"过程\"></p>\n<ol start=\"5\">\n<li>接下来是”*“，所以4和2出栈，4乘以2得8，8入栈。</li>\n<li>下面是“+”，7和8出栈，7加8得15，15入栈。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/20/mGk7TK.jpg\" alt=\"过程\"></p>\n<ol start=\"7\">\n<li>接下来6和3数字入栈。</li>\n<li>遇到符号“/”，所以6和3出栈，6作为被除数，3作为除数，6除3得2，2入栈。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/20/mGA9Tf.jpg\" alt=\"过程\"></p>\n<ol start=\"9\">\n<li>最后遇到符号“+”，15和2出栈，15加2得17，17入栈，遍历结束，将最后结果出栈，得到17。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/20/mGAV6s.jpg\" alt=\"过程\"></p>\n<h3 id=\"中缀表达式转后缀表达式\"><a href=\"#中缀表达式转后缀表达式\" class=\"headerlink\" title=\"中缀表达式转后缀表达式\"></a>中缀表达式转后缀表达式</h3><p>可以看到利用<strong>栈</strong>就很容易计算后缀表达式的值，那么现在我们的问题就是中缀转后缀。</p>\n<ul>\n<li>中缀表达式：“8 + (7 - 2 * 3 + 2) * 3 + 10 / 2”</li>\n<li>规则：遍历字符串，遇到数字则输出，即成为后缀表达式一部分；若是操作符，则判断与栈顶符号的优先级（乘除优先级比加减优先级高，乘除优先级一样，加和减也一样），如果高于栈顶符号，则压栈，否则从栈顶开始弹出元素直到遇到遇到优先级更低的符号（或者遇到“(”，“(”只有遇到“)”才会弹出），弹出完这些符号后，把当前符号压栈。</li>\n</ul>\n<ol>\n<li>初始化一空栈，用来对符号进出栈使用。</li>\n<li>第一个字符是数字8，输出8，后面符号是“+”，进栈。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/21/mUD2S1.png\" alt=\"过程\"></p>\n<ol start=\"3\">\n<li>第三个字符是“(”，因为是左括号，所以压栈，第四个字符是7，输出，总表达式为8 7。</li>\n<li>接着是“-”，因为栈顶是“(”，所以压栈。后面字符是2，输出，总表达式为8 7 2。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/25/mgNyRO.png\" alt=\"过程\"></p>\n<ol start=\"5\">\n<li>之后符号是“*”，它的优先级比栈顶“-”高，所以压栈，再之后是数字3，输出，总表达式为8 7 2 3。</li>\n<li>接着是符号“+”，它比“*”的优先级低，所以“*”弹出栈输出，而“-”优先级和“+”一样，也要弹出栈输出，接下来碰到符号“(”，就要把“+”压栈。接着是数字2，输出，总表达式为8 7 2 3 * - 2。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/25/mgUPlF.png\" alt=\"过程\"></p>\n<ol start=\"7\">\n<li>接着是符号“)”，这时需要从栈顶开始依次弹出符号输出，直到遇到“(”（“(”也要弹出，只是不输出），“(”之后只剩一个“+”，所以弹出“+”输出，接下来是符号“*”，优先级比“+”高，所以压栈，总表达式为8 7 2 3 * - 2 +。</li>\n<li>接下来是数字3，输出，紧接着是符号“+”，它比栈顶“*”优先级低，所以弹出“*”输出，而之后比较的“+”优先级一样，也弹出栈输出，最后“+”压栈，总表达式为8 7 2 3 * - 2 + 3 * +。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/28/moOHG6.jpg\" alt=\"过程\"></p>\n<ol start=\"9\">\n<li>接着是数字10，输出，接下来是符号“/”，比符号“+”优先级高，所以压栈，总表达式为8 7 2 3 * - 2 + 3 * + 10。</li>\n<li>接着是数字2，输出。遍历结束，依次弹出栈中元素，最后总表达式为8 7 2 3 * - 2 + 3 * + 10 2 / +。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/28/moXELQ.jpg\" alt=\"过程\"></p>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 预先生成运算符的tokens</span><br><span class=\"line\">prepareTokens() &#123;</span><br><span class=\"line\">    this.tokens = [</span><br><span class=\"line\">        new Token(&apos;#&apos;, TOKEN_TYPE.ENDEXPR),</span><br><span class=\"line\">        new Token(&apos;(&apos;, TOKEN_TYPE.LEFTPAREN),</span><br><span class=\"line\">        new Token(&apos;)&apos;, TOKEN_TYPE.RIGHTPAREN),</span><br><span class=\"line\">        new Token(&apos;~&apos;, TOKEN_TYPE.UNARYOP, 6),       // 负号</span><br><span class=\"line\">        new Token(&apos;abs&apos;, TOKEN_TYPE.UNARYOP, 6),     // 求绝对值</span><br><span class=\"line\">        new Token(&apos;sqrt&apos;, TOKEN_TYPE.UNARYOP, 6),    // 开平方根</span><br><span class=\"line\">        new Token(&apos;exp&apos;, TOKEN_TYPE.UNARYOP, 6),     // e的x次</span><br><span class=\"line\">        new Token(&apos;ln&apos;, TOKEN_TYPE.UNARYOP, 6),      // e为底数的对数</span><br><span class=\"line\">        new Token(&apos;log10&apos;, TOKEN_TYPE.UNARYOP, 6),   // 10为底数的对数</span><br><span class=\"line\">        new Token(&apos;sin&apos;, TOKEN_TYPE.UNARYOP, 6),     // 求sin x</span><br><span class=\"line\">        new Token(&apos;cos&apos;, TOKEN_TYPE.UNARYOP, 6),     // 求cos x</span><br><span class=\"line\">        new Token(&apos;tan&apos;, TOKEN_TYPE.UNARYOP, 6),     // 求tan x</span><br><span class=\"line\">        new Token(&apos;+&apos;, TOKEN_TYPE.BINARYOP, 4),      // 二元+</span><br><span class=\"line\">        new Token(&apos;-&apos;, TOKEN_TYPE.BINARYOP, 4),      // 二元-</span><br><span class=\"line\">        new Token(&apos;*&apos;, TOKEN_TYPE.BINARYOP, 5),      // 乘法</span><br><span class=\"line\">        new Token(&apos;/&apos;, TOKEN_TYPE.BINARYOP, 5),      // 除法</span><br><span class=\"line\">        new Token(&apos;%&apos;, TOKEN_TYPE.BINARYOP, 5),      // 除模取余</span><br><span class=\"line\">        new Token(&apos;^&apos;, TOKEN_TYPE.BINARYOP, 6),      // 指数运算</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 中缀表达式转化为后缀表达式</span><br><span class=\"line\"> * @return &#123;Array&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">transform() &#123;</span><br><span class=\"line\">    const postExp = []</span><br><span class=\"line\">    const opStack = []</span><br><span class=\"line\">    for (let i = 0; i &lt; this.infixExp.length; i++) &#123;</span><br><span class=\"line\">        const pos = this.infixExp[i]</span><br><span class=\"line\">        const token = this.tokens[pos]</span><br><span class=\"line\">        switch (token.type) &#123;</span><br><span class=\"line\">            case TOKEN_TYPE.OPRAND:</span><br><span class=\"line\">                postExp.push(pos)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.LEFTPAREN:  // “(”直接入栈</span><br><span class=\"line\">                opStack.push(pos)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.RIGHTPAREN: // 为“)”，出栈直到遇到运算符“(”</span><br><span class=\"line\">                let prePos = opStack.pop()</span><br><span class=\"line\">                while (prePos in this.tokens &amp;&amp; opStack.length &gt;= 0 &amp;&amp;</span><br><span class=\"line\">                this.tokens[prePos].type !== TOKEN_TYPE.LEFTPAREN) &#123;</span><br><span class=\"line\">                    postExp.push(prePos)</span><br><span class=\"line\">                    prePos = opStack.pop()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.UNARYOP:</span><br><span class=\"line\">            case TOKEN_TYPE.BINARYOP:</span><br><span class=\"line\">                let endright = 0</span><br><span class=\"line\">                while (endright === 0) &#123;</span><br><span class=\"line\">                    if (opStack.length &lt;= 0)</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    else if (this.tokens[opStack[opStack.length - 1]].type === TOKEN_TYPE.LEFTPAREN) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else if (this.tokens[opStack[opStack.length - 1]].priority &lt; token.priority) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else if (this.tokens[opStack[opStack.length - 1]].priority === token.priority &amp;&amp;</span><br><span class=\"line\">                                token.priority === MAX_PRIORITY) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        postExp.push(opStack.pop())</span><br><span class=\"line\">                        endright = 0</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                opStack.push(pos)</span><br><span class=\"line\">                break</span><br><span class=\"line\">            case TOKEN_TYPE.ENDEXPR:</span><br><span class=\"line\">                while (opStack.length &gt;= 1) &#123;</span><br><span class=\"line\">                    postExp.push(opStack.pop())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    postExp.push(0)  // 添加终止符</span><br><span class=\"line\">    return postExp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>中缀表达式<code>infixExp</code>中存的是<code>this.tokens</code>中的索引，完整代码<a href=\"https://github.com/salamander-mh/calculator\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"四则运算\"><a href=\"#四则运算\" class=\"headerlink\" title=\"四则运算\"></a>四则运算</h2><p>四则运算表达式是我们小学就接触的内容，它遵循“先乘除，后加减，从左到右，括号内先算”的法则，例如“7 + (5 - 3) * 4 + 6 / 3”，这个表达式先算<strong>5 - 3</strong>得<strong>2</strong>，再算<strong>2 * 4</strong>和<strong>6 / 3</strong>，最后计算<strong>7 + 8 +2</strong>，这个过程很简单，口算就能完成，但是如果让我们在程序里实现这个功能，该如何实现呢？我们遇到的困难在于乘除优在加减的后面，却要先运算，另外还要考虑括号，问题就复杂了。</p>","more":"<h2 id=\"后缀表达式\"><a href=\"#后缀表达式\" class=\"headerlink\" title=\"后缀表达式\"></a>后缀表达式</h2><p>波兰有位科学家也想到了这个问题，他想出了一种新的<strong>不需要括号</strong>的表达式：“后缀表达式”，它更有利于计算机计算。让我们看看它的样子：对于“7 + (5 - 3) * 4 + 6 / 3”，后缀表达式为“7 5 3 - 4 * + 6 3 / +”，叫后缀的原因在于<strong>运算符在操作数之后</strong>。我们人类喜欢看到的表达式叫“中缀表达式”（因为运算符在操作数中间），但是计算机不喜欢它。</p>\n<h3 id=\"后缀表达式的方法\"><a href=\"#后缀表达式的方法\" class=\"headerlink\" title=\"后缀表达式的方法\"></a>后缀表达式的方法</h3><p>为了看到后缀表达式的好处，我们先看看，计算机如何利用后缀表达式计算出最终结果。</p>\n<ul>\n<li>后缀表达式：<strong>7 5 3 - 4 * + 6 3 / +</strong></li>\n<li>规则：从左到右遍历字符串，遇到数字则进栈，遇到符号则将栈顶的两个数字出栈，进行计算，运算结果进栈，一直到最终获得结果。</li>\n</ul>\n<ol>\n<li>初始化一个空栈，此栈用来对要运算的数字进出使用。</li>\n<li>字符串中前三个都是数字，所以7，5，3进栈。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/20/mGkVZ6.jpg\" alt=\"过程\"></p>\n<ol start=\"3\">\n<li>接下来是“-”，所以5和3出栈，5作为被减数，3作为减数，5减3得到2，并将2入栈。</li>\n<li>接着是4入栈。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/20/mGkByn.jpg\" alt=\"过程\"></p>\n<ol start=\"5\">\n<li>接下来是”*“，所以4和2出栈，4乘以2得8，8入栈。</li>\n<li>下面是“+”，7和8出栈，7加8得15，15入栈。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/20/mGk7TK.jpg\" alt=\"过程\"></p>\n<ol start=\"7\">\n<li>接下来6和3数字入栈。</li>\n<li>遇到符号“/”，所以6和3出栈，6作为被除数，3作为除数，6除3得2，2入栈。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/20/mGA9Tf.jpg\" alt=\"过程\"></p>\n<ol start=\"9\">\n<li>最后遇到符号“+”，15和2出栈，15加2得17，17入栈，遍历结束，将最后结果出栈，得到17。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/20/mGAV6s.jpg\" alt=\"过程\"></p>\n<h3 id=\"中缀表达式转后缀表达式\"><a href=\"#中缀表达式转后缀表达式\" class=\"headerlink\" title=\"中缀表达式转后缀表达式\"></a>中缀表达式转后缀表达式</h3><p>可以看到利用<strong>栈</strong>就很容易计算后缀表达式的值，那么现在我们的问题就是中缀转后缀。</p>\n<ul>\n<li>中缀表达式：“8 + (7 - 2 * 3 + 2) * 3 + 10 / 2”</li>\n<li>规则：遍历字符串，遇到数字则输出，即成为后缀表达式一部分；若是操作符，则判断与栈顶符号的优先级（乘除优先级比加减优先级高，乘除优先级一样，加和减也一样），如果高于栈顶符号，则压栈，否则从栈顶开始弹出元素直到遇到遇到优先级更低的符号（或者遇到“(”，“(”只有遇到“)”才会弹出），弹出完这些符号后，把当前符号压栈。</li>\n</ul>\n<ol>\n<li>初始化一空栈，用来对符号进出栈使用。</li>\n<li>第一个字符是数字8，输出8，后面符号是“+”，进栈。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/21/mUD2S1.png\" alt=\"过程\"></p>\n<ol start=\"3\">\n<li>第三个字符是“(”，因为是左括号，所以压栈，第四个字符是7，输出，总表达式为8 7。</li>\n<li>接着是“-”，因为栈顶是“(”，所以压栈。后面字符是2，输出，总表达式为8 7 2。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/25/mgNyRO.png\" alt=\"过程\"></p>\n<ol start=\"5\">\n<li>之后符号是“*”，它的优先级比栈顶“-”高，所以压栈，再之后是数字3，输出，总表达式为8 7 2 3。</li>\n<li>接着是符号“+”，它比“*”的优先级低，所以“*”弹出栈输出，而“-”优先级和“+”一样，也要弹出栈输出，接下来碰到符号“(”，就要把“+”压栈。接着是数字2，输出，总表达式为8 7 2 3 * - 2。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/25/mgUPlF.png\" alt=\"过程\"></p>\n<ol start=\"7\">\n<li>接着是符号“)”，这时需要从栈顶开始依次弹出符号输出，直到遇到“(”（“(”也要弹出，只是不输出），“(”之后只剩一个“+”，所以弹出“+”输出，接下来是符号“*”，优先级比“+”高，所以压栈，总表达式为8 7 2 3 * - 2 +。</li>\n<li>接下来是数字3，输出，紧接着是符号“+”，它比栈顶“*”优先级低，所以弹出“*”输出，而之后比较的“+”优先级一样，也弹出栈输出，最后“+”压栈，总表达式为8 7 2 3 * - 2 + 3 * +。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/28/moOHG6.jpg\" alt=\"过程\"></p>\n<ol start=\"9\">\n<li>接着是数字10，输出，接下来是符号“/”，比符号“+”优先级高，所以压栈，总表达式为8 7 2 3 * - 2 + 3 * + 10。</li>\n<li>接着是数字2，输出。遍历结束，依次弹出栈中元素，最后总表达式为8 7 2 3 * - 2 + 3 * + 10 2 / +。</li>\n</ol>\n<p><img src=\"https://s2.ax1x.com/2019/08/28/moXELQ.jpg\" alt=\"过程\"></p>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 预先生成运算符的tokens</span><br><span class=\"line\">prepareTokens() &#123;</span><br><span class=\"line\">    this.tokens = [</span><br><span class=\"line\">        new Token(&apos;#&apos;, TOKEN_TYPE.ENDEXPR),</span><br><span class=\"line\">        new Token(&apos;(&apos;, TOKEN_TYPE.LEFTPAREN),</span><br><span class=\"line\">        new Token(&apos;)&apos;, TOKEN_TYPE.RIGHTPAREN),</span><br><span class=\"line\">        new Token(&apos;~&apos;, TOKEN_TYPE.UNARYOP, 6),       // 负号</span><br><span class=\"line\">        new Token(&apos;abs&apos;, TOKEN_TYPE.UNARYOP, 6),     // 求绝对值</span><br><span class=\"line\">        new Token(&apos;sqrt&apos;, TOKEN_TYPE.UNARYOP, 6),    // 开平方根</span><br><span class=\"line\">        new Token(&apos;exp&apos;, TOKEN_TYPE.UNARYOP, 6),     // e的x次</span><br><span class=\"line\">        new Token(&apos;ln&apos;, TOKEN_TYPE.UNARYOP, 6),      // e为底数的对数</span><br><span class=\"line\">        new Token(&apos;log10&apos;, TOKEN_TYPE.UNARYOP, 6),   // 10为底数的对数</span><br><span class=\"line\">        new Token(&apos;sin&apos;, TOKEN_TYPE.UNARYOP, 6),     // 求sin x</span><br><span class=\"line\">        new Token(&apos;cos&apos;, TOKEN_TYPE.UNARYOP, 6),     // 求cos x</span><br><span class=\"line\">        new Token(&apos;tan&apos;, TOKEN_TYPE.UNARYOP, 6),     // 求tan x</span><br><span class=\"line\">        new Token(&apos;+&apos;, TOKEN_TYPE.BINARYOP, 4),      // 二元+</span><br><span class=\"line\">        new Token(&apos;-&apos;, TOKEN_TYPE.BINARYOP, 4),      // 二元-</span><br><span class=\"line\">        new Token(&apos;*&apos;, TOKEN_TYPE.BINARYOP, 5),      // 乘法</span><br><span class=\"line\">        new Token(&apos;/&apos;, TOKEN_TYPE.BINARYOP, 5),      // 除法</span><br><span class=\"line\">        new Token(&apos;%&apos;, TOKEN_TYPE.BINARYOP, 5),      // 除模取余</span><br><span class=\"line\">        new Token(&apos;^&apos;, TOKEN_TYPE.BINARYOP, 6),      // 指数运算</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 中缀表达式转化为后缀表达式</span><br><span class=\"line\"> * @return &#123;Array&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">transform() &#123;</span><br><span class=\"line\">    const postExp = []</span><br><span class=\"line\">    const opStack = []</span><br><span class=\"line\">    for (let i = 0; i &lt; this.infixExp.length; i++) &#123;</span><br><span class=\"line\">        const pos = this.infixExp[i]</span><br><span class=\"line\">        const token = this.tokens[pos]</span><br><span class=\"line\">        switch (token.type) &#123;</span><br><span class=\"line\">            case TOKEN_TYPE.OPRAND:</span><br><span class=\"line\">                postExp.push(pos)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.LEFTPAREN:  // “(”直接入栈</span><br><span class=\"line\">                opStack.push(pos)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.RIGHTPAREN: // 为“)”，出栈直到遇到运算符“(”</span><br><span class=\"line\">                let prePos = opStack.pop()</span><br><span class=\"line\">                while (prePos in this.tokens &amp;&amp; opStack.length &gt;= 0 &amp;&amp;</span><br><span class=\"line\">                this.tokens[prePos].type !== TOKEN_TYPE.LEFTPAREN) &#123;</span><br><span class=\"line\">                    postExp.push(prePos)</span><br><span class=\"line\">                    prePos = opStack.pop()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.UNARYOP:</span><br><span class=\"line\">            case TOKEN_TYPE.BINARYOP:</span><br><span class=\"line\">                let endright = 0</span><br><span class=\"line\">                while (endright === 0) &#123;</span><br><span class=\"line\">                    if (opStack.length &lt;= 0)</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    else if (this.tokens[opStack[opStack.length - 1]].type === TOKEN_TYPE.LEFTPAREN) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else if (this.tokens[opStack[opStack.length - 1]].priority &lt; token.priority) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else if (this.tokens[opStack[opStack.length - 1]].priority === token.priority &amp;&amp;</span><br><span class=\"line\">                                token.priority === MAX_PRIORITY) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        postExp.push(opStack.pop())</span><br><span class=\"line\">                        endright = 0</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                opStack.push(pos)</span><br><span class=\"line\">                break</span><br><span class=\"line\">            case TOKEN_TYPE.ENDEXPR:</span><br><span class=\"line\">                while (opStack.length &gt;= 1) &#123;</span><br><span class=\"line\">                    postExp.push(opStack.pop())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    postExp.push(0)  // 添加终止符</span><br><span class=\"line\">    return postExp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>中缀表达式<code>infixExp</code>中存的是<code>this.tokens</code>中的索引，完整代码<a href=\"https://github.com/salamander-mh/calculator\" target=\"_blank\" rel=\"noopener\">Github</a></p>"},{"title":"最小生成树回顾","author":"Salamander","date":"2019-12-10T12:00:00.000Z","_content":"![docker logo](/images/MST.png)\n\n解决`最小生成树`（Minimum spanning tree）问题的算法，书上介绍了两个：`Prime`算法和`Kruskal`算法。\n\n\n<!-- more -->\n\n## Prim算法\n```C++\n#include <stdio.h>\n#include \"graph.h\"\n\nextern void DispMat1(MGraph);\nvoid Prim(MGraph g, int v)\n{\n    int lowcost[MAXV], min, n = g.n;\n    int closest[MAXV], i, j, k;\n    for (i = 0; i < n; i++)\n    {\n        lowcost[i] = g.edges[v][i];\n        closest[i] = v;\n    }\n    for (i = 1; i < n; i++)   // 找出n - 1个顶点\n    {\n        min = INF;\n        for (j = 0; j < n; j++)\n        {\n            if (lowcost[j] != 0 && lowcost[j] < min)\n            {\n                min = lowcost[j];\n                k = j;\n            }\n        }\n        printf(\"    边（%d， %d）权为：%d\\n\", closest[k], k, min);\n        lowcost[k] = 0;      // 标记k已经加入U\n        for (j = 0; j < n; j++)\n        {\n            if (g.edges[k][j] != 0 && g.edges[k][j] < lowcost[j])\n            {\n                lowcost[j] = g.edges[k][j];\n                lowcost[j] = k;\n            }\n        }\n    }\n}\n```\n\n\n## Kruskal算法\n实现克鲁斯卡尔算法的关键是**判断选取的边是否与生成树中已保留的边形成回路，这可以通过判断边的两个顶点所在的连通分量来解决**（给顶点所在连通分量编号）。\n```\ntypedef struct\n{\n    int u;      // 边的起始顶点\n    int v;      // 边的终止顶点\n    int w;      // 边的权值\n} Edge;\n\nvoid Kruskal(MGraph g, int v)\n{\n    int i, j, u1, v1, sn1, sn2, k;\n    int vset[MAXV];         // 存放所有边\n    Edge E[MaxSize];        // e数组的下标从0开始计\n    k = 0;\n    for (i = 0; i < g.n; i++)   // 由g产生的边集E\n    {\n        for (j = 0; j < g.n; j++)\n        {\n            if (g.edges[i][j] != 0 && g.edges[i][j] != INF)\n            {\n                E[k].u = i;\n                E[k].v = i;\n                E[k].w = g.edges[i][j];\n                k++;\n            }\n            \n        }\n    }\n    InsertSort(E, g.e);\n    for (i = 0; i < g.n; i++)\n    {\n        vset[i] = i;\n    }\n    k = 1;                      // k表示当前构造生成树的第几条边，初值为1\n    j = 0;                      // E中边的下标，初值为0\n    while (k < g.n)\n    {\n        u1 = E[j].u;\n        v1 = E[j].v;\n        sn1 = vset[u1];\n        sn2 = vset[v1];\n        if (sn1 != sn2)\n        {\n            printf(\" (%d, %d): %d\\n\", u1, v1, E[j].w);\n            k++;               // 生成边数增1\n            for (i = 0; i < g.n; i++)      // 两个集合统一编号\n            {\n                if (vset[i] == sn2)        // 集合编号为sn2的改为sn1\n                {\n                    if (vset[i] == sn2)\n                    {\n                        vset[i] = sn1;\n                    }\n                }\n                \n            }\n        }\n        j++;\n    }\n}\n```\n\n\n\n\n\n\n算法参考：\n* 《数据结构教程（第4版）》（李春葆）","source":"_posts/min_spanning_tree.md","raw":"title: 最小生成树回顾\nauthor: Salamander\ntags:\n  - 图\n  - 最小生成树\n  - 数据结构\ncategories:\n  - 算法\n  - ''\ndate: 2019-12-10 20:00:00\n---\n![docker logo](/images/MST.png)\n\n解决`最小生成树`（Minimum spanning tree）问题的算法，书上介绍了两个：`Prime`算法和`Kruskal`算法。\n\n\n<!-- more -->\n\n## Prim算法\n```C++\n#include <stdio.h>\n#include \"graph.h\"\n\nextern void DispMat1(MGraph);\nvoid Prim(MGraph g, int v)\n{\n    int lowcost[MAXV], min, n = g.n;\n    int closest[MAXV], i, j, k;\n    for (i = 0; i < n; i++)\n    {\n        lowcost[i] = g.edges[v][i];\n        closest[i] = v;\n    }\n    for (i = 1; i < n; i++)   // 找出n - 1个顶点\n    {\n        min = INF;\n        for (j = 0; j < n; j++)\n        {\n            if (lowcost[j] != 0 && lowcost[j] < min)\n            {\n                min = lowcost[j];\n                k = j;\n            }\n        }\n        printf(\"    边（%d， %d）权为：%d\\n\", closest[k], k, min);\n        lowcost[k] = 0;      // 标记k已经加入U\n        for (j = 0; j < n; j++)\n        {\n            if (g.edges[k][j] != 0 && g.edges[k][j] < lowcost[j])\n            {\n                lowcost[j] = g.edges[k][j];\n                lowcost[j] = k;\n            }\n        }\n    }\n}\n```\n\n\n## Kruskal算法\n实现克鲁斯卡尔算法的关键是**判断选取的边是否与生成树中已保留的边形成回路，这可以通过判断边的两个顶点所在的连通分量来解决**（给顶点所在连通分量编号）。\n```\ntypedef struct\n{\n    int u;      // 边的起始顶点\n    int v;      // 边的终止顶点\n    int w;      // 边的权值\n} Edge;\n\nvoid Kruskal(MGraph g, int v)\n{\n    int i, j, u1, v1, sn1, sn2, k;\n    int vset[MAXV];         // 存放所有边\n    Edge E[MaxSize];        // e数组的下标从0开始计\n    k = 0;\n    for (i = 0; i < g.n; i++)   // 由g产生的边集E\n    {\n        for (j = 0; j < g.n; j++)\n        {\n            if (g.edges[i][j] != 0 && g.edges[i][j] != INF)\n            {\n                E[k].u = i;\n                E[k].v = i;\n                E[k].w = g.edges[i][j];\n                k++;\n            }\n            \n        }\n    }\n    InsertSort(E, g.e);\n    for (i = 0; i < g.n; i++)\n    {\n        vset[i] = i;\n    }\n    k = 1;                      // k表示当前构造生成树的第几条边，初值为1\n    j = 0;                      // E中边的下标，初值为0\n    while (k < g.n)\n    {\n        u1 = E[j].u;\n        v1 = E[j].v;\n        sn1 = vset[u1];\n        sn2 = vset[v1];\n        if (sn1 != sn2)\n        {\n            printf(\" (%d, %d): %d\\n\", u1, v1, E[j].w);\n            k++;               // 生成边数增1\n            for (i = 0; i < g.n; i++)      // 两个集合统一编号\n            {\n                if (vset[i] == sn2)        // 集合编号为sn2的改为sn1\n                {\n                    if (vset[i] == sn2)\n                    {\n                        vset[i] = sn1;\n                    }\n                }\n                \n            }\n        }\n        j++;\n    }\n}\n```\n\n\n\n\n\n\n算法参考：\n* 《数据结构教程（第4版）》（李春葆）","slug":"min_spanning_tree","published":1,"updated":"2019-12-17T02:41:09.110Z","_id":"ck470mea8000au8ztqz04a2yr","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"/images/MST.png\" alt=\"docker logo\"></p>\n<p>解决<code>最小生成树</code>（Minimum spanning tree）问题的算法，书上介绍了两个：<code>Prime</code>算法和<code>Kruskal</code>算法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"graph.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">DispMat1</span><span class=\"params\">(MGraph)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Prim</span><span class=\"params\">(MGraph g, <span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lowcost[MAXV], min, n = g.n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> closest[MAXV], i, j, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lowcost[i] = g.edges[v][i];</span><br><span class=\"line\">        closest[i] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)   <span class=\"comment\">// 找出n - 1个顶点</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        min = INF;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lowcost[j] != <span class=\"number\">0</span> &amp;&amp; lowcost[j] &lt; min)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                min = lowcost[j];</span><br><span class=\"line\">                k = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"    边（%d， %d）权为：%d\\n\"</span>, closest[k], k, min);</span><br><span class=\"line\">        lowcost[k] = <span class=\"number\">0</span>;      <span class=\"comment\">// 标记k已经加入U</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g.edges[k][j] != <span class=\"number\">0</span> &amp;&amp; g.edges[k][j] &lt; lowcost[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                lowcost[j] = g.edges[k][j];</span><br><span class=\"line\">                lowcost[j] = k;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a>Kruskal算法</h2><p>实现克鲁斯卡尔算法的关键是<strong>判断选取的边是否与生成树中已保留的边形成回路，这可以通过判断边的两个顶点所在的连通分量来解决</strong>（给顶点所在连通分量编号）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int u;      // 边的起始顶点</span><br><span class=\"line\">    int v;      // 边的终止顶点</span><br><span class=\"line\">    int w;      // 边的权值</span><br><span class=\"line\">&#125; Edge;</span><br><span class=\"line\"></span><br><span class=\"line\">void Kruskal(MGraph g, int v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i, j, u1, v1, sn1, sn2, k;</span><br><span class=\"line\">    int vset[MAXV];         // 存放所有边</span><br><span class=\"line\">    Edge E[MaxSize];        // e数组的下标从0开始计</span><br><span class=\"line\">    k = 0;</span><br><span class=\"line\">    for (i = 0; i &lt; g.n; i++)   // 由g产生的边集E</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for (j = 0; j &lt; g.n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (g.edges[i][j] != 0 &amp;&amp; g.edges[i][j] != INF)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                E[k].u = i;</span><br><span class=\"line\">                E[k].v = i;</span><br><span class=\"line\">                E[k].w = g.edges[i][j];</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    InsertSort(E, g.e);</span><br><span class=\"line\">    for (i = 0; i &lt; g.n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vset[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    k = 1;                      // k表示当前构造生成树的第几条边，初值为1</span><br><span class=\"line\">    j = 0;                      // E中边的下标，初值为0</span><br><span class=\"line\">    while (k &lt; g.n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        u1 = E[j].u;</span><br><span class=\"line\">        v1 = E[j].v;</span><br><span class=\"line\">        sn1 = vset[u1];</span><br><span class=\"line\">        sn2 = vset[v1];</span><br><span class=\"line\">        if (sn1 != sn2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot; (%d, %d): %d\\n&quot;, u1, v1, E[j].w);</span><br><span class=\"line\">            k++;               // 生成边数增1</span><br><span class=\"line\">            for (i = 0; i &lt; g.n; i++)      // 两个集合统一编号</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (vset[i] == sn2)        // 集合编号为sn2的改为sn1</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    if (vset[i] == sn2)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        vset[i] = sn1;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>算法参考：</p>\n<ul>\n<li>《数据结构教程（第4版）》（李春葆）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/MST.png\" alt=\"docker logo\"></p>\n<p>解决<code>最小生成树</code>（Minimum spanning tree）问题的算法，书上介绍了两个：<code>Prime</code>算法和<code>Kruskal</code>算法。</p>","more":"<h2 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"graph.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">DispMat1</span><span class=\"params\">(MGraph)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Prim</span><span class=\"params\">(MGraph g, <span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lowcost[MAXV], min, n = g.n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> closest[MAXV], i, j, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lowcost[i] = g.edges[v][i];</span><br><span class=\"line\">        closest[i] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)   <span class=\"comment\">// 找出n - 1个顶点</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        min = INF;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lowcost[j] != <span class=\"number\">0</span> &amp;&amp; lowcost[j] &lt; min)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                min = lowcost[j];</span><br><span class=\"line\">                k = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"    边（%d， %d）权为：%d\\n\"</span>, closest[k], k, min);</span><br><span class=\"line\">        lowcost[k] = <span class=\"number\">0</span>;      <span class=\"comment\">// 标记k已经加入U</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g.edges[k][j] != <span class=\"number\">0</span> &amp;&amp; g.edges[k][j] &lt; lowcost[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                lowcost[j] = g.edges[k][j];</span><br><span class=\"line\">                lowcost[j] = k;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a>Kruskal算法</h2><p>实现克鲁斯卡尔算法的关键是<strong>判断选取的边是否与生成树中已保留的边形成回路，这可以通过判断边的两个顶点所在的连通分量来解决</strong>（给顶点所在连通分量编号）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int u;      // 边的起始顶点</span><br><span class=\"line\">    int v;      // 边的终止顶点</span><br><span class=\"line\">    int w;      // 边的权值</span><br><span class=\"line\">&#125; Edge;</span><br><span class=\"line\"></span><br><span class=\"line\">void Kruskal(MGraph g, int v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i, j, u1, v1, sn1, sn2, k;</span><br><span class=\"line\">    int vset[MAXV];         // 存放所有边</span><br><span class=\"line\">    Edge E[MaxSize];        // e数组的下标从0开始计</span><br><span class=\"line\">    k = 0;</span><br><span class=\"line\">    for (i = 0; i &lt; g.n; i++)   // 由g产生的边集E</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for (j = 0; j &lt; g.n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (g.edges[i][j] != 0 &amp;&amp; g.edges[i][j] != INF)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                E[k].u = i;</span><br><span class=\"line\">                E[k].v = i;</span><br><span class=\"line\">                E[k].w = g.edges[i][j];</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    InsertSort(E, g.e);</span><br><span class=\"line\">    for (i = 0; i &lt; g.n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vset[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    k = 1;                      // k表示当前构造生成树的第几条边，初值为1</span><br><span class=\"line\">    j = 0;                      // E中边的下标，初值为0</span><br><span class=\"line\">    while (k &lt; g.n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        u1 = E[j].u;</span><br><span class=\"line\">        v1 = E[j].v;</span><br><span class=\"line\">        sn1 = vset[u1];</span><br><span class=\"line\">        sn2 = vset[v1];</span><br><span class=\"line\">        if (sn1 != sn2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot; (%d, %d): %d\\n&quot;, u1, v1, E[j].w);</span><br><span class=\"line\">            k++;               // 生成边数增1</span><br><span class=\"line\">            for (i = 0; i &lt; g.n; i++)      // 两个集合统一编号</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (vset[i] == sn2)        // 集合编号为sn2的改为sn1</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    if (vset[i] == sn2)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        vset[i] = sn1;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>算法参考：</p>\n<ul>\n<li>《数据结构教程（第4版）》（李春葆）</li>\n</ul>"},{"title":"一步步自己做个Docker之Linux Namespace 简介","author":"Salamander","date":"2019-11-28T08:10:23.000Z","_content":"![docker logo](/images/docker-logo.png)\n\n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* 内核版本： 5.0.0-36-generic \n\n## Linux Namespaces\nDocker的所用的两个关键技术，一个是`Namespaces`，一个是`Cgroups`。它俩都不是新技术，Linux内核很早就支持，但是Docker把它们有机地结合起来，加上自己创新，使得现在容器技术非常流行。  \n`Linux Namespaces`其实是做到了进程之间全局资源的隔离，譬如，`UTS Namespace`隔离了Hostname空间。这意味着在新的`UTS Namespace`中的进程，可以拥有不同于宿主机的主机名。 \n\n<!-- more -->\n\n目前Linux内核主要实现了以下几种不同的资源`Namespace`：\n\n| 名称 | 宏定义 | 隔离的内容 |\n|--- |--- |--- |\n|IPC|CLONE_NEWIPC|System V IPC, POSIX message queues (since Linux 2.6.19)|\n|Network|CLONE_NEWNET|network device interfaces, IPv4 and IPv6 protocol stacks, IP routing tables, firewall rules, the /proc/net and /sys/class/net directory trees, sockets, etc (since Linux 2.6.24)|\n|Mount|CLONE_NEWNS|Mount points (since Linux 2.4.19)|\n|PID|CLONE_NEWPID|Process IDs (since Linux 2.6.24)|\n|User|CLONE_NEWUSER|User and group IDs (started in Linux 2.6.23 and completed in Linux 3.8)|\n|UTS|CLONE_NEWUTS|Hostname and NIS domain name (since Linux 2.6.19)|\n|Cgroup|CLONE_NEWCGROUP|Cgroup root directory (since Linux 4.6)|\n\n要注意一点的是，不是所有的系统资源都能隔离，时间就是个例外，没有对应的`Namespace`，因此同一台Linux启动的容器时间都是相同的。\n\n### 尝试一下Namespace\n```\nlucy@lucy-computer:~$ unshare -h\n\n用法：\n unshare [选项] [<程序> [<参数>...]]\n\n以某些未与父(进程)共享的名字空间运行某个程序。\n\n选项：\n -m, --mount[=<文件>]      取消共享 mounts 名字空间\n -u, --uts[=<文件>]        取消共享 UTS 名字空间(主机名等)\n -i, --ipc[=<文件>]        取消共享 System V IPC 名字空间\n -n, --net[=<file>]        取消共享网络名字空间\n -p, --pid[=<文件>]        取消共享 pid 名字空间\n -U, --user[=<文件>]       取消共享用户名字空间\n -C, --cgroup[=<文件>]     取消共享 cgroup 名字空间\n -f, --fork                在启动<程序>前 fork\n     --mount-proc[=<目录>] 先挂载 proc 文件系统(连带打开 --mount)\n -r, --map-root-user       将当前用户映射为 root (连带打开 --user)\n     --propagation slave|shared|private|unchanged\n                           修改 mount 名字空间中的 mount 传播\n -s, --setgroups allow|deny  控制用户名字空间中的 setgroups 系统调用\n\n -h, --help                display this help\n -V, --version             display version\n```\n`unshare`命令可以让你在新的名称空间集中启动一个新的程序（unshared本身的含义就是不和父进程共享）。  \n下面的例子使用了`UTS namespace`，可以看到在新的`/bin/sh`进程中修改hostname，并没有影响宿主机：\n```\n$ sudo su                   # become root user\n$ hostname                  # check current hostname\nlucy-computer  \n$ unshare -u /bin/sh        # create a shell in new UTS namespace\n$ hostname my-new-hostname  # set hostname\n$ hostname                  # confirm new hostname\nmy-new-hostname  \n$ exit                      # exit new UTS namespace\n$ hostname                  # confirm original hostname unchanged\nlucy-computer\n```\n\n### 三个系统调用\n`unshare`命令很棒，但是当我们想要对程序中的命名空间进行更细粒度的控制时，那该怎么办呢？  \nLinux 内核提供的功能都会提供`系统调用`接口供应用程序使用，`Namespace`也不例外。和`Namespace`相关的系统调用主要有三个：\n* [clone](http://man7.org/linux/man-pages/man2/clone.2.html)\n* [setns](http://man7.org/linux/man-pages/man2/setns.2.html)\n* [unshare](http://man7.org/linux/man-pages/man2/unshare.2.html)\n\n**注意**：这些系统调用都是 linux 内核实现的，不能直接适用于其他操作系统。\n\n查看一下它们对应的C语言函数原型：\n#### clone：创建新进程并设置它的Namespace\n`clone`类似于`fork`系统调用，可以创建一个新的进程，不同的是你可以指定要子进程要执行的函数以及通过参数控制子进程的运行环境。\n\n> 实际上，clone() 是在 C 语言库中定义的一个封装(wrapper)函数，它负责建立新进程的堆栈并且调用对编程者隐藏的 clone() 系统调用。Clone() 其实是 linux 系统调用 fork() 的一种更通用的实现方式，它可以通过 flags 来控制使用多少功能。\n\n```\n#define _GNU_SOURCE\n#include <sched.h>\n\nint clone(int (*fn)(void *), void *child_stack, int flags, void *arg);\n```\n* fn：指定一个由新进程执行的函数。当这个函数返回时，子进程终止。该函数返回一个整数，表示子进程的退出代码。\n* child_stack：传入子进程使用的栈空间，也就是把用户态堆栈指针赋给子进程的 esp 寄存器。调用进程(指调用 clone() 的进程)应该总是为子进程分配新的堆栈。\n* flags：表示使用哪些 CLONE_ 开头的标志位，与 namespace 相关的有CLONE_NEWIPC、CLONE_NEWNET、CLONE_NEWNS、CLONE_NEWPID、CLONE_NEWUSER、CLONE_NEWUTS 和 CLONE_NEWCGROUP，如果要同时隔离多个 namespace，**可以使用 | (按位或)组合这些参数**。\n* arg：指向传递给 fn() 函数的参数。\n\n#### setns：让进程加入已经存在Namespace\nsetns 能够把某个进程加入到给定的 namespace，它的定义是这样的：\n```\n#define _GNU_SOURCE\n#include <sched.h>\nint setns(int fd, int nstype);\n```\n和`clone()`函数一样，C 语言库中的`setns()`函数也是对`setns系统调用`的封装。  \n* fd：表示要加入 namespace 的文件描述符。它是一个指向 /proc/[pid]/ns 目录中文件的文件描述符，可以通过直接打开该目录下的链接文件或者打开一个挂载了该目录下链接文件的文件得到。\n* nstype：参数 nstype 让调用者可以检查 fd 指向的 namespace 类型是否符合实际要求。若把该参数设置为 0 表示不检查。\n\n#### unshare：让进程加入新的Namespace\n```\n#define _GNU_SOURCE\n#include <sched.h>\nint unshare(int flags);\n```\n`unshare()`函数比较简单，只有一个参数`flags`，它的含义和`clone()`的`flags`相同。`unshare`和 `setns` 的区别是，`setns` 只能让进程加入到已经存在的`namespace`中，而`unshare`则让进程离开当前的`namespace`，加入到新建的`namespace`中。  \n\n`unshare()`和`clone()`的区别在于：`unshare()`是把当前进程进入到新的`namespace`；`clone()`是创建新的进程，然后让新创建的进程（子进程）加入到新的`namespace`。\n\n\n## C程序中使用clone系统调用\n我们先来看看 clone 一个简单的使用例子：创建一个新的进程，并执行 /bin/bash，这样就可以接受命令，方便我们查看新进程的信息。\n```\n#define _GNU_SOURCE\n#include <sched.h>\n#include <sys/wait.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\n// 设置子进程要使用的栈空间\n#define STACK_SIZE (1024*1024)\nstatic char container_stack[STACK_SIZE];\n\n#define errExit(code, msg); {if(code == -1){perror(msg); exit(-1);} }\n\n\nchar* const container_args[] = {\n    \"/bin/bash\",\n    NULL\n};\n\nstatic int container_func(void *arg)\n{\n    pid_t pid = getpid();\n    printf(\"Container[%d] - inside the container!\\n\", pid);\n\n    // 用一个新的bash来替换掉当前子进程，\n    // 这样我们就能通过 bash 查看当前子进程的情况.\n    // bash退出后，子进程执行完毕\n    execv(container_args[0], container_args);\n\n    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;\n    // 所以如果执行到这里，一定是出错了\n    printf(\"Container[%d] - oops!\\n\", pid);\n    return 1;\n}\n\n\nint main(int argc, char *argv[])\n{\n    pid_t pid = getpid();\n    printf(\"Parent[%d] - create a container!\\n\", pid);\n\n    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid\n    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数\n                    container_stack + sizeof(container_stack),\n                    // 这里SIGCHLD是子进程退出后返回给父进程的信号，跟namespace无关\n                    SIGCHLD,\n                    NULL);  // 传给child_func的参数\n    errExit(child_pid, \"clone\");\n\n    waitpid(child_pid, NULL, 0); // 等待子进程结束\n\n    printf(\"Parent[%d] - container exited!\\n\", pid);\n    return 0;\n}\n```\n这段代码不长，但是做了很多事情：\n* 通过`clone()`创建出一个子进程，并设置启动时的参数\n* 在子进程中调用 execv 来执行 /bin/bash，等待用户进行交互\n* 子进程退出之后，父进程也跟着退出\n\n我们可以用`ls -l /proc/$$/ns`查看当前进程所在命名空间的信息，运行程序：\n```\nlucy@lucy-computer:~$ gcc container.c -o container\nlucy@lucy-computer:~$ ./container \nParent[19644] - create a container!\nContainer[19645] - inside the container!\nlucy@lucy-computer:~$ ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 uts -> 'uts:[4026531838]'\nlucy@lucy-computer:~$ exit\nexit\nParent[19644] - container exited!\nlucy@lucy-computer:~$ ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 uts -> 'uts:[4026531838]'\n```\n各类命名空间id都是一样，因为我们只是单单使用了`clone`，未设置要隔离的命名空间，现在，我们加入`UTS Namespace`隔离，`UTS namespace` 功能最简单，它只隔离了 hostname 和 NIS domain name 两个资源。  \n同一个 namespace 里面的进程看到的 hostname 和 domain name 是相同的，这两个值可以通过 `sethostname(2)` 和 `setdomainname(2)` 来进行设置，也可以通过 `uname(2)`、`gethostname(2)` 和 `getdomainname(2)` 来读取。    \n**注意**： UTS 的名字来自于`uname`函数用到的结构体`struct utsname`，这个结构体的名字源自于`UNIX Time-sharing System`。  \n代码主要修改两个地方：clone 的参数加上了 CLONE_NEWUTS，子进程函数中使用`sethostname`来设置 hostname。  \n\n```\n#define _GNU_SOURCE\n#include <sched.h>\n#include <sys/wait.h>\n#include <sys/utsname.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\n// 设置子进程要使用的栈空间\n#define STACK_SIZE (1024*1024)\nstatic char container_stack[STACK_SIZE];\n\n#define errExit(code, msg); {if(code == -1){perror(msg); exit(-1);} }\n\n\nchar* const container_args[] = {\n    \"/bin/bash\",\n    NULL\n};\n\nstatic int container_func(void *hostname)\n{\n    pid_t pid = getpid();\n    printf(\"Container[%d] - inside the container!\\n\", pid);\n\n    // 使用 sethostname 设置子进程的 hostname 信息\n    struct utsname uts;\n    if (sethostname(hostname, strlen(hostname)) == -1) {\n        errExit(-1, \"sethostname\")\n    };\n\n    // 使用 uname 获取子进程的机器信息，并打印 hostname 出来\n    if (uname(&uts) == -1){\n        errExit(-1, \"uname\")\n    }\n    printf(\"Container[%d] - container uts.nodename: [%s]!\\n\", pid, uts.nodename);\n\n    // 用一个新的bash来替换掉当前子进程，\n    // 这样我们就能通过 bash 查看当前子进程的情况.\n    // bash退出后，子进程执行完毕\n    execv(container_args[0], container_args);\n\n    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;\n    // 所以如果执行到这里，一定是出错了\n    printf(\"Container[%d] - oops!\\n\", pid);\n    return 1;\n}\n\n\nint main(int argc, char *argv[])\n{\n    pid_t pid = getpid();\n    printf(\"Parent[%d] - create a container!\\n\", pid);\n\n    // 把第一个参数作为子进程的 hostname，默认是 `container`\n    char *hostname;\n    if (argc < 2) {\n        hostname = \"container\";\n    } else {\n        hostname = argv[1];\n    }\n\n    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid\n    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数\n                    container_stack + sizeof(container_stack),\n                    // CLONE_NEWUTS表示创建新的UTS namespace\n                    CLONE_NEWUTS | SIGCHLD,\n                    hostname);  // 传给child_func的参数\n    errExit(child_pid, \"clone\");\n\n    waitpid(child_pid, NULL, 0); // 等待子进程结束\n\n    printf(\"Parent[%d] - container exited!\\n\", pid);\n    return 0;\n}\n```\n执行程序，发现容器中hostname与宿主机已经不一样了，容器中`UTS Namespace`id也跟宿主机不一样了（这里需要root权限）：\n\n```\nsudo su\nroot@lucy-computer:/home/lucy# gcc container.c -o container\nroot@lucy-computer:/home/lucy# ./container \nParent[21091] - create a container!\nContainer[21092] - inside the container!\nContainer[21092] - container uts.nodename: [container]!\nroot@container:/home/lucy# hostname\ncontainer\nroot@container:/home/lucy# ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 uts -> 'uts:[4026532944]'\nroot@container:/home/lucy# exit\nexit\nParent[21091] - container exited!\nroot@lucy-computer:/home/lucy# ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 uts -> 'uts:[4026531838]'\nroot@lucy-computer:/home/lucy# hostname\nlucy-computer\n```\n\n\n\n### Let's Go\nC语言很底层，能控制到很多细节，但是它对于大部分人有点困难，接下来我们会有Go语言来一步步实现Docker容器。\n\n\n\n\n\n\n\n### 参考资料\n* [cizixs.com/2017/08/29/linux-namespace](https://cizixs.com/2017/08/29/linux-namespace/)\n* [Linux Namespace : 简介](https://www.cnblogs.com/sparkdev/p/9365405.html)","source":"_posts/docker-Linux-Namespace-intro.md","raw":"title: 一步步自己做个Docker之Linux Namespace 简介\nauthor: Salamander\ndate: 2019-11-28 16:10:23\ntags:\n---\n![docker logo](/images/docker-logo.png)\n\n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* 内核版本： 5.0.0-36-generic \n\n## Linux Namespaces\nDocker的所用的两个关键技术，一个是`Namespaces`，一个是`Cgroups`。它俩都不是新技术，Linux内核很早就支持，但是Docker把它们有机地结合起来，加上自己创新，使得现在容器技术非常流行。  \n`Linux Namespaces`其实是做到了进程之间全局资源的隔离，譬如，`UTS Namespace`隔离了Hostname空间。这意味着在新的`UTS Namespace`中的进程，可以拥有不同于宿主机的主机名。 \n\n<!-- more -->\n\n目前Linux内核主要实现了以下几种不同的资源`Namespace`：\n\n| 名称 | 宏定义 | 隔离的内容 |\n|--- |--- |--- |\n|IPC|CLONE_NEWIPC|System V IPC, POSIX message queues (since Linux 2.6.19)|\n|Network|CLONE_NEWNET|network device interfaces, IPv4 and IPv6 protocol stacks, IP routing tables, firewall rules, the /proc/net and /sys/class/net directory trees, sockets, etc (since Linux 2.6.24)|\n|Mount|CLONE_NEWNS|Mount points (since Linux 2.4.19)|\n|PID|CLONE_NEWPID|Process IDs (since Linux 2.6.24)|\n|User|CLONE_NEWUSER|User and group IDs (started in Linux 2.6.23 and completed in Linux 3.8)|\n|UTS|CLONE_NEWUTS|Hostname and NIS domain name (since Linux 2.6.19)|\n|Cgroup|CLONE_NEWCGROUP|Cgroup root directory (since Linux 4.6)|\n\n要注意一点的是，不是所有的系统资源都能隔离，时间就是个例外，没有对应的`Namespace`，因此同一台Linux启动的容器时间都是相同的。\n\n### 尝试一下Namespace\n```\nlucy@lucy-computer:~$ unshare -h\n\n用法：\n unshare [选项] [<程序> [<参数>...]]\n\n以某些未与父(进程)共享的名字空间运行某个程序。\n\n选项：\n -m, --mount[=<文件>]      取消共享 mounts 名字空间\n -u, --uts[=<文件>]        取消共享 UTS 名字空间(主机名等)\n -i, --ipc[=<文件>]        取消共享 System V IPC 名字空间\n -n, --net[=<file>]        取消共享网络名字空间\n -p, --pid[=<文件>]        取消共享 pid 名字空间\n -U, --user[=<文件>]       取消共享用户名字空间\n -C, --cgroup[=<文件>]     取消共享 cgroup 名字空间\n -f, --fork                在启动<程序>前 fork\n     --mount-proc[=<目录>] 先挂载 proc 文件系统(连带打开 --mount)\n -r, --map-root-user       将当前用户映射为 root (连带打开 --user)\n     --propagation slave|shared|private|unchanged\n                           修改 mount 名字空间中的 mount 传播\n -s, --setgroups allow|deny  控制用户名字空间中的 setgroups 系统调用\n\n -h, --help                display this help\n -V, --version             display version\n```\n`unshare`命令可以让你在新的名称空间集中启动一个新的程序（unshared本身的含义就是不和父进程共享）。  \n下面的例子使用了`UTS namespace`，可以看到在新的`/bin/sh`进程中修改hostname，并没有影响宿主机：\n```\n$ sudo su                   # become root user\n$ hostname                  # check current hostname\nlucy-computer  \n$ unshare -u /bin/sh        # create a shell in new UTS namespace\n$ hostname my-new-hostname  # set hostname\n$ hostname                  # confirm new hostname\nmy-new-hostname  \n$ exit                      # exit new UTS namespace\n$ hostname                  # confirm original hostname unchanged\nlucy-computer\n```\n\n### 三个系统调用\n`unshare`命令很棒，但是当我们想要对程序中的命名空间进行更细粒度的控制时，那该怎么办呢？  \nLinux 内核提供的功能都会提供`系统调用`接口供应用程序使用，`Namespace`也不例外。和`Namespace`相关的系统调用主要有三个：\n* [clone](http://man7.org/linux/man-pages/man2/clone.2.html)\n* [setns](http://man7.org/linux/man-pages/man2/setns.2.html)\n* [unshare](http://man7.org/linux/man-pages/man2/unshare.2.html)\n\n**注意**：这些系统调用都是 linux 内核实现的，不能直接适用于其他操作系统。\n\n查看一下它们对应的C语言函数原型：\n#### clone：创建新进程并设置它的Namespace\n`clone`类似于`fork`系统调用，可以创建一个新的进程，不同的是你可以指定要子进程要执行的函数以及通过参数控制子进程的运行环境。\n\n> 实际上，clone() 是在 C 语言库中定义的一个封装(wrapper)函数，它负责建立新进程的堆栈并且调用对编程者隐藏的 clone() 系统调用。Clone() 其实是 linux 系统调用 fork() 的一种更通用的实现方式，它可以通过 flags 来控制使用多少功能。\n\n```\n#define _GNU_SOURCE\n#include <sched.h>\n\nint clone(int (*fn)(void *), void *child_stack, int flags, void *arg);\n```\n* fn：指定一个由新进程执行的函数。当这个函数返回时，子进程终止。该函数返回一个整数，表示子进程的退出代码。\n* child_stack：传入子进程使用的栈空间，也就是把用户态堆栈指针赋给子进程的 esp 寄存器。调用进程(指调用 clone() 的进程)应该总是为子进程分配新的堆栈。\n* flags：表示使用哪些 CLONE_ 开头的标志位，与 namespace 相关的有CLONE_NEWIPC、CLONE_NEWNET、CLONE_NEWNS、CLONE_NEWPID、CLONE_NEWUSER、CLONE_NEWUTS 和 CLONE_NEWCGROUP，如果要同时隔离多个 namespace，**可以使用 | (按位或)组合这些参数**。\n* arg：指向传递给 fn() 函数的参数。\n\n#### setns：让进程加入已经存在Namespace\nsetns 能够把某个进程加入到给定的 namespace，它的定义是这样的：\n```\n#define _GNU_SOURCE\n#include <sched.h>\nint setns(int fd, int nstype);\n```\n和`clone()`函数一样，C 语言库中的`setns()`函数也是对`setns系统调用`的封装。  \n* fd：表示要加入 namespace 的文件描述符。它是一个指向 /proc/[pid]/ns 目录中文件的文件描述符，可以通过直接打开该目录下的链接文件或者打开一个挂载了该目录下链接文件的文件得到。\n* nstype：参数 nstype 让调用者可以检查 fd 指向的 namespace 类型是否符合实际要求。若把该参数设置为 0 表示不检查。\n\n#### unshare：让进程加入新的Namespace\n```\n#define _GNU_SOURCE\n#include <sched.h>\nint unshare(int flags);\n```\n`unshare()`函数比较简单，只有一个参数`flags`，它的含义和`clone()`的`flags`相同。`unshare`和 `setns` 的区别是，`setns` 只能让进程加入到已经存在的`namespace`中，而`unshare`则让进程离开当前的`namespace`，加入到新建的`namespace`中。  \n\n`unshare()`和`clone()`的区别在于：`unshare()`是把当前进程进入到新的`namespace`；`clone()`是创建新的进程，然后让新创建的进程（子进程）加入到新的`namespace`。\n\n\n## C程序中使用clone系统调用\n我们先来看看 clone 一个简单的使用例子：创建一个新的进程，并执行 /bin/bash，这样就可以接受命令，方便我们查看新进程的信息。\n```\n#define _GNU_SOURCE\n#include <sched.h>\n#include <sys/wait.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\n// 设置子进程要使用的栈空间\n#define STACK_SIZE (1024*1024)\nstatic char container_stack[STACK_SIZE];\n\n#define errExit(code, msg); {if(code == -1){perror(msg); exit(-1);} }\n\n\nchar* const container_args[] = {\n    \"/bin/bash\",\n    NULL\n};\n\nstatic int container_func(void *arg)\n{\n    pid_t pid = getpid();\n    printf(\"Container[%d] - inside the container!\\n\", pid);\n\n    // 用一个新的bash来替换掉当前子进程，\n    // 这样我们就能通过 bash 查看当前子进程的情况.\n    // bash退出后，子进程执行完毕\n    execv(container_args[0], container_args);\n\n    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;\n    // 所以如果执行到这里，一定是出错了\n    printf(\"Container[%d] - oops!\\n\", pid);\n    return 1;\n}\n\n\nint main(int argc, char *argv[])\n{\n    pid_t pid = getpid();\n    printf(\"Parent[%d] - create a container!\\n\", pid);\n\n    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid\n    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数\n                    container_stack + sizeof(container_stack),\n                    // 这里SIGCHLD是子进程退出后返回给父进程的信号，跟namespace无关\n                    SIGCHLD,\n                    NULL);  // 传给child_func的参数\n    errExit(child_pid, \"clone\");\n\n    waitpid(child_pid, NULL, 0); // 等待子进程结束\n\n    printf(\"Parent[%d] - container exited!\\n\", pid);\n    return 0;\n}\n```\n这段代码不长，但是做了很多事情：\n* 通过`clone()`创建出一个子进程，并设置启动时的参数\n* 在子进程中调用 execv 来执行 /bin/bash，等待用户进行交互\n* 子进程退出之后，父进程也跟着退出\n\n我们可以用`ls -l /proc/$$/ns`查看当前进程所在命名空间的信息，运行程序：\n```\nlucy@lucy-computer:~$ gcc container.c -o container\nlucy@lucy-computer:~$ ./container \nParent[19644] - create a container!\nContainer[19645] - inside the container!\nlucy@lucy-computer:~$ ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 uts -> 'uts:[4026531838]'\nlucy@lucy-computer:~$ exit\nexit\nParent[19644] - container exited!\nlucy@lucy-computer:~$ ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 uts -> 'uts:[4026531838]'\n```\n各类命名空间id都是一样，因为我们只是单单使用了`clone`，未设置要隔离的命名空间，现在，我们加入`UTS Namespace`隔离，`UTS namespace` 功能最简单，它只隔离了 hostname 和 NIS domain name 两个资源。  \n同一个 namespace 里面的进程看到的 hostname 和 domain name 是相同的，这两个值可以通过 `sethostname(2)` 和 `setdomainname(2)` 来进行设置，也可以通过 `uname(2)`、`gethostname(2)` 和 `getdomainname(2)` 来读取。    \n**注意**： UTS 的名字来自于`uname`函数用到的结构体`struct utsname`，这个结构体的名字源自于`UNIX Time-sharing System`。  \n代码主要修改两个地方：clone 的参数加上了 CLONE_NEWUTS，子进程函数中使用`sethostname`来设置 hostname。  \n\n```\n#define _GNU_SOURCE\n#include <sched.h>\n#include <sys/wait.h>\n#include <sys/utsname.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\n// 设置子进程要使用的栈空间\n#define STACK_SIZE (1024*1024)\nstatic char container_stack[STACK_SIZE];\n\n#define errExit(code, msg); {if(code == -1){perror(msg); exit(-1);} }\n\n\nchar* const container_args[] = {\n    \"/bin/bash\",\n    NULL\n};\n\nstatic int container_func(void *hostname)\n{\n    pid_t pid = getpid();\n    printf(\"Container[%d] - inside the container!\\n\", pid);\n\n    // 使用 sethostname 设置子进程的 hostname 信息\n    struct utsname uts;\n    if (sethostname(hostname, strlen(hostname)) == -1) {\n        errExit(-1, \"sethostname\")\n    };\n\n    // 使用 uname 获取子进程的机器信息，并打印 hostname 出来\n    if (uname(&uts) == -1){\n        errExit(-1, \"uname\")\n    }\n    printf(\"Container[%d] - container uts.nodename: [%s]!\\n\", pid, uts.nodename);\n\n    // 用一个新的bash来替换掉当前子进程，\n    // 这样我们就能通过 bash 查看当前子进程的情况.\n    // bash退出后，子进程执行完毕\n    execv(container_args[0], container_args);\n\n    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;\n    // 所以如果执行到这里，一定是出错了\n    printf(\"Container[%d] - oops!\\n\", pid);\n    return 1;\n}\n\n\nint main(int argc, char *argv[])\n{\n    pid_t pid = getpid();\n    printf(\"Parent[%d] - create a container!\\n\", pid);\n\n    // 把第一个参数作为子进程的 hostname，默认是 `container`\n    char *hostname;\n    if (argc < 2) {\n        hostname = \"container\";\n    } else {\n        hostname = argv[1];\n    }\n\n    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid\n    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数\n                    container_stack + sizeof(container_stack),\n                    // CLONE_NEWUTS表示创建新的UTS namespace\n                    CLONE_NEWUTS | SIGCHLD,\n                    hostname);  // 传给child_func的参数\n    errExit(child_pid, \"clone\");\n\n    waitpid(child_pid, NULL, 0); // 等待子进程结束\n\n    printf(\"Parent[%d] - container exited!\\n\", pid);\n    return 0;\n}\n```\n执行程序，发现容器中hostname与宿主机已经不一样了，容器中`UTS Namespace`id也跟宿主机不一样了（这里需要root权限）：\n\n```\nsudo su\nroot@lucy-computer:/home/lucy# gcc container.c -o container\nroot@lucy-computer:/home/lucy# ./container \nParent[21091] - create a container!\nContainer[21092] - inside the container!\nContainer[21092] - container uts.nodename: [container]!\nroot@container:/home/lucy# hostname\ncontainer\nroot@container:/home/lucy# ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 uts -> 'uts:[4026532944]'\nroot@container:/home/lucy# exit\nexit\nParent[21091] - container exited!\nroot@lucy-computer:/home/lucy# ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 uts -> 'uts:[4026531838]'\nroot@lucy-computer:/home/lucy# hostname\nlucy-computer\n```\n\n\n\n### Let's Go\nC语言很底层，能控制到很多细节，但是它对于大部分人有点困难，接下来我们会有Go语言来一步步实现Docker容器。\n\n\n\n\n\n\n\n### 参考资料\n* [cizixs.com/2017/08/29/linux-namespace](https://cizixs.com/2017/08/29/linux-namespace/)\n* [Linux Namespace : 简介](https://www.cnblogs.com/sparkdev/p/9365405.html)","slug":"docker-Linux-Namespace-intro","published":1,"updated":"2019-11-30T10:00:45.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck470mecy001ou8ztb6p39m5o","content":"<p><img src=\"/images/docker-logo.png\" alt=\"docker logo\"></p>\n<p>本文环境：</p>\n<ul>\n<li>OS：Ubuntu 18.04.3 LTS</li>\n<li>内核版本： 5.0.0-36-generic </li>\n</ul>\n<h2 id=\"Linux-Namespaces\"><a href=\"#Linux-Namespaces\" class=\"headerlink\" title=\"Linux Namespaces\"></a>Linux Namespaces</h2><p>Docker的所用的两个关键技术，一个是<code>Namespaces</code>，一个是<code>Cgroups</code>。它俩都不是新技术，Linux内核很早就支持，但是Docker把它们有机地结合起来，加上自己创新，使得现在容器技术非常流行。<br><code>Linux Namespaces</code>其实是做到了进程之间全局资源的隔离，譬如，<code>UTS Namespace</code>隔离了Hostname空间。这意味着在新的<code>UTS Namespace</code>中的进程，可以拥有不同于宿主机的主机名。 </p>\n<a id=\"more\"></a>\n\n<p>目前Linux内核主要实现了以下几种不同的资源<code>Namespace</code>：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>宏定义</th>\n<th>隔离的内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IPC</td>\n<td>CLONE_NEWIPC</td>\n<td>System V IPC, POSIX message queues (since Linux 2.6.19)</td>\n</tr>\n<tr>\n<td>Network</td>\n<td>CLONE_NEWNET</td>\n<td>network device interfaces, IPv4 and IPv6 protocol stacks, IP routing tables, firewall rules, the /proc/net and /sys/class/net directory trees, sockets, etc (since Linux 2.6.24)</td>\n</tr>\n<tr>\n<td>Mount</td>\n<td>CLONE_NEWNS</td>\n<td>Mount points (since Linux 2.4.19)</td>\n</tr>\n<tr>\n<td>PID</td>\n<td>CLONE_NEWPID</td>\n<td>Process IDs (since Linux 2.6.24)</td>\n</tr>\n<tr>\n<td>User</td>\n<td>CLONE_NEWUSER</td>\n<td>User and group IDs (started in Linux 2.6.23 and completed in Linux 3.8)</td>\n</tr>\n<tr>\n<td>UTS</td>\n<td>CLONE_NEWUTS</td>\n<td>Hostname and NIS domain name (since Linux 2.6.19)</td>\n</tr>\n<tr>\n<td>Cgroup</td>\n<td>CLONE_NEWCGROUP</td>\n<td>Cgroup root directory (since Linux 4.6)</td>\n</tr>\n</tbody></table>\n<p>要注意一点的是，不是所有的系统资源都能隔离，时间就是个例外，没有对应的<code>Namespace</code>，因此同一台Linux启动的容器时间都是相同的。</p>\n<h3 id=\"尝试一下Namespace\"><a href=\"#尝试一下Namespace\" class=\"headerlink\" title=\"尝试一下Namespace\"></a>尝试一下Namespace</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy@lucy-computer:~$ unshare -h</span><br><span class=\"line\"></span><br><span class=\"line\">用法：</span><br><span class=\"line\"> unshare [选项] [&lt;程序&gt; [&lt;参数&gt;...]]</span><br><span class=\"line\"></span><br><span class=\"line\">以某些未与父(进程)共享的名字空间运行某个程序。</span><br><span class=\"line\"></span><br><span class=\"line\">选项：</span><br><span class=\"line\"> -m, --mount[=&lt;文件&gt;]      取消共享 mounts 名字空间</span><br><span class=\"line\"> -u, --uts[=&lt;文件&gt;]        取消共享 UTS 名字空间(主机名等)</span><br><span class=\"line\"> -i, --ipc[=&lt;文件&gt;]        取消共享 System V IPC 名字空间</span><br><span class=\"line\"> -n, --net[=&lt;file&gt;]        取消共享网络名字空间</span><br><span class=\"line\"> -p, --pid[=&lt;文件&gt;]        取消共享 pid 名字空间</span><br><span class=\"line\"> -U, --user[=&lt;文件&gt;]       取消共享用户名字空间</span><br><span class=\"line\"> -C, --cgroup[=&lt;文件&gt;]     取消共享 cgroup 名字空间</span><br><span class=\"line\"> -f, --fork                在启动&lt;程序&gt;前 fork</span><br><span class=\"line\">     --mount-proc[=&lt;目录&gt;] 先挂载 proc 文件系统(连带打开 --mount)</span><br><span class=\"line\"> -r, --map-root-user       将当前用户映射为 root (连带打开 --user)</span><br><span class=\"line\">     --propagation slave|shared|private|unchanged</span><br><span class=\"line\">                           修改 mount 名字空间中的 mount 传播</span><br><span class=\"line\"> -s, --setgroups allow|deny  控制用户名字空间中的 setgroups 系统调用</span><br><span class=\"line\"></span><br><span class=\"line\"> -h, --help                display this help</span><br><span class=\"line\"> -V, --version             display version</span><br></pre></td></tr></table></figure>\n\n<p><code>unshare</code>命令可以让你在新的名称空间集中启动一个新的程序（unshared本身的含义就是不和父进程共享）。<br>下面的例子使用了<code>UTS namespace</code>，可以看到在新的<code>/bin/sh</code>进程中修改hostname，并没有影响宿主机：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo su                   # become root user</span><br><span class=\"line\">$ hostname                  # check current hostname</span><br><span class=\"line\">lucy-computer  </span><br><span class=\"line\">$ unshare -u /bin/sh        # create a shell in new UTS namespace</span><br><span class=\"line\">$ hostname my-new-hostname  # set hostname</span><br><span class=\"line\">$ hostname                  # confirm new hostname</span><br><span class=\"line\">my-new-hostname  </span><br><span class=\"line\">$ exit                      # exit new UTS namespace</span><br><span class=\"line\">$ hostname                  # confirm original hostname unchanged</span><br><span class=\"line\">lucy-computer</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三个系统调用\"><a href=\"#三个系统调用\" class=\"headerlink\" title=\"三个系统调用\"></a>三个系统调用</h3><p><code>unshare</code>命令很棒，但是当我们想要对程序中的命名空间进行更细粒度的控制时，那该怎么办呢？<br>Linux 内核提供的功能都会提供<code>系统调用</code>接口供应用程序使用，<code>Namespace</code>也不例外。和<code>Namespace</code>相关的系统调用主要有三个：</p>\n<ul>\n<li><a href=\"http://man7.org/linux/man-pages/man2/clone.2.html\" target=\"_blank\" rel=\"noopener\">clone</a></li>\n<li><a href=\"http://man7.org/linux/man-pages/man2/setns.2.html\" target=\"_blank\" rel=\"noopener\">setns</a></li>\n<li><a href=\"http://man7.org/linux/man-pages/man2/unshare.2.html\" target=\"_blank\" rel=\"noopener\">unshare</a></li>\n</ul>\n<p><strong>注意</strong>：这些系统调用都是 linux 内核实现的，不能直接适用于其他操作系统。</p>\n<p>查看一下它们对应的C语言函数原型：</p>\n<h4 id=\"clone：创建新进程并设置它的Namespace\"><a href=\"#clone：创建新进程并设置它的Namespace\" class=\"headerlink\" title=\"clone：创建新进程并设置它的Namespace\"></a>clone：创建新进程并设置它的Namespace</h4><p><code>clone</code>类似于<code>fork</code>系统调用，可以创建一个新的进程，不同的是你可以指定要子进程要执行的函数以及通过参数控制子进程的运行环境。</p>\n<blockquote>\n<p>实际上，clone() 是在 C 语言库中定义的一个封装(wrapper)函数，它负责建立新进程的堆栈并且调用对编程者隐藏的 clone() 系统调用。Clone() 其实是 linux 系统调用 fork() 的一种更通用的实现方式，它可以通过 flags 来控制使用多少功能。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int clone(int (*fn)(void *), void *child_stack, int flags, void *arg);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>fn：指定一个由新进程执行的函数。当这个函数返回时，子进程终止。该函数返回一个整数，表示子进程的退出代码。</li>\n<li>child_stack：传入子进程使用的栈空间，也就是把用户态堆栈指针赋给子进程的 esp 寄存器。调用进程(指调用 clone() 的进程)应该总是为子进程分配新的堆栈。</li>\n<li>flags：表示使用哪些 CLONE_ 开头的标志位，与 namespace 相关的有CLONE_NEWIPC、CLONE_NEWNET、CLONE_NEWNS、CLONE_NEWPID、CLONE_NEWUSER、CLONE_NEWUTS 和 CLONE_NEWCGROUP，如果要同时隔离多个 namespace，<strong>可以使用 | (按位或)组合这些参数</strong>。</li>\n<li>arg：指向传递给 fn() 函数的参数。</li>\n</ul>\n<h4 id=\"setns：让进程加入已经存在Namespace\"><a href=\"#setns：让进程加入已经存在Namespace\" class=\"headerlink\" title=\"setns：让进程加入已经存在Namespace\"></a>setns：让进程加入已经存在Namespace</h4><p>setns 能够把某个进程加入到给定的 namespace，它的定义是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">int setns(int fd, int nstype);</span><br></pre></td></tr></table></figure>\n\n<p>和<code>clone()</code>函数一样，C 语言库中的<code>setns()</code>函数也是对<code>setns系统调用</code>的封装。  </p>\n<ul>\n<li>fd：表示要加入 namespace 的文件描述符。它是一个指向 /proc/[pid]/ns 目录中文件的文件描述符，可以通过直接打开该目录下的链接文件或者打开一个挂载了该目录下链接文件的文件得到。</li>\n<li>nstype：参数 nstype 让调用者可以检查 fd 指向的 namespace 类型是否符合实际要求。若把该参数设置为 0 表示不检查。</li>\n</ul>\n<h4 id=\"unshare：让进程加入新的Namespace\"><a href=\"#unshare：让进程加入新的Namespace\" class=\"headerlink\" title=\"unshare：让进程加入新的Namespace\"></a>unshare：让进程加入新的Namespace</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">int unshare(int flags);</span><br></pre></td></tr></table></figure>\n\n<p><code>unshare()</code>函数比较简单，只有一个参数<code>flags</code>，它的含义和<code>clone()</code>的<code>flags</code>相同。<code>unshare</code>和 <code>setns</code> 的区别是，<code>setns</code> 只能让进程加入到已经存在的<code>namespace</code>中，而<code>unshare</code>则让进程离开当前的<code>namespace</code>，加入到新建的<code>namespace</code>中。  </p>\n<p><code>unshare()</code>和<code>clone()</code>的区别在于：<code>unshare()</code>是把当前进程进入到新的<code>namespace</code>；<code>clone()</code>是创建新的进程，然后让新创建的进程（子进程）加入到新的<code>namespace</code>。</p>\n<h2 id=\"C程序中使用clone系统调用\"><a href=\"#C程序中使用clone系统调用\" class=\"headerlink\" title=\"C程序中使用clone系统调用\"></a>C程序中使用clone系统调用</h2><p>我们先来看看 clone 一个简单的使用例子：创建一个新的进程，并执行 /bin/bash，这样就可以接受命令，方便我们查看新进程的信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;sys/wait.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置子进程要使用的栈空间</span><br><span class=\"line\">#define STACK_SIZE (1024*1024)</span><br><span class=\"line\">static char container_stack[STACK_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">#define errExit(code, msg); &#123;if(code == -1)&#123;perror(msg); exit(-1);&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">char* const container_args[] = &#123;</span><br><span class=\"line\">    &quot;/bin/bash&quot;,</span><br><span class=\"line\">    NULL</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static int container_func(void *arg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Container[%d] - inside the container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 用一个新的bash来替换掉当前子进程，</span><br><span class=\"line\">    // 这样我们就能通过 bash 查看当前子进程的情况.</span><br><span class=\"line\">    // bash退出后，子进程执行完毕</span><br><span class=\"line\">    execv(container_args[0], container_args);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;</span><br><span class=\"line\">    // 所以如果执行到这里，一定是出错了</span><br><span class=\"line\">    printf(&quot;Container[%d] - oops!\\n&quot;, pid);</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Parent[%d] - create a container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid</span><br><span class=\"line\">    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数</span><br><span class=\"line\">                    container_stack + sizeof(container_stack),</span><br><span class=\"line\">                    // 这里SIGCHLD是子进程退出后返回给父进程的信号，跟namespace无关</span><br><span class=\"line\">                    SIGCHLD,</span><br><span class=\"line\">                    NULL);  // 传给child_func的参数</span><br><span class=\"line\">    errExit(child_pid, &quot;clone&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    waitpid(child_pid, NULL, 0); // 等待子进程结束</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Parent[%d] - container exited!\\n&quot;, pid);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码不长，但是做了很多事情：</p>\n<ul>\n<li>通过<code>clone()</code>创建出一个子进程，并设置启动时的参数</li>\n<li>在子进程中调用 execv 来执行 /bin/bash，等待用户进行交互</li>\n<li>子进程退出之后，父进程也跟着退出</li>\n</ul>\n<p>我们可以用<code>ls -l /proc/$$/ns</code>查看当前进程所在命名空间的信息，运行程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy@lucy-computer:~$ gcc container.c -o container</span><br><span class=\"line\">lucy@lucy-computer:~$ ./container </span><br><span class=\"line\">Parent[19644] - create a container!</span><br><span class=\"line\">Container[19645] - inside the container!</span><br><span class=\"line\">lucy@lucy-computer:~$ ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 cgroup -&gt; &apos;cgroup:[4026531835]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 ipc -&gt; &apos;ipc:[4026531839]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 mnt -&gt; &apos;mnt:[4026531840]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 net -&gt; &apos;net:[4026531992]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid_for_children -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 user -&gt; &apos;user:[4026531837]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 uts -&gt; &apos;uts:[4026531838]&apos;</span><br><span class=\"line\">lucy@lucy-computer:~$ exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">Parent[19644] - container exited!</span><br><span class=\"line\">lucy@lucy-computer:~$ ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 cgroup -&gt; &apos;cgroup:[4026531835]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 ipc -&gt; &apos;ipc:[4026531839]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 mnt -&gt; &apos;mnt:[4026531840]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 net -&gt; &apos;net:[4026531992]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid_for_children -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 user -&gt; &apos;user:[4026531837]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 uts -&gt; &apos;uts:[4026531838]&apos;</span><br></pre></td></tr></table></figure>\n\n<p>各类命名空间id都是一样，因为我们只是单单使用了<code>clone</code>，未设置要隔离的命名空间，现在，我们加入<code>UTS Namespace</code>隔离，<code>UTS namespace</code> 功能最简单，它只隔离了 hostname 和 NIS domain name 两个资源。<br>同一个 namespace 里面的进程看到的 hostname 和 domain name 是相同的，这两个值可以通过 <code>sethostname(2)</code> 和 <code>setdomainname(2)</code> 来进行设置，也可以通过 <code>uname(2)</code>、<code>gethostname(2)</code> 和 <code>getdomainname(2)</code> 来读取。<br><strong>注意</strong>： UTS 的名字来自于<code>uname</code>函数用到的结构体<code>struct utsname</code>，这个结构体的名字源自于<code>UNIX Time-sharing System</code>。<br>代码主要修改两个地方：clone 的参数加上了 CLONE_NEWUTS，子进程函数中使用<code>sethostname</code>来设置 hostname。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;sys/wait.h&gt;</span><br><span class=\"line\">#include &lt;sys/utsname.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置子进程要使用的栈空间</span><br><span class=\"line\">#define STACK_SIZE (1024*1024)</span><br><span class=\"line\">static char container_stack[STACK_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">#define errExit(code, msg); &#123;if(code == -1)&#123;perror(msg); exit(-1);&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">char* const container_args[] = &#123;</span><br><span class=\"line\">    &quot;/bin/bash&quot;,</span><br><span class=\"line\">    NULL</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static int container_func(void *hostname)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Container[%d] - inside the container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 使用 sethostname 设置子进程的 hostname 信息</span><br><span class=\"line\">    struct utsname uts;</span><br><span class=\"line\">    if (sethostname(hostname, strlen(hostname)) == -1) &#123;</span><br><span class=\"line\">        errExit(-1, &quot;sethostname&quot;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 使用 uname 获取子进程的机器信息，并打印 hostname 出来</span><br><span class=\"line\">    if (uname(&amp;uts) == -1)&#123;</span><br><span class=\"line\">        errExit(-1, &quot;uname&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;Container[%d] - container uts.nodename: [%s]!\\n&quot;, pid, uts.nodename);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 用一个新的bash来替换掉当前子进程，</span><br><span class=\"line\">    // 这样我们就能通过 bash 查看当前子进程的情况.</span><br><span class=\"line\">    // bash退出后，子进程执行完毕</span><br><span class=\"line\">    execv(container_args[0], container_args);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;</span><br><span class=\"line\">    // 所以如果执行到这里，一定是出错了</span><br><span class=\"line\">    printf(&quot;Container[%d] - oops!\\n&quot;, pid);</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Parent[%d] - create a container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 把第一个参数作为子进程的 hostname，默认是 `container`</span><br><span class=\"line\">    char *hostname;</span><br><span class=\"line\">    if (argc &lt; 2) &#123;</span><br><span class=\"line\">        hostname = &quot;container&quot;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        hostname = argv[1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid</span><br><span class=\"line\">    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数</span><br><span class=\"line\">                    container_stack + sizeof(container_stack),</span><br><span class=\"line\">                    // CLONE_NEWUTS表示创建新的UTS namespace</span><br><span class=\"line\">                    CLONE_NEWUTS | SIGCHLD,</span><br><span class=\"line\">                    hostname);  // 传给child_func的参数</span><br><span class=\"line\">    errExit(child_pid, &quot;clone&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    waitpid(child_pid, NULL, 0); // 等待子进程结束</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Parent[%d] - container exited!\\n&quot;, pid);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行程序，发现容器中hostname与宿主机已经不一样了，容器中<code>UTS Namespace</code>id也跟宿主机不一样了（这里需要root权限）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br><span class=\"line\">root@lucy-computer:/home/lucy# gcc container.c -o container</span><br><span class=\"line\">root@lucy-computer:/home/lucy# ./container </span><br><span class=\"line\">Parent[21091] - create a container!</span><br><span class=\"line\">Container[21092] - inside the container!</span><br><span class=\"line\">Container[21092] - container uts.nodename: [container]!</span><br><span class=\"line\">root@container:/home/lucy# hostname</span><br><span class=\"line\">container</span><br><span class=\"line\">root@container:/home/lucy# ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -&gt; &apos;cgroup:[4026531835]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -&gt; &apos;ipc:[4026531839]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -&gt; &apos;mnt:[4026531840]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 net -&gt; &apos;net:[4026531992]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 user -&gt; &apos;user:[4026531837]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 uts -&gt; &apos;uts:[4026532944]&apos;</span><br><span class=\"line\">root@container:/home/lucy# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">Parent[21091] - container exited!</span><br><span class=\"line\">root@lucy-computer:/home/lucy# ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -&gt; &apos;cgroup:[4026531835]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -&gt; &apos;ipc:[4026531839]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -&gt; &apos;mnt:[4026531840]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 net -&gt; &apos;net:[4026531992]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 user -&gt; &apos;user:[4026531837]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 uts -&gt; &apos;uts:[4026531838]&apos;</span><br><span class=\"line\">root@lucy-computer:/home/lucy# hostname</span><br><span class=\"line\">lucy-computer</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Let’s-Go\"><a href=\"#Let’s-Go\" class=\"headerlink\" title=\"Let’s Go\"></a>Let’s Go</h3><p>C语言很底层，能控制到很多细节，但是它对于大部分人有点困难，接下来我们会有Go语言来一步步实现Docker容器。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://cizixs.com/2017/08/29/linux-namespace/\" target=\"_blank\" rel=\"noopener\">cizixs.com/2017/08/29/linux-namespace</a></li>\n<li><a href=\"https://www.cnblogs.com/sparkdev/p/9365405.html\" target=\"_blank\" rel=\"noopener\">Linux Namespace : 简介</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/docker-logo.png\" alt=\"docker logo\"></p>\n<p>本文环境：</p>\n<ul>\n<li>OS：Ubuntu 18.04.3 LTS</li>\n<li>内核版本： 5.0.0-36-generic </li>\n</ul>\n<h2 id=\"Linux-Namespaces\"><a href=\"#Linux-Namespaces\" class=\"headerlink\" title=\"Linux Namespaces\"></a>Linux Namespaces</h2><p>Docker的所用的两个关键技术，一个是<code>Namespaces</code>，一个是<code>Cgroups</code>。它俩都不是新技术，Linux内核很早就支持，但是Docker把它们有机地结合起来，加上自己创新，使得现在容器技术非常流行。<br><code>Linux Namespaces</code>其实是做到了进程之间全局资源的隔离，譬如，<code>UTS Namespace</code>隔离了Hostname空间。这意味着在新的<code>UTS Namespace</code>中的进程，可以拥有不同于宿主机的主机名。 </p>","more":"<p>目前Linux内核主要实现了以下几种不同的资源<code>Namespace</code>：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>宏定义</th>\n<th>隔离的内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IPC</td>\n<td>CLONE_NEWIPC</td>\n<td>System V IPC, POSIX message queues (since Linux 2.6.19)</td>\n</tr>\n<tr>\n<td>Network</td>\n<td>CLONE_NEWNET</td>\n<td>network device interfaces, IPv4 and IPv6 protocol stacks, IP routing tables, firewall rules, the /proc/net and /sys/class/net directory trees, sockets, etc (since Linux 2.6.24)</td>\n</tr>\n<tr>\n<td>Mount</td>\n<td>CLONE_NEWNS</td>\n<td>Mount points (since Linux 2.4.19)</td>\n</tr>\n<tr>\n<td>PID</td>\n<td>CLONE_NEWPID</td>\n<td>Process IDs (since Linux 2.6.24)</td>\n</tr>\n<tr>\n<td>User</td>\n<td>CLONE_NEWUSER</td>\n<td>User and group IDs (started in Linux 2.6.23 and completed in Linux 3.8)</td>\n</tr>\n<tr>\n<td>UTS</td>\n<td>CLONE_NEWUTS</td>\n<td>Hostname and NIS domain name (since Linux 2.6.19)</td>\n</tr>\n<tr>\n<td>Cgroup</td>\n<td>CLONE_NEWCGROUP</td>\n<td>Cgroup root directory (since Linux 4.6)</td>\n</tr>\n</tbody></table>\n<p>要注意一点的是，不是所有的系统资源都能隔离，时间就是个例外，没有对应的<code>Namespace</code>，因此同一台Linux启动的容器时间都是相同的。</p>\n<h3 id=\"尝试一下Namespace\"><a href=\"#尝试一下Namespace\" class=\"headerlink\" title=\"尝试一下Namespace\"></a>尝试一下Namespace</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy@lucy-computer:~$ unshare -h</span><br><span class=\"line\"></span><br><span class=\"line\">用法：</span><br><span class=\"line\"> unshare [选项] [&lt;程序&gt; [&lt;参数&gt;...]]</span><br><span class=\"line\"></span><br><span class=\"line\">以某些未与父(进程)共享的名字空间运行某个程序。</span><br><span class=\"line\"></span><br><span class=\"line\">选项：</span><br><span class=\"line\"> -m, --mount[=&lt;文件&gt;]      取消共享 mounts 名字空间</span><br><span class=\"line\"> -u, --uts[=&lt;文件&gt;]        取消共享 UTS 名字空间(主机名等)</span><br><span class=\"line\"> -i, --ipc[=&lt;文件&gt;]        取消共享 System V IPC 名字空间</span><br><span class=\"line\"> -n, --net[=&lt;file&gt;]        取消共享网络名字空间</span><br><span class=\"line\"> -p, --pid[=&lt;文件&gt;]        取消共享 pid 名字空间</span><br><span class=\"line\"> -U, --user[=&lt;文件&gt;]       取消共享用户名字空间</span><br><span class=\"line\"> -C, --cgroup[=&lt;文件&gt;]     取消共享 cgroup 名字空间</span><br><span class=\"line\"> -f, --fork                在启动&lt;程序&gt;前 fork</span><br><span class=\"line\">     --mount-proc[=&lt;目录&gt;] 先挂载 proc 文件系统(连带打开 --mount)</span><br><span class=\"line\"> -r, --map-root-user       将当前用户映射为 root (连带打开 --user)</span><br><span class=\"line\">     --propagation slave|shared|private|unchanged</span><br><span class=\"line\">                           修改 mount 名字空间中的 mount 传播</span><br><span class=\"line\"> -s, --setgroups allow|deny  控制用户名字空间中的 setgroups 系统调用</span><br><span class=\"line\"></span><br><span class=\"line\"> -h, --help                display this help</span><br><span class=\"line\"> -V, --version             display version</span><br></pre></td></tr></table></figure>\n\n<p><code>unshare</code>命令可以让你在新的名称空间集中启动一个新的程序（unshared本身的含义就是不和父进程共享）。<br>下面的例子使用了<code>UTS namespace</code>，可以看到在新的<code>/bin/sh</code>进程中修改hostname，并没有影响宿主机：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo su                   # become root user</span><br><span class=\"line\">$ hostname                  # check current hostname</span><br><span class=\"line\">lucy-computer  </span><br><span class=\"line\">$ unshare -u /bin/sh        # create a shell in new UTS namespace</span><br><span class=\"line\">$ hostname my-new-hostname  # set hostname</span><br><span class=\"line\">$ hostname                  # confirm new hostname</span><br><span class=\"line\">my-new-hostname  </span><br><span class=\"line\">$ exit                      # exit new UTS namespace</span><br><span class=\"line\">$ hostname                  # confirm original hostname unchanged</span><br><span class=\"line\">lucy-computer</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三个系统调用\"><a href=\"#三个系统调用\" class=\"headerlink\" title=\"三个系统调用\"></a>三个系统调用</h3><p><code>unshare</code>命令很棒，但是当我们想要对程序中的命名空间进行更细粒度的控制时，那该怎么办呢？<br>Linux 内核提供的功能都会提供<code>系统调用</code>接口供应用程序使用，<code>Namespace</code>也不例外。和<code>Namespace</code>相关的系统调用主要有三个：</p>\n<ul>\n<li><a href=\"http://man7.org/linux/man-pages/man2/clone.2.html\" target=\"_blank\" rel=\"noopener\">clone</a></li>\n<li><a href=\"http://man7.org/linux/man-pages/man2/setns.2.html\" target=\"_blank\" rel=\"noopener\">setns</a></li>\n<li><a href=\"http://man7.org/linux/man-pages/man2/unshare.2.html\" target=\"_blank\" rel=\"noopener\">unshare</a></li>\n</ul>\n<p><strong>注意</strong>：这些系统调用都是 linux 内核实现的，不能直接适用于其他操作系统。</p>\n<p>查看一下它们对应的C语言函数原型：</p>\n<h4 id=\"clone：创建新进程并设置它的Namespace\"><a href=\"#clone：创建新进程并设置它的Namespace\" class=\"headerlink\" title=\"clone：创建新进程并设置它的Namespace\"></a>clone：创建新进程并设置它的Namespace</h4><p><code>clone</code>类似于<code>fork</code>系统调用，可以创建一个新的进程，不同的是你可以指定要子进程要执行的函数以及通过参数控制子进程的运行环境。</p>\n<blockquote>\n<p>实际上，clone() 是在 C 语言库中定义的一个封装(wrapper)函数，它负责建立新进程的堆栈并且调用对编程者隐藏的 clone() 系统调用。Clone() 其实是 linux 系统调用 fork() 的一种更通用的实现方式，它可以通过 flags 来控制使用多少功能。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int clone(int (*fn)(void *), void *child_stack, int flags, void *arg);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>fn：指定一个由新进程执行的函数。当这个函数返回时，子进程终止。该函数返回一个整数，表示子进程的退出代码。</li>\n<li>child_stack：传入子进程使用的栈空间，也就是把用户态堆栈指针赋给子进程的 esp 寄存器。调用进程(指调用 clone() 的进程)应该总是为子进程分配新的堆栈。</li>\n<li>flags：表示使用哪些 CLONE_ 开头的标志位，与 namespace 相关的有CLONE_NEWIPC、CLONE_NEWNET、CLONE_NEWNS、CLONE_NEWPID、CLONE_NEWUSER、CLONE_NEWUTS 和 CLONE_NEWCGROUP，如果要同时隔离多个 namespace，<strong>可以使用 | (按位或)组合这些参数</strong>。</li>\n<li>arg：指向传递给 fn() 函数的参数。</li>\n</ul>\n<h4 id=\"setns：让进程加入已经存在Namespace\"><a href=\"#setns：让进程加入已经存在Namespace\" class=\"headerlink\" title=\"setns：让进程加入已经存在Namespace\"></a>setns：让进程加入已经存在Namespace</h4><p>setns 能够把某个进程加入到给定的 namespace，它的定义是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">int setns(int fd, int nstype);</span><br></pre></td></tr></table></figure>\n\n<p>和<code>clone()</code>函数一样，C 语言库中的<code>setns()</code>函数也是对<code>setns系统调用</code>的封装。  </p>\n<ul>\n<li>fd：表示要加入 namespace 的文件描述符。它是一个指向 /proc/[pid]/ns 目录中文件的文件描述符，可以通过直接打开该目录下的链接文件或者打开一个挂载了该目录下链接文件的文件得到。</li>\n<li>nstype：参数 nstype 让调用者可以检查 fd 指向的 namespace 类型是否符合实际要求。若把该参数设置为 0 表示不检查。</li>\n</ul>\n<h4 id=\"unshare：让进程加入新的Namespace\"><a href=\"#unshare：让进程加入新的Namespace\" class=\"headerlink\" title=\"unshare：让进程加入新的Namespace\"></a>unshare：让进程加入新的Namespace</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">int unshare(int flags);</span><br></pre></td></tr></table></figure>\n\n<p><code>unshare()</code>函数比较简单，只有一个参数<code>flags</code>，它的含义和<code>clone()</code>的<code>flags</code>相同。<code>unshare</code>和 <code>setns</code> 的区别是，<code>setns</code> 只能让进程加入到已经存在的<code>namespace</code>中，而<code>unshare</code>则让进程离开当前的<code>namespace</code>，加入到新建的<code>namespace</code>中。  </p>\n<p><code>unshare()</code>和<code>clone()</code>的区别在于：<code>unshare()</code>是把当前进程进入到新的<code>namespace</code>；<code>clone()</code>是创建新的进程，然后让新创建的进程（子进程）加入到新的<code>namespace</code>。</p>\n<h2 id=\"C程序中使用clone系统调用\"><a href=\"#C程序中使用clone系统调用\" class=\"headerlink\" title=\"C程序中使用clone系统调用\"></a>C程序中使用clone系统调用</h2><p>我们先来看看 clone 一个简单的使用例子：创建一个新的进程，并执行 /bin/bash，这样就可以接受命令，方便我们查看新进程的信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;sys/wait.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置子进程要使用的栈空间</span><br><span class=\"line\">#define STACK_SIZE (1024*1024)</span><br><span class=\"line\">static char container_stack[STACK_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">#define errExit(code, msg); &#123;if(code == -1)&#123;perror(msg); exit(-1);&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">char* const container_args[] = &#123;</span><br><span class=\"line\">    &quot;/bin/bash&quot;,</span><br><span class=\"line\">    NULL</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static int container_func(void *arg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Container[%d] - inside the container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 用一个新的bash来替换掉当前子进程，</span><br><span class=\"line\">    // 这样我们就能通过 bash 查看当前子进程的情况.</span><br><span class=\"line\">    // bash退出后，子进程执行完毕</span><br><span class=\"line\">    execv(container_args[0], container_args);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;</span><br><span class=\"line\">    // 所以如果执行到这里，一定是出错了</span><br><span class=\"line\">    printf(&quot;Container[%d] - oops!\\n&quot;, pid);</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Parent[%d] - create a container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid</span><br><span class=\"line\">    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数</span><br><span class=\"line\">                    container_stack + sizeof(container_stack),</span><br><span class=\"line\">                    // 这里SIGCHLD是子进程退出后返回给父进程的信号，跟namespace无关</span><br><span class=\"line\">                    SIGCHLD,</span><br><span class=\"line\">                    NULL);  // 传给child_func的参数</span><br><span class=\"line\">    errExit(child_pid, &quot;clone&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    waitpid(child_pid, NULL, 0); // 等待子进程结束</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Parent[%d] - container exited!\\n&quot;, pid);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码不长，但是做了很多事情：</p>\n<ul>\n<li>通过<code>clone()</code>创建出一个子进程，并设置启动时的参数</li>\n<li>在子进程中调用 execv 来执行 /bin/bash，等待用户进行交互</li>\n<li>子进程退出之后，父进程也跟着退出</li>\n</ul>\n<p>我们可以用<code>ls -l /proc/$$/ns</code>查看当前进程所在命名空间的信息，运行程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy@lucy-computer:~$ gcc container.c -o container</span><br><span class=\"line\">lucy@lucy-computer:~$ ./container </span><br><span class=\"line\">Parent[19644] - create a container!</span><br><span class=\"line\">Container[19645] - inside the container!</span><br><span class=\"line\">lucy@lucy-computer:~$ ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 cgroup -&gt; &apos;cgroup:[4026531835]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 ipc -&gt; &apos;ipc:[4026531839]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 mnt -&gt; &apos;mnt:[4026531840]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 net -&gt; &apos;net:[4026531992]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid_for_children -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 user -&gt; &apos;user:[4026531837]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 uts -&gt; &apos;uts:[4026531838]&apos;</span><br><span class=\"line\">lucy@lucy-computer:~$ exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">Parent[19644] - container exited!</span><br><span class=\"line\">lucy@lucy-computer:~$ ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 cgroup -&gt; &apos;cgroup:[4026531835]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 ipc -&gt; &apos;ipc:[4026531839]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 mnt -&gt; &apos;mnt:[4026531840]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 net -&gt; &apos;net:[4026531992]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid_for_children -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 user -&gt; &apos;user:[4026531837]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 uts -&gt; &apos;uts:[4026531838]&apos;</span><br></pre></td></tr></table></figure>\n\n<p>各类命名空间id都是一样，因为我们只是单单使用了<code>clone</code>，未设置要隔离的命名空间，现在，我们加入<code>UTS Namespace</code>隔离，<code>UTS namespace</code> 功能最简单，它只隔离了 hostname 和 NIS domain name 两个资源。<br>同一个 namespace 里面的进程看到的 hostname 和 domain name 是相同的，这两个值可以通过 <code>sethostname(2)</code> 和 <code>setdomainname(2)</code> 来进行设置，也可以通过 <code>uname(2)</code>、<code>gethostname(2)</code> 和 <code>getdomainname(2)</code> 来读取。<br><strong>注意</strong>： UTS 的名字来自于<code>uname</code>函数用到的结构体<code>struct utsname</code>，这个结构体的名字源自于<code>UNIX Time-sharing System</code>。<br>代码主要修改两个地方：clone 的参数加上了 CLONE_NEWUTS，子进程函数中使用<code>sethostname</code>来设置 hostname。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;sys/wait.h&gt;</span><br><span class=\"line\">#include &lt;sys/utsname.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置子进程要使用的栈空间</span><br><span class=\"line\">#define STACK_SIZE (1024*1024)</span><br><span class=\"line\">static char container_stack[STACK_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">#define errExit(code, msg); &#123;if(code == -1)&#123;perror(msg); exit(-1);&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">char* const container_args[] = &#123;</span><br><span class=\"line\">    &quot;/bin/bash&quot;,</span><br><span class=\"line\">    NULL</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static int container_func(void *hostname)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Container[%d] - inside the container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 使用 sethostname 设置子进程的 hostname 信息</span><br><span class=\"line\">    struct utsname uts;</span><br><span class=\"line\">    if (sethostname(hostname, strlen(hostname)) == -1) &#123;</span><br><span class=\"line\">        errExit(-1, &quot;sethostname&quot;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 使用 uname 获取子进程的机器信息，并打印 hostname 出来</span><br><span class=\"line\">    if (uname(&amp;uts) == -1)&#123;</span><br><span class=\"line\">        errExit(-1, &quot;uname&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;Container[%d] - container uts.nodename: [%s]!\\n&quot;, pid, uts.nodename);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 用一个新的bash来替换掉当前子进程，</span><br><span class=\"line\">    // 这样我们就能通过 bash 查看当前子进程的情况.</span><br><span class=\"line\">    // bash退出后，子进程执行完毕</span><br><span class=\"line\">    execv(container_args[0], container_args);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;</span><br><span class=\"line\">    // 所以如果执行到这里，一定是出错了</span><br><span class=\"line\">    printf(&quot;Container[%d] - oops!\\n&quot;, pid);</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Parent[%d] - create a container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 把第一个参数作为子进程的 hostname，默认是 `container`</span><br><span class=\"line\">    char *hostname;</span><br><span class=\"line\">    if (argc &lt; 2) &#123;</span><br><span class=\"line\">        hostname = &quot;container&quot;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        hostname = argv[1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid</span><br><span class=\"line\">    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数</span><br><span class=\"line\">                    container_stack + sizeof(container_stack),</span><br><span class=\"line\">                    // CLONE_NEWUTS表示创建新的UTS namespace</span><br><span class=\"line\">                    CLONE_NEWUTS | SIGCHLD,</span><br><span class=\"line\">                    hostname);  // 传给child_func的参数</span><br><span class=\"line\">    errExit(child_pid, &quot;clone&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    waitpid(child_pid, NULL, 0); // 等待子进程结束</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Parent[%d] - container exited!\\n&quot;, pid);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行程序，发现容器中hostname与宿主机已经不一样了，容器中<code>UTS Namespace</code>id也跟宿主机不一样了（这里需要root权限）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br><span class=\"line\">root@lucy-computer:/home/lucy# gcc container.c -o container</span><br><span class=\"line\">root@lucy-computer:/home/lucy# ./container </span><br><span class=\"line\">Parent[21091] - create a container!</span><br><span class=\"line\">Container[21092] - inside the container!</span><br><span class=\"line\">Container[21092] - container uts.nodename: [container]!</span><br><span class=\"line\">root@container:/home/lucy# hostname</span><br><span class=\"line\">container</span><br><span class=\"line\">root@container:/home/lucy# ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -&gt; &apos;cgroup:[4026531835]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -&gt; &apos;ipc:[4026531839]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -&gt; &apos;mnt:[4026531840]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 net -&gt; &apos;net:[4026531992]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 user -&gt; &apos;user:[4026531837]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 uts -&gt; &apos;uts:[4026532944]&apos;</span><br><span class=\"line\">root@container:/home/lucy# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">Parent[21091] - container exited!</span><br><span class=\"line\">root@lucy-computer:/home/lucy# ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -&gt; &apos;cgroup:[4026531835]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -&gt; &apos;ipc:[4026531839]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -&gt; &apos;mnt:[4026531840]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 net -&gt; &apos;net:[4026531992]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -&gt; &apos;pid:[4026531836]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 user -&gt; &apos;user:[4026531837]&apos;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 uts -&gt; &apos;uts:[4026531838]&apos;</span><br><span class=\"line\">root@lucy-computer:/home/lucy# hostname</span><br><span class=\"line\">lucy-computer</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Let’s-Go\"><a href=\"#Let’s-Go\" class=\"headerlink\" title=\"Let’s Go\"></a>Let’s Go</h3><p>C语言很底层，能控制到很多细节，但是它对于大部分人有点困难，接下来我们会有Go语言来一步步实现Docker容器。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://cizixs.com/2017/08/29/linux-namespace/\" target=\"_blank\" rel=\"noopener\">cizixs.com/2017/08/29/linux-namespace</a></li>\n<li><a href=\"https://www.cnblogs.com/sparkdev/p/9365405.html\" target=\"_blank\" rel=\"noopener\">Linux Namespace : 简介</a></li>\n</ul>"},{"title":"Vagrant本地快速启动Kubernetes集群","author":"Salamander","date":"2019-12-16T05:00:00.000Z","_content":"![k8s logo](https://image-static.segmentfault.com/311/703/311703680-5b80e2877f8c8_articlex)\n\nKubernetes，简称 **k8s**（k，8 个字符，s——明白了？）或者 “kube”，是一个开源的 Linux 容器自动化运维平台，它消除了容器化应用程序在部署、伸缩时涉及到的许多手动操作。换句话说，你可以将多台主机组合成集群来运行 Linux 容器，而 Kubernetes 可以帮助你简单高效地管理那些集群。构成这些集群的主机还可以跨越公有云、私有云以及混合云。\n\n\n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Vagrant版本：2.2.6\n* VirtualBox版本：6.0.14 r133895 (Qt5.9.5)\n* Kubernetes版本：1.15.7\n\n<!-- more -->\n\n## 安装Vagrant\nVagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源**VirtualBox**（其实也可以用别的）虚拟化系统，使用Chef创建自动化虚拟环境。\n首先到[官网](https://www.vagrantup.com/downloads.html)下载最新的`Vagrant`，现在最新的版本是**2.2.6**，当然你也可以通过命令行下载：\n```\nwget https://releases.hashicorp.com/vagrant/2.2.6/vagrant_2.2.6_x86_64.deb\n```\n验证`Vagrant`安装成功\n```\n$ vagrant --version\nVagrant 2.2.6\n```\n\n## 安装VirtualBox\nVagrant是基于虚拟机（`VirtualBox`，`VMware`这些）的，所以我们还需要安装`VirtualBox`。在Vagrant官网可以它适配的`VirtualBox`版本\n> Vagrant comes with support out of the box for VirtualBox, a free, cross-platform consumer virtualization product.\n> The VirtualBox provider is compatible with VirtualBox versions 4.0.x, 4.1.x, 4.2.x, 4.3.x, 5.0.x, 5.1.x, 5.2.x, and 6.0.x.\n\n这里我下载6.0版本的`VirtualBox`，[下载地址](https://www.virtualbox.org/wiki/Download_Old_Builds_6_0)\n```\nwget https://download.virtualbox.org/virtualbox/6.0.14/virtualbox-6.0_6.0.14-133895~Ubuntu~bionic_amd64.deb\n```\n**注意：不要通过apt-get安装VirtualBox**，因为5.1.0版本开始，VirtualBox已经不需要**DKMS**，apt官方源中VirtualBox比较老，是会带上`DKMS`的：\n```\nDKMS isn't required by VirtualBox since 5.1.0. Which means that you downloaded VirtualBox from your Debian \"store\". That's a fork, not supported. You can either ask in their forums for help, or completely remove/uninstall/delete/purge their version and install the official version from the Downloads section of VirtualBox (https://www.virtualbox.org/wiki/Downloads).\n```\n\n\n## 启动虚拟机\n`Vagrant`跟docker类似，可以提供一致性环境的，它可以编写`Vagrantfile`（类似`docker-compose.yml`）来定义虚拟机中安装什么软件，环境和配置，它使用ruby语法。`Vagrant`也做了[box源](https://app.vagrantup.com/boxes/search)，类似docker image。  \n下面给出一个小栗子感受下，这里使用`ubuntu/xenial64`（Ubuntu 16.06 64位）这个box\n```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# All Vagrant configuration is done below. The \"2\" in Vagrant.configure\n# configures the configuration version (we support older styles for\n# backwards compatibility). Please don't change it unless you know what\n# you're doing.\nVagrant.configure(\"2\") do |config|\n  ##### DEFINE VM #####\n  # The most common configuration options are documented and commented below.\n  # For a complete reference, please see the online documentation at\n  # https://docs.vagrantup.com.\n\n  # Every Vagrant development environment requires a box. You can search for\n  # boxes at https://app.vagrantup.com/boxes/search.\n  config.vm.box = \"ubuntu/xenial64\"\n\n  config.vm.hostname = \"ubuntu-01\"\n  config.vm.box_check_update = false\n\n  # Create a private network, which allows host-only access to the machine\n  # using a specific IP.\n  config.vm.network \"private_network\", ip: \"192.168.10.50\"\n\n  # Create a public network, which generally matched to bridged network.\n  # Bridged networks make the machine appear as another physical device on\n  # your network.\n  # config.vm.network \"public_network\"\n\n  # Share an additional folder to the guest VM. The first argument is\n  # the path on the host to the actual folder. The second argument is\n  # the path on the guest to mount the folder. And the optional third\n  # argument is a set of non-required options.\n  # config.vm.synced_folder \"../data\", \"/vagrant_data\"\n\n\n  # Provider-specific configuration so you can fine-tune various\n  # backing providers for Vagrant. These expose provider-specific options.\n  # Example for VirtualBox:\n  #\n  # config.vm.provider \"virtualbox\" do |vb|\n  #   # Display the VirtualBox GUI when booting the machine\n  #   vb.gui = true\n  #\n  #   # Customize the amount of memory on the VM:\n  #   vb.memory = \"1024\"\n  # end\n  #\n  # View the documentation for the provider you are using for more\n  # information on available options.\n  \n  config.vm.provider \"virtualbox\" do |v|\n    v.name = \"ubuntu-for-fun\"\n    v.customize [\"modifyvm\", :id, \"--memory\", \"2048\"]\n    v.customize [\"modifyvm\", :id, \"--cpus\", \"2\"]\n  end\n\n  # Create a forwarded port mapping which allows access to a specific port\n  # within the machine from a port on the host machine. In the example below,\n  # accessing \"localhost:8080\" will access port 80 on the guest machine.\n  # config.vm.network \"forwarded_port\", guest: 80, host: 8080\nend\n```\n更多虚拟机的配置可以查看[官方文档](https://www.vagrantup.com/docs/vagrantfile/machine_settings.html)  \n在Vagrantfile对应的目录下终端键入：`vagrant up`，然后`Vagrant`会帮我们下载`ubuntu/xenial64`这个box，不过在中国下载速度非常慢，在运行`vagrant up`时我们可以看到这个box的下载url，你可以用**迅雷**这些工具直接下载，然后在本地手动添加box\n```\n$ vagrant up\nBringing machine 'default' up with 'virtualbox' provider...\n==> default: Box 'ubuntu/xenial64' could not be found. Attempting to find and install...\n    default: Box Provider: virtualbox\n    default: Box Version: >= 0\n==> default: Loading metadata for box 'ubuntu/xenial64'\n    default: URL: https://vagrantcloud.com/ubuntu/xenial64\n==> default: Adding box 'ubuntu/xenial64' (v20191217.0.0) for provider: virtualbox\n    default: Downloading: https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box\n==> default: Box download is resuming from prior download progress\n    default: Download redirected to host: cloud-images.ubuntu.com\n    .........\n\n$ cd ~/box-add\n$ ls\nmetadata.json  virtualbox.box\n$ vagrant box add metadata.json\n==> box: Loading metadata for box 'metadata.json'\n    box: URL: file:///home/lucy/vm-add/metadata.json\n==> box: Adding box 'ubuntu/xenial64' (v20191217.0.0) for provider: virtualbox\n    box: Downloading: ./virtualbox.box\n==> box: Successfully added box 'ubuntu/xenial64' (v20191217.0.0) for 'virtualbox'!\n$ vagrant box list\nubuntu/xenial64 (virtualbox, 20191217.0.0)\n```\n下载box的URL是`https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box`，可以看到下载的版本是**20191217.0.0**，另外注意一下这里添加box的是使用一个`metadata.json`文件，使用这样的方式可以定义box版本号，它的内容是：\n```\n{\n    \"name\": \"ubuntu/xenial64\",\n    \"versions\": [{\n        \"version\": \"20191217.0.0\",\n        \"providers\": [{\n            \"name\": \"virtualbox\",\n            \"url\": \"./virtualbox.box\"\n        }]\n    }]\n}\n```\n\n启动虚拟机你可能会遇到下面的错误：\n\n![upload successful](/images/virtualbox-error.png)\n\n解决方法是在**BIOS**中将**Intel Virtualization Technology**改为Enable。  \n启动虚拟机后，你可以通过`vagrant ssh`进入虚拟机。\n\n## 启动Kubernetes集群\n这里我编写了一个`Vagrantfile`，一键启动集群：\n```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nservers = [\n    {\n        :name => \"k8s-head\",\n        :type => \"master\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.10\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    },\n    {\n        :name => \"k8s-node-1\",\n        :type => \"node\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.11\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    },\n    {\n        :name => \"k8s-node-2\",\n        :type => \"node\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.12\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    }\n]\n\n# This script to install k8s using kubeadm will get executed after a box is provisioned\n$configureBox = <<-SCRIPT\n    cp /etc/apt/sources.list /etc/apt/sources.list.bak\n    # use Aliyun apt source\n    cat > /etc/apt/sources.list<<EOF\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\nEOF\n\n    export DEBIAN_FRONTEND=noninteractive\n\n    # install docker v17.03\n    # reason for not using docker provision is that it always installs latest version of the docker, but kubeadm requires 17.03 or older\n    apt-get update\n    # step 1: 安装必要的一些系统工具\n    apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n    # step 2: 安装GPG证书\n    curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n    add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/$(. /etc/os-release; echo \"$ID\") $(lsb_release -cs) stable\"\n    apt-get update && apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk '{print $3}')\n    # run docker commands as vagrant user (sudo not required)\n    usermod -aG docker vagrant\n    # 修改docker配置\n    sudo bash -c 'cat > /etc/docker/daemon.json <<EOF\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF'\n    sudo systemctl daemon-reload\n    sudo systemctl restart docker\n\n    # install kubeadm\n    apt-get install -y apt-transport-https curl\n    curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -  # aliyun GPG\n    cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\n    deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\nEOF\n    apt-get update\n    apt-get install -y kubelet=1.15.7-00 kubeadm=1.15.7-00 kubectl=1.15.7-00\n    apt-mark hold kubelet kubeadm kubectl\n    # kubelet requires swap off\n    swapoff -a\n    # keep swap off after reboot\n    sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n    # ip of this box\n    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`\n    # set node-ip\n    sudo sh -c 'echo KUBELET_EXTRA_ARGS= >> /etc/default/kubelet'\n    sudo sed -i \"/^[^#]*KUBELET_EXTRA_ARGS=/c\\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR\" /etc/default/kubelet\n    sudo systemctl restart kubelet\nSCRIPT\n\n$configureMaster = <<-SCRIPT\n    export DEBIAN_FRONTEND=noninteractive\n    echo \"This is master\"\n    # ip of this box\n    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`\n    # install k8s master\n    HOST_NAME=$(hostname -s)\n    kubeadm init --image-repository registry.aliyuncs.com/google_containers  --kubernetes-version v1.15.7 \\\n    --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR  --node-name $HOST_NAME --pod-network-cidr=172.16.0.0/16\n    #copying credentials to regular user - vagrant\n    sudo --user=vagrant mkdir -p /home/vagrant/.kube\n    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config\n    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config\n\n    # install Calico pod network addon\n    export KUBECONFIG=/etc/kubernetes/admin.conf\n    kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml\n    kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml\n    kubeadm token create --print-join-command >> /etc/kubeadm_join_cmd.sh\n    chmod +x /etc/kubeadm_join_cmd.sh\n    # required for setting up password less ssh between guest VMs\n    sudo sed -i \"/^[^#]*PasswordAuthentication[[:space:]]no/c\\PasswordAuthentication yes\" /etc/ssh/sshd_config\n    sudo service sshd restart\nSCRIPT\n\n$configureNode = <<-SCRIPT\n    export DEBIAN_FRONTEND=noninteractive\n    echo \"This is worker\"\n    apt-get install -y sshpass\n    sshpass -p \"vagrant\" scp -o StrictHostKeyChecking=no vagrant@192.168.205.10:/etc/kubeadm_join_cmd.sh .\n    sh ./kubeadm_join_cmd.sh\nSCRIPT\n\nVagrant.configure(\"2\") do |config|\n    \n    servers.each do |opts|\n        config.vm.define opts[:name] do |config|\n\n            config.vm.box = opts[:box]\n            config.vm.box_version = opts[:box_version]\n            config.vm.hostname = opts[:name]\n            config.vm.network :private_network, ip: opts[:eth1]\n\n            config.vm.provider \"virtualbox\" do |v|\n\n                v.name = opts[:name]\n            \tv.customize [\"modifyvm\", :id, \"--groups\", \"/Salamander Development\"]\n                v.customize [\"modifyvm\", :id, \"--memory\", opts[:mem]]\n                v.customize [\"modifyvm\", :id, \"--cpus\", opts[:cpu]]\n                v.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n                v.customize [\"modifyvm\", :id, \"--natdnsproxy1\", \"on\"]\n            end\n\n            # we cannot use this because we can't install the docker version we want - https://github.com/hashicorp/vagrant/issues/4871\n            #config.vm.provision \"docker\"\n\n            config.vm.provision \"shell\", inline: $configureBox\n\n            if opts[:type] == \"master\"\n                config.vm.provision \"shell\", inline: $configureMaster\n            else\n                config.vm.provision \"shell\", inline: $configureNode\n            end\n\n        end\n\n    end\nend\n```\n启动集群`vagrant up`，这里需要耐心等待几分钟，因为要启动三个虚拟机、安装一些软件和设置环境。  \n启动集群后，进入**Master节点**`vagrant ssh k8s-head`查看集群状态：\n```\n$ kubectl get nodes\nNAME         STATUS   ROLES    AGE    VERSION\nk8s-head     Ready    master   5h7m   v1.15.7\nk8s-node-1   Ready    <none>   5h5m   v1.15.7\nk8s-node-2   Ready    <none>   5h2m   v1.15.7\n\n\n$ kubectl get pods --all-namespaces\nNAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE\nkube-system            calico-node-j5kw8                            2/2     Running   4          5h7m\nkube-system            calico-node-kq89s                            2/2     Running   0          5h6m\nkube-system            calico-node-twvdl                            2/2     Running   0          5h2m\nkube-system            coredns-94d74667-jhjl8                       1/1     Running   2          5h7m\nkube-system            coredns-94d74667-qd9qv                       1/1     Running   2          5h7m\nkube-system            etcd-k8s-head                                1/1     Running   2          5h6m\nkube-system            kube-apiserver-k8s-head                      1/1     Running   2          5h6m\nkube-system            kube-controller-manager-k8s-head             1/1     Running   2          5h6m\nkube-system            kube-proxy-7d8wj                             1/1     Running   0          5h2m\nkube-system            kube-proxy-hn89g                             1/1     Running   0          5h6m\nkube-system            kube-proxy-t8qf9                             1/1     Running   2          5h7m\nkube-system            kube-scheduler-k8s-head                      1/1     Running   2          5h6m\n\n$ kubectl cluster-info\nKubernetes master is running at https://192.168.205.10:6443\nKubeDNS is running at https://192.168.205.10:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\n$ kubectl get componentstatuses\nNAME                 STATUS    MESSAGE             ERROR\nscheduler            Healthy   ok                  \ncontroller-manager   Healthy   ok                  \netcd-0               Healthy   {\"health\":\"true\"}\n```\n节点都是**Ready**和pods都是**Running**说明集群成功启动了，`kubectl cluster-info`可以查看集群信息，`kubectl get componentstatuses`可以查看各组件信息。\n\n\n\n\n## 安装官方Dashboard\n[Dashboard](https://github.com/kubernetes/dashboard)是Kubernetes的一个插件，代码单独放在Github的一个仓库里。  \n按照[官方文档](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/)，步骤也蛮简单的，首先执行命令：\n```\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml\n```\n\n查看一下Dashboard的服务：\n```\n\n$ kubectl  get pod,deploy,svc -n kubernetes-dashboard\nNAME                                             READY   STATUS    RESTARTS   AGE\npod/dashboard-metrics-scraper-6c554969c6-jqhjx   1/1     Running   0          5h5m\npod/kubernetes-dashboard-56c5f95c6b-jrj58        1/1     Running   5          5h5m\n\nNAME                                              READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.extensions/dashboard-metrics-scraper   1/1     1            1           5h5m\ndeployment.extensions/kubernetes-dashboard        1/1     1            1           5h5m\n\nNAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nservice/dashboard-metrics-scraper   ClusterIP   10.106.117.224   <none>        8000/TCP   5h5m\nservice/kubernetes-dashboard        ClusterIP   10.98.23.78      <none>        443/TCP    5h5m\n\n\n# 我们可以看到官方的dashboard帮我们启动了web-ui，并且帮我们启动了一个Metric服务\n# 但是dashboard默认使用的https的443端口\n\n# 测试下Dashboard是否正常\n$ curl https://10.98.23.78:443 -k -I\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nCache-Control: no-store\nContent-Length: 1262\nContent-Type: text/html; charset=utf-8\nLast-Modified: Fri, 06 Dec 2019 15:14:02 GMT\nDate: Tue, 31 Dec 2019 06:35:55 GMT\n```\n\n### 访问Dashboard\n访问Dashboard有好几种方式\n* 将kubernetes-dashboard Service暴露 NodePort，使用 http://NodeIP:nodePort 地址访问 dashboard\n* 使用Ingress之类的入口服务进行代理访问\n* 通过 API server 访问 dashboard（https 6443端口和http 8080端口方式）\n* 通过 kubectl proxy 访问 dashboard\n\n\n#### kubectl proxy\n首先这里我们通过`kubectl proxy`，在**k8s-head**节点执行：\n```\n$ kubectl proxy --address='0.0.0.0' --accept-hosts='^*$'\n```\n在访问之前，我们需要先创建一个**User**（一个**ServiceAccount**，k8s内概念），创建dashboard-adminuser.yaml文件，写入\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\n\n```\n执行`kubectl apply -f dashboard-adminuser.yaml`。  \n查看用户token（之后在浏览器中输入）\n```\n$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')\nName:         admin-user-token-mxmtr\nNamespace:    kubernetes-dashboard\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: admin-user\n              kubernetes.io/service-account.uid: 54ddc041-f3af-41fa-a824-6a3e29f0ffa3\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  20 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLW14bXRyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI1NGRkYzA0MS1mM2FmLTQxZmEtYTgyNC02YTNlMjlmMGZmYTMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.osyqbUwS4pLDEhZ0iL0aAu2f5me82bGTEfXEW8ycS5-JRar4iYcWkqhJZ9FhZV47P0WKLT9UWiLcDw1rVPZbMSHrRnFZcRHmLO35tVBaijjvgsgm2X5856G-HS1VNMgQBSZXiQXr1Lt3Dj9JHHksbiLGg-3wRy7HqD-I8JcR1pHZ_ViOqQ1j6WIbvhfEE3FpTuuSPAcjwVNutXAfur6oJktjYAcwMjWTQ4-yMQ2NRSWM7AcJtjp_7p3WwnHmO6fH6LtrGQzmXwHh5ICmei2LrAE2cxwN251aMVnrPGt00Ff4ij2-yLyI4VZOgAsNuPegctm-GuCOTGNX9Ew-o1si_Q\n```\n\n\n为了在宿主机上能访问，我们需要用VirutalBox管理界面添加一个端口映射：  \n\n![upload successful](https://s2.ax1x.com/2019/12/31/l1FsQP.png)\n\n好了，现在我们可以访问Dashboard了，浏览内输入`http://localhost:31694/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.`，可以看到\n![](/images/k8s-dashboard.png)\n\n#### NodePort\n这个过程比`kubectl proxy`简单，再安装Dashboard之前，把`Service`类型改成`NodePort`即可：\n```\n$ wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml  #下载yaml\n$ vim recommended.yaml\n```\n找到Service部分，改成NodePort\n````\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  type: NodePort  # 这个是新增部分\n  ports:\n    - port: 443\n      targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n```\n查看，Service的随机端口：\n```\n$ kubectl get pods,svc --all-namespaces\n\nNAMESPACE              NAME                                             READY   STATUS    RESTARTS   AGE\nkube-system            pod/calico-node-ffn9k                            2/2     Running   10         32d\nkube-system            pod/calico-node-fz8v6                            2/2     Running   12         32d\nkube-system            pod/calico-node-gvjft                            2/2     Running   8          32d\nkube-system            pod/coredns-94d74667-8jp5k                       1/1     Running   4          32d\nkube-system            pod/coredns-94d74667-tlph7                       1/1     Running   4          32d\nkube-system            pod/etcd-k8s-head                                1/1     Running   4          32d\nkube-system            pod/kube-apiserver-k8s-head                      1/1     Running   4          32d\nkube-system            pod/kube-controller-manager-k8s-head             1/1     Running   4          32d\nkube-system            pod/kube-proxy-4rsp4                             1/1     Running   5          32d\nkube-system            pod/kube-proxy-dccdc                             1/1     Running   5          32d\nkube-system            pod/kube-proxy-x82tl                             1/1     Running   4          32d\nkube-system            pod/kube-scheduler-k8s-head                      1/1     Running   4          32d\nkubernetes-dashboard   pod/dashboard-metrics-scraper-6c554969c6-wmwpt   1/1     Running   0          18m\nkubernetes-dashboard   pod/kubernetes-dashboard-56c5f95c6b-s66g8        1/1     Running   0          18m\n\nNAMESPACE              NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE\ndefault                service/kubernetes                  ClusterIP   10.96.0.1        <none>        443/TCP                  32d\nkube-system            service/calico-typha                ClusterIP   10.104.182.223   <none>        5473/TCP                 32d\nkube-system            service/kube-dns                    ClusterIP   10.96.0.10       <none>        53/UDP,53/TCP,9153/TCP   32d\nkubernetes-dashboard   service/dashboard-metrics-scraper   ClusterIP   10.99.243.131    <none>        8000/TCP                 18m\nkubernetes-dashboard   service/kubernetes-dashboard        NodePort    10.96.23.239     <none>        443:30646/TCP            18m\n```\n可以看到暴露端口是**30646**，访问Master节点上的30646端口`https://192.168.205.10:30646`，需要填写的**token**和上面`kubectl proxy`遇到的问题一样，先创建**ServiceAccount**和**ClusterRoleBinding**，然后查看这个账号的token。\n\n\n#### API Server\n首先，我们需要导出p12证书：\n```\n# 生成 client-certificate-data\ngrep 'client-certificate-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.crt\n\n# 生成 client-key-data\ngrep 'client-key-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.key\n\n# 生成 p12\nopenssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name \"kubernetes-client\"\n```\n然后，在在 chrome 导入了 p12 证书（点击“设置”，“管理证书”那里导入）。  \n访问链接：`https://192.168.205.10:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy`，就可以看到**登录界面**了（注意：**新版的Dashboard，命名空间移动到了kubernetes-dashboard中**）  \n![](https://s2.ax1x.com/2020/01/26/1mG9UJ.png)\n**token**的填写跟上面`kubectl proxy`一样，当然你也可以直接用master节点中`$HOME/.kube/config`文件来登录。\n\n\n\n\n## kubernetes常用命令\n```\n## 查看\nkubectl cluster-info    ----查看集群信息\nkubectl get pods --all-namespaces ------查看所有pod信息\nkubectl get cs    ----查看各组件（componentstatuses）信息，可以简写为rc\nkubectl get pods -n default   ----列出default命名空间所有的pods\nkubectl get pods -o wide    ----查看pods所在的运行节点\nkubectl get pods -o yaml    ----查看pods定义的详细信息\nkubectl get rc    ----查看Replication Controller信息\nkubectl get service    ----查看service的信息\nkubectl get nodes    ----查看节点信息\nkubectl get pod --selector name=redis    ----按selector名来查找pod\nkubectl exec pod名字 env    ----查看运行的pod的环境变量\nkubectl  get pod,deploy,svc -n kubernetes-dashboard ---一起查看pod，service，deployment信息\n\n## 创建\nkubectl create -f 文件名    ----创建\nkubectl replace -f 文件名  [--force]    ----重建\n\n## 删除\nkubectl delete -f 文件名\nkubectl delete pod pod名\nkubectl delete rc rc名\nkubectl delete service service名\nkubectl delete pod --all\nkubectl run mybusybox --image=busybox    ----启动一个pod\nkubectl run mybusybox --image=busybox --replicas=5    ----启动多个pod\nkubectl delete deployments mybusybox    ----删除创建的pod\nkubectl get pods    ----列出当前所有的pod\nkubectl describe pod [PODNAME]    ----查看pod的状态\nkubectl run mynginx --image=nginx --port=80 --hostport=8000    ----创建带有端口映射的pod\nkubectl run -i --tty busybox --image=busybox    ----创建带有终端的pod\n```\n\n参考\n* [Github——kubernetes-cluster-via-vagrant](https://github.com/ecomm-integration-ballerina/kubernetes-cluster)\n* [Kubernetes – unable to login to the Dashboard\n](https://www.australtech.net/kubernetes-unable-to-login-to-the-dashboard/)\n* [kubernetes-dashboard(1.8.3)部署与踩坑](https://www.cnblogs.com/rainingnight/p/deploying-k8s-dashboard-ui.html#api-server)","source":"_posts/Vagrant_Kubernetes_cluster.md","raw":"title: Vagrant本地快速启动Kubernetes集群\nauthor: Salamander\ntags:\n  - kubernetes\n  - vagrant\n  - virtualbox\ncategories:\n  - kubernetes\ndate: 2019-12-16 13:00:00\n---\n![k8s logo](https://image-static.segmentfault.com/311/703/311703680-5b80e2877f8c8_articlex)\n\nKubernetes，简称 **k8s**（k，8 个字符，s——明白了？）或者 “kube”，是一个开源的 Linux 容器自动化运维平台，它消除了容器化应用程序在部署、伸缩时涉及到的许多手动操作。换句话说，你可以将多台主机组合成集群来运行 Linux 容器，而 Kubernetes 可以帮助你简单高效地管理那些集群。构成这些集群的主机还可以跨越公有云、私有云以及混合云。\n\n\n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Vagrant版本：2.2.6\n* VirtualBox版本：6.0.14 r133895 (Qt5.9.5)\n* Kubernetes版本：1.15.7\n\n<!-- more -->\n\n## 安装Vagrant\nVagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源**VirtualBox**（其实也可以用别的）虚拟化系统，使用Chef创建自动化虚拟环境。\n首先到[官网](https://www.vagrantup.com/downloads.html)下载最新的`Vagrant`，现在最新的版本是**2.2.6**，当然你也可以通过命令行下载：\n```\nwget https://releases.hashicorp.com/vagrant/2.2.6/vagrant_2.2.6_x86_64.deb\n```\n验证`Vagrant`安装成功\n```\n$ vagrant --version\nVagrant 2.2.6\n```\n\n## 安装VirtualBox\nVagrant是基于虚拟机（`VirtualBox`，`VMware`这些）的，所以我们还需要安装`VirtualBox`。在Vagrant官网可以它适配的`VirtualBox`版本\n> Vagrant comes with support out of the box for VirtualBox, a free, cross-platform consumer virtualization product.\n> The VirtualBox provider is compatible with VirtualBox versions 4.0.x, 4.1.x, 4.2.x, 4.3.x, 5.0.x, 5.1.x, 5.2.x, and 6.0.x.\n\n这里我下载6.0版本的`VirtualBox`，[下载地址](https://www.virtualbox.org/wiki/Download_Old_Builds_6_0)\n```\nwget https://download.virtualbox.org/virtualbox/6.0.14/virtualbox-6.0_6.0.14-133895~Ubuntu~bionic_amd64.deb\n```\n**注意：不要通过apt-get安装VirtualBox**，因为5.1.0版本开始，VirtualBox已经不需要**DKMS**，apt官方源中VirtualBox比较老，是会带上`DKMS`的：\n```\nDKMS isn't required by VirtualBox since 5.1.0. Which means that you downloaded VirtualBox from your Debian \"store\". That's a fork, not supported. You can either ask in their forums for help, or completely remove/uninstall/delete/purge their version and install the official version from the Downloads section of VirtualBox (https://www.virtualbox.org/wiki/Downloads).\n```\n\n\n## 启动虚拟机\n`Vagrant`跟docker类似，可以提供一致性环境的，它可以编写`Vagrantfile`（类似`docker-compose.yml`）来定义虚拟机中安装什么软件，环境和配置，它使用ruby语法。`Vagrant`也做了[box源](https://app.vagrantup.com/boxes/search)，类似docker image。  \n下面给出一个小栗子感受下，这里使用`ubuntu/xenial64`（Ubuntu 16.06 64位）这个box\n```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# All Vagrant configuration is done below. The \"2\" in Vagrant.configure\n# configures the configuration version (we support older styles for\n# backwards compatibility). Please don't change it unless you know what\n# you're doing.\nVagrant.configure(\"2\") do |config|\n  ##### DEFINE VM #####\n  # The most common configuration options are documented and commented below.\n  # For a complete reference, please see the online documentation at\n  # https://docs.vagrantup.com.\n\n  # Every Vagrant development environment requires a box. You can search for\n  # boxes at https://app.vagrantup.com/boxes/search.\n  config.vm.box = \"ubuntu/xenial64\"\n\n  config.vm.hostname = \"ubuntu-01\"\n  config.vm.box_check_update = false\n\n  # Create a private network, which allows host-only access to the machine\n  # using a specific IP.\n  config.vm.network \"private_network\", ip: \"192.168.10.50\"\n\n  # Create a public network, which generally matched to bridged network.\n  # Bridged networks make the machine appear as another physical device on\n  # your network.\n  # config.vm.network \"public_network\"\n\n  # Share an additional folder to the guest VM. The first argument is\n  # the path on the host to the actual folder. The second argument is\n  # the path on the guest to mount the folder. And the optional third\n  # argument is a set of non-required options.\n  # config.vm.synced_folder \"../data\", \"/vagrant_data\"\n\n\n  # Provider-specific configuration so you can fine-tune various\n  # backing providers for Vagrant. These expose provider-specific options.\n  # Example for VirtualBox:\n  #\n  # config.vm.provider \"virtualbox\" do |vb|\n  #   # Display the VirtualBox GUI when booting the machine\n  #   vb.gui = true\n  #\n  #   # Customize the amount of memory on the VM:\n  #   vb.memory = \"1024\"\n  # end\n  #\n  # View the documentation for the provider you are using for more\n  # information on available options.\n  \n  config.vm.provider \"virtualbox\" do |v|\n    v.name = \"ubuntu-for-fun\"\n    v.customize [\"modifyvm\", :id, \"--memory\", \"2048\"]\n    v.customize [\"modifyvm\", :id, \"--cpus\", \"2\"]\n  end\n\n  # Create a forwarded port mapping which allows access to a specific port\n  # within the machine from a port on the host machine. In the example below,\n  # accessing \"localhost:8080\" will access port 80 on the guest machine.\n  # config.vm.network \"forwarded_port\", guest: 80, host: 8080\nend\n```\n更多虚拟机的配置可以查看[官方文档](https://www.vagrantup.com/docs/vagrantfile/machine_settings.html)  \n在Vagrantfile对应的目录下终端键入：`vagrant up`，然后`Vagrant`会帮我们下载`ubuntu/xenial64`这个box，不过在中国下载速度非常慢，在运行`vagrant up`时我们可以看到这个box的下载url，你可以用**迅雷**这些工具直接下载，然后在本地手动添加box\n```\n$ vagrant up\nBringing machine 'default' up with 'virtualbox' provider...\n==> default: Box 'ubuntu/xenial64' could not be found. Attempting to find and install...\n    default: Box Provider: virtualbox\n    default: Box Version: >= 0\n==> default: Loading metadata for box 'ubuntu/xenial64'\n    default: URL: https://vagrantcloud.com/ubuntu/xenial64\n==> default: Adding box 'ubuntu/xenial64' (v20191217.0.0) for provider: virtualbox\n    default: Downloading: https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box\n==> default: Box download is resuming from prior download progress\n    default: Download redirected to host: cloud-images.ubuntu.com\n    .........\n\n$ cd ~/box-add\n$ ls\nmetadata.json  virtualbox.box\n$ vagrant box add metadata.json\n==> box: Loading metadata for box 'metadata.json'\n    box: URL: file:///home/lucy/vm-add/metadata.json\n==> box: Adding box 'ubuntu/xenial64' (v20191217.0.0) for provider: virtualbox\n    box: Downloading: ./virtualbox.box\n==> box: Successfully added box 'ubuntu/xenial64' (v20191217.0.0) for 'virtualbox'!\n$ vagrant box list\nubuntu/xenial64 (virtualbox, 20191217.0.0)\n```\n下载box的URL是`https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box`，可以看到下载的版本是**20191217.0.0**，另外注意一下这里添加box的是使用一个`metadata.json`文件，使用这样的方式可以定义box版本号，它的内容是：\n```\n{\n    \"name\": \"ubuntu/xenial64\",\n    \"versions\": [{\n        \"version\": \"20191217.0.0\",\n        \"providers\": [{\n            \"name\": \"virtualbox\",\n            \"url\": \"./virtualbox.box\"\n        }]\n    }]\n}\n```\n\n启动虚拟机你可能会遇到下面的错误：\n\n![upload successful](/images/virtualbox-error.png)\n\n解决方法是在**BIOS**中将**Intel Virtualization Technology**改为Enable。  \n启动虚拟机后，你可以通过`vagrant ssh`进入虚拟机。\n\n## 启动Kubernetes集群\n这里我编写了一个`Vagrantfile`，一键启动集群：\n```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nservers = [\n    {\n        :name => \"k8s-head\",\n        :type => \"master\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.10\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    },\n    {\n        :name => \"k8s-node-1\",\n        :type => \"node\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.11\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    },\n    {\n        :name => \"k8s-node-2\",\n        :type => \"node\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.12\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    }\n]\n\n# This script to install k8s using kubeadm will get executed after a box is provisioned\n$configureBox = <<-SCRIPT\n    cp /etc/apt/sources.list /etc/apt/sources.list.bak\n    # use Aliyun apt source\n    cat > /etc/apt/sources.list<<EOF\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\nEOF\n\n    export DEBIAN_FRONTEND=noninteractive\n\n    # install docker v17.03\n    # reason for not using docker provision is that it always installs latest version of the docker, but kubeadm requires 17.03 or older\n    apt-get update\n    # step 1: 安装必要的一些系统工具\n    apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n    # step 2: 安装GPG证书\n    curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n    add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/$(. /etc/os-release; echo \"$ID\") $(lsb_release -cs) stable\"\n    apt-get update && apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk '{print $3}')\n    # run docker commands as vagrant user (sudo not required)\n    usermod -aG docker vagrant\n    # 修改docker配置\n    sudo bash -c 'cat > /etc/docker/daemon.json <<EOF\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF'\n    sudo systemctl daemon-reload\n    sudo systemctl restart docker\n\n    # install kubeadm\n    apt-get install -y apt-transport-https curl\n    curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -  # aliyun GPG\n    cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\n    deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\nEOF\n    apt-get update\n    apt-get install -y kubelet=1.15.7-00 kubeadm=1.15.7-00 kubectl=1.15.7-00\n    apt-mark hold kubelet kubeadm kubectl\n    # kubelet requires swap off\n    swapoff -a\n    # keep swap off after reboot\n    sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n    # ip of this box\n    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`\n    # set node-ip\n    sudo sh -c 'echo KUBELET_EXTRA_ARGS= >> /etc/default/kubelet'\n    sudo sed -i \"/^[^#]*KUBELET_EXTRA_ARGS=/c\\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR\" /etc/default/kubelet\n    sudo systemctl restart kubelet\nSCRIPT\n\n$configureMaster = <<-SCRIPT\n    export DEBIAN_FRONTEND=noninteractive\n    echo \"This is master\"\n    # ip of this box\n    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`\n    # install k8s master\n    HOST_NAME=$(hostname -s)\n    kubeadm init --image-repository registry.aliyuncs.com/google_containers  --kubernetes-version v1.15.7 \\\n    --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR  --node-name $HOST_NAME --pod-network-cidr=172.16.0.0/16\n    #copying credentials to regular user - vagrant\n    sudo --user=vagrant mkdir -p /home/vagrant/.kube\n    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config\n    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config\n\n    # install Calico pod network addon\n    export KUBECONFIG=/etc/kubernetes/admin.conf\n    kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml\n    kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml\n    kubeadm token create --print-join-command >> /etc/kubeadm_join_cmd.sh\n    chmod +x /etc/kubeadm_join_cmd.sh\n    # required for setting up password less ssh between guest VMs\n    sudo sed -i \"/^[^#]*PasswordAuthentication[[:space:]]no/c\\PasswordAuthentication yes\" /etc/ssh/sshd_config\n    sudo service sshd restart\nSCRIPT\n\n$configureNode = <<-SCRIPT\n    export DEBIAN_FRONTEND=noninteractive\n    echo \"This is worker\"\n    apt-get install -y sshpass\n    sshpass -p \"vagrant\" scp -o StrictHostKeyChecking=no vagrant@192.168.205.10:/etc/kubeadm_join_cmd.sh .\n    sh ./kubeadm_join_cmd.sh\nSCRIPT\n\nVagrant.configure(\"2\") do |config|\n    \n    servers.each do |opts|\n        config.vm.define opts[:name] do |config|\n\n            config.vm.box = opts[:box]\n            config.vm.box_version = opts[:box_version]\n            config.vm.hostname = opts[:name]\n            config.vm.network :private_network, ip: opts[:eth1]\n\n            config.vm.provider \"virtualbox\" do |v|\n\n                v.name = opts[:name]\n            \tv.customize [\"modifyvm\", :id, \"--groups\", \"/Salamander Development\"]\n                v.customize [\"modifyvm\", :id, \"--memory\", opts[:mem]]\n                v.customize [\"modifyvm\", :id, \"--cpus\", opts[:cpu]]\n                v.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n                v.customize [\"modifyvm\", :id, \"--natdnsproxy1\", \"on\"]\n            end\n\n            # we cannot use this because we can't install the docker version we want - https://github.com/hashicorp/vagrant/issues/4871\n            #config.vm.provision \"docker\"\n\n            config.vm.provision \"shell\", inline: $configureBox\n\n            if opts[:type] == \"master\"\n                config.vm.provision \"shell\", inline: $configureMaster\n            else\n                config.vm.provision \"shell\", inline: $configureNode\n            end\n\n        end\n\n    end\nend\n```\n启动集群`vagrant up`，这里需要耐心等待几分钟，因为要启动三个虚拟机、安装一些软件和设置环境。  \n启动集群后，进入**Master节点**`vagrant ssh k8s-head`查看集群状态：\n```\n$ kubectl get nodes\nNAME         STATUS   ROLES    AGE    VERSION\nk8s-head     Ready    master   5h7m   v1.15.7\nk8s-node-1   Ready    <none>   5h5m   v1.15.7\nk8s-node-2   Ready    <none>   5h2m   v1.15.7\n\n\n$ kubectl get pods --all-namespaces\nNAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE\nkube-system            calico-node-j5kw8                            2/2     Running   4          5h7m\nkube-system            calico-node-kq89s                            2/2     Running   0          5h6m\nkube-system            calico-node-twvdl                            2/2     Running   0          5h2m\nkube-system            coredns-94d74667-jhjl8                       1/1     Running   2          5h7m\nkube-system            coredns-94d74667-qd9qv                       1/1     Running   2          5h7m\nkube-system            etcd-k8s-head                                1/1     Running   2          5h6m\nkube-system            kube-apiserver-k8s-head                      1/1     Running   2          5h6m\nkube-system            kube-controller-manager-k8s-head             1/1     Running   2          5h6m\nkube-system            kube-proxy-7d8wj                             1/1     Running   0          5h2m\nkube-system            kube-proxy-hn89g                             1/1     Running   0          5h6m\nkube-system            kube-proxy-t8qf9                             1/1     Running   2          5h7m\nkube-system            kube-scheduler-k8s-head                      1/1     Running   2          5h6m\n\n$ kubectl cluster-info\nKubernetes master is running at https://192.168.205.10:6443\nKubeDNS is running at https://192.168.205.10:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\n$ kubectl get componentstatuses\nNAME                 STATUS    MESSAGE             ERROR\nscheduler            Healthy   ok                  \ncontroller-manager   Healthy   ok                  \netcd-0               Healthy   {\"health\":\"true\"}\n```\n节点都是**Ready**和pods都是**Running**说明集群成功启动了，`kubectl cluster-info`可以查看集群信息，`kubectl get componentstatuses`可以查看各组件信息。\n\n\n\n\n## 安装官方Dashboard\n[Dashboard](https://github.com/kubernetes/dashboard)是Kubernetes的一个插件，代码单独放在Github的一个仓库里。  \n按照[官方文档](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/)，步骤也蛮简单的，首先执行命令：\n```\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml\n```\n\n查看一下Dashboard的服务：\n```\n\n$ kubectl  get pod,deploy,svc -n kubernetes-dashboard\nNAME                                             READY   STATUS    RESTARTS   AGE\npod/dashboard-metrics-scraper-6c554969c6-jqhjx   1/1     Running   0          5h5m\npod/kubernetes-dashboard-56c5f95c6b-jrj58        1/1     Running   5          5h5m\n\nNAME                                              READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.extensions/dashboard-metrics-scraper   1/1     1            1           5h5m\ndeployment.extensions/kubernetes-dashboard        1/1     1            1           5h5m\n\nNAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nservice/dashboard-metrics-scraper   ClusterIP   10.106.117.224   <none>        8000/TCP   5h5m\nservice/kubernetes-dashboard        ClusterIP   10.98.23.78      <none>        443/TCP    5h5m\n\n\n# 我们可以看到官方的dashboard帮我们启动了web-ui，并且帮我们启动了一个Metric服务\n# 但是dashboard默认使用的https的443端口\n\n# 测试下Dashboard是否正常\n$ curl https://10.98.23.78:443 -k -I\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nCache-Control: no-store\nContent-Length: 1262\nContent-Type: text/html; charset=utf-8\nLast-Modified: Fri, 06 Dec 2019 15:14:02 GMT\nDate: Tue, 31 Dec 2019 06:35:55 GMT\n```\n\n### 访问Dashboard\n访问Dashboard有好几种方式\n* 将kubernetes-dashboard Service暴露 NodePort，使用 http://NodeIP:nodePort 地址访问 dashboard\n* 使用Ingress之类的入口服务进行代理访问\n* 通过 API server 访问 dashboard（https 6443端口和http 8080端口方式）\n* 通过 kubectl proxy 访问 dashboard\n\n\n#### kubectl proxy\n首先这里我们通过`kubectl proxy`，在**k8s-head**节点执行：\n```\n$ kubectl proxy --address='0.0.0.0' --accept-hosts='^*$'\n```\n在访问之前，我们需要先创建一个**User**（一个**ServiceAccount**，k8s内概念），创建dashboard-adminuser.yaml文件，写入\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\n\n```\n执行`kubectl apply -f dashboard-adminuser.yaml`。  \n查看用户token（之后在浏览器中输入）\n```\n$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')\nName:         admin-user-token-mxmtr\nNamespace:    kubernetes-dashboard\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: admin-user\n              kubernetes.io/service-account.uid: 54ddc041-f3af-41fa-a824-6a3e29f0ffa3\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  20 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLW14bXRyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI1NGRkYzA0MS1mM2FmLTQxZmEtYTgyNC02YTNlMjlmMGZmYTMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.osyqbUwS4pLDEhZ0iL0aAu2f5me82bGTEfXEW8ycS5-JRar4iYcWkqhJZ9FhZV47P0WKLT9UWiLcDw1rVPZbMSHrRnFZcRHmLO35tVBaijjvgsgm2X5856G-HS1VNMgQBSZXiQXr1Lt3Dj9JHHksbiLGg-3wRy7HqD-I8JcR1pHZ_ViOqQ1j6WIbvhfEE3FpTuuSPAcjwVNutXAfur6oJktjYAcwMjWTQ4-yMQ2NRSWM7AcJtjp_7p3WwnHmO6fH6LtrGQzmXwHh5ICmei2LrAE2cxwN251aMVnrPGt00Ff4ij2-yLyI4VZOgAsNuPegctm-GuCOTGNX9Ew-o1si_Q\n```\n\n\n为了在宿主机上能访问，我们需要用VirutalBox管理界面添加一个端口映射：  \n\n![upload successful](https://s2.ax1x.com/2019/12/31/l1FsQP.png)\n\n好了，现在我们可以访问Dashboard了，浏览内输入`http://localhost:31694/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.`，可以看到\n![](/images/k8s-dashboard.png)\n\n#### NodePort\n这个过程比`kubectl proxy`简单，再安装Dashboard之前，把`Service`类型改成`NodePort`即可：\n```\n$ wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml  #下载yaml\n$ vim recommended.yaml\n```\n找到Service部分，改成NodePort\n````\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  type: NodePort  # 这个是新增部分\n  ports:\n    - port: 443\n      targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n```\n查看，Service的随机端口：\n```\n$ kubectl get pods,svc --all-namespaces\n\nNAMESPACE              NAME                                             READY   STATUS    RESTARTS   AGE\nkube-system            pod/calico-node-ffn9k                            2/2     Running   10         32d\nkube-system            pod/calico-node-fz8v6                            2/2     Running   12         32d\nkube-system            pod/calico-node-gvjft                            2/2     Running   8          32d\nkube-system            pod/coredns-94d74667-8jp5k                       1/1     Running   4          32d\nkube-system            pod/coredns-94d74667-tlph7                       1/1     Running   4          32d\nkube-system            pod/etcd-k8s-head                                1/1     Running   4          32d\nkube-system            pod/kube-apiserver-k8s-head                      1/1     Running   4          32d\nkube-system            pod/kube-controller-manager-k8s-head             1/1     Running   4          32d\nkube-system            pod/kube-proxy-4rsp4                             1/1     Running   5          32d\nkube-system            pod/kube-proxy-dccdc                             1/1     Running   5          32d\nkube-system            pod/kube-proxy-x82tl                             1/1     Running   4          32d\nkube-system            pod/kube-scheduler-k8s-head                      1/1     Running   4          32d\nkubernetes-dashboard   pod/dashboard-metrics-scraper-6c554969c6-wmwpt   1/1     Running   0          18m\nkubernetes-dashboard   pod/kubernetes-dashboard-56c5f95c6b-s66g8        1/1     Running   0          18m\n\nNAMESPACE              NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE\ndefault                service/kubernetes                  ClusterIP   10.96.0.1        <none>        443/TCP                  32d\nkube-system            service/calico-typha                ClusterIP   10.104.182.223   <none>        5473/TCP                 32d\nkube-system            service/kube-dns                    ClusterIP   10.96.0.10       <none>        53/UDP,53/TCP,9153/TCP   32d\nkubernetes-dashboard   service/dashboard-metrics-scraper   ClusterIP   10.99.243.131    <none>        8000/TCP                 18m\nkubernetes-dashboard   service/kubernetes-dashboard        NodePort    10.96.23.239     <none>        443:30646/TCP            18m\n```\n可以看到暴露端口是**30646**，访问Master节点上的30646端口`https://192.168.205.10:30646`，需要填写的**token**和上面`kubectl proxy`遇到的问题一样，先创建**ServiceAccount**和**ClusterRoleBinding**，然后查看这个账号的token。\n\n\n#### API Server\n首先，我们需要导出p12证书：\n```\n# 生成 client-certificate-data\ngrep 'client-certificate-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.crt\n\n# 生成 client-key-data\ngrep 'client-key-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.key\n\n# 生成 p12\nopenssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name \"kubernetes-client\"\n```\n然后，在在 chrome 导入了 p12 证书（点击“设置”，“管理证书”那里导入）。  \n访问链接：`https://192.168.205.10:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy`，就可以看到**登录界面**了（注意：**新版的Dashboard，命名空间移动到了kubernetes-dashboard中**）  \n![](https://s2.ax1x.com/2020/01/26/1mG9UJ.png)\n**token**的填写跟上面`kubectl proxy`一样，当然你也可以直接用master节点中`$HOME/.kube/config`文件来登录。\n\n\n\n\n## kubernetes常用命令\n```\n## 查看\nkubectl cluster-info    ----查看集群信息\nkubectl get pods --all-namespaces ------查看所有pod信息\nkubectl get cs    ----查看各组件（componentstatuses）信息，可以简写为rc\nkubectl get pods -n default   ----列出default命名空间所有的pods\nkubectl get pods -o wide    ----查看pods所在的运行节点\nkubectl get pods -o yaml    ----查看pods定义的详细信息\nkubectl get rc    ----查看Replication Controller信息\nkubectl get service    ----查看service的信息\nkubectl get nodes    ----查看节点信息\nkubectl get pod --selector name=redis    ----按selector名来查找pod\nkubectl exec pod名字 env    ----查看运行的pod的环境变量\nkubectl  get pod,deploy,svc -n kubernetes-dashboard ---一起查看pod，service，deployment信息\n\n## 创建\nkubectl create -f 文件名    ----创建\nkubectl replace -f 文件名  [--force]    ----重建\n\n## 删除\nkubectl delete -f 文件名\nkubectl delete pod pod名\nkubectl delete rc rc名\nkubectl delete service service名\nkubectl delete pod --all\nkubectl run mybusybox --image=busybox    ----启动一个pod\nkubectl run mybusybox --image=busybox --replicas=5    ----启动多个pod\nkubectl delete deployments mybusybox    ----删除创建的pod\nkubectl get pods    ----列出当前所有的pod\nkubectl describe pod [PODNAME]    ----查看pod的状态\nkubectl run mynginx --image=nginx --port=80 --hostport=8000    ----创建带有端口映射的pod\nkubectl run -i --tty busybox --image=busybox    ----创建带有终端的pod\n```\n\n参考\n* [Github——kubernetes-cluster-via-vagrant](https://github.com/ecomm-integration-ballerina/kubernetes-cluster)\n* [Kubernetes – unable to login to the Dashboard\n](https://www.australtech.net/kubernetes-unable-to-login-to-the-dashboard/)\n* [kubernetes-dashboard(1.8.3)部署与踩坑](https://www.cnblogs.com/rainingnight/p/deploying-k8s-dashboard-ui.html#api-server)","slug":"Vagrant_Kubernetes_cluster","published":1,"updated":"2020-01-26T05:54:38.805Z","_id":"ck495sd5o0000213eskef1zsz","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://image-static.segmentfault.com/311/703/311703680-5b80e2877f8c8_articlex\" alt=\"k8s logo\"></p>\n<p>Kubernetes，简称 <strong>k8s</strong>（k，8 个字符，s——明白了？）或者 “kube”，是一个开源的 Linux 容器自动化运维平台，它消除了容器化应用程序在部署、伸缩时涉及到的许多手动操作。换句话说，你可以将多台主机组合成集群来运行 Linux 容器，而 Kubernetes 可以帮助你简单高效地管理那些集群。构成这些集群的主机还可以跨越公有云、私有云以及混合云。</p>\n<p>本文环境：</p>\n<ul>\n<li>OS：Ubuntu 18.04.3 LTS</li>\n<li>Vagrant版本：2.2.6</li>\n<li>VirtualBox版本：6.0.14 r133895 (Qt5.9.5)</li>\n<li>Kubernetes版本：1.15.7</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"安装Vagrant\"><a href=\"#安装Vagrant\" class=\"headerlink\" title=\"安装Vagrant\"></a>安装Vagrant</h2><p>Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源<strong>VirtualBox</strong>（其实也可以用别的）虚拟化系统，使用Chef创建自动化虚拟环境。<br>首先到<a href=\"https://www.vagrantup.com/downloads.html\" target=\"_blank\" rel=\"noopener\">官网</a>下载最新的<code>Vagrant</code>，现在最新的版本是<strong>2.2.6</strong>，当然你也可以通过命令行下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://releases.hashicorp.com/vagrant/2.2.6/vagrant_2.2.6_x86_64.deb</span><br></pre></td></tr></table></figure>\n\n<p>验证<code>Vagrant</code>安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant --version</span><br><span class=\"line\">Vagrant 2.2.6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装VirtualBox\"><a href=\"#安装VirtualBox\" class=\"headerlink\" title=\"安装VirtualBox\"></a>安装VirtualBox</h2><p>Vagrant是基于虚拟机（<code>VirtualBox</code>，<code>VMware</code>这些）的，所以我们还需要安装<code>VirtualBox</code>。在Vagrant官网可以它适配的<code>VirtualBox</code>版本</p>\n<blockquote>\n<p>Vagrant comes with support out of the box for VirtualBox, a free, cross-platform consumer virtualization product.<br>The VirtualBox provider is compatible with VirtualBox versions 4.0.x, 4.1.x, 4.2.x, 4.3.x, 5.0.x, 5.1.x, 5.2.x, and 6.0.x.</p>\n</blockquote>\n<p>这里我下载6.0版本的<code>VirtualBox</code>，<a href=\"https://www.virtualbox.org/wiki/Download_Old_Builds_6_0\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://download.virtualbox.org/virtualbox/6.0.14/virtualbox-6.0_6.0.14-133895~Ubuntu~bionic_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：不要通过apt-get安装VirtualBox</strong>，因为5.1.0版本开始，VirtualBox已经不需要<strong>DKMS</strong>，apt官方源中VirtualBox比较老，是会带上<code>DKMS</code>的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DKMS isn&apos;t required by VirtualBox since 5.1.0. Which means that you downloaded VirtualBox from your Debian &quot;store&quot;. That&apos;s a fork, not supported. You can either ask in their forums for help, or completely remove/uninstall/delete/purge their version and install the official version from the Downloads section of VirtualBox (https://www.virtualbox.org/wiki/Downloads).</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动虚拟机\"><a href=\"#启动虚拟机\" class=\"headerlink\" title=\"启动虚拟机\"></a>启动虚拟机</h2><p><code>Vagrant</code>跟docker类似，可以提供一致性环境的，它可以编写<code>Vagrantfile</code>（类似<code>docker-compose.yml</code>）来定义虚拟机中安装什么软件，环境和配置，它使用ruby语法。<code>Vagrant</code>也做了<a href=\"https://app.vagrantup.com/boxes/search\" target=\"_blank\" rel=\"noopener\">box源</a>，类似docker image。<br>下面给出一个小栗子感受下，这里使用<code>ubuntu/xenial64</code>（Ubuntu 16.06 64位）这个box</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- mode: ruby -*-</span><br><span class=\"line\"># vi: set ft=ruby :</span><br><span class=\"line\"></span><br><span class=\"line\"># All Vagrant configuration is done below. The &quot;2&quot; in Vagrant.configure</span><br><span class=\"line\"># configures the configuration version (we support older styles for</span><br><span class=\"line\"># backwards compatibility). Please don&apos;t change it unless you know what</span><br><span class=\"line\"># you&apos;re doing.</span><br><span class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class=\"line\">  ##### DEFINE VM #####</span><br><span class=\"line\">  # The most common configuration options are documented and commented below.</span><br><span class=\"line\">  # For a complete reference, please see the online documentation at</span><br><span class=\"line\">  # https://docs.vagrantup.com.</span><br><span class=\"line\"></span><br><span class=\"line\">  # Every Vagrant development environment requires a box. You can search for</span><br><span class=\"line\">  # boxes at https://app.vagrantup.com/boxes/search.</span><br><span class=\"line\">  config.vm.box = &quot;ubuntu/xenial64&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.hostname = &quot;ubuntu-01&quot;</span><br><span class=\"line\">  config.vm.box_check_update = false</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a private network, which allows host-only access to the machine</span><br><span class=\"line\">  # using a specific IP.</span><br><span class=\"line\">  config.vm.network &quot;private_network&quot;, ip: &quot;192.168.10.50&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a public network, which generally matched to bridged network.</span><br><span class=\"line\">  # Bridged networks make the machine appear as another physical device on</span><br><span class=\"line\">  # your network.</span><br><span class=\"line\">  # config.vm.network &quot;public_network&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Share an additional folder to the guest VM. The first argument is</span><br><span class=\"line\">  # the path on the host to the actual folder. The second argument is</span><br><span class=\"line\">  # the path on the guest to mount the folder. And the optional third</span><br><span class=\"line\">  # argument is a set of non-required options.</span><br><span class=\"line\">  # config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  # Provider-specific configuration so you can fine-tune various</span><br><span class=\"line\">  # backing providers for Vagrant. These expose provider-specific options.</span><br><span class=\"line\">  # Example for VirtualBox:</span><br><span class=\"line\">  #</span><br><span class=\"line\">  # config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class=\"line\">  #   # Display the VirtualBox GUI when booting the machine</span><br><span class=\"line\">  #   vb.gui = true</span><br><span class=\"line\">  #</span><br><span class=\"line\">  #   # Customize the amount of memory on the VM:</span><br><span class=\"line\">  #   vb.memory = &quot;1024&quot;</span><br><span class=\"line\">  # end</span><br><span class=\"line\">  #</span><br><span class=\"line\">  # View the documentation for the provider you are using for more</span><br><span class=\"line\">  # information on available options.</span><br><span class=\"line\">  </span><br><span class=\"line\">  config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class=\"line\">    v.name = &quot;ubuntu-for-fun&quot;</span><br><span class=\"line\">    v.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;2048&quot;]</span><br><span class=\"line\">    v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, &quot;2&quot;]</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a forwarded port mapping which allows access to a specific port</span><br><span class=\"line\">  # within the machine from a port on the host machine. In the example below,</span><br><span class=\"line\">  # accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span><br><span class=\"line\">  # config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>更多虚拟机的配置可以查看<a href=\"https://www.vagrantup.com/docs/vagrantfile/machine_settings.html\" target=\"_blank\" rel=\"noopener\">官方文档</a><br>在Vagrantfile对应的目录下终端键入：<code>vagrant up</code>，然后<code>Vagrant</code>会帮我们下载<code>ubuntu/xenial64</code>这个box，不过在中国下载速度非常慢，在运行<code>vagrant up</code>时我们可以看到这个box的下载url，你可以用<strong>迅雷</strong>这些工具直接下载，然后在本地手动添加box</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant up</span><br><span class=\"line\">Bringing machine &apos;default&apos; up with &apos;virtualbox&apos; provider...</span><br><span class=\"line\">==&gt; default: Box &apos;ubuntu/xenial64&apos; could not be found. Attempting to find and install...</span><br><span class=\"line\">    default: Box Provider: virtualbox</span><br><span class=\"line\">    default: Box Version: &gt;= 0</span><br><span class=\"line\">==&gt; default: Loading metadata for box &apos;ubuntu/xenial64&apos;</span><br><span class=\"line\">    default: URL: https://vagrantcloud.com/ubuntu/xenial64</span><br><span class=\"line\">==&gt; default: Adding box &apos;ubuntu/xenial64&apos; (v20191217.0.0) for provider: virtualbox</span><br><span class=\"line\">    default: Downloading: https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box</span><br><span class=\"line\">==&gt; default: Box download is resuming from prior download progress</span><br><span class=\"line\">    default: Download redirected to host: cloud-images.ubuntu.com</span><br><span class=\"line\">    .........</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd ~/box-add</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">metadata.json  virtualbox.box</span><br><span class=\"line\">$ vagrant box add metadata.json</span><br><span class=\"line\">==&gt; box: Loading metadata for box &apos;metadata.json&apos;</span><br><span class=\"line\">    box: URL: file:///home/lucy/vm-add/metadata.json</span><br><span class=\"line\">==&gt; box: Adding box &apos;ubuntu/xenial64&apos; (v20191217.0.0) for provider: virtualbox</span><br><span class=\"line\">    box: Downloading: ./virtualbox.box</span><br><span class=\"line\">==&gt; box: Successfully added box &apos;ubuntu/xenial64&apos; (v20191217.0.0) for &apos;virtualbox&apos;!</span><br><span class=\"line\">$ vagrant box list</span><br><span class=\"line\">ubuntu/xenial64 (virtualbox, 20191217.0.0)</span><br></pre></td></tr></table></figure>\n\n<p>下载box的URL是<code>https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box</code>，可以看到下载的版本是<strong>20191217.0.0</strong>，另外注意一下这里添加box的是使用一个<code>metadata.json</code>文件，使用这样的方式可以定义box版本号，它的内容是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">    &quot;versions&quot;: [&#123;</span><br><span class=\"line\">        &quot;version&quot;: &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        &quot;providers&quot;: [&#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;virtualbox&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;./virtualbox.box&quot;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动虚拟机你可能会遇到下面的错误：</p>\n<p><img src=\"/images/virtualbox-error.png\" alt=\"upload successful\"></p>\n<p>解决方法是在<strong>BIOS</strong>中将<strong>Intel Virtualization Technology</strong>改为Enable。<br>启动虚拟机后，你可以通过<code>vagrant ssh</code>进入虚拟机。</p>\n<h2 id=\"启动Kubernetes集群\"><a href=\"#启动Kubernetes集群\" class=\"headerlink\" title=\"启动Kubernetes集群\"></a>启动Kubernetes集群</h2><p>这里我编写了一个<code>Vagrantfile</code>，一键启动集群：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- mode: ruby -*-</span><br><span class=\"line\"># vi: set ft=ruby :</span><br><span class=\"line\"></span><br><span class=\"line\">servers = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-head&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;master&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.10&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-node-1&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;node&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.11&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-node-2&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;node&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.12&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># This script to install k8s using kubeadm will get executed after a box is provisioned</span><br><span class=\"line\">$configureBox = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">    # use Aliyun apt source</span><br><span class=\"line\">    cat &gt; /etc/apt/sources.list&lt;&lt;EOF</span><br><span class=\"line\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\"></span><br><span class=\"line\">    # install docker v17.03</span><br><span class=\"line\">    # reason for not using docker provision is that it always installs latest version of the docker, but kubeadm requires 17.03 or older</span><br><span class=\"line\">    apt-get update</span><br><span class=\"line\">    # step 1: 安装必要的一些系统工具</span><br><span class=\"line\">    apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class=\"line\">    # step 2: 安装GPG证书</span><br><span class=\"line\">    curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\">    add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/$(. /etc/os-release; echo &quot;$ID&quot;) $(lsb_release -cs) stable&quot;</span><br><span class=\"line\">    apt-get update &amp;&amp; apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk &apos;&#123;print $3&#125;&apos;)</span><br><span class=\"line\">    # run docker commands as vagrant user (sudo not required)</span><br><span class=\"line\">    usermod -aG docker vagrant</span><br><span class=\"line\">    # 修改docker配置</span><br><span class=\"line\">    sudo bash -c &apos;cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">  &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF&apos;</span><br><span class=\"line\">    sudo systemctl daemon-reload</span><br><span class=\"line\">    sudo systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\">    # install kubeadm</span><br><span class=\"line\">    apt-get install -y apt-transport-https curl</span><br><span class=\"line\">    curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -  # aliyun GPG</span><br><span class=\"line\">    cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class=\"line\">    deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\">    apt-get update</span><br><span class=\"line\">    apt-get install -y kubelet=1.15.7-00 kubeadm=1.15.7-00 kubectl=1.15.7-00</span><br><span class=\"line\">    apt-mark hold kubelet kubeadm kubectl</span><br><span class=\"line\">    # kubelet requires swap off</span><br><span class=\"line\">    swapoff -a</span><br><span class=\"line\">    # keep swap off after reboot</span><br><span class=\"line\">    sudo sed -i &apos;/ swap / s/^\\(.*\\)$/#\\1/g&apos; /etc/fstab</span><br><span class=\"line\">    # ip of this box</span><br><span class=\"line\">    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk &apos;&#123;print $2&#125;&apos;| cut -f2 -d:`</span><br><span class=\"line\">    # set node-ip</span><br><span class=\"line\">    sudo sh -c &apos;echo KUBELET_EXTRA_ARGS= &gt;&gt; /etc/default/kubelet&apos;</span><br><span class=\"line\">    sudo sed -i &quot;/^[^#]*KUBELET_EXTRA_ARGS=/c\\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR&quot; /etc/default/kubelet</span><br><span class=\"line\">    sudo systemctl restart kubelet</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">$configureMaster = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\">    echo &quot;This is master&quot;</span><br><span class=\"line\">    # ip of this box</span><br><span class=\"line\">    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk &apos;&#123;print $2&#125;&apos;| cut -f2 -d:`</span><br><span class=\"line\">    # install k8s master</span><br><span class=\"line\">    HOST_NAME=$(hostname -s)</span><br><span class=\"line\">    kubeadm init --image-repository registry.aliyuncs.com/google_containers  --kubernetes-version v1.15.7 \\</span><br><span class=\"line\">    --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR  --node-name $HOST_NAME --pod-network-cidr=172.16.0.0/16</span><br><span class=\"line\">    #copying credentials to regular user - vagrant</span><br><span class=\"line\">    sudo --user=vagrant mkdir -p /home/vagrant/.kube</span><br><span class=\"line\">    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config</span><br><span class=\"line\">    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">    # install Calico pod network addon</span><br><span class=\"line\">    export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\">    kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml</span><br><span class=\"line\">    kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml</span><br><span class=\"line\">    kubeadm token create --print-join-command &gt;&gt; /etc/kubeadm_join_cmd.sh</span><br><span class=\"line\">    chmod +x /etc/kubeadm_join_cmd.sh</span><br><span class=\"line\">    # required for setting up password less ssh between guest VMs</span><br><span class=\"line\">    sudo sed -i &quot;/^[^#]*PasswordAuthentication[[:space:]]no/c\\PasswordAuthentication yes&quot; /etc/ssh/sshd_config</span><br><span class=\"line\">    sudo service sshd restart</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">$configureNode = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\">    echo &quot;This is worker&quot;</span><br><span class=\"line\">    apt-get install -y sshpass</span><br><span class=\"line\">    sshpass -p &quot;vagrant&quot; scp -o StrictHostKeyChecking=no vagrant@192.168.205.10:/etc/kubeadm_join_cmd.sh .</span><br><span class=\"line\">    sh ./kubeadm_join_cmd.sh</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class=\"line\">    </span><br><span class=\"line\">    servers.each do |opts|</span><br><span class=\"line\">        config.vm.define opts[:name] do |config|</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.box = opts[:box]</span><br><span class=\"line\">            config.vm.box_version = opts[:box_version]</span><br><span class=\"line\">            config.vm.hostname = opts[:name]</span><br><span class=\"line\">            config.vm.network :private_network, ip: opts[:eth1]</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class=\"line\"></span><br><span class=\"line\">                v.name = opts[:name]</span><br><span class=\"line\">            \tv.customize [&quot;modifyvm&quot;, :id, &quot;--groups&quot;, &quot;/Salamander Development&quot;]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, opts[:mem]]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, opts[:cpu]]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--natdnshostresolver1&quot;, &quot;on&quot;]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--natdnsproxy1&quot;, &quot;on&quot;]</span><br><span class=\"line\">            end</span><br><span class=\"line\"></span><br><span class=\"line\">            # we cannot use this because we can&apos;t install the docker version we want - https://github.com/hashicorp/vagrant/issues/4871</span><br><span class=\"line\">            #config.vm.provision &quot;docker&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.provision &quot;shell&quot;, inline: $configureBox</span><br><span class=\"line\"></span><br><span class=\"line\">            if opts[:type] == &quot;master&quot;</span><br><span class=\"line\">                config.vm.provision &quot;shell&quot;, inline: $configureMaster</span><br><span class=\"line\">            else</span><br><span class=\"line\">                config.vm.provision &quot;shell&quot;, inline: $configureNode</span><br><span class=\"line\">            end</span><br><span class=\"line\"></span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>启动集群<code>vagrant up</code>，这里需要耐心等待几分钟，因为要启动三个虚拟机、安装一些软件和设置环境。<br>启动集群后，进入<strong>Master节点</strong><code>vagrant ssh k8s-head</code>查看集群状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME         STATUS   ROLES    AGE    VERSION</span><br><span class=\"line\">k8s-head     Ready    master   5h7m   v1.15.7</span><br><span class=\"line\">k8s-node-1   Ready    &lt;none&gt;   5h5m   v1.15.7</span><br><span class=\"line\">k8s-node-2   Ready    &lt;none&gt;   5h2m   v1.15.7</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pods --all-namespaces</span><br><span class=\"line\">NAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system            calico-node-j5kw8                            2/2     Running   4          5h7m</span><br><span class=\"line\">kube-system            calico-node-kq89s                            2/2     Running   0          5h6m</span><br><span class=\"line\">kube-system            calico-node-twvdl                            2/2     Running   0          5h2m</span><br><span class=\"line\">kube-system            coredns-94d74667-jhjl8                       1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            coredns-94d74667-qd9qv                       1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            etcd-k8s-head                                1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-apiserver-k8s-head                      1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-controller-manager-k8s-head             1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-proxy-7d8wj                             1/1     Running   0          5h2m</span><br><span class=\"line\">kube-system            kube-proxy-hn89g                             1/1     Running   0          5h6m</span><br><span class=\"line\">kube-system            kube-proxy-t8qf9                             1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            kube-scheduler-k8s-head                      1/1     Running   2          5h6m</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl cluster-info</span><br><span class=\"line\">Kubernetes master is running at https://192.168.205.10:6443</span><br><span class=\"line\">KubeDNS is running at https://192.168.205.10:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get componentstatuses</span><br><span class=\"line\">NAME                 STATUS    MESSAGE             ERROR</span><br><span class=\"line\">scheduler            Healthy   ok                  </span><br><span class=\"line\">controller-manager   Healthy   ok                  </span><br><span class=\"line\">etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>节点都是<strong>Ready</strong>和pods都是<strong>Running</strong>说明集群成功启动了，<code>kubectl cluster-info</code>可以查看集群信息，<code>kubectl get componentstatuses</code>可以查看各组件信息。</p>\n<h2 id=\"安装官方Dashboard\"><a href=\"#安装官方Dashboard\" class=\"headerlink\" title=\"安装官方Dashboard\"></a>安装官方Dashboard</h2><p><a href=\"https://github.com/kubernetes/dashboard\" target=\"_blank\" rel=\"noopener\">Dashboard</a>是Kubernetes的一个插件，代码单独放在Github的一个仓库里。<br>按照<a href=\"https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/\" target=\"_blank\" rel=\"noopener\">官方文档</a>，步骤也蛮简单的，首先执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>\n\n<p>查看一下Dashboard的服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ kubectl  get pod,deploy,svc -n kubernetes-dashboard</span><br><span class=\"line\">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/dashboard-metrics-scraper-6c554969c6-jqhjx   1/1     Running   0          5h5m</span><br><span class=\"line\">pod/kubernetes-dashboard-56c5f95c6b-jrj58        1/1     Running   5          5h5m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.extensions/dashboard-metrics-scraper   1/1     1            1           5h5m</span><br><span class=\"line\">deployment.extensions/kubernetes-dashboard        1/1     1            1           5h5m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">service/dashboard-metrics-scraper   ClusterIP   10.106.117.224   &lt;none&gt;        8000/TCP   5h5m</span><br><span class=\"line\">service/kubernetes-dashboard        ClusterIP   10.98.23.78      &lt;none&gt;        443/TCP    5h5m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 我们可以看到官方的dashboard帮我们启动了web-ui，并且帮我们启动了一个Metric服务</span><br><span class=\"line\"># 但是dashboard默认使用的https的443端口</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试下Dashboard是否正常</span><br><span class=\"line\">$ curl https://10.98.23.78:443 -k -I</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Cache-Control: no-store</span><br><span class=\"line\">Content-Length: 1262</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">Last-Modified: Fri, 06 Dec 2019 15:14:02 GMT</span><br><span class=\"line\">Date: Tue, 31 Dec 2019 06:35:55 GMT</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问Dashboard\"><a href=\"#访问Dashboard\" class=\"headerlink\" title=\"访问Dashboard\"></a>访问Dashboard</h3><p>访问Dashboard有好几种方式</p>\n<ul>\n<li>将kubernetes-dashboard Service暴露 NodePort，使用 <a href=\"http://NodeIP:nodePort\" target=\"_blank\" rel=\"noopener\">http://NodeIP:nodePort</a> 地址访问 dashboard</li>\n<li>使用Ingress之类的入口服务进行代理访问</li>\n<li>通过 API server 访问 dashboard（https 6443端口和http 8080端口方式）</li>\n<li>通过 kubectl proxy 访问 dashboard</li>\n</ul>\n<h4 id=\"kubectl-proxy\"><a href=\"#kubectl-proxy\" class=\"headerlink\" title=\"kubectl proxy\"></a>kubectl proxy</h4><p>首先这里我们通过<code>kubectl proxy</code>，在<strong>k8s-head</strong>节点执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl proxy --address=&apos;0.0.0.0&apos; --accept-hosts=&apos;^*$&apos;</span><br></pre></td></tr></table></figure>\n\n<p>在访问之前，我们需要先创建一个<strong>User</strong>（一个<strong>ServiceAccount</strong>，k8s内概念），创建dashboard-adminuser.yaml文件，写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: cluster-admin</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>kubectl apply -f dashboard-adminuser.yaml</code>。<br>查看用户token（之后在浏览器中输入）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class=\"line\">Name:         admin-user-token-mxmtr</span><br><span class=\"line\">Namespace:    kubernetes-dashboard</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class=\"line\">              kubernetes.io/service-account.uid: 54ddc041-f3af-41fa-a824-6a3e29f0ffa3</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1025 bytes</span><br><span class=\"line\">namespace:  20 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLW14bXRyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI1NGRkYzA0MS1mM2FmLTQxZmEtYTgyNC02YTNlMjlmMGZmYTMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.osyqbUwS4pLDEhZ0iL0aAu2f5me82bGTEfXEW8ycS5-JRar4iYcWkqhJZ9FhZV47P0WKLT9UWiLcDw1rVPZbMSHrRnFZcRHmLO35tVBaijjvgsgm2X5856G-HS1VNMgQBSZXiQXr1Lt3Dj9JHHksbiLGg-3wRy7HqD-I8JcR1pHZ_ViOqQ1j6WIbvhfEE3FpTuuSPAcjwVNutXAfur6oJktjYAcwMjWTQ4-yMQ2NRSWM7AcJtjp_7p3WwnHmO6fH6LtrGQzmXwHh5ICmei2LrAE2cxwN251aMVnrPGt00Ff4ij2-yLyI4VZOgAsNuPegctm-GuCOTGNX9Ew-o1si_Q</span><br></pre></td></tr></table></figure>\n\n<p>为了在宿主机上能访问，我们需要用VirutalBox管理界面添加一个端口映射：  </p>\n<p><img src=\"https://s2.ax1x.com/2019/12/31/l1FsQP.png\" alt=\"upload successful\"></p>\n<p>好了，现在我们可以访问Dashboard了，浏览内输入<code>http://localhost:31694/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.</code>，可以看到<br><img src=\"/images/k8s-dashboard.png\" alt></p>\n<h4 id=\"NodePort\"><a href=\"#NodePort\" class=\"headerlink\" title=\"NodePort\"></a>NodePort</h4><p>这个过程比<code>kubectl proxy</code>简单，再安装Dashboard之前，把<code>Service</code>类型改成<code>NodePort</code>即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml  #下载yaml</span><br><span class=\"line\">$ vim recommended.yaml</span><br></pre></td></tr></table></figure>\n\n<p>找到Service部分，改成NodePort</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  name: kubernetes-dashboard</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort  # 这个是新增部分</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 443</span><br><span class=\"line\">      targetPort: 8443</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n\n<p>查看，Service的随机端口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pods,svc --all-namespaces</span><br><span class=\"line\"></span><br><span class=\"line\">NAMESPACE              NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system            pod/calico-node-ffn9k                            2/2     Running   10         32d</span><br><span class=\"line\">kube-system            pod/calico-node-fz8v6                            2/2     Running   12         32d</span><br><span class=\"line\">kube-system            pod/calico-node-gvjft                            2/2     Running   8          32d</span><br><span class=\"line\">kube-system            pod/coredns-94d74667-8jp5k                       1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/coredns-94d74667-tlph7                       1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/etcd-k8s-head                                1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/kube-apiserver-k8s-head                      1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/kube-controller-manager-k8s-head             1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/kube-proxy-4rsp4                             1/1     Running   5          32d</span><br><span class=\"line\">kube-system            pod/kube-proxy-dccdc                             1/1     Running   5          32d</span><br><span class=\"line\">kube-system            pod/kube-proxy-x82tl                             1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/kube-scheduler-k8s-head                      1/1     Running   4          32d</span><br><span class=\"line\">kubernetes-dashboard   pod/dashboard-metrics-scraper-6c554969c6-wmwpt   1/1     Running   0          18m</span><br><span class=\"line\">kubernetes-dashboard   pod/kubernetes-dashboard-56c5f95c6b-s66g8        1/1     Running   0          18m</span><br><span class=\"line\"></span><br><span class=\"line\">NAMESPACE              NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class=\"line\">default                service/kubernetes                  ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP                  32d</span><br><span class=\"line\">kube-system            service/calico-typha                ClusterIP   10.104.182.223   &lt;none&gt;        5473/TCP                 32d</span><br><span class=\"line\">kube-system            service/kube-dns                    ClusterIP   10.96.0.10       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   32d</span><br><span class=\"line\">kubernetes-dashboard   service/dashboard-metrics-scraper   ClusterIP   10.99.243.131    &lt;none&gt;        8000/TCP                 18m</span><br><span class=\"line\">kubernetes-dashboard   service/kubernetes-dashboard        NodePort    10.96.23.239     &lt;none&gt;        443:30646/TCP            18m</span><br></pre></td></tr></table></figure>\n\n<p>可以看到暴露端口是<strong>30646</strong>，访问Master节点上的30646端口<code>https://192.168.205.10:30646</code>，需要填写的<strong>token</strong>和上面<code>kubectl proxy</code>遇到的问题一样，先创建<strong>ServiceAccount</strong>和<strong>ClusterRoleBinding</strong>，然后查看这个账号的token。</p>\n<h4 id=\"API-Server\"><a href=\"#API-Server\" class=\"headerlink\" title=\"API Server\"></a>API Server</h4><p>首先，我们需要导出p12证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成 client-certificate-data</span><br><span class=\"line\">grep &apos;client-certificate-data&apos; ~/.kube/config | head -n 1 | awk &apos;&#123;print $2&#125;&apos; | base64 -d &gt;&gt; kubecfg.crt</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成 client-key-data</span><br><span class=\"line\">grep &apos;client-key-data&apos; ~/.kube/config | head -n 1 | awk &apos;&#123;print $2&#125;&apos; | base64 -d &gt;&gt; kubecfg.key</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成 p12</span><br><span class=\"line\">openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name &quot;kubernetes-client&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后，在在 chrome 导入了 p12 证书（点击“设置”，“管理证书”那里导入）。<br>访问链接：<code>https://192.168.205.10:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy</code>，就可以看到<strong>登录界面</strong>了（注意：<strong>新版的Dashboard，命名空间移动到了kubernetes-dashboard中</strong>）<br><img src=\"https://s2.ax1x.com/2020/01/26/1mG9UJ.png\" alt><br><strong>token</strong>的填写跟上面<code>kubectl proxy</code>一样，当然你也可以直接用master节点中<code>$HOME/.kube/config</code>文件来登录。</p>\n<h2 id=\"kubernetes常用命令\"><a href=\"#kubernetes常用命令\" class=\"headerlink\" title=\"kubernetes常用命令\"></a>kubernetes常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 查看</span><br><span class=\"line\">kubectl cluster-info    ----查看集群信息</span><br><span class=\"line\">kubectl get pods --all-namespaces ------查看所有pod信息</span><br><span class=\"line\">kubectl get cs    ----查看各组件（componentstatuses）信息，可以简写为rc</span><br><span class=\"line\">kubectl get pods -n default   ----列出default命名空间所有的pods</span><br><span class=\"line\">kubectl get pods -o wide    ----查看pods所在的运行节点</span><br><span class=\"line\">kubectl get pods -o yaml    ----查看pods定义的详细信息</span><br><span class=\"line\">kubectl get rc    ----查看Replication Controller信息</span><br><span class=\"line\">kubectl get service    ----查看service的信息</span><br><span class=\"line\">kubectl get nodes    ----查看节点信息</span><br><span class=\"line\">kubectl get pod --selector name=redis    ----按selector名来查找pod</span><br><span class=\"line\">kubectl exec pod名字 env    ----查看运行的pod的环境变量</span><br><span class=\"line\">kubectl  get pod,deploy,svc -n kubernetes-dashboard ---一起查看pod，service，deployment信息</span><br><span class=\"line\"></span><br><span class=\"line\">## 创建</span><br><span class=\"line\">kubectl create -f 文件名    ----创建</span><br><span class=\"line\">kubectl replace -f 文件名  [--force]    ----重建</span><br><span class=\"line\"></span><br><span class=\"line\">## 删除</span><br><span class=\"line\">kubectl delete -f 文件名</span><br><span class=\"line\">kubectl delete pod pod名</span><br><span class=\"line\">kubectl delete rc rc名</span><br><span class=\"line\">kubectl delete service service名</span><br><span class=\"line\">kubectl delete pod --all</span><br><span class=\"line\">kubectl run mybusybox --image=busybox    ----启动一个pod</span><br><span class=\"line\">kubectl run mybusybox --image=busybox --replicas=5    ----启动多个pod</span><br><span class=\"line\">kubectl delete deployments mybusybox    ----删除创建的pod</span><br><span class=\"line\">kubectl get pods    ----列出当前所有的pod</span><br><span class=\"line\">kubectl describe pod [PODNAME]    ----查看pod的状态</span><br><span class=\"line\">kubectl run mynginx --image=nginx --port=80 --hostport=8000    ----创建带有端口映射的pod</span><br><span class=\"line\">kubectl run -i --tty busybox --image=busybox    ----创建带有终端的pod</span><br></pre></td></tr></table></figure>\n\n<p>参考</p>\n<ul>\n<li><a href=\"https://github.com/ecomm-integration-ballerina/kubernetes-cluster\" target=\"_blank\" rel=\"noopener\">Github——kubernetes-cluster-via-vagrant</a></li>\n<li><a href=\"https://www.australtech.net/kubernetes-unable-to-login-to-the-dashboard/\" target=\"_blank\" rel=\"noopener\">Kubernetes – unable to login to the Dashboard\n</a></li>\n<li><a href=\"https://www.cnblogs.com/rainingnight/p/deploying-k8s-dashboard-ui.html#api-server\" target=\"_blank\" rel=\"noopener\">kubernetes-dashboard(1.8.3)部署与踩坑</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://image-static.segmentfault.com/311/703/311703680-5b80e2877f8c8_articlex\" alt=\"k8s logo\"></p>\n<p>Kubernetes，简称 <strong>k8s</strong>（k，8 个字符，s——明白了？）或者 “kube”，是一个开源的 Linux 容器自动化运维平台，它消除了容器化应用程序在部署、伸缩时涉及到的许多手动操作。换句话说，你可以将多台主机组合成集群来运行 Linux 容器，而 Kubernetes 可以帮助你简单高效地管理那些集群。构成这些集群的主机还可以跨越公有云、私有云以及混合云。</p>\n<p>本文环境：</p>\n<ul>\n<li>OS：Ubuntu 18.04.3 LTS</li>\n<li>Vagrant版本：2.2.6</li>\n<li>VirtualBox版本：6.0.14 r133895 (Qt5.9.5)</li>\n<li>Kubernetes版本：1.15.7</li>\n</ul>","more":"<h2 id=\"安装Vagrant\"><a href=\"#安装Vagrant\" class=\"headerlink\" title=\"安装Vagrant\"></a>安装Vagrant</h2><p>Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源<strong>VirtualBox</strong>（其实也可以用别的）虚拟化系统，使用Chef创建自动化虚拟环境。<br>首先到<a href=\"https://www.vagrantup.com/downloads.html\" target=\"_blank\" rel=\"noopener\">官网</a>下载最新的<code>Vagrant</code>，现在最新的版本是<strong>2.2.6</strong>，当然你也可以通过命令行下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://releases.hashicorp.com/vagrant/2.2.6/vagrant_2.2.6_x86_64.deb</span><br></pre></td></tr></table></figure>\n\n<p>验证<code>Vagrant</code>安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant --version</span><br><span class=\"line\">Vagrant 2.2.6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装VirtualBox\"><a href=\"#安装VirtualBox\" class=\"headerlink\" title=\"安装VirtualBox\"></a>安装VirtualBox</h2><p>Vagrant是基于虚拟机（<code>VirtualBox</code>，<code>VMware</code>这些）的，所以我们还需要安装<code>VirtualBox</code>。在Vagrant官网可以它适配的<code>VirtualBox</code>版本</p>\n<blockquote>\n<p>Vagrant comes with support out of the box for VirtualBox, a free, cross-platform consumer virtualization product.<br>The VirtualBox provider is compatible with VirtualBox versions 4.0.x, 4.1.x, 4.2.x, 4.3.x, 5.0.x, 5.1.x, 5.2.x, and 6.0.x.</p>\n</blockquote>\n<p>这里我下载6.0版本的<code>VirtualBox</code>，<a href=\"https://www.virtualbox.org/wiki/Download_Old_Builds_6_0\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://download.virtualbox.org/virtualbox/6.0.14/virtualbox-6.0_6.0.14-133895~Ubuntu~bionic_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：不要通过apt-get安装VirtualBox</strong>，因为5.1.0版本开始，VirtualBox已经不需要<strong>DKMS</strong>，apt官方源中VirtualBox比较老，是会带上<code>DKMS</code>的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DKMS isn&apos;t required by VirtualBox since 5.1.0. Which means that you downloaded VirtualBox from your Debian &quot;store&quot;. That&apos;s a fork, not supported. You can either ask in their forums for help, or completely remove/uninstall/delete/purge their version and install the official version from the Downloads section of VirtualBox (https://www.virtualbox.org/wiki/Downloads).</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动虚拟机\"><a href=\"#启动虚拟机\" class=\"headerlink\" title=\"启动虚拟机\"></a>启动虚拟机</h2><p><code>Vagrant</code>跟docker类似，可以提供一致性环境的，它可以编写<code>Vagrantfile</code>（类似<code>docker-compose.yml</code>）来定义虚拟机中安装什么软件，环境和配置，它使用ruby语法。<code>Vagrant</code>也做了<a href=\"https://app.vagrantup.com/boxes/search\" target=\"_blank\" rel=\"noopener\">box源</a>，类似docker image。<br>下面给出一个小栗子感受下，这里使用<code>ubuntu/xenial64</code>（Ubuntu 16.06 64位）这个box</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- mode: ruby -*-</span><br><span class=\"line\"># vi: set ft=ruby :</span><br><span class=\"line\"></span><br><span class=\"line\"># All Vagrant configuration is done below. The &quot;2&quot; in Vagrant.configure</span><br><span class=\"line\"># configures the configuration version (we support older styles for</span><br><span class=\"line\"># backwards compatibility). Please don&apos;t change it unless you know what</span><br><span class=\"line\"># you&apos;re doing.</span><br><span class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class=\"line\">  ##### DEFINE VM #####</span><br><span class=\"line\">  # The most common configuration options are documented and commented below.</span><br><span class=\"line\">  # For a complete reference, please see the online documentation at</span><br><span class=\"line\">  # https://docs.vagrantup.com.</span><br><span class=\"line\"></span><br><span class=\"line\">  # Every Vagrant development environment requires a box. You can search for</span><br><span class=\"line\">  # boxes at https://app.vagrantup.com/boxes/search.</span><br><span class=\"line\">  config.vm.box = &quot;ubuntu/xenial64&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.hostname = &quot;ubuntu-01&quot;</span><br><span class=\"line\">  config.vm.box_check_update = false</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a private network, which allows host-only access to the machine</span><br><span class=\"line\">  # using a specific IP.</span><br><span class=\"line\">  config.vm.network &quot;private_network&quot;, ip: &quot;192.168.10.50&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a public network, which generally matched to bridged network.</span><br><span class=\"line\">  # Bridged networks make the machine appear as another physical device on</span><br><span class=\"line\">  # your network.</span><br><span class=\"line\">  # config.vm.network &quot;public_network&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Share an additional folder to the guest VM. The first argument is</span><br><span class=\"line\">  # the path on the host to the actual folder. The second argument is</span><br><span class=\"line\">  # the path on the guest to mount the folder. And the optional third</span><br><span class=\"line\">  # argument is a set of non-required options.</span><br><span class=\"line\">  # config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  # Provider-specific configuration so you can fine-tune various</span><br><span class=\"line\">  # backing providers for Vagrant. These expose provider-specific options.</span><br><span class=\"line\">  # Example for VirtualBox:</span><br><span class=\"line\">  #</span><br><span class=\"line\">  # config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class=\"line\">  #   # Display the VirtualBox GUI when booting the machine</span><br><span class=\"line\">  #   vb.gui = true</span><br><span class=\"line\">  #</span><br><span class=\"line\">  #   # Customize the amount of memory on the VM:</span><br><span class=\"line\">  #   vb.memory = &quot;1024&quot;</span><br><span class=\"line\">  # end</span><br><span class=\"line\">  #</span><br><span class=\"line\">  # View the documentation for the provider you are using for more</span><br><span class=\"line\">  # information on available options.</span><br><span class=\"line\">  </span><br><span class=\"line\">  config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class=\"line\">    v.name = &quot;ubuntu-for-fun&quot;</span><br><span class=\"line\">    v.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;2048&quot;]</span><br><span class=\"line\">    v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, &quot;2&quot;]</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a forwarded port mapping which allows access to a specific port</span><br><span class=\"line\">  # within the machine from a port on the host machine. In the example below,</span><br><span class=\"line\">  # accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span><br><span class=\"line\">  # config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>更多虚拟机的配置可以查看<a href=\"https://www.vagrantup.com/docs/vagrantfile/machine_settings.html\" target=\"_blank\" rel=\"noopener\">官方文档</a><br>在Vagrantfile对应的目录下终端键入：<code>vagrant up</code>，然后<code>Vagrant</code>会帮我们下载<code>ubuntu/xenial64</code>这个box，不过在中国下载速度非常慢，在运行<code>vagrant up</code>时我们可以看到这个box的下载url，你可以用<strong>迅雷</strong>这些工具直接下载，然后在本地手动添加box</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant up</span><br><span class=\"line\">Bringing machine &apos;default&apos; up with &apos;virtualbox&apos; provider...</span><br><span class=\"line\">==&gt; default: Box &apos;ubuntu/xenial64&apos; could not be found. Attempting to find and install...</span><br><span class=\"line\">    default: Box Provider: virtualbox</span><br><span class=\"line\">    default: Box Version: &gt;= 0</span><br><span class=\"line\">==&gt; default: Loading metadata for box &apos;ubuntu/xenial64&apos;</span><br><span class=\"line\">    default: URL: https://vagrantcloud.com/ubuntu/xenial64</span><br><span class=\"line\">==&gt; default: Adding box &apos;ubuntu/xenial64&apos; (v20191217.0.0) for provider: virtualbox</span><br><span class=\"line\">    default: Downloading: https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box</span><br><span class=\"line\">==&gt; default: Box download is resuming from prior download progress</span><br><span class=\"line\">    default: Download redirected to host: cloud-images.ubuntu.com</span><br><span class=\"line\">    .........</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd ~/box-add</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">metadata.json  virtualbox.box</span><br><span class=\"line\">$ vagrant box add metadata.json</span><br><span class=\"line\">==&gt; box: Loading metadata for box &apos;metadata.json&apos;</span><br><span class=\"line\">    box: URL: file:///home/lucy/vm-add/metadata.json</span><br><span class=\"line\">==&gt; box: Adding box &apos;ubuntu/xenial64&apos; (v20191217.0.0) for provider: virtualbox</span><br><span class=\"line\">    box: Downloading: ./virtualbox.box</span><br><span class=\"line\">==&gt; box: Successfully added box &apos;ubuntu/xenial64&apos; (v20191217.0.0) for &apos;virtualbox&apos;!</span><br><span class=\"line\">$ vagrant box list</span><br><span class=\"line\">ubuntu/xenial64 (virtualbox, 20191217.0.0)</span><br></pre></td></tr></table></figure>\n\n<p>下载box的URL是<code>https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box</code>，可以看到下载的版本是<strong>20191217.0.0</strong>，另外注意一下这里添加box的是使用一个<code>metadata.json</code>文件，使用这样的方式可以定义box版本号，它的内容是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">    &quot;versions&quot;: [&#123;</span><br><span class=\"line\">        &quot;version&quot;: &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        &quot;providers&quot;: [&#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;virtualbox&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;./virtualbox.box&quot;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动虚拟机你可能会遇到下面的错误：</p>\n<p><img src=\"/images/virtualbox-error.png\" alt=\"upload successful\"></p>\n<p>解决方法是在<strong>BIOS</strong>中将<strong>Intel Virtualization Technology</strong>改为Enable。<br>启动虚拟机后，你可以通过<code>vagrant ssh</code>进入虚拟机。</p>\n<h2 id=\"启动Kubernetes集群\"><a href=\"#启动Kubernetes集群\" class=\"headerlink\" title=\"启动Kubernetes集群\"></a>启动Kubernetes集群</h2><p>这里我编写了一个<code>Vagrantfile</code>，一键启动集群：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- mode: ruby -*-</span><br><span class=\"line\"># vi: set ft=ruby :</span><br><span class=\"line\"></span><br><span class=\"line\">servers = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-head&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;master&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.10&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-node-1&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;node&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.11&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-node-2&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;node&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.12&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># This script to install k8s using kubeadm will get executed after a box is provisioned</span><br><span class=\"line\">$configureBox = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">    # use Aliyun apt source</span><br><span class=\"line\">    cat &gt; /etc/apt/sources.list&lt;&lt;EOF</span><br><span class=\"line\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\"></span><br><span class=\"line\">    # install docker v17.03</span><br><span class=\"line\">    # reason for not using docker provision is that it always installs latest version of the docker, but kubeadm requires 17.03 or older</span><br><span class=\"line\">    apt-get update</span><br><span class=\"line\">    # step 1: 安装必要的一些系统工具</span><br><span class=\"line\">    apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class=\"line\">    # step 2: 安装GPG证书</span><br><span class=\"line\">    curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\">    add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/$(. /etc/os-release; echo &quot;$ID&quot;) $(lsb_release -cs) stable&quot;</span><br><span class=\"line\">    apt-get update &amp;&amp; apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk &apos;&#123;print $3&#125;&apos;)</span><br><span class=\"line\">    # run docker commands as vagrant user (sudo not required)</span><br><span class=\"line\">    usermod -aG docker vagrant</span><br><span class=\"line\">    # 修改docker配置</span><br><span class=\"line\">    sudo bash -c &apos;cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">  &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF&apos;</span><br><span class=\"line\">    sudo systemctl daemon-reload</span><br><span class=\"line\">    sudo systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\">    # install kubeadm</span><br><span class=\"line\">    apt-get install -y apt-transport-https curl</span><br><span class=\"line\">    curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -  # aliyun GPG</span><br><span class=\"line\">    cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class=\"line\">    deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\">    apt-get update</span><br><span class=\"line\">    apt-get install -y kubelet=1.15.7-00 kubeadm=1.15.7-00 kubectl=1.15.7-00</span><br><span class=\"line\">    apt-mark hold kubelet kubeadm kubectl</span><br><span class=\"line\">    # kubelet requires swap off</span><br><span class=\"line\">    swapoff -a</span><br><span class=\"line\">    # keep swap off after reboot</span><br><span class=\"line\">    sudo sed -i &apos;/ swap / s/^\\(.*\\)$/#\\1/g&apos; /etc/fstab</span><br><span class=\"line\">    # ip of this box</span><br><span class=\"line\">    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk &apos;&#123;print $2&#125;&apos;| cut -f2 -d:`</span><br><span class=\"line\">    # set node-ip</span><br><span class=\"line\">    sudo sh -c &apos;echo KUBELET_EXTRA_ARGS= &gt;&gt; /etc/default/kubelet&apos;</span><br><span class=\"line\">    sudo sed -i &quot;/^[^#]*KUBELET_EXTRA_ARGS=/c\\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR&quot; /etc/default/kubelet</span><br><span class=\"line\">    sudo systemctl restart kubelet</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">$configureMaster = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\">    echo &quot;This is master&quot;</span><br><span class=\"line\">    # ip of this box</span><br><span class=\"line\">    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk &apos;&#123;print $2&#125;&apos;| cut -f2 -d:`</span><br><span class=\"line\">    # install k8s master</span><br><span class=\"line\">    HOST_NAME=$(hostname -s)</span><br><span class=\"line\">    kubeadm init --image-repository registry.aliyuncs.com/google_containers  --kubernetes-version v1.15.7 \\</span><br><span class=\"line\">    --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR  --node-name $HOST_NAME --pod-network-cidr=172.16.0.0/16</span><br><span class=\"line\">    #copying credentials to regular user - vagrant</span><br><span class=\"line\">    sudo --user=vagrant mkdir -p /home/vagrant/.kube</span><br><span class=\"line\">    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config</span><br><span class=\"line\">    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">    # install Calico pod network addon</span><br><span class=\"line\">    export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\">    kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml</span><br><span class=\"line\">    kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml</span><br><span class=\"line\">    kubeadm token create --print-join-command &gt;&gt; /etc/kubeadm_join_cmd.sh</span><br><span class=\"line\">    chmod +x /etc/kubeadm_join_cmd.sh</span><br><span class=\"line\">    # required for setting up password less ssh between guest VMs</span><br><span class=\"line\">    sudo sed -i &quot;/^[^#]*PasswordAuthentication[[:space:]]no/c\\PasswordAuthentication yes&quot; /etc/ssh/sshd_config</span><br><span class=\"line\">    sudo service sshd restart</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">$configureNode = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\">    echo &quot;This is worker&quot;</span><br><span class=\"line\">    apt-get install -y sshpass</span><br><span class=\"line\">    sshpass -p &quot;vagrant&quot; scp -o StrictHostKeyChecking=no vagrant@192.168.205.10:/etc/kubeadm_join_cmd.sh .</span><br><span class=\"line\">    sh ./kubeadm_join_cmd.sh</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class=\"line\">    </span><br><span class=\"line\">    servers.each do |opts|</span><br><span class=\"line\">        config.vm.define opts[:name] do |config|</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.box = opts[:box]</span><br><span class=\"line\">            config.vm.box_version = opts[:box_version]</span><br><span class=\"line\">            config.vm.hostname = opts[:name]</span><br><span class=\"line\">            config.vm.network :private_network, ip: opts[:eth1]</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class=\"line\"></span><br><span class=\"line\">                v.name = opts[:name]</span><br><span class=\"line\">            \tv.customize [&quot;modifyvm&quot;, :id, &quot;--groups&quot;, &quot;/Salamander Development&quot;]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, opts[:mem]]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, opts[:cpu]]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--natdnshostresolver1&quot;, &quot;on&quot;]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--natdnsproxy1&quot;, &quot;on&quot;]</span><br><span class=\"line\">            end</span><br><span class=\"line\"></span><br><span class=\"line\">            # we cannot use this because we can&apos;t install the docker version we want - https://github.com/hashicorp/vagrant/issues/4871</span><br><span class=\"line\">            #config.vm.provision &quot;docker&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.provision &quot;shell&quot;, inline: $configureBox</span><br><span class=\"line\"></span><br><span class=\"line\">            if opts[:type] == &quot;master&quot;</span><br><span class=\"line\">                config.vm.provision &quot;shell&quot;, inline: $configureMaster</span><br><span class=\"line\">            else</span><br><span class=\"line\">                config.vm.provision &quot;shell&quot;, inline: $configureNode</span><br><span class=\"line\">            end</span><br><span class=\"line\"></span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>启动集群<code>vagrant up</code>，这里需要耐心等待几分钟，因为要启动三个虚拟机、安装一些软件和设置环境。<br>启动集群后，进入<strong>Master节点</strong><code>vagrant ssh k8s-head</code>查看集群状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME         STATUS   ROLES    AGE    VERSION</span><br><span class=\"line\">k8s-head     Ready    master   5h7m   v1.15.7</span><br><span class=\"line\">k8s-node-1   Ready    &lt;none&gt;   5h5m   v1.15.7</span><br><span class=\"line\">k8s-node-2   Ready    &lt;none&gt;   5h2m   v1.15.7</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pods --all-namespaces</span><br><span class=\"line\">NAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system            calico-node-j5kw8                            2/2     Running   4          5h7m</span><br><span class=\"line\">kube-system            calico-node-kq89s                            2/2     Running   0          5h6m</span><br><span class=\"line\">kube-system            calico-node-twvdl                            2/2     Running   0          5h2m</span><br><span class=\"line\">kube-system            coredns-94d74667-jhjl8                       1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            coredns-94d74667-qd9qv                       1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            etcd-k8s-head                                1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-apiserver-k8s-head                      1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-controller-manager-k8s-head             1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-proxy-7d8wj                             1/1     Running   0          5h2m</span><br><span class=\"line\">kube-system            kube-proxy-hn89g                             1/1     Running   0          5h6m</span><br><span class=\"line\">kube-system            kube-proxy-t8qf9                             1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            kube-scheduler-k8s-head                      1/1     Running   2          5h6m</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl cluster-info</span><br><span class=\"line\">Kubernetes master is running at https://192.168.205.10:6443</span><br><span class=\"line\">KubeDNS is running at https://192.168.205.10:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get componentstatuses</span><br><span class=\"line\">NAME                 STATUS    MESSAGE             ERROR</span><br><span class=\"line\">scheduler            Healthy   ok                  </span><br><span class=\"line\">controller-manager   Healthy   ok                  </span><br><span class=\"line\">etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>节点都是<strong>Ready</strong>和pods都是<strong>Running</strong>说明集群成功启动了，<code>kubectl cluster-info</code>可以查看集群信息，<code>kubectl get componentstatuses</code>可以查看各组件信息。</p>\n<h2 id=\"安装官方Dashboard\"><a href=\"#安装官方Dashboard\" class=\"headerlink\" title=\"安装官方Dashboard\"></a>安装官方Dashboard</h2><p><a href=\"https://github.com/kubernetes/dashboard\" target=\"_blank\" rel=\"noopener\">Dashboard</a>是Kubernetes的一个插件，代码单独放在Github的一个仓库里。<br>按照<a href=\"https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/\" target=\"_blank\" rel=\"noopener\">官方文档</a>，步骤也蛮简单的，首先执行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>\n\n<p>查看一下Dashboard的服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ kubectl  get pod,deploy,svc -n kubernetes-dashboard</span><br><span class=\"line\">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/dashboard-metrics-scraper-6c554969c6-jqhjx   1/1     Running   0          5h5m</span><br><span class=\"line\">pod/kubernetes-dashboard-56c5f95c6b-jrj58        1/1     Running   5          5h5m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.extensions/dashboard-metrics-scraper   1/1     1            1           5h5m</span><br><span class=\"line\">deployment.extensions/kubernetes-dashboard        1/1     1            1           5h5m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">service/dashboard-metrics-scraper   ClusterIP   10.106.117.224   &lt;none&gt;        8000/TCP   5h5m</span><br><span class=\"line\">service/kubernetes-dashboard        ClusterIP   10.98.23.78      &lt;none&gt;        443/TCP    5h5m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 我们可以看到官方的dashboard帮我们启动了web-ui，并且帮我们启动了一个Metric服务</span><br><span class=\"line\"># 但是dashboard默认使用的https的443端口</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试下Dashboard是否正常</span><br><span class=\"line\">$ curl https://10.98.23.78:443 -k -I</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Cache-Control: no-store</span><br><span class=\"line\">Content-Length: 1262</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">Last-Modified: Fri, 06 Dec 2019 15:14:02 GMT</span><br><span class=\"line\">Date: Tue, 31 Dec 2019 06:35:55 GMT</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问Dashboard\"><a href=\"#访问Dashboard\" class=\"headerlink\" title=\"访问Dashboard\"></a>访问Dashboard</h3><p>访问Dashboard有好几种方式</p>\n<ul>\n<li>将kubernetes-dashboard Service暴露 NodePort，使用 <a href=\"http://NodeIP:nodePort\" target=\"_blank\" rel=\"noopener\">http://NodeIP:nodePort</a> 地址访问 dashboard</li>\n<li>使用Ingress之类的入口服务进行代理访问</li>\n<li>通过 API server 访问 dashboard（https 6443端口和http 8080端口方式）</li>\n<li>通过 kubectl proxy 访问 dashboard</li>\n</ul>\n<h4 id=\"kubectl-proxy\"><a href=\"#kubectl-proxy\" class=\"headerlink\" title=\"kubectl proxy\"></a>kubectl proxy</h4><p>首先这里我们通过<code>kubectl proxy</code>，在<strong>k8s-head</strong>节点执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl proxy --address=&apos;0.0.0.0&apos; --accept-hosts=&apos;^*$&apos;</span><br></pre></td></tr></table></figure>\n\n<p>在访问之前，我们需要先创建一个<strong>User</strong>（一个<strong>ServiceAccount</strong>，k8s内概念），创建dashboard-adminuser.yaml文件，写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: cluster-admin</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>kubectl apply -f dashboard-adminuser.yaml</code>。<br>查看用户token（之后在浏览器中输入）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk &apos;&#123;print $1&#125;&apos;)</span><br><span class=\"line\">Name:         admin-user-token-mxmtr</span><br><span class=\"line\">Namespace:    kubernetes-dashboard</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class=\"line\">              kubernetes.io/service-account.uid: 54ddc041-f3af-41fa-a824-6a3e29f0ffa3</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1025 bytes</span><br><span class=\"line\">namespace:  20 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLW14bXRyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI1NGRkYzA0MS1mM2FmLTQxZmEtYTgyNC02YTNlMjlmMGZmYTMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.osyqbUwS4pLDEhZ0iL0aAu2f5me82bGTEfXEW8ycS5-JRar4iYcWkqhJZ9FhZV47P0WKLT9UWiLcDw1rVPZbMSHrRnFZcRHmLO35tVBaijjvgsgm2X5856G-HS1VNMgQBSZXiQXr1Lt3Dj9JHHksbiLGg-3wRy7HqD-I8JcR1pHZ_ViOqQ1j6WIbvhfEE3FpTuuSPAcjwVNutXAfur6oJktjYAcwMjWTQ4-yMQ2NRSWM7AcJtjp_7p3WwnHmO6fH6LtrGQzmXwHh5ICmei2LrAE2cxwN251aMVnrPGt00Ff4ij2-yLyI4VZOgAsNuPegctm-GuCOTGNX9Ew-o1si_Q</span><br></pre></td></tr></table></figure>\n\n<p>为了在宿主机上能访问，我们需要用VirutalBox管理界面添加一个端口映射：  </p>\n<p><img src=\"https://s2.ax1x.com/2019/12/31/l1FsQP.png\" alt=\"upload successful\"></p>\n<p>好了，现在我们可以访问Dashboard了，浏览内输入<code>http://localhost:31694/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.</code>，可以看到<br><img src=\"/images/k8s-dashboard.png\" alt></p>\n<h4 id=\"NodePort\"><a href=\"#NodePort\" class=\"headerlink\" title=\"NodePort\"></a>NodePort</h4><p>这个过程比<code>kubectl proxy</code>简单，再安装Dashboard之前，把<code>Service</code>类型改成<code>NodePort</code>即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml  #下载yaml</span><br><span class=\"line\">$ vim recommended.yaml</span><br></pre></td></tr></table></figure>\n\n<p>找到Service部分，改成NodePort</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind: Service</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br><span class=\"line\">  name: kubernetes-dashboard</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  type: NodePort  # 这个是新增部分</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 443</span><br><span class=\"line\">      targetPort: 8443</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    k8s-app: kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n\n<p>查看，Service的随机端口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get pods,svc --all-namespaces</span><br><span class=\"line\"></span><br><span class=\"line\">NAMESPACE              NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system            pod/calico-node-ffn9k                            2/2     Running   10         32d</span><br><span class=\"line\">kube-system            pod/calico-node-fz8v6                            2/2     Running   12         32d</span><br><span class=\"line\">kube-system            pod/calico-node-gvjft                            2/2     Running   8          32d</span><br><span class=\"line\">kube-system            pod/coredns-94d74667-8jp5k                       1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/coredns-94d74667-tlph7                       1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/etcd-k8s-head                                1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/kube-apiserver-k8s-head                      1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/kube-controller-manager-k8s-head             1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/kube-proxy-4rsp4                             1/1     Running   5          32d</span><br><span class=\"line\">kube-system            pod/kube-proxy-dccdc                             1/1     Running   5          32d</span><br><span class=\"line\">kube-system            pod/kube-proxy-x82tl                             1/1     Running   4          32d</span><br><span class=\"line\">kube-system            pod/kube-scheduler-k8s-head                      1/1     Running   4          32d</span><br><span class=\"line\">kubernetes-dashboard   pod/dashboard-metrics-scraper-6c554969c6-wmwpt   1/1     Running   0          18m</span><br><span class=\"line\">kubernetes-dashboard   pod/kubernetes-dashboard-56c5f95c6b-s66g8        1/1     Running   0          18m</span><br><span class=\"line\"></span><br><span class=\"line\">NAMESPACE              NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE</span><br><span class=\"line\">default                service/kubernetes                  ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP                  32d</span><br><span class=\"line\">kube-system            service/calico-typha                ClusterIP   10.104.182.223   &lt;none&gt;        5473/TCP                 32d</span><br><span class=\"line\">kube-system            service/kube-dns                    ClusterIP   10.96.0.10       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   32d</span><br><span class=\"line\">kubernetes-dashboard   service/dashboard-metrics-scraper   ClusterIP   10.99.243.131    &lt;none&gt;        8000/TCP                 18m</span><br><span class=\"line\">kubernetes-dashboard   service/kubernetes-dashboard        NodePort    10.96.23.239     &lt;none&gt;        443:30646/TCP            18m</span><br></pre></td></tr></table></figure>\n\n<p>可以看到暴露端口是<strong>30646</strong>，访问Master节点上的30646端口<code>https://192.168.205.10:30646</code>，需要填写的<strong>token</strong>和上面<code>kubectl proxy</code>遇到的问题一样，先创建<strong>ServiceAccount</strong>和<strong>ClusterRoleBinding</strong>，然后查看这个账号的token。</p>\n<h4 id=\"API-Server\"><a href=\"#API-Server\" class=\"headerlink\" title=\"API Server\"></a>API Server</h4><p>首先，我们需要导出p12证书：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成 client-certificate-data</span><br><span class=\"line\">grep &apos;client-certificate-data&apos; ~/.kube/config | head -n 1 | awk &apos;&#123;print $2&#125;&apos; | base64 -d &gt;&gt; kubecfg.crt</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成 client-key-data</span><br><span class=\"line\">grep &apos;client-key-data&apos; ~/.kube/config | head -n 1 | awk &apos;&#123;print $2&#125;&apos; | base64 -d &gt;&gt; kubecfg.key</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成 p12</span><br><span class=\"line\">openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name &quot;kubernetes-client&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后，在在 chrome 导入了 p12 证书（点击“设置”，“管理证书”那里导入）。<br>访问链接：<code>https://192.168.205.10:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy</code>，就可以看到<strong>登录界面</strong>了（注意：<strong>新版的Dashboard，命名空间移动到了kubernetes-dashboard中</strong>）<br><img src=\"https://s2.ax1x.com/2020/01/26/1mG9UJ.png\" alt><br><strong>token</strong>的填写跟上面<code>kubectl proxy</code>一样，当然你也可以直接用master节点中<code>$HOME/.kube/config</code>文件来登录。</p>\n<h2 id=\"kubernetes常用命令\"><a href=\"#kubernetes常用命令\" class=\"headerlink\" title=\"kubernetes常用命令\"></a>kubernetes常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 查看</span><br><span class=\"line\">kubectl cluster-info    ----查看集群信息</span><br><span class=\"line\">kubectl get pods --all-namespaces ------查看所有pod信息</span><br><span class=\"line\">kubectl get cs    ----查看各组件（componentstatuses）信息，可以简写为rc</span><br><span class=\"line\">kubectl get pods -n default   ----列出default命名空间所有的pods</span><br><span class=\"line\">kubectl get pods -o wide    ----查看pods所在的运行节点</span><br><span class=\"line\">kubectl get pods -o yaml    ----查看pods定义的详细信息</span><br><span class=\"line\">kubectl get rc    ----查看Replication Controller信息</span><br><span class=\"line\">kubectl get service    ----查看service的信息</span><br><span class=\"line\">kubectl get nodes    ----查看节点信息</span><br><span class=\"line\">kubectl get pod --selector name=redis    ----按selector名来查找pod</span><br><span class=\"line\">kubectl exec pod名字 env    ----查看运行的pod的环境变量</span><br><span class=\"line\">kubectl  get pod,deploy,svc -n kubernetes-dashboard ---一起查看pod，service，deployment信息</span><br><span class=\"line\"></span><br><span class=\"line\">## 创建</span><br><span class=\"line\">kubectl create -f 文件名    ----创建</span><br><span class=\"line\">kubectl replace -f 文件名  [--force]    ----重建</span><br><span class=\"line\"></span><br><span class=\"line\">## 删除</span><br><span class=\"line\">kubectl delete -f 文件名</span><br><span class=\"line\">kubectl delete pod pod名</span><br><span class=\"line\">kubectl delete rc rc名</span><br><span class=\"line\">kubectl delete service service名</span><br><span class=\"line\">kubectl delete pod --all</span><br><span class=\"line\">kubectl run mybusybox --image=busybox    ----启动一个pod</span><br><span class=\"line\">kubectl run mybusybox --image=busybox --replicas=5    ----启动多个pod</span><br><span class=\"line\">kubectl delete deployments mybusybox    ----删除创建的pod</span><br><span class=\"line\">kubectl get pods    ----列出当前所有的pod</span><br><span class=\"line\">kubectl describe pod [PODNAME]    ----查看pod的状态</span><br><span class=\"line\">kubectl run mynginx --image=nginx --port=80 --hostport=8000    ----创建带有端口映射的pod</span><br><span class=\"line\">kubectl run -i --tty busybox --image=busybox    ----创建带有终端的pod</span><br></pre></td></tr></table></figure>\n\n<p>参考</p>\n<ul>\n<li><a href=\"https://github.com/ecomm-integration-ballerina/kubernetes-cluster\" target=\"_blank\" rel=\"noopener\">Github——kubernetes-cluster-via-vagrant</a></li>\n<li><a href=\"https://www.australtech.net/kubernetes-unable-to-login-to-the-dashboard/\" target=\"_blank\" rel=\"noopener\">Kubernetes – unable to login to the Dashboard\n</a></li>\n<li><a href=\"https://www.cnblogs.com/rainingnight/p/deploying-k8s-dashboard-ui.html#api-server\" target=\"_blank\" rel=\"noopener\">kubernetes-dashboard(1.8.3)部署与踩坑</a></li>\n</ul>"},{"title":"Linux网络虚拟化技术之tun/tap","author":"Salamander","date":"2020-01-13T07:00:00.000Z","_content":"我们都知道，Linux实际是通过**网络设备**去操作和使用网卡的，系统安装了一个网卡之后会为其生成一个网络设备实例，比如**eth0**（或者叫**enp7s0**，不同发行版默认网卡命名规则不同）。随着网络虚拟化技术的发展，Linux支持创建出虚拟化的设备，可以通过虚拟化设备的组合实现多种多样的功能和网络拓扑。  \n常见的虚拟化设备有**tun/tap**、**Veth**、**Bridge**、**802.1q VLAN device**。  \n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n\n\n<!-- more -->\n\n先回顾一下经典的**OSI**七层网络模型：  \n┌───────┐  \n  │　应用层　│←第七层  \n├───────┤  \n│　表示层　│  \n├───────┤  \n│　会话层　│  \n├───────┤  \n│　传输层　│  \n├───────┤  \n│　网络层　│   \n├───────┤  \n│数据链路层│  \n├───────┤  \n│　物理层　│←第一层  \n└───────┘ \n\nOSI七层参考模型\n\n## 虚拟设备和物理设备的区别\n对于一个网络设备来说，就像一个管道（pipe）一样，**有两端**，从其中任意一端收到的数据将从另一端发送出去。  \n\n比如一个物理网卡eth0，它的两端分别是内核协议栈（通过内核网络设备管理模块间接的通信）和外面的物理网络，从物理网络收到的数据，会转发给内核协议栈，而应用程序从协议栈发过来的数据将会通过物理网络发送出去。  \n\n那么对于一个虚拟网络设备呢？首先它也归内核的网络设备管理子系统管理，对于Linux内核网络设备管理模块来说，虚拟设备和物理设备没有区别，都是网络设备，都能配置IP，从网络设备来的数据，都会转发给协议栈，协议栈过来的数据，也会交由网络设备发送出去，至于是怎么发送出去的，发到哪里去，那是设备驱动的事情，跟Linux内核就没关系了，所以说虚拟网络设备的一端也是协议栈，而另一端是什么取决于虚拟网络设备的驱动实现。\n\n## tun/tap\n### tun分析实验\n先上图说话：  \n![](https://s2.ax1x.com/2020/01/13/l7D6zT.png)\n\n上图中是**tun**设备的数据走向。\n图中**nsfocus_tun0**就是tun0，是一个tun/tap虚拟设备，而**eno16777736**就是eth0。  \nsocket、协议栈（Newwork Protocol Stack）和网络设备（eth0和tun0）部分都在内核层，其实socket是协议栈的一部分，这里分开来的目的是为了看的更直观。\n\n从上图中可以看出它和物理设备eth0的差别，它们的一端虽然都连着协议栈，但另一端不一样，eth0的另一端是物理网络，这个物理网络可能就是一个交换机，而tun0的另一端是一个用户层的程序，协议栈发给tun0的数据包能被这个应用程序读取到，并且应用程序能直接向tun0写数据。  \n\n数据流向分析：\n1. User Application A通过套接字（socket A）发数据发给使用与**eno16777736**处于同一个网段ip的应用程序，数据走向为通过socket A发给协议栈，最后通过netdevice子系统中的eno16777736的设备驱动（以太网驱动）发送出去，这个是通过真实的物理网卡发送出去。\n2. User Application B通过套接字（socket B）发送数据给使用与**nsfocus_tun0**处于同一个网段ip的应用程序，数据走向为通过socket B发送给协议栈，最后通过netdevice子系统中的**nsfocus_tun0**的设备驱动（tun驱动）发送出去。由于tun设备没有对应真实的物理网卡，所以nsfocus_tun0对端收取数据的是User Application C。User Application C通过读写/dev/tun设备文件进行数据的收发。\n\n其实一般**User Application C**就是个VPN程序（例如openvpn），它收到数据包之后，做一些跟业务相关的处理，然后构造一个新的数据包，将原来的数据包嵌入在新的数据包中，最后通过socket B将数据包转发出去，这时候新数据包的源地址变成了eth0的地址，而目的IP地址变成了一个其它的地址，比如是10.33.0.1（VPN服务器地址），协议栈根据本地路由，发现这个数据包应该要通过**eth0**发送出去，于是将数据包交给eth0，最后**eth0**通过物理网络将数据包发送出去。\n\n\n从上面的流程中可以看出，数据包选择走哪个网络设备完全由**路由表**控制，所以如果我们想让某些网络流量走应用程序B的转发流程，就需要配置路由表让这部分数据走tun0。\n\n\n\n### 示例程序\n为了使用tun/tap设备，用户层程序需要通过系统调用打开/dev/net/tun获得一个读写该设备的文件描述符(FD)，并且调用ioctl()向内核注册一个TUN或TAP类型的虚拟网卡(实例化一个tun/tap设备)，其名称可能是**tap7b7ee9a9-c1/vnetXX/tunXX/tap0**等。\n\n这里写了一个程序，它收到tun设备的数据包之后，只打印出收到了多少字节的数据包，其它的什么都不做。\n```\n#include <net/if.h>\n#include <sys/ioctl.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <string.h>\n#include <sys/types.h>\n#include <linux/if_tun.h>\n#include<stdlib.h>\n#include<stdio.h>\n\nint tun_alloc(int flags)\n{\n\n    struct ifreq ifr;\n    int fd, err;\n    char *clonedev = \"/dev/net/tun\";\n\n    if ((fd = open(clonedev, O_RDWR)) < 0) {\n        return fd;\n    }\n\n    memset(&ifr, 0, sizeof(ifr));\n    ifr.ifr_flags = flags;\n\n    if ((err = ioctl(fd, TUNSETIFF, (void *) &ifr)) < 0) {\n        close(fd);\n        return err;\n    }\n\n    printf(\"Open tun/tap device: %s for reading...\\n\", ifr.ifr_name);\n\n    return fd;\n}\n\nint main()\n{\n\n    int tun_fd, nread;\n    char buffer[1500];\n\n    /* Flags: IFF_TUN   - TUN device (no Ethernet headers)\n     *        IFF_TAP   - TAP device\n     *        IFF_NO_PI - Do not provide packet information\n     */\n    tun_fd = tun_alloc(IFF_TUN | IFF_NO_PI);\n\n    if (tun_fd < 0) {\n        perror(\"Allocating interface\");\n        exit(1);\n    }\n\n    while (1) {\n        nread = read(tun_fd, buffer, sizeof(buffer));\n        if (nread < 0) {\n            perror(\"Reading from interface\");\n            close(tun_fd);\n            exit(1);\n        }\n\n        printf(\"Read %d bytes from tun/tap device\\n\", nread);\n    }\n    return 0;\n}\n```\n编译、运行程序，会发现多出一个网络设备\n```\n$ gcc -o tun tun.c\n$ sudo ./tun\nOpen tun/tap device: tun0 for reading...\n\n\n$ ip addr\n...\n8: tun0: <POINTOPOINT,MULTICAST,NOARP> mtu 1500 qdisc noop state DOWN group default qlen 500\n    link/none\n```\n`tun0`就是新增的网络设备，现在给它配置一个ip，查看接口信息\n```\n$ sudo ifconfig tun0 192.168.10.11/24\n$ ip addr\n...\n8: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 500\n    link/none \n    inet 192.168.10.11/24 scope global tun0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::dd59:736:65ee:e31a/64 scope link stable-privacy \n       valid_lft forever preferred_lft forever\n```\n这时候我们ping地址`192.168.10.12`\n```\nping 192.168.10.12 -c 2\n```\n发现`tun`程序收到了数据\n![](https://s2.ax1x.com/2020/01/13/l7oJfS.png)\n\n\n### tun和tap区别\n两者很类似，只是tun和tap设备他们工作的协议栈层次不同，tap等同于一个以太网设备，用户层程序向tap设备读写的是二层数据包如以太网数据帧，tap设备最常用的就是作为虚拟机网卡。tun则模拟了网络层设备，操作第三层数据包比如IP数据包，openvpn使用TUN设备在C/S间建立VPN隧道。\n\n\n### tap分析实验\ntap设备最常见的用途就是作为虚拟机网卡。\n\n\n\n\n\n\n\n\n\n\n\n## 参考文章\n* [Linux虚拟网络设备之tun/tap](https://segmentfault.com/a/1190000009249039)\n* [云计算底层技术-虚拟网络设备(tun/tap,veth)\n](https://opengers.github.io/openstack/openstack-base-virtual-network-devices-tuntap-veth/)","source":"_posts/tun-tap.md","raw":"title: Linux网络虚拟化技术之tun/tap\nauthor: Salamander\ntags:\n  - network\n  - linux\n  - tun\n  - tap\ncategories:\n  - linux\ndate: 2020-01-13 15:00:00\n---\n我们都知道，Linux实际是通过**网络设备**去操作和使用网卡的，系统安装了一个网卡之后会为其生成一个网络设备实例，比如**eth0**（或者叫**enp7s0**，不同发行版默认网卡命名规则不同）。随着网络虚拟化技术的发展，Linux支持创建出虚拟化的设备，可以通过虚拟化设备的组合实现多种多样的功能和网络拓扑。  \n常见的虚拟化设备有**tun/tap**、**Veth**、**Bridge**、**802.1q VLAN device**。  \n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n\n\n<!-- more -->\n\n先回顾一下经典的**OSI**七层网络模型：  \n┌───────┐  \n  │　应用层　│←第七层  \n├───────┤  \n│　表示层　│  \n├───────┤  \n│　会话层　│  \n├───────┤  \n│　传输层　│  \n├───────┤  \n│　网络层　│   \n├───────┤  \n│数据链路层│  \n├───────┤  \n│　物理层　│←第一层  \n└───────┘ \n\nOSI七层参考模型\n\n## 虚拟设备和物理设备的区别\n对于一个网络设备来说，就像一个管道（pipe）一样，**有两端**，从其中任意一端收到的数据将从另一端发送出去。  \n\n比如一个物理网卡eth0，它的两端分别是内核协议栈（通过内核网络设备管理模块间接的通信）和外面的物理网络，从物理网络收到的数据，会转发给内核协议栈，而应用程序从协议栈发过来的数据将会通过物理网络发送出去。  \n\n那么对于一个虚拟网络设备呢？首先它也归内核的网络设备管理子系统管理，对于Linux内核网络设备管理模块来说，虚拟设备和物理设备没有区别，都是网络设备，都能配置IP，从网络设备来的数据，都会转发给协议栈，协议栈过来的数据，也会交由网络设备发送出去，至于是怎么发送出去的，发到哪里去，那是设备驱动的事情，跟Linux内核就没关系了，所以说虚拟网络设备的一端也是协议栈，而另一端是什么取决于虚拟网络设备的驱动实现。\n\n## tun/tap\n### tun分析实验\n先上图说话：  \n![](https://s2.ax1x.com/2020/01/13/l7D6zT.png)\n\n上图中是**tun**设备的数据走向。\n图中**nsfocus_tun0**就是tun0，是一个tun/tap虚拟设备，而**eno16777736**就是eth0。  \nsocket、协议栈（Newwork Protocol Stack）和网络设备（eth0和tun0）部分都在内核层，其实socket是协议栈的一部分，这里分开来的目的是为了看的更直观。\n\n从上图中可以看出它和物理设备eth0的差别，它们的一端虽然都连着协议栈，但另一端不一样，eth0的另一端是物理网络，这个物理网络可能就是一个交换机，而tun0的另一端是一个用户层的程序，协议栈发给tun0的数据包能被这个应用程序读取到，并且应用程序能直接向tun0写数据。  \n\n数据流向分析：\n1. User Application A通过套接字（socket A）发数据发给使用与**eno16777736**处于同一个网段ip的应用程序，数据走向为通过socket A发给协议栈，最后通过netdevice子系统中的eno16777736的设备驱动（以太网驱动）发送出去，这个是通过真实的物理网卡发送出去。\n2. User Application B通过套接字（socket B）发送数据给使用与**nsfocus_tun0**处于同一个网段ip的应用程序，数据走向为通过socket B发送给协议栈，最后通过netdevice子系统中的**nsfocus_tun0**的设备驱动（tun驱动）发送出去。由于tun设备没有对应真实的物理网卡，所以nsfocus_tun0对端收取数据的是User Application C。User Application C通过读写/dev/tun设备文件进行数据的收发。\n\n其实一般**User Application C**就是个VPN程序（例如openvpn），它收到数据包之后，做一些跟业务相关的处理，然后构造一个新的数据包，将原来的数据包嵌入在新的数据包中，最后通过socket B将数据包转发出去，这时候新数据包的源地址变成了eth0的地址，而目的IP地址变成了一个其它的地址，比如是10.33.0.1（VPN服务器地址），协议栈根据本地路由，发现这个数据包应该要通过**eth0**发送出去，于是将数据包交给eth0，最后**eth0**通过物理网络将数据包发送出去。\n\n\n从上面的流程中可以看出，数据包选择走哪个网络设备完全由**路由表**控制，所以如果我们想让某些网络流量走应用程序B的转发流程，就需要配置路由表让这部分数据走tun0。\n\n\n\n### 示例程序\n为了使用tun/tap设备，用户层程序需要通过系统调用打开/dev/net/tun获得一个读写该设备的文件描述符(FD)，并且调用ioctl()向内核注册一个TUN或TAP类型的虚拟网卡(实例化一个tun/tap设备)，其名称可能是**tap7b7ee9a9-c1/vnetXX/tunXX/tap0**等。\n\n这里写了一个程序，它收到tun设备的数据包之后，只打印出收到了多少字节的数据包，其它的什么都不做。\n```\n#include <net/if.h>\n#include <sys/ioctl.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <string.h>\n#include <sys/types.h>\n#include <linux/if_tun.h>\n#include<stdlib.h>\n#include<stdio.h>\n\nint tun_alloc(int flags)\n{\n\n    struct ifreq ifr;\n    int fd, err;\n    char *clonedev = \"/dev/net/tun\";\n\n    if ((fd = open(clonedev, O_RDWR)) < 0) {\n        return fd;\n    }\n\n    memset(&ifr, 0, sizeof(ifr));\n    ifr.ifr_flags = flags;\n\n    if ((err = ioctl(fd, TUNSETIFF, (void *) &ifr)) < 0) {\n        close(fd);\n        return err;\n    }\n\n    printf(\"Open tun/tap device: %s for reading...\\n\", ifr.ifr_name);\n\n    return fd;\n}\n\nint main()\n{\n\n    int tun_fd, nread;\n    char buffer[1500];\n\n    /* Flags: IFF_TUN   - TUN device (no Ethernet headers)\n     *        IFF_TAP   - TAP device\n     *        IFF_NO_PI - Do not provide packet information\n     */\n    tun_fd = tun_alloc(IFF_TUN | IFF_NO_PI);\n\n    if (tun_fd < 0) {\n        perror(\"Allocating interface\");\n        exit(1);\n    }\n\n    while (1) {\n        nread = read(tun_fd, buffer, sizeof(buffer));\n        if (nread < 0) {\n            perror(\"Reading from interface\");\n            close(tun_fd);\n            exit(1);\n        }\n\n        printf(\"Read %d bytes from tun/tap device\\n\", nread);\n    }\n    return 0;\n}\n```\n编译、运行程序，会发现多出一个网络设备\n```\n$ gcc -o tun tun.c\n$ sudo ./tun\nOpen tun/tap device: tun0 for reading...\n\n\n$ ip addr\n...\n8: tun0: <POINTOPOINT,MULTICAST,NOARP> mtu 1500 qdisc noop state DOWN group default qlen 500\n    link/none\n```\n`tun0`就是新增的网络设备，现在给它配置一个ip，查看接口信息\n```\n$ sudo ifconfig tun0 192.168.10.11/24\n$ ip addr\n...\n8: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 500\n    link/none \n    inet 192.168.10.11/24 scope global tun0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::dd59:736:65ee:e31a/64 scope link stable-privacy \n       valid_lft forever preferred_lft forever\n```\n这时候我们ping地址`192.168.10.12`\n```\nping 192.168.10.12 -c 2\n```\n发现`tun`程序收到了数据\n![](https://s2.ax1x.com/2020/01/13/l7oJfS.png)\n\n\n### tun和tap区别\n两者很类似，只是tun和tap设备他们工作的协议栈层次不同，tap等同于一个以太网设备，用户层程序向tap设备读写的是二层数据包如以太网数据帧，tap设备最常用的就是作为虚拟机网卡。tun则模拟了网络层设备，操作第三层数据包比如IP数据包，openvpn使用TUN设备在C/S间建立VPN隧道。\n\n\n### tap分析实验\ntap设备最常见的用途就是作为虚拟机网卡。\n\n\n\n\n\n\n\n\n\n\n\n## 参考文章\n* [Linux虚拟网络设备之tun/tap](https://segmentfault.com/a/1190000009249039)\n* [云计算底层技术-虚拟网络设备(tun/tap,veth)\n](https://opengers.github.io/openstack/openstack-base-virtual-network-devices-tuntap-veth/)","slug":"tun-tap","published":1,"updated":"2020-01-14T02:28:49.423Z","_id":"ck5c67mja00009bzt9r5mko64","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们都知道，Linux实际是通过<strong>网络设备</strong>去操作和使用网卡的，系统安装了一个网卡之后会为其生成一个网络设备实例，比如<strong>eth0</strong>（或者叫<strong>enp7s0</strong>，不同发行版默认网卡命名规则不同）。随着网络虚拟化技术的发展，Linux支持创建出虚拟化的设备，可以通过虚拟化设备的组合实现多种多样的功能和网络拓扑。<br>常见的虚拟化设备有<strong>tun/tap</strong>、<strong>Veth</strong>、<strong>Bridge</strong>、<strong>802.1q VLAN device</strong>。  </p>\n<p>本文环境：</p>\n<ul>\n<li>OS：Ubuntu 18.04.3 LTS</li>\n</ul>\n<a id=\"more\"></a>\n\n<p>先回顾一下经典的<strong>OSI</strong>七层网络模型：<br>┌───────┐<br>  │　应用层　│←第七层<br>├───────┤<br>│　表示层　│<br>├───────┤<br>│　会话层　│<br>├───────┤<br>│　传输层　│<br>├───────┤<br>│　网络层　│<br>├───────┤<br>│数据链路层│<br>├───────┤<br>│　物理层　│←第一层<br>└───────┘ </p>\n<p>OSI七层参考模型</p>\n<h2 id=\"虚拟设备和物理设备的区别\"><a href=\"#虚拟设备和物理设备的区别\" class=\"headerlink\" title=\"虚拟设备和物理设备的区别\"></a>虚拟设备和物理设备的区别</h2><p>对于一个网络设备来说，就像一个管道（pipe）一样，<strong>有两端</strong>，从其中任意一端收到的数据将从另一端发送出去。  </p>\n<p>比如一个物理网卡eth0，它的两端分别是内核协议栈（通过内核网络设备管理模块间接的通信）和外面的物理网络，从物理网络收到的数据，会转发给内核协议栈，而应用程序从协议栈发过来的数据将会通过物理网络发送出去。  </p>\n<p>那么对于一个虚拟网络设备呢？首先它也归内核的网络设备管理子系统管理，对于Linux内核网络设备管理模块来说，虚拟设备和物理设备没有区别，都是网络设备，都能配置IP，从网络设备来的数据，都会转发给协议栈，协议栈过来的数据，也会交由网络设备发送出去，至于是怎么发送出去的，发到哪里去，那是设备驱动的事情，跟Linux内核就没关系了，所以说虚拟网络设备的一端也是协议栈，而另一端是什么取决于虚拟网络设备的驱动实现。</p>\n<h2 id=\"tun-tap\"><a href=\"#tun-tap\" class=\"headerlink\" title=\"tun/tap\"></a>tun/tap</h2><h3 id=\"tun分析实验\"><a href=\"#tun分析实验\" class=\"headerlink\" title=\"tun分析实验\"></a>tun分析实验</h3><p>先上图说话：<br><img src=\"https://s2.ax1x.com/2020/01/13/l7D6zT.png\" alt></p>\n<p>上图中是<strong>tun</strong>设备的数据走向。<br>图中<strong>nsfocus_tun0</strong>就是tun0，是一个tun/tap虚拟设备，而<strong>eno16777736</strong>就是eth0。<br>socket、协议栈（Newwork Protocol Stack）和网络设备（eth0和tun0）部分都在内核层，其实socket是协议栈的一部分，这里分开来的目的是为了看的更直观。</p>\n<p>从上图中可以看出它和物理设备eth0的差别，它们的一端虽然都连着协议栈，但另一端不一样，eth0的另一端是物理网络，这个物理网络可能就是一个交换机，而tun0的另一端是一个用户层的程序，协议栈发给tun0的数据包能被这个应用程序读取到，并且应用程序能直接向tun0写数据。  </p>\n<p>数据流向分析：</p>\n<ol>\n<li>User Application A通过套接字（socket A）发数据发给使用与<strong>eno16777736</strong>处于同一个网段ip的应用程序，数据走向为通过socket A发给协议栈，最后通过netdevice子系统中的eno16777736的设备驱动（以太网驱动）发送出去，这个是通过真实的物理网卡发送出去。</li>\n<li>User Application B通过套接字（socket B）发送数据给使用与<strong>nsfocus_tun0</strong>处于同一个网段ip的应用程序，数据走向为通过socket B发送给协议栈，最后通过netdevice子系统中的<strong>nsfocus_tun0</strong>的设备驱动（tun驱动）发送出去。由于tun设备没有对应真实的物理网卡，所以nsfocus_tun0对端收取数据的是User Application C。User Application C通过读写/dev/tun设备文件进行数据的收发。</li>\n</ol>\n<p>其实一般<strong>User Application C</strong>就是个VPN程序（例如openvpn），它收到数据包之后，做一些跟业务相关的处理，然后构造一个新的数据包，将原来的数据包嵌入在新的数据包中，最后通过socket B将数据包转发出去，这时候新数据包的源地址变成了eth0的地址，而目的IP地址变成了一个其它的地址，比如是10.33.0.1（VPN服务器地址），协议栈根据本地路由，发现这个数据包应该要通过<strong>eth0</strong>发送出去，于是将数据包交给eth0，最后<strong>eth0</strong>通过物理网络将数据包发送出去。</p>\n<p>从上面的流程中可以看出，数据包选择走哪个网络设备完全由<strong>路由表</strong>控制，所以如果我们想让某些网络流量走应用程序B的转发流程，就需要配置路由表让这部分数据走tun0。</p>\n<h3 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h3><p>为了使用tun/tap设备，用户层程序需要通过系统调用打开/dev/net/tun获得一个读写该设备的文件描述符(FD)，并且调用ioctl()向内核注册一个TUN或TAP类型的虚拟网卡(实例化一个tun/tap设备)，其名称可能是<strong>tap7b7ee9a9-c1/vnetXX/tunXX/tap0</strong>等。</p>\n<p>这里写了一个程序，它收到tun设备的数据包之后，只打印出收到了多少字节的数据包，其它的什么都不做。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;net/if.h&gt;</span><br><span class=\"line\">#include &lt;sys/ioctl.h&gt;</span><br><span class=\"line\">#include &lt;sys/stat.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;linux/if_tun.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int tun_alloc(int flags)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct ifreq ifr;</span><br><span class=\"line\">    int fd, err;</span><br><span class=\"line\">    char *clonedev = &quot;/dev/net/tun&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((fd = open(clonedev, O_RDWR)) &lt; 0) &#123;</span><br><span class=\"line\">        return fd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    memset(&amp;ifr, 0, sizeof(ifr));</span><br><span class=\"line\">    ifr.ifr_flags = flags;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((err = ioctl(fd, TUNSETIFF, (void *) &amp;ifr)) &lt; 0) &#123;</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        return err;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Open tun/tap device: %s for reading...\\n&quot;, ifr.ifr_name);</span><br><span class=\"line\"></span><br><span class=\"line\">    return fd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int tun_fd, nread;</span><br><span class=\"line\">    char buffer[1500];</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Flags: IFF_TUN   - TUN device (no Ethernet headers)</span><br><span class=\"line\">     *        IFF_TAP   - TAP device</span><br><span class=\"line\">     *        IFF_NO_PI - Do not provide packet information</span><br><span class=\"line\">     */</span><br><span class=\"line\">    tun_fd = tun_alloc(IFF_TUN | IFF_NO_PI);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (tun_fd &lt; 0) &#123;</span><br><span class=\"line\">        perror(&quot;Allocating interface&quot;);</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (1) &#123;</span><br><span class=\"line\">        nread = read(tun_fd, buffer, sizeof(buffer));</span><br><span class=\"line\">        if (nread &lt; 0) &#123;</span><br><span class=\"line\">            perror(&quot;Reading from interface&quot;);</span><br><span class=\"line\">            close(tun_fd);</span><br><span class=\"line\">            exit(1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        printf(&quot;Read %d bytes from tun/tap device\\n&quot;, nread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译、运行程序，会发现多出一个网络设备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o tun tun.c</span><br><span class=\"line\">$ sudo ./tun</span><br><span class=\"line\">Open tun/tap device: tun0 for reading...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ ip addr</span><br><span class=\"line\">...</span><br><span class=\"line\">8: tun0: &lt;POINTOPOINT,MULTICAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 500</span><br><span class=\"line\">    link/none</span><br></pre></td></tr></table></figure>\n\n<p><code>tun0</code>就是新增的网络设备，现在给它配置一个ip，查看接口信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ifconfig tun0 192.168.10.11/24</span><br><span class=\"line\">$ ip addr</span><br><span class=\"line\">...</span><br><span class=\"line\">8: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 500</span><br><span class=\"line\">    link/none </span><br><span class=\"line\">    inet 192.168.10.11/24 scope global tun0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::dd59:736:65ee:e31a/64 scope link stable-privacy </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们ping地址<code>192.168.10.12</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 192.168.10.12 -c 2</span><br></pre></td></tr></table></figure>\n\n<p>发现<code>tun</code>程序收到了数据<br><img src=\"https://s2.ax1x.com/2020/01/13/l7oJfS.png\" alt></p>\n<h3 id=\"tun和tap区别\"><a href=\"#tun和tap区别\" class=\"headerlink\" title=\"tun和tap区别\"></a>tun和tap区别</h3><p>两者很类似，只是tun和tap设备他们工作的协议栈层次不同，tap等同于一个以太网设备，用户层程序向tap设备读写的是二层数据包如以太网数据帧，tap设备最常用的就是作为虚拟机网卡。tun则模拟了网络层设备，操作第三层数据包比如IP数据包，openvpn使用TUN设备在C/S间建立VPN隧道。</p>\n<h3 id=\"tap分析实验\"><a href=\"#tap分析实验\" class=\"headerlink\" title=\"tap分析实验\"></a>tap分析实验</h3><p>tap设备最常见的用途就是作为虚拟机网卡。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000009249039\" target=\"_blank\" rel=\"noopener\">Linux虚拟网络设备之tun/tap</a></li>\n<li><a href=\"https://opengers.github.io/openstack/openstack-base-virtual-network-devices-tuntap-veth/\" target=\"_blank\" rel=\"noopener\">云计算底层技术-虚拟网络设备(tun/tap,veth)\n</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>我们都知道，Linux实际是通过<strong>网络设备</strong>去操作和使用网卡的，系统安装了一个网卡之后会为其生成一个网络设备实例，比如<strong>eth0</strong>（或者叫<strong>enp7s0</strong>，不同发行版默认网卡命名规则不同）。随着网络虚拟化技术的发展，Linux支持创建出虚拟化的设备，可以通过虚拟化设备的组合实现多种多样的功能和网络拓扑。<br>常见的虚拟化设备有<strong>tun/tap</strong>、<strong>Veth</strong>、<strong>Bridge</strong>、<strong>802.1q VLAN device</strong>。  </p>\n<p>本文环境：</p>\n<ul>\n<li>OS：Ubuntu 18.04.3 LTS</li>\n</ul>","more":"<p>先回顾一下经典的<strong>OSI</strong>七层网络模型：<br>┌───────┐<br>  │　应用层　│←第七层<br>├───────┤<br>│　表示层　│<br>├───────┤<br>│　会话层　│<br>├───────┤<br>│　传输层　│<br>├───────┤<br>│　网络层　│<br>├───────┤<br>│数据链路层│<br>├───────┤<br>│　物理层　│←第一层<br>└───────┘ </p>\n<p>OSI七层参考模型</p>\n<h2 id=\"虚拟设备和物理设备的区别\"><a href=\"#虚拟设备和物理设备的区别\" class=\"headerlink\" title=\"虚拟设备和物理设备的区别\"></a>虚拟设备和物理设备的区别</h2><p>对于一个网络设备来说，就像一个管道（pipe）一样，<strong>有两端</strong>，从其中任意一端收到的数据将从另一端发送出去。  </p>\n<p>比如一个物理网卡eth0，它的两端分别是内核协议栈（通过内核网络设备管理模块间接的通信）和外面的物理网络，从物理网络收到的数据，会转发给内核协议栈，而应用程序从协议栈发过来的数据将会通过物理网络发送出去。  </p>\n<p>那么对于一个虚拟网络设备呢？首先它也归内核的网络设备管理子系统管理，对于Linux内核网络设备管理模块来说，虚拟设备和物理设备没有区别，都是网络设备，都能配置IP，从网络设备来的数据，都会转发给协议栈，协议栈过来的数据，也会交由网络设备发送出去，至于是怎么发送出去的，发到哪里去，那是设备驱动的事情，跟Linux内核就没关系了，所以说虚拟网络设备的一端也是协议栈，而另一端是什么取决于虚拟网络设备的驱动实现。</p>\n<h2 id=\"tun-tap\"><a href=\"#tun-tap\" class=\"headerlink\" title=\"tun/tap\"></a>tun/tap</h2><h3 id=\"tun分析实验\"><a href=\"#tun分析实验\" class=\"headerlink\" title=\"tun分析实验\"></a>tun分析实验</h3><p>先上图说话：<br><img src=\"https://s2.ax1x.com/2020/01/13/l7D6zT.png\" alt></p>\n<p>上图中是<strong>tun</strong>设备的数据走向。<br>图中<strong>nsfocus_tun0</strong>就是tun0，是一个tun/tap虚拟设备，而<strong>eno16777736</strong>就是eth0。<br>socket、协议栈（Newwork Protocol Stack）和网络设备（eth0和tun0）部分都在内核层，其实socket是协议栈的一部分，这里分开来的目的是为了看的更直观。</p>\n<p>从上图中可以看出它和物理设备eth0的差别，它们的一端虽然都连着协议栈，但另一端不一样，eth0的另一端是物理网络，这个物理网络可能就是一个交换机，而tun0的另一端是一个用户层的程序，协议栈发给tun0的数据包能被这个应用程序读取到，并且应用程序能直接向tun0写数据。  </p>\n<p>数据流向分析：</p>\n<ol>\n<li>User Application A通过套接字（socket A）发数据发给使用与<strong>eno16777736</strong>处于同一个网段ip的应用程序，数据走向为通过socket A发给协议栈，最后通过netdevice子系统中的eno16777736的设备驱动（以太网驱动）发送出去，这个是通过真实的物理网卡发送出去。</li>\n<li>User Application B通过套接字（socket B）发送数据给使用与<strong>nsfocus_tun0</strong>处于同一个网段ip的应用程序，数据走向为通过socket B发送给协议栈，最后通过netdevice子系统中的<strong>nsfocus_tun0</strong>的设备驱动（tun驱动）发送出去。由于tun设备没有对应真实的物理网卡，所以nsfocus_tun0对端收取数据的是User Application C。User Application C通过读写/dev/tun设备文件进行数据的收发。</li>\n</ol>\n<p>其实一般<strong>User Application C</strong>就是个VPN程序（例如openvpn），它收到数据包之后，做一些跟业务相关的处理，然后构造一个新的数据包，将原来的数据包嵌入在新的数据包中，最后通过socket B将数据包转发出去，这时候新数据包的源地址变成了eth0的地址，而目的IP地址变成了一个其它的地址，比如是10.33.0.1（VPN服务器地址），协议栈根据本地路由，发现这个数据包应该要通过<strong>eth0</strong>发送出去，于是将数据包交给eth0，最后<strong>eth0</strong>通过物理网络将数据包发送出去。</p>\n<p>从上面的流程中可以看出，数据包选择走哪个网络设备完全由<strong>路由表</strong>控制，所以如果我们想让某些网络流量走应用程序B的转发流程，就需要配置路由表让这部分数据走tun0。</p>\n<h3 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h3><p>为了使用tun/tap设备，用户层程序需要通过系统调用打开/dev/net/tun获得一个读写该设备的文件描述符(FD)，并且调用ioctl()向内核注册一个TUN或TAP类型的虚拟网卡(实例化一个tun/tap设备)，其名称可能是<strong>tap7b7ee9a9-c1/vnetXX/tunXX/tap0</strong>等。</p>\n<p>这里写了一个程序，它收到tun设备的数据包之后，只打印出收到了多少字节的数据包，其它的什么都不做。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;net/if.h&gt;</span><br><span class=\"line\">#include &lt;sys/ioctl.h&gt;</span><br><span class=\"line\">#include &lt;sys/stat.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;linux/if_tun.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int tun_alloc(int flags)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct ifreq ifr;</span><br><span class=\"line\">    int fd, err;</span><br><span class=\"line\">    char *clonedev = &quot;/dev/net/tun&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((fd = open(clonedev, O_RDWR)) &lt; 0) &#123;</span><br><span class=\"line\">        return fd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    memset(&amp;ifr, 0, sizeof(ifr));</span><br><span class=\"line\">    ifr.ifr_flags = flags;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((err = ioctl(fd, TUNSETIFF, (void *) &amp;ifr)) &lt; 0) &#123;</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        return err;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Open tun/tap device: %s for reading...\\n&quot;, ifr.ifr_name);</span><br><span class=\"line\"></span><br><span class=\"line\">    return fd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int tun_fd, nread;</span><br><span class=\"line\">    char buffer[1500];</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Flags: IFF_TUN   - TUN device (no Ethernet headers)</span><br><span class=\"line\">     *        IFF_TAP   - TAP device</span><br><span class=\"line\">     *        IFF_NO_PI - Do not provide packet information</span><br><span class=\"line\">     */</span><br><span class=\"line\">    tun_fd = tun_alloc(IFF_TUN | IFF_NO_PI);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (tun_fd &lt; 0) &#123;</span><br><span class=\"line\">        perror(&quot;Allocating interface&quot;);</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (1) &#123;</span><br><span class=\"line\">        nread = read(tun_fd, buffer, sizeof(buffer));</span><br><span class=\"line\">        if (nread &lt; 0) &#123;</span><br><span class=\"line\">            perror(&quot;Reading from interface&quot;);</span><br><span class=\"line\">            close(tun_fd);</span><br><span class=\"line\">            exit(1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        printf(&quot;Read %d bytes from tun/tap device\\n&quot;, nread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译、运行程序，会发现多出一个网络设备</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o tun tun.c</span><br><span class=\"line\">$ sudo ./tun</span><br><span class=\"line\">Open tun/tap device: tun0 for reading...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ ip addr</span><br><span class=\"line\">...</span><br><span class=\"line\">8: tun0: &lt;POINTOPOINT,MULTICAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 500</span><br><span class=\"line\">    link/none</span><br></pre></td></tr></table></figure>\n\n<p><code>tun0</code>就是新增的网络设备，现在给它配置一个ip，查看接口信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ifconfig tun0 192.168.10.11/24</span><br><span class=\"line\">$ ip addr</span><br><span class=\"line\">...</span><br><span class=\"line\">8: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 500</span><br><span class=\"line\">    link/none </span><br><span class=\"line\">    inet 192.168.10.11/24 scope global tun0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::dd59:736:65ee:e31a/64 scope link stable-privacy </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们ping地址<code>192.168.10.12</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 192.168.10.12 -c 2</span><br></pre></td></tr></table></figure>\n\n<p>发现<code>tun</code>程序收到了数据<br><img src=\"https://s2.ax1x.com/2020/01/13/l7oJfS.png\" alt></p>\n<h3 id=\"tun和tap区别\"><a href=\"#tun和tap区别\" class=\"headerlink\" title=\"tun和tap区别\"></a>tun和tap区别</h3><p>两者很类似，只是tun和tap设备他们工作的协议栈层次不同，tap等同于一个以太网设备，用户层程序向tap设备读写的是二层数据包如以太网数据帧，tap设备最常用的就是作为虚拟机网卡。tun则模拟了网络层设备，操作第三层数据包比如IP数据包，openvpn使用TUN设备在C/S间建立VPN隧道。</p>\n<h3 id=\"tap分析实验\"><a href=\"#tap分析实验\" class=\"headerlink\" title=\"tap分析实验\"></a>tap分析实验</h3><p>tap设备最常见的用途就是作为虚拟机网卡。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000009249039\" target=\"_blank\" rel=\"noopener\">Linux虚拟网络设备之tun/tap</a></li>\n<li><a href=\"https://opengers.github.io/openstack/openstack-base-virtual-network-devices-tuntap-veth/\" target=\"_blank\" rel=\"noopener\">云计算底层技术-虚拟网络设备(tun/tap,veth)\n</a></li>\n</ul>"},{"title":"Linux网络虚拟化技术之Veth和Bridge","author":"Salamander","date":"2020-01-14T05:00:00.000Z","_content":"## Veth\nVeth缩写是Virtual ETHernet。veth设备是在linux内核中是成对出现（所以也叫`veth-pair`），两个设备彼此相连，一个设备从协议栈读取数据后，会将数据发送到另一个设备上去。这个设备其实是专门为`container`所建的，作用就是把一个**network namespace**发出的数据包转发到另一个**namespace**（通常就是宿主机）。    \n![](https://s2.ax1x.com/2020/01/14/lbBga9.png)  \n\n<!-- more -->\n\n\n### 添加Veth设备\n```\n$ sudo ip netns add net0\n$ sudo ip netns add net1\n$ sudo ip link add veth0 netns net0 type veth peer name veth1 netns net1 #添加 veth 设备对\n```\n上面的命令将创建两个命名空间net0和net1，以及一对veth设备，并将veth1分配给命名空间net0，将veth2分配给命名空间net1。这两个名称空间与此VETH对相连。分配一对IP地址，你就可以ping通两者之间的通讯。\n\n```\n$ ip netns ls  # 查看创建的network namespace\nnet1\nnet0\n$ sudo ip netns exec net0 ip addr # 查看net0下的网络设备\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: veth0@if2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether d6:6e:4f:fb:6b:76 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n$ sudo ip netns exec net1 ip addr\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: veth1@if2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 92:05:82:e6:da:73 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n```\n我们给这对 veth pair 配置上 ip 地址，并启用它们以及 lo 接口:\n```\nsudo ip netns exec net0 ip link set veth0 up\nsudo ip netns exec net0 ip addr add 10.0.1.1/24 dev veth0\nsudo ip netns exec net0 ip link set lo up\nsudo ip netns exec net0 ip route\n10.0.1.0/24 dev veth0 proto kernel scope link src 10.0.1.1 linkdown \n\n\nsudo ip netns exec net1 ip link set veth1 up\nsudo ip netns exec net1 ip addr add 10.0.1.2/24 dev veth1\nsudo ip netns exec net1 ip link set lo up\nsudo ip netns exec net1 ip route\n10.0.1.0/24 dev veth1 proto kernel scope link src 10.0.1.2\n```\n可以看到，在每个 namespace 中，在配置了 ip 之后，还自动生成了对应的\n路由表信息，网络 10.0.1.0/24 数据报文都会通过 vethpair 进行传输。下面使用 ping 命令 可以验证它们的连通性，并在 veth0 和 veth1 上抓包：\n```\nsudo ip netns exec net0 ping -c 3 10.0.1.2\n```\n![](https://s2.ax1x.com/2020/01/14/lb4nOA.png)\n\n\n## Bridge\nBridge（桥）是 Linux 上用来做 TCP/IP 二层协议交换的设备，与现实世界中的交换机功能相似。Bridge 设备实例可以和 Linux 上其他网络设备实例连接，既 attach 一个从设备，类似于在现实世界中的交换机和一个用户终端之间连接一根网线。当有数据到达时，Bridge 会根据报文中的 MAC 信息进行广播、转发、丢弃处理。\n\n![](https://s2.ax1x.com/2020/01/14/lb48fS.png)\n\n\n\n\n\n\n\n\n\n## 参考文章\n[Linux 上的基础网络设备详解](https://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html)","source":"_posts/Linu_Veth_and_Bridge.md","raw":"title: Linux网络虚拟化技术之Veth和Bridge\nauthor: Salamander\ntags:\n  - linux\n  - network\ncategories:\n  - linux\ndate: 2020-01-14 13:00:00\n---\n## Veth\nVeth缩写是Virtual ETHernet。veth设备是在linux内核中是成对出现（所以也叫`veth-pair`），两个设备彼此相连，一个设备从协议栈读取数据后，会将数据发送到另一个设备上去。这个设备其实是专门为`container`所建的，作用就是把一个**network namespace**发出的数据包转发到另一个**namespace**（通常就是宿主机）。    \n![](https://s2.ax1x.com/2020/01/14/lbBga9.png)  \n\n<!-- more -->\n\n\n### 添加Veth设备\n```\n$ sudo ip netns add net0\n$ sudo ip netns add net1\n$ sudo ip link add veth0 netns net0 type veth peer name veth1 netns net1 #添加 veth 设备对\n```\n上面的命令将创建两个命名空间net0和net1，以及一对veth设备，并将veth1分配给命名空间net0，将veth2分配给命名空间net1。这两个名称空间与此VETH对相连。分配一对IP地址，你就可以ping通两者之间的通讯。\n\n```\n$ ip netns ls  # 查看创建的network namespace\nnet1\nnet0\n$ sudo ip netns exec net0 ip addr # 查看net0下的网络设备\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: veth0@if2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether d6:6e:4f:fb:6b:76 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n$ sudo ip netns exec net1 ip addr\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: veth1@if2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 92:05:82:e6:da:73 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n```\n我们给这对 veth pair 配置上 ip 地址，并启用它们以及 lo 接口:\n```\nsudo ip netns exec net0 ip link set veth0 up\nsudo ip netns exec net0 ip addr add 10.0.1.1/24 dev veth0\nsudo ip netns exec net0 ip link set lo up\nsudo ip netns exec net0 ip route\n10.0.1.0/24 dev veth0 proto kernel scope link src 10.0.1.1 linkdown \n\n\nsudo ip netns exec net1 ip link set veth1 up\nsudo ip netns exec net1 ip addr add 10.0.1.2/24 dev veth1\nsudo ip netns exec net1 ip link set lo up\nsudo ip netns exec net1 ip route\n10.0.1.0/24 dev veth1 proto kernel scope link src 10.0.1.2\n```\n可以看到，在每个 namespace 中，在配置了 ip 之后，还自动生成了对应的\n路由表信息，网络 10.0.1.0/24 数据报文都会通过 vethpair 进行传输。下面使用 ping 命令 可以验证它们的连通性，并在 veth0 和 veth1 上抓包：\n```\nsudo ip netns exec net0 ping -c 3 10.0.1.2\n```\n![](https://s2.ax1x.com/2020/01/14/lb4nOA.png)\n\n\n## Bridge\nBridge（桥）是 Linux 上用来做 TCP/IP 二层协议交换的设备，与现实世界中的交换机功能相似。Bridge 设备实例可以和 Linux 上其他网络设备实例连接，既 attach 一个从设备，类似于在现实世界中的交换机和一个用户终端之间连接一根网线。当有数据到达时，Bridge 会根据报文中的 MAC 信息进行广播、转发、丢弃处理。\n\n![](https://s2.ax1x.com/2020/01/14/lb48fS.png)\n\n\n\n\n\n\n\n\n\n## 参考文章\n[Linux 上的基础网络设备详解](https://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html)","slug":"Linu_Veth_and_Bridge","published":1,"updated":"2020-01-14T05:18:02.923Z","_id":"ck5df7fil0000o93ecjkv5bns","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Veth\"><a href=\"#Veth\" class=\"headerlink\" title=\"Veth\"></a>Veth</h2><p>Veth缩写是Virtual ETHernet。veth设备是在linux内核中是成对出现（所以也叫<code>veth-pair</code>），两个设备彼此相连，一个设备从协议栈读取数据后，会将数据发送到另一个设备上去。这个设备其实是专门为<code>container</code>所建的，作用就是把一个<strong>network namespace</strong>发出的数据包转发到另一个<strong>namespace</strong>（通常就是宿主机）。<br><img src=\"https://s2.ax1x.com/2020/01/14/lbBga9.png\" alt>  </p>\n<a id=\"more\"></a>\n\n\n<h3 id=\"添加Veth设备\"><a href=\"#添加Veth设备\" class=\"headerlink\" title=\"添加Veth设备\"></a>添加Veth设备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ip netns add net0</span><br><span class=\"line\">$ sudo ip netns add net1</span><br><span class=\"line\">$ sudo ip link add veth0 netns net0 type veth peer name veth1 netns net1 #添加 veth 设备对</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令将创建两个命名空间net0和net1，以及一对veth设备，并将veth1分配给命名空间net0，将veth2分配给命名空间net1。这两个名称空间与此VETH对相连。分配一对IP地址，你就可以ping通两者之间的通讯。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip netns ls  # 查看创建的network namespace</span><br><span class=\"line\">net1</span><br><span class=\"line\">net0</span><br><span class=\"line\">$ sudo ip netns exec net0 ip addr # 查看net0下的网络设备</span><br><span class=\"line\">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">2: veth0@if2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether d6:6e:4f:fb:6b:76 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo ip netns exec net1 ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">2: veth1@if2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 92:05:82:e6:da:73 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></table></figure>\n\n<p>我们给这对 veth pair 配置上 ip 地址，并启用它们以及 lo 接口:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec net0 ip link set veth0 up</span><br><span class=\"line\">sudo ip netns exec net0 ip addr add 10.0.1.1/24 dev veth0</span><br><span class=\"line\">sudo ip netns exec net0 ip link set lo up</span><br><span class=\"line\">sudo ip netns exec net0 ip route</span><br><span class=\"line\">10.0.1.0/24 dev veth0 proto kernel scope link src 10.0.1.1 linkdown </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo ip netns exec net1 ip link set veth1 up</span><br><span class=\"line\">sudo ip netns exec net1 ip addr add 10.0.1.2/24 dev veth1</span><br><span class=\"line\">sudo ip netns exec net1 ip link set lo up</span><br><span class=\"line\">sudo ip netns exec net1 ip route</span><br><span class=\"line\">10.0.1.0/24 dev veth1 proto kernel scope link src 10.0.1.2</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在每个 namespace 中，在配置了 ip 之后，还自动生成了对应的<br>路由表信息，网络 10.0.1.0/24 数据报文都会通过 vethpair 进行传输。下面使用 ping 命令 可以验证它们的连通性，并在 veth0 和 veth1 上抓包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec net0 ping -c 3 10.0.1.2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.ax1x.com/2020/01/14/lb4nOA.png\" alt></p>\n<h2 id=\"Bridge\"><a href=\"#Bridge\" class=\"headerlink\" title=\"Bridge\"></a>Bridge</h2><p>Bridge（桥）是 Linux 上用来做 TCP/IP 二层协议交换的设备，与现实世界中的交换机功能相似。Bridge 设备实例可以和 Linux 上其他网络设备实例连接，既 attach 一个从设备，类似于在现实世界中的交换机和一个用户终端之间连接一根网线。当有数据到达时，Bridge 会根据报文中的 MAC 信息进行广播、转发、丢弃处理。</p>\n<p><img src=\"https://s2.ax1x.com/2020/01/14/lb48fS.png\" alt></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html\" target=\"_blank\" rel=\"noopener\">Linux 上的基础网络设备详解</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Veth\"><a href=\"#Veth\" class=\"headerlink\" title=\"Veth\"></a>Veth</h2><p>Veth缩写是Virtual ETHernet。veth设备是在linux内核中是成对出现（所以也叫<code>veth-pair</code>），两个设备彼此相连，一个设备从协议栈读取数据后，会将数据发送到另一个设备上去。这个设备其实是专门为<code>container</code>所建的，作用就是把一个<strong>network namespace</strong>发出的数据包转发到另一个<strong>namespace</strong>（通常就是宿主机）。<br><img src=\"https://s2.ax1x.com/2020/01/14/lbBga9.png\" alt>  </p>","more":"<h3 id=\"添加Veth设备\"><a href=\"#添加Veth设备\" class=\"headerlink\" title=\"添加Veth设备\"></a>添加Veth设备</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ip netns add net0</span><br><span class=\"line\">$ sudo ip netns add net1</span><br><span class=\"line\">$ sudo ip link add veth0 netns net0 type veth peer name veth1 netns net1 #添加 veth 设备对</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令将创建两个命名空间net0和net1，以及一对veth设备，并将veth1分配给命名空间net0，将veth2分配给命名空间net1。这两个名称空间与此VETH对相连。分配一对IP地址，你就可以ping通两者之间的通讯。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip netns ls  # 查看创建的network namespace</span><br><span class=\"line\">net1</span><br><span class=\"line\">net0</span><br><span class=\"line\">$ sudo ip netns exec net0 ip addr # 查看net0下的网络设备</span><br><span class=\"line\">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">2: veth0@if2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether d6:6e:4f:fb:6b:76 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo ip netns exec net1 ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">2: veth1@if2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 92:05:82:e6:da:73 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></table></figure>\n\n<p>我们给这对 veth pair 配置上 ip 地址，并启用它们以及 lo 接口:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec net0 ip link set veth0 up</span><br><span class=\"line\">sudo ip netns exec net0 ip addr add 10.0.1.1/24 dev veth0</span><br><span class=\"line\">sudo ip netns exec net0 ip link set lo up</span><br><span class=\"line\">sudo ip netns exec net0 ip route</span><br><span class=\"line\">10.0.1.0/24 dev veth0 proto kernel scope link src 10.0.1.1 linkdown </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo ip netns exec net1 ip link set veth1 up</span><br><span class=\"line\">sudo ip netns exec net1 ip addr add 10.0.1.2/24 dev veth1</span><br><span class=\"line\">sudo ip netns exec net1 ip link set lo up</span><br><span class=\"line\">sudo ip netns exec net1 ip route</span><br><span class=\"line\">10.0.1.0/24 dev veth1 proto kernel scope link src 10.0.1.2</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在每个 namespace 中，在配置了 ip 之后，还自动生成了对应的<br>路由表信息，网络 10.0.1.0/24 数据报文都会通过 vethpair 进行传输。下面使用 ping 命令 可以验证它们的连通性，并在 veth0 和 veth1 上抓包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec net0 ping -c 3 10.0.1.2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.ax1x.com/2020/01/14/lb4nOA.png\" alt></p>\n<h2 id=\"Bridge\"><a href=\"#Bridge\" class=\"headerlink\" title=\"Bridge\"></a>Bridge</h2><p>Bridge（桥）是 Linux 上用来做 TCP/IP 二层协议交换的设备，与现实世界中的交换机功能相似。Bridge 设备实例可以和 Linux 上其他网络设备实例连接，既 attach 一个从设备，类似于在现实世界中的交换机和一个用户终端之间连接一根网线。当有数据到达时，Bridge 会根据报文中的 MAC 信息进行广播、转发、丢弃处理。</p>\n<p><img src=\"https://s2.ax1x.com/2020/01/14/lb48fS.png\" alt></p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html\" target=\"_blank\" rel=\"noopener\">Linux 上的基础网络设备详解</a></p>"},{"title":"Qt之初步尝试","author":"Salamander","date":"2020-01-18T02:00:00.000Z","_content":"本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Qt版本：5.13.1\n* Qt Creator版本：4.10.1\n\n## Qt安装\n首先，我们得明白一些概念。  \n**Qt**是一个C++库，或者说是开发框架，里面集成了一些库函数，提高开发效率。  \n**Qt Creator**是Qt集成开发环境，你可以在这里编写，编译，运行你的程序。所以最开始写Qt只安装**Qt Creator**这个是不行的，因为还没有相关的Qt库呢，但是新版的**Qt Creator**（5.9开始）已经集成了Qt了，所以入门就方便很多了。  \n关于Qt下载，大家可以打开这里的[链接](http://download.qt.io/archive/qt/)，里面有各版本Qt（**Qt**和**Qt Creator**的集成包），操作简单，最新版本是**5.14**。  \n\n<!-- more -->\n\nwindows版本只要双击exe就可以安装了，Linux版本需要先添加执行权限然后运行文件\n```\n$ chmod +x qt-opensource-linux-x64-5.13.2.run\n$ ./qt-opensource-linux-x64-5.13.2.run\n```\n对于Linux系统，需要安装C/C++编译器，以Ubuntu为例，需要执行：\n```\nsudo apt-get install -y gcc g++\n```\n在用到`WebEngine`组件的会遇到问题\n**error: GL/gl.h: No such file or directory**，需要\n```\nsudo apt-get install mesa-common-dev\n```\nNote: Just installing the above-mentioned mesa-common-dev kit is not sufficient for more recent Ubuntu versions. Based on a comment in the Qt forum an additional package needs installation. Execute following command:\n```\nsudo apt-get install libglu1-mesa-dev -y\n```\nTested with Qt5.3.1 and Ubuntu 14.04 and it solved the problem with missing **-lGL**.\n\n\n\n\n这一步需要注册一个账号，随便注册一个即可。  \n![install 1](https://s2.ax1x.com/2020/01/18/1p7NOs.png)  \n这一步选择你需要的组件（不清楚的话，就像我这样选择好了）  \n![install 2](https://s2.ax1x.com/2020/01/18/1p7IfO.png)  \n最后来到Qt Creator的启动界面  \n![](https://s2.ax1x.com/2020/01/18/1pqSyQ.png)\n\n## 写个hello world\n点击**文件**菜单，然后新建项目，选择`Qt Console Application`。  \n![](https://s2.ax1x.com/2020/01/18/19CDSA.png)  \n编辑`main.cpp`文件，代码为：  \n```\n#include <QCoreApplication>\n#include <QDebug>\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication a(argc, argv);\n\n    qDebug() << \"hello world\";\n    return a.exec();\n}\n```\n点击左下角的`Run`按钮，就可以启动程序。  \n![](https://s2.ax1x.com/2020/01/18/19PDNF.png)\n\n## 信号和槽\n信号和槽机制是 QT 的**核心机制**，要精通 QT 编程就必须对信号和槽有所了解。不同于传统的函数回调方式。信号和插槽是 Qt 中非常有特色的地方，可以说是Qt编程区别于其它编程的标志。信号和槽是一种高级接口，应用于对象之间的通信，它是 Qt 的核心特性。\n\n### 信号（signal）\n当一个对象中某些可能会有别的对象关心的状态被修改时，将会发出信号。只有定义了信号的类及其子类可以发出信号。\n\n当一个信号被发出时，连接到这个信号的槽立即被调用，就像一个普通的函数调用。当这种情况发生时，信号槽机制独立于任何 GUI 事件循环。emit 语句之后的代码将在所有的槽返回之后被执行。这种情况与使用连接队列略有不同：使用连接队列的时候，emit 语句之后的代码将立即被执行，而槽在之后执行。\n\n如果一个信号连接了多个槽，当信号发出时，这些槽将以连接的顺序一个接一个地被执行（顺序不确定）。\n\n\n### 槽（slot）\n当连接到的信号发出时，槽就会被调用。槽是**普通的 C++ 函数**，能够被正常的调用。它们的唯一特点是能够与信号连接。\n\n既然信号就是普通的成员函数，当它们像普通函数一样调用的时候，遵循标准 C++ 的规则。但是，作为槽，它们又能够通过信号槽的连接被任何组件调用，不论这个组件的访问级别。这意味着任意类的实例发出的信号，都可以使得不相关的类的私有槽被调用。  \n\n你也能把槽定义成虚的，这一点在实际应用中非常有用。\n\n### 信号与槽的关联\n通过调用 **QObject** 对象的 connect 函数来将某个对象的信号与另外一个对象的槽函数相关联，这样当发射者发射信号时，接收者的槽函数将被调用。  \n\nconnect()语句的原型类似于：\n```\nconnect(sender, SIGNAL(signal), receiver, SLOT(slot));\n```\n这里，sender 和 receiver 都是 **QObject** 类型的，singal 和 slot 都是没有参数名称的函数签名。SINGAL()和SLOT()宏用于把参数转换成字符串。  \n一个信号可以和多个槽相连：\n```\nconnect(slider, SIGNAL(valueChanged(int)),\n              spinBox, SLOT(setValue(int))); \nconnect(slider, SIGNAL(valueChanged(int)),\n              this, SLOT(updateStatusBarIndicator(int)));\n```\n\n\n\n## Gui简单例子\n这个例子中，我们用了上面槽的知识，我们在界面上放了一个`button`，然后添加了**slot**获得了button的click事件发送者的`objectName`。  \n**界面**  \n\n![upload successful](/images/Qt-Gui-Example.png)  \n\n**mainwindow.h**\n```\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n\nQT_BEGIN_NAMESPACE\nnamespace Ui { class MainWindow; }\nQT_END_NAMESPACE\n\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\n\npublic:\n    MainWindow(QWidget *parent = nullptr);\n    ~MainWindow();\n\nprivate:\n    Ui::MainWindow *ui;\nprivate slots:\n    void handleButton();  // 处理函数\n};\n#endif // MAINWINDOW_H\n\n```\n\n**mainwindow.cpp**\n```\n#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n#include <QDebug>\n\n\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui->setupUi(this);\n    connect(ui->myPushButton, SIGNAL(clicked()), this, SLOT(handleButton()));\n}\n\nvoid MainWindow::handleButton()\n{\n    QObject *senderObj = sender(); // This will give Sender object\n    QString senderObjName = senderObj->objectName();\n    qDebug() << senderObjName;  // get myPushButton\n}\n\nMainWindow::~MainWindow()\n{\n    delete ui;\n}\n```\n\n\n\n\n\n\n\n\n## 参考\n\n* 油管上VoidRealms的[Qt视频](https://www.youtube.com/watch?v=Id-sPu_m_hE&list=PL2D1942A4688E9D63&index=2)\n* [Install Qt5 On Ubuntu](https://wiki.qt.io/Install_Qt_5_on_Ubuntu)","source":"_posts/Qt_begin.md","raw":"title: Qt之初步尝试\nauthor: Salamander\ntags:\n  - Qt\n  - Qt Creator\ncategories:\n  - C++\ndate: 2020-01-18 10:00:00\n---\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Qt版本：5.13.1\n* Qt Creator版本：4.10.1\n\n## Qt安装\n首先，我们得明白一些概念。  \n**Qt**是一个C++库，或者说是开发框架，里面集成了一些库函数，提高开发效率。  \n**Qt Creator**是Qt集成开发环境，你可以在这里编写，编译，运行你的程序。所以最开始写Qt只安装**Qt Creator**这个是不行的，因为还没有相关的Qt库呢，但是新版的**Qt Creator**（5.9开始）已经集成了Qt了，所以入门就方便很多了。  \n关于Qt下载，大家可以打开这里的[链接](http://download.qt.io/archive/qt/)，里面有各版本Qt（**Qt**和**Qt Creator**的集成包），操作简单，最新版本是**5.14**。  \n\n<!-- more -->\n\nwindows版本只要双击exe就可以安装了，Linux版本需要先添加执行权限然后运行文件\n```\n$ chmod +x qt-opensource-linux-x64-5.13.2.run\n$ ./qt-opensource-linux-x64-5.13.2.run\n```\n对于Linux系统，需要安装C/C++编译器，以Ubuntu为例，需要执行：\n```\nsudo apt-get install -y gcc g++\n```\n在用到`WebEngine`组件的会遇到问题\n**error: GL/gl.h: No such file or directory**，需要\n```\nsudo apt-get install mesa-common-dev\n```\nNote: Just installing the above-mentioned mesa-common-dev kit is not sufficient for more recent Ubuntu versions. Based on a comment in the Qt forum an additional package needs installation. Execute following command:\n```\nsudo apt-get install libglu1-mesa-dev -y\n```\nTested with Qt5.3.1 and Ubuntu 14.04 and it solved the problem with missing **-lGL**.\n\n\n\n\n这一步需要注册一个账号，随便注册一个即可。  \n![install 1](https://s2.ax1x.com/2020/01/18/1p7NOs.png)  \n这一步选择你需要的组件（不清楚的话，就像我这样选择好了）  \n![install 2](https://s2.ax1x.com/2020/01/18/1p7IfO.png)  \n最后来到Qt Creator的启动界面  \n![](https://s2.ax1x.com/2020/01/18/1pqSyQ.png)\n\n## 写个hello world\n点击**文件**菜单，然后新建项目，选择`Qt Console Application`。  \n![](https://s2.ax1x.com/2020/01/18/19CDSA.png)  \n编辑`main.cpp`文件，代码为：  \n```\n#include <QCoreApplication>\n#include <QDebug>\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication a(argc, argv);\n\n    qDebug() << \"hello world\";\n    return a.exec();\n}\n```\n点击左下角的`Run`按钮，就可以启动程序。  \n![](https://s2.ax1x.com/2020/01/18/19PDNF.png)\n\n## 信号和槽\n信号和槽机制是 QT 的**核心机制**，要精通 QT 编程就必须对信号和槽有所了解。不同于传统的函数回调方式。信号和插槽是 Qt 中非常有特色的地方，可以说是Qt编程区别于其它编程的标志。信号和槽是一种高级接口，应用于对象之间的通信，它是 Qt 的核心特性。\n\n### 信号（signal）\n当一个对象中某些可能会有别的对象关心的状态被修改时，将会发出信号。只有定义了信号的类及其子类可以发出信号。\n\n当一个信号被发出时，连接到这个信号的槽立即被调用，就像一个普通的函数调用。当这种情况发生时，信号槽机制独立于任何 GUI 事件循环。emit 语句之后的代码将在所有的槽返回之后被执行。这种情况与使用连接队列略有不同：使用连接队列的时候，emit 语句之后的代码将立即被执行，而槽在之后执行。\n\n如果一个信号连接了多个槽，当信号发出时，这些槽将以连接的顺序一个接一个地被执行（顺序不确定）。\n\n\n### 槽（slot）\n当连接到的信号发出时，槽就会被调用。槽是**普通的 C++ 函数**，能够被正常的调用。它们的唯一特点是能够与信号连接。\n\n既然信号就是普通的成员函数，当它们像普通函数一样调用的时候，遵循标准 C++ 的规则。但是，作为槽，它们又能够通过信号槽的连接被任何组件调用，不论这个组件的访问级别。这意味着任意类的实例发出的信号，都可以使得不相关的类的私有槽被调用。  \n\n你也能把槽定义成虚的，这一点在实际应用中非常有用。\n\n### 信号与槽的关联\n通过调用 **QObject** 对象的 connect 函数来将某个对象的信号与另外一个对象的槽函数相关联，这样当发射者发射信号时，接收者的槽函数将被调用。  \n\nconnect()语句的原型类似于：\n```\nconnect(sender, SIGNAL(signal), receiver, SLOT(slot));\n```\n这里，sender 和 receiver 都是 **QObject** 类型的，singal 和 slot 都是没有参数名称的函数签名。SINGAL()和SLOT()宏用于把参数转换成字符串。  \n一个信号可以和多个槽相连：\n```\nconnect(slider, SIGNAL(valueChanged(int)),\n              spinBox, SLOT(setValue(int))); \nconnect(slider, SIGNAL(valueChanged(int)),\n              this, SLOT(updateStatusBarIndicator(int)));\n```\n\n\n\n## Gui简单例子\n这个例子中，我们用了上面槽的知识，我们在界面上放了一个`button`，然后添加了**slot**获得了button的click事件发送者的`objectName`。  \n**界面**  \n\n![upload successful](/images/Qt-Gui-Example.png)  \n\n**mainwindow.h**\n```\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n\nQT_BEGIN_NAMESPACE\nnamespace Ui { class MainWindow; }\nQT_END_NAMESPACE\n\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\n\npublic:\n    MainWindow(QWidget *parent = nullptr);\n    ~MainWindow();\n\nprivate:\n    Ui::MainWindow *ui;\nprivate slots:\n    void handleButton();  // 处理函数\n};\n#endif // MAINWINDOW_H\n\n```\n\n**mainwindow.cpp**\n```\n#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n#include <QDebug>\n\n\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui->setupUi(this);\n    connect(ui->myPushButton, SIGNAL(clicked()), this, SLOT(handleButton()));\n}\n\nvoid MainWindow::handleButton()\n{\n    QObject *senderObj = sender(); // This will give Sender object\n    QString senderObjName = senderObj->objectName();\n    qDebug() << senderObjName;  // get myPushButton\n}\n\nMainWindow::~MainWindow()\n{\n    delete ui;\n}\n```\n\n\n\n\n\n\n\n\n## 参考\n\n* 油管上VoidRealms的[Qt视频](https://www.youtube.com/watch?v=Id-sPu_m_hE&list=PL2D1942A4688E9D63&index=2)\n* [Install Qt5 On Ubuntu](https://wiki.qt.io/Install_Qt_5_on_Ubuntu)","slug":"Qt_begin","published":1,"updated":"2020-02-10T04:41:30.995Z","_id":"ck5keo9it0000ap3e0zw8ua5e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文环境：</p>\n<ul>\n<li>OS：Ubuntu 18.04.3 LTS</li>\n<li>Qt版本：5.13.1</li>\n<li>Qt Creator版本：4.10.1</li>\n</ul>\n<h2 id=\"Qt安装\"><a href=\"#Qt安装\" class=\"headerlink\" title=\"Qt安装\"></a>Qt安装</h2><p>首先，我们得明白一些概念。<br><strong>Qt</strong>是一个C++库，或者说是开发框架，里面集成了一些库函数，提高开发效率。<br><strong>Qt Creator</strong>是Qt集成开发环境，你可以在这里编写，编译，运行你的程序。所以最开始写Qt只安装<strong>Qt Creator</strong>这个是不行的，因为还没有相关的Qt库呢，但是新版的<strong>Qt Creator</strong>（5.9开始）已经集成了Qt了，所以入门就方便很多了。<br>关于Qt下载，大家可以打开这里的<a href=\"http://download.qt.io/archive/qt/\" target=\"_blank\" rel=\"noopener\">链接</a>，里面有各版本Qt（<strong>Qt</strong>和<strong>Qt Creator</strong>的集成包），操作简单，最新版本是<strong>5.14</strong>。  </p>\n<a id=\"more\"></a>\n\n<p>windows版本只要双击exe就可以安装了，Linux版本需要先添加执行权限然后运行文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x qt-opensource-linux-x64-5.13.2.run</span><br><span class=\"line\">$ ./qt-opensource-linux-x64-5.13.2.run</span><br></pre></td></tr></table></figure>\n\n<p>对于Linux系统，需要安装C/C++编译器，以Ubuntu为例，需要执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y gcc g++</span><br></pre></td></tr></table></figure>\n\n<p>在用到<code>WebEngine</code>组件的会遇到问题<br><strong>error: GL/gl.h: No such file or directory</strong>，需要</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mesa-common-dev</span><br></pre></td></tr></table></figure>\n\n<p>Note: Just installing the above-mentioned mesa-common-dev kit is not sufficient for more recent Ubuntu versions. Based on a comment in the Qt forum an additional package needs installation. Execute following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libglu1-mesa-dev -y</span><br></pre></td></tr></table></figure>\n\n<p>Tested with Qt5.3.1 and Ubuntu 14.04 and it solved the problem with missing <strong>-lGL</strong>.</p>\n<p>这一步需要注册一个账号，随便注册一个即可。<br><img src=\"https://s2.ax1x.com/2020/01/18/1p7NOs.png\" alt=\"install 1\"><br>这一步选择你需要的组件（不清楚的话，就像我这样选择好了）<br><img src=\"https://s2.ax1x.com/2020/01/18/1p7IfO.png\" alt=\"install 2\"><br>最后来到Qt Creator的启动界面<br><img src=\"https://s2.ax1x.com/2020/01/18/1pqSyQ.png\" alt></p>\n<h2 id=\"写个hello-world\"><a href=\"#写个hello-world\" class=\"headerlink\" title=\"写个hello world\"></a>写个hello world</h2><p>点击<strong>文件</strong>菜单，然后新建项目，选择<code>Qt Console Application</code>。<br><img src=\"https://s2.ax1x.com/2020/01/18/19CDSA.png\" alt><br>编辑<code>main.cpp</code>文件，代码为：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;QCoreApplication&gt;</span><br><span class=\"line\">#include &lt;QDebug&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    QCoreApplication a(argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">    qDebug() &lt;&lt; &quot;hello world&quot;;</span><br><span class=\"line\">    return a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击左下角的<code>Run</code>按钮，就可以启动程序。<br><img src=\"https://s2.ax1x.com/2020/01/18/19PDNF.png\" alt></p>\n<h2 id=\"信号和槽\"><a href=\"#信号和槽\" class=\"headerlink\" title=\"信号和槽\"></a>信号和槽</h2><p>信号和槽机制是 QT 的<strong>核心机制</strong>，要精通 QT 编程就必须对信号和槽有所了解。不同于传统的函数回调方式。信号和插槽是 Qt 中非常有特色的地方，可以说是Qt编程区别于其它编程的标志。信号和槽是一种高级接口，应用于对象之间的通信，它是 Qt 的核心特性。</p>\n<h3 id=\"信号（signal）\"><a href=\"#信号（signal）\" class=\"headerlink\" title=\"信号（signal）\"></a>信号（signal）</h3><p>当一个对象中某些可能会有别的对象关心的状态被修改时，将会发出信号。只有定义了信号的类及其子类可以发出信号。</p>\n<p>当一个信号被发出时，连接到这个信号的槽立即被调用，就像一个普通的函数调用。当这种情况发生时，信号槽机制独立于任何 GUI 事件循环。emit 语句之后的代码将在所有的槽返回之后被执行。这种情况与使用连接队列略有不同：使用连接队列的时候，emit 语句之后的代码将立即被执行，而槽在之后执行。</p>\n<p>如果一个信号连接了多个槽，当信号发出时，这些槽将以连接的顺序一个接一个地被执行（顺序不确定）。</p>\n<h3 id=\"槽（slot）\"><a href=\"#槽（slot）\" class=\"headerlink\" title=\"槽（slot）\"></a>槽（slot）</h3><p>当连接到的信号发出时，槽就会被调用。槽是<strong>普通的 C++ 函数</strong>，能够被正常的调用。它们的唯一特点是能够与信号连接。</p>\n<p>既然信号就是普通的成员函数，当它们像普通函数一样调用的时候，遵循标准 C++ 的规则。但是，作为槽，它们又能够通过信号槽的连接被任何组件调用，不论这个组件的访问级别。这意味着任意类的实例发出的信号，都可以使得不相关的类的私有槽被调用。  </p>\n<p>你也能把槽定义成虚的，这一点在实际应用中非常有用。</p>\n<h3 id=\"信号与槽的关联\"><a href=\"#信号与槽的关联\" class=\"headerlink\" title=\"信号与槽的关联\"></a>信号与槽的关联</h3><p>通过调用 <strong>QObject</strong> 对象的 connect 函数来将某个对象的信号与另外一个对象的槽函数相关联，这样当发射者发射信号时，接收者的槽函数将被调用。  </p>\n<p>connect()语句的原型类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(sender, SIGNAL(signal), receiver, SLOT(slot));</span><br></pre></td></tr></table></figure>\n\n<p>这里，sender 和 receiver 都是 <strong>QObject</strong> 类型的，singal 和 slot 都是没有参数名称的函数签名。SINGAL()和SLOT()宏用于把参数转换成字符串。<br>一个信号可以和多个槽相连：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(slider, SIGNAL(valueChanged(int)),</span><br><span class=\"line\">              spinBox, SLOT(setValue(int))); </span><br><span class=\"line\">connect(slider, SIGNAL(valueChanged(int)),</span><br><span class=\"line\">              this, SLOT(updateStatusBarIndicator(int)));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Gui简单例子\"><a href=\"#Gui简单例子\" class=\"headerlink\" title=\"Gui简单例子\"></a>Gui简单例子</h2><p>这个例子中，我们用了上面槽的知识，我们在界面上放了一个<code>button</code>，然后添加了<strong>slot</strong>获得了button的click事件发送者的<code>objectName</code>。<br><strong>界面</strong>  </p>\n<p><img src=\"/images/Qt-Gui-Example.png\" alt=\"upload successful\">  </p>\n<p><strong>mainwindow.h</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef MAINWINDOW_H</span><br><span class=\"line\">#define MAINWINDOW_H</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;QMainWindow&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">QT_BEGIN_NAMESPACE</span><br><span class=\"line\">namespace Ui &#123; class MainWindow; &#125;</span><br><span class=\"line\">QT_END_NAMESPACE</span><br><span class=\"line\"></span><br><span class=\"line\">class MainWindow : public QMainWindow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    MainWindow(QWidget *parent = nullptr);</span><br><span class=\"line\">    ~MainWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    Ui::MainWindow *ui;</span><br><span class=\"line\">private slots:</span><br><span class=\"line\">    void handleButton();  // 处理函数</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">#endif // MAINWINDOW_H</span><br></pre></td></tr></table></figure>\n\n<p><strong>mainwindow.cpp</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;mainwindow.h&quot;</span><br><span class=\"line\">#include &quot;ui_mainwindow.h&quot;</span><br><span class=\"line\">#include &lt;QDebug&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::MainWindow(QWidget *parent)</span><br><span class=\"line\">    : QMainWindow(parent)</span><br><span class=\"line\">    , ui(new Ui::MainWindow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui-&gt;setupUi(this);</span><br><span class=\"line\">    connect(ui-&gt;myPushButton, SIGNAL(clicked()), this, SLOT(handleButton()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void MainWindow::handleButton()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    QObject *senderObj = sender(); // This will give Sender object</span><br><span class=\"line\">    QString senderObjName = senderObj-&gt;objectName();</span><br><span class=\"line\">    qDebug() &lt;&lt; senderObjName;  // get myPushButton</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::~MainWindow()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    delete ui;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>油管上VoidRealms的<a href=\"https://www.youtube.com/watch?v=Id-sPu_m_hE&list=PL2D1942A4688E9D63&index=2\" target=\"_blank\" rel=\"noopener\">Qt视频</a></li>\n<li><a href=\"https://wiki.qt.io/Install_Qt_5_on_Ubuntu\" target=\"_blank\" rel=\"noopener\">Install Qt5 On Ubuntu</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文环境：</p>\n<ul>\n<li>OS：Ubuntu 18.04.3 LTS</li>\n<li>Qt版本：5.13.1</li>\n<li>Qt Creator版本：4.10.1</li>\n</ul>\n<h2 id=\"Qt安装\"><a href=\"#Qt安装\" class=\"headerlink\" title=\"Qt安装\"></a>Qt安装</h2><p>首先，我们得明白一些概念。<br><strong>Qt</strong>是一个C++库，或者说是开发框架，里面集成了一些库函数，提高开发效率。<br><strong>Qt Creator</strong>是Qt集成开发环境，你可以在这里编写，编译，运行你的程序。所以最开始写Qt只安装<strong>Qt Creator</strong>这个是不行的，因为还没有相关的Qt库呢，但是新版的<strong>Qt Creator</strong>（5.9开始）已经集成了Qt了，所以入门就方便很多了。<br>关于Qt下载，大家可以打开这里的<a href=\"http://download.qt.io/archive/qt/\" target=\"_blank\" rel=\"noopener\">链接</a>，里面有各版本Qt（<strong>Qt</strong>和<strong>Qt Creator</strong>的集成包），操作简单，最新版本是<strong>5.14</strong>。  </p>","more":"<p>windows版本只要双击exe就可以安装了，Linux版本需要先添加执行权限然后运行文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x qt-opensource-linux-x64-5.13.2.run</span><br><span class=\"line\">$ ./qt-opensource-linux-x64-5.13.2.run</span><br></pre></td></tr></table></figure>\n\n<p>对于Linux系统，需要安装C/C++编译器，以Ubuntu为例，需要执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y gcc g++</span><br></pre></td></tr></table></figure>\n\n<p>在用到<code>WebEngine</code>组件的会遇到问题<br><strong>error: GL/gl.h: No such file or directory</strong>，需要</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mesa-common-dev</span><br></pre></td></tr></table></figure>\n\n<p>Note: Just installing the above-mentioned mesa-common-dev kit is not sufficient for more recent Ubuntu versions. Based on a comment in the Qt forum an additional package needs installation. Execute following command:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libglu1-mesa-dev -y</span><br></pre></td></tr></table></figure>\n\n<p>Tested with Qt5.3.1 and Ubuntu 14.04 and it solved the problem with missing <strong>-lGL</strong>.</p>\n<p>这一步需要注册一个账号，随便注册一个即可。<br><img src=\"https://s2.ax1x.com/2020/01/18/1p7NOs.png\" alt=\"install 1\"><br>这一步选择你需要的组件（不清楚的话，就像我这样选择好了）<br><img src=\"https://s2.ax1x.com/2020/01/18/1p7IfO.png\" alt=\"install 2\"><br>最后来到Qt Creator的启动界面<br><img src=\"https://s2.ax1x.com/2020/01/18/1pqSyQ.png\" alt></p>\n<h2 id=\"写个hello-world\"><a href=\"#写个hello-world\" class=\"headerlink\" title=\"写个hello world\"></a>写个hello world</h2><p>点击<strong>文件</strong>菜单，然后新建项目，选择<code>Qt Console Application</code>。<br><img src=\"https://s2.ax1x.com/2020/01/18/19CDSA.png\" alt><br>编辑<code>main.cpp</code>文件，代码为：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;QCoreApplication&gt;</span><br><span class=\"line\">#include &lt;QDebug&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    QCoreApplication a(argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">    qDebug() &lt;&lt; &quot;hello world&quot;;</span><br><span class=\"line\">    return a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击左下角的<code>Run</code>按钮，就可以启动程序。<br><img src=\"https://s2.ax1x.com/2020/01/18/19PDNF.png\" alt></p>\n<h2 id=\"信号和槽\"><a href=\"#信号和槽\" class=\"headerlink\" title=\"信号和槽\"></a>信号和槽</h2><p>信号和槽机制是 QT 的<strong>核心机制</strong>，要精通 QT 编程就必须对信号和槽有所了解。不同于传统的函数回调方式。信号和插槽是 Qt 中非常有特色的地方，可以说是Qt编程区别于其它编程的标志。信号和槽是一种高级接口，应用于对象之间的通信，它是 Qt 的核心特性。</p>\n<h3 id=\"信号（signal）\"><a href=\"#信号（signal）\" class=\"headerlink\" title=\"信号（signal）\"></a>信号（signal）</h3><p>当一个对象中某些可能会有别的对象关心的状态被修改时，将会发出信号。只有定义了信号的类及其子类可以发出信号。</p>\n<p>当一个信号被发出时，连接到这个信号的槽立即被调用，就像一个普通的函数调用。当这种情况发生时，信号槽机制独立于任何 GUI 事件循环。emit 语句之后的代码将在所有的槽返回之后被执行。这种情况与使用连接队列略有不同：使用连接队列的时候，emit 语句之后的代码将立即被执行，而槽在之后执行。</p>\n<p>如果一个信号连接了多个槽，当信号发出时，这些槽将以连接的顺序一个接一个地被执行（顺序不确定）。</p>\n<h3 id=\"槽（slot）\"><a href=\"#槽（slot）\" class=\"headerlink\" title=\"槽（slot）\"></a>槽（slot）</h3><p>当连接到的信号发出时，槽就会被调用。槽是<strong>普通的 C++ 函数</strong>，能够被正常的调用。它们的唯一特点是能够与信号连接。</p>\n<p>既然信号就是普通的成员函数，当它们像普通函数一样调用的时候，遵循标准 C++ 的规则。但是，作为槽，它们又能够通过信号槽的连接被任何组件调用，不论这个组件的访问级别。这意味着任意类的实例发出的信号，都可以使得不相关的类的私有槽被调用。  </p>\n<p>你也能把槽定义成虚的，这一点在实际应用中非常有用。</p>\n<h3 id=\"信号与槽的关联\"><a href=\"#信号与槽的关联\" class=\"headerlink\" title=\"信号与槽的关联\"></a>信号与槽的关联</h3><p>通过调用 <strong>QObject</strong> 对象的 connect 函数来将某个对象的信号与另外一个对象的槽函数相关联，这样当发射者发射信号时，接收者的槽函数将被调用。  </p>\n<p>connect()语句的原型类似于：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(sender, SIGNAL(signal), receiver, SLOT(slot));</span><br></pre></td></tr></table></figure>\n\n<p>这里，sender 和 receiver 都是 <strong>QObject</strong> 类型的，singal 和 slot 都是没有参数名称的函数签名。SINGAL()和SLOT()宏用于把参数转换成字符串。<br>一个信号可以和多个槽相连：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(slider, SIGNAL(valueChanged(int)),</span><br><span class=\"line\">              spinBox, SLOT(setValue(int))); </span><br><span class=\"line\">connect(slider, SIGNAL(valueChanged(int)),</span><br><span class=\"line\">              this, SLOT(updateStatusBarIndicator(int)));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Gui简单例子\"><a href=\"#Gui简单例子\" class=\"headerlink\" title=\"Gui简单例子\"></a>Gui简单例子</h2><p>这个例子中，我们用了上面槽的知识，我们在界面上放了一个<code>button</code>，然后添加了<strong>slot</strong>获得了button的click事件发送者的<code>objectName</code>。<br><strong>界面</strong>  </p>\n<p><img src=\"/images/Qt-Gui-Example.png\" alt=\"upload successful\">  </p>\n<p><strong>mainwindow.h</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef MAINWINDOW_H</span><br><span class=\"line\">#define MAINWINDOW_H</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;QMainWindow&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">QT_BEGIN_NAMESPACE</span><br><span class=\"line\">namespace Ui &#123; class MainWindow; &#125;</span><br><span class=\"line\">QT_END_NAMESPACE</span><br><span class=\"line\"></span><br><span class=\"line\">class MainWindow : public QMainWindow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    MainWindow(QWidget *parent = nullptr);</span><br><span class=\"line\">    ~MainWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    Ui::MainWindow *ui;</span><br><span class=\"line\">private slots:</span><br><span class=\"line\">    void handleButton();  // 处理函数</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">#endif // MAINWINDOW_H</span><br></pre></td></tr></table></figure>\n\n<p><strong>mainwindow.cpp</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;mainwindow.h&quot;</span><br><span class=\"line\">#include &quot;ui_mainwindow.h&quot;</span><br><span class=\"line\">#include &lt;QDebug&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::MainWindow(QWidget *parent)</span><br><span class=\"line\">    : QMainWindow(parent)</span><br><span class=\"line\">    , ui(new Ui::MainWindow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui-&gt;setupUi(this);</span><br><span class=\"line\">    connect(ui-&gt;myPushButton, SIGNAL(clicked()), this, SLOT(handleButton()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void MainWindow::handleButton()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    QObject *senderObj = sender(); // This will give Sender object</span><br><span class=\"line\">    QString senderObjName = senderObj-&gt;objectName();</span><br><span class=\"line\">    qDebug() &lt;&lt; senderObjName;  // get myPushButton</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::~MainWindow()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    delete ui;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>油管上VoidRealms的<a href=\"https://www.youtube.com/watch?v=Id-sPu_m_hE&list=PL2D1942A4688E9D63&index=2\" target=\"_blank\" rel=\"noopener\">Qt视频</a></li>\n<li><a href=\"https://wiki.qt.io/Install_Qt_5_on_Ubuntu\" target=\"_blank\" rel=\"noopener\">Install Qt5 On Ubuntu</a></li>\n</ul>"},{"title":"Qt之布局管理","author":"Salamander","date":"2020-02-12T13:00:00.000Z","_content":"本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Qt版本：5.13.1\n* Qt Creator版本：4.10.1\n\n\n## 布局器概览\n我们以下图的 Qt 设计师界面来说明布局功能，QtCreator 设计模式的布局功能与 Qt 设计师是一样的。\n\n![upload successful](/images/pasted-0.png)  \n\n<!-- more -->\n\n在设计师左边列表，可以看到 Layouts 栏目里有四个布局器：\n直布局器 QVBoxLayout：将内部的控件按照垂直方向排布，一行一个。  \n◆  水平布局器 QHBoxLayout：将内部的控件按照水平方向排布，一列一个。  \n◆  网格布局器 QGridLayout：按照多行、多列的网格排布内部控件，单个控件可以占一个格子或者占据连续多个格子。  \n◆  表单布局器 QFormLayout：Qt 设计师里把这个布局器称为窗体布局器，窗体布局器这个叫法不准。这个布局器就是对应网页设计的表单，通常用于接收用户输入。该布局器就如它的图标一样，就是固定的两列控 件，第一列通常是标签，第二列是输入控件或含有输入控件的布局器。  \n◆  Qt 另外还有一个堆栈布局器 **QStackedLayout**，通常用于容纳多个子窗口布局，每次只显示其中一个。这个布局器隐含在堆栈部件 QStackedWidget 内部，一般直接用 QStackedWidget 就行了，不需要专门设置堆栈布局器。    \n\n与布局紧密关联的是两个空白条（或叫弹簧条）：**Horizontal Spacer** 水平空白条和 **Vertical Spacer** 垂直空白条，空白条的作用就是填充无用的空隙，如果不希望看到控件拉伸后变丑，就可以塞一个空白条到布局器里面，布局器通常会优先拉伸空白条。两种空白条的类名都是 QSpacerItem，两种空白条只是默认的拉伸方向不一样。\n\n\n## QBoxLayout\n水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 的基类都是 QBoxLayout，只是二者排列方向不同。水平和垂直布局器的主要功能函数都位于基类 QBoxLayout 里面，我们这里专门介绍一下这个基类的功能。  \nQBoxLayout 构造函数和 setDirection() 都可以指定布局器的方向：\n```\nQBoxLayout(Direction dir, QWidget * parent = 0)\nvoid setDirection(Direction direction)\n```\nQBoxLayout 布局器的方向 QBoxLayout::​Direction 枚举不仅可以指定水平和垂直，还能指定反方向排列：  \n\n\n| 枚举常量                    | 数值  | 描述            |\n|-------------------------|-----|---------------|\n| QBoxLayout::LeftToRight |  0  |  水平布局，从左到右排列  |\n| QBoxLayout::RightToLeft |  1  |  水平布局，从右到左排列  |\n| QBoxLayout::TopToBottom |  2  |  垂直布局，从上到下排列  |\n| QBoxLayout::BottomToTop |  3  |  垂直布局，从下到上排列  |\n\n水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 默认是其中的两种：**QBoxLayout::LeftToRight** 和 **QBoxLayout::TopToBottom** 。  \n\n布局器是一定要往里面添加控件才有用，添加控件的函数如下：\n```\nvoid addWidget(QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)\nvoid insertWidget(int index, QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)\n```\nwidget 就是要添加的控件指针，**stretch** 是伸展因子，伸展因子越大，窗口变大时拉伸越 多，**alignment** 一般不需要指定，用默认的即可。  \n第一个 **addWidget()** 是将控件添加到布局里面的控件列表末尾，第二个 **insertWidget()** 是将控件插入到布局里控件列表序号为 index 的位置。\n\n下面看个例子，我在垂直布局器中添加了5个Label，它们高度按不同的比例分配  \n**mainwwindow.cpp**  \n```\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui->setupUi(this);\n\n    QLabel *label1 = new QLabel(\"One\");\n    QLabel *label2 = new QLabel(\"Two\");\n    QLabel *label3 = new QLabel(\"Three\");\n    QLabel *label4 = new QLabel(\"Four\");\n    QLabel *label5 = new QLabel(\"Five\");\n\n    label1->setStyleSheet(\"background-color: red\");\n    label2->setStyleSheet(\"background-color: yellow\");\n    label3->setStyleSheet(\"background-color: green\");\n    label4->setStyleSheet(\"background-color: black\");\n    label5->setStyleSheet(\"background-color: orange\");\n\n    QVBoxLayout *layout = new QVBoxLayout;\n    layout->addWidget(label1);\n    layout->addWidget(label2, 2);\n    layout->addWidget(label3, 3);\n    layout->addWidget(label4, 4);\n    layout->addWidget(label5, 5);\n\n    auto central = new QWidget;\n    central->setLayout(layout);\n\n    this->setCentralWidget(central);\n}\n```\n最终呈现的效果是：  \n![](https://s2.ax1x.com/2020/02/12/1b3US0.png)","source":"_posts/Qt之布局管理.md","raw":"title: Qt之布局管理\nauthor: Salamander\ntags:\n  - Qt\ncategories:\n  - C++\ndate: 2020-02-12 21:00:00\n---\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Qt版本：5.13.1\n* Qt Creator版本：4.10.1\n\n\n## 布局器概览\n我们以下图的 Qt 设计师界面来说明布局功能，QtCreator 设计模式的布局功能与 Qt 设计师是一样的。\n\n![upload successful](/images/pasted-0.png)  \n\n<!-- more -->\n\n在设计师左边列表，可以看到 Layouts 栏目里有四个布局器：\n直布局器 QVBoxLayout：将内部的控件按照垂直方向排布，一行一个。  \n◆  水平布局器 QHBoxLayout：将内部的控件按照水平方向排布，一列一个。  \n◆  网格布局器 QGridLayout：按照多行、多列的网格排布内部控件，单个控件可以占一个格子或者占据连续多个格子。  \n◆  表单布局器 QFormLayout：Qt 设计师里把这个布局器称为窗体布局器，窗体布局器这个叫法不准。这个布局器就是对应网页设计的表单，通常用于接收用户输入。该布局器就如它的图标一样，就是固定的两列控 件，第一列通常是标签，第二列是输入控件或含有输入控件的布局器。  \n◆  Qt 另外还有一个堆栈布局器 **QStackedLayout**，通常用于容纳多个子窗口布局，每次只显示其中一个。这个布局器隐含在堆栈部件 QStackedWidget 内部，一般直接用 QStackedWidget 就行了，不需要专门设置堆栈布局器。    \n\n与布局紧密关联的是两个空白条（或叫弹簧条）：**Horizontal Spacer** 水平空白条和 **Vertical Spacer** 垂直空白条，空白条的作用就是填充无用的空隙，如果不希望看到控件拉伸后变丑，就可以塞一个空白条到布局器里面，布局器通常会优先拉伸空白条。两种空白条的类名都是 QSpacerItem，两种空白条只是默认的拉伸方向不一样。\n\n\n## QBoxLayout\n水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 的基类都是 QBoxLayout，只是二者排列方向不同。水平和垂直布局器的主要功能函数都位于基类 QBoxLayout 里面，我们这里专门介绍一下这个基类的功能。  \nQBoxLayout 构造函数和 setDirection() 都可以指定布局器的方向：\n```\nQBoxLayout(Direction dir, QWidget * parent = 0)\nvoid setDirection(Direction direction)\n```\nQBoxLayout 布局器的方向 QBoxLayout::​Direction 枚举不仅可以指定水平和垂直，还能指定反方向排列：  \n\n\n| 枚举常量                    | 数值  | 描述            |\n|-------------------------|-----|---------------|\n| QBoxLayout::LeftToRight |  0  |  水平布局，从左到右排列  |\n| QBoxLayout::RightToLeft |  1  |  水平布局，从右到左排列  |\n| QBoxLayout::TopToBottom |  2  |  垂直布局，从上到下排列  |\n| QBoxLayout::BottomToTop |  3  |  垂直布局，从下到上排列  |\n\n水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 默认是其中的两种：**QBoxLayout::LeftToRight** 和 **QBoxLayout::TopToBottom** 。  \n\n布局器是一定要往里面添加控件才有用，添加控件的函数如下：\n```\nvoid addWidget(QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)\nvoid insertWidget(int index, QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)\n```\nwidget 就是要添加的控件指针，**stretch** 是伸展因子，伸展因子越大，窗口变大时拉伸越 多，**alignment** 一般不需要指定，用默认的即可。  \n第一个 **addWidget()** 是将控件添加到布局里面的控件列表末尾，第二个 **insertWidget()** 是将控件插入到布局里控件列表序号为 index 的位置。\n\n下面看个例子，我在垂直布局器中添加了5个Label，它们高度按不同的比例分配  \n**mainwwindow.cpp**  \n```\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui->setupUi(this);\n\n    QLabel *label1 = new QLabel(\"One\");\n    QLabel *label2 = new QLabel(\"Two\");\n    QLabel *label3 = new QLabel(\"Three\");\n    QLabel *label4 = new QLabel(\"Four\");\n    QLabel *label5 = new QLabel(\"Five\");\n\n    label1->setStyleSheet(\"background-color: red\");\n    label2->setStyleSheet(\"background-color: yellow\");\n    label3->setStyleSheet(\"background-color: green\");\n    label4->setStyleSheet(\"background-color: black\");\n    label5->setStyleSheet(\"background-color: orange\");\n\n    QVBoxLayout *layout = new QVBoxLayout;\n    layout->addWidget(label1);\n    layout->addWidget(label2, 2);\n    layout->addWidget(label3, 3);\n    layout->addWidget(label4, 4);\n    layout->addWidget(label5, 5);\n\n    auto central = new QWidget;\n    central->setLayout(layout);\n\n    this->setCentralWidget(central);\n}\n```\n最终呈现的效果是：  \n![](https://s2.ax1x.com/2020/02/12/1b3US0.png)","slug":"Qt之布局管理","published":1,"updated":"2020-02-12T13:32:28.932Z","_id":"ck6jbtz0o0000prztxsjtf1f6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文环境：</p>\n<ul>\n<li>OS：Ubuntu 18.04.3 LTS</li>\n<li>Qt版本：5.13.1</li>\n<li>Qt Creator版本：4.10.1</li>\n</ul>\n<h2 id=\"布局器概览\"><a href=\"#布局器概览\" class=\"headerlink\" title=\"布局器概览\"></a>布局器概览</h2><p>我们以下图的 Qt 设计师界面来说明布局功能，QtCreator 设计模式的布局功能与 Qt 设计师是一样的。</p>\n<p><img src=\"/images/pasted-0.png\" alt=\"upload successful\">  </p>\n<a id=\"more\"></a>\n\n<p>在设计师左边列表，可以看到 Layouts 栏目里有四个布局器：<br>直布局器 QVBoxLayout：将内部的控件按照垂直方向排布，一行一个。<br>◆  水平布局器 QHBoxLayout：将内部的控件按照水平方向排布，一列一个。<br>◆  网格布局器 QGridLayout：按照多行、多列的网格排布内部控件，单个控件可以占一个格子或者占据连续多个格子。<br>◆  表单布局器 QFormLayout：Qt 设计师里把这个布局器称为窗体布局器，窗体布局器这个叫法不准。这个布局器就是对应网页设计的表单，通常用于接收用户输入。该布局器就如它的图标一样，就是固定的两列控 件，第一列通常是标签，第二列是输入控件或含有输入控件的布局器。<br>◆  Qt 另外还有一个堆栈布局器 <strong>QStackedLayout</strong>，通常用于容纳多个子窗口布局，每次只显示其中一个。这个布局器隐含在堆栈部件 QStackedWidget 内部，一般直接用 QStackedWidget 就行了，不需要专门设置堆栈布局器。    </p>\n<p>与布局紧密关联的是两个空白条（或叫弹簧条）：<strong>Horizontal Spacer</strong> 水平空白条和 <strong>Vertical Spacer</strong> 垂直空白条，空白条的作用就是填充无用的空隙，如果不希望看到控件拉伸后变丑，就可以塞一个空白条到布局器里面，布局器通常会优先拉伸空白条。两种空白条的类名都是 QSpacerItem，两种空白条只是默认的拉伸方向不一样。</p>\n<h2 id=\"QBoxLayout\"><a href=\"#QBoxLayout\" class=\"headerlink\" title=\"QBoxLayout\"></a>QBoxLayout</h2><p>水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 的基类都是 QBoxLayout，只是二者排列方向不同。水平和垂直布局器的主要功能函数都位于基类 QBoxLayout 里面，我们这里专门介绍一下这个基类的功能。<br>QBoxLayout 构造函数和 setDirection() 都可以指定布局器的方向：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QBoxLayout(Direction dir, QWidget * parent = 0)</span><br><span class=\"line\">void setDirection(Direction direction)</span><br></pre></td></tr></table></figure>\n\n<p>QBoxLayout 布局器的方向 QBoxLayout::​Direction 枚举不仅可以指定水平和垂直，还能指定反方向排列：  </p>\n<table>\n<thead>\n<tr>\n<th>枚举常量</th>\n<th>数值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>QBoxLayout::LeftToRight</td>\n<td>0</td>\n<td>水平布局，从左到右排列</td>\n</tr>\n<tr>\n<td>QBoxLayout::RightToLeft</td>\n<td>1</td>\n<td>水平布局，从右到左排列</td>\n</tr>\n<tr>\n<td>QBoxLayout::TopToBottom</td>\n<td>2</td>\n<td>垂直布局，从上到下排列</td>\n</tr>\n<tr>\n<td>QBoxLayout::BottomToTop</td>\n<td>3</td>\n<td>垂直布局，从下到上排列</td>\n</tr>\n</tbody></table>\n<p>水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 默认是其中的两种：<strong>QBoxLayout::LeftToRight</strong> 和 <strong>QBoxLayout::TopToBottom</strong> 。  </p>\n<p>布局器是一定要往里面添加控件才有用，添加控件的函数如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void addWidget(QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)</span><br><span class=\"line\">void insertWidget(int index, QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)</span><br></pre></td></tr></table></figure>\n\n<p>widget 就是要添加的控件指针，<strong>stretch</strong> 是伸展因子，伸展因子越大，窗口变大时拉伸越 多，<strong>alignment</strong> 一般不需要指定，用默认的即可。<br>第一个 <strong>addWidget()</strong> 是将控件添加到布局里面的控件列表末尾，第二个 <strong>insertWidget()</strong> 是将控件插入到布局里控件列表序号为 index 的位置。</p>\n<p>下面看个例子，我在垂直布局器中添加了5个Label，它们高度按不同的比例分配<br><strong>mainwwindow.cpp</strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainWindow::MainWindow(QWidget *parent)</span><br><span class=\"line\">    : QMainWindow(parent)</span><br><span class=\"line\">    , ui(new Ui::MainWindow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui-&gt;setupUi(this);</span><br><span class=\"line\"></span><br><span class=\"line\">    QLabel *label1 = new QLabel(&quot;One&quot;);</span><br><span class=\"line\">    QLabel *label2 = new QLabel(&quot;Two&quot;);</span><br><span class=\"line\">    QLabel *label3 = new QLabel(&quot;Three&quot;);</span><br><span class=\"line\">    QLabel *label4 = new QLabel(&quot;Four&quot;);</span><br><span class=\"line\">    QLabel *label5 = new QLabel(&quot;Five&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    label1-&gt;setStyleSheet(&quot;background-color: red&quot;);</span><br><span class=\"line\">    label2-&gt;setStyleSheet(&quot;background-color: yellow&quot;);</span><br><span class=\"line\">    label3-&gt;setStyleSheet(&quot;background-color: green&quot;);</span><br><span class=\"line\">    label4-&gt;setStyleSheet(&quot;background-color: black&quot;);</span><br><span class=\"line\">    label5-&gt;setStyleSheet(&quot;background-color: orange&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    QVBoxLayout *layout = new QVBoxLayout;</span><br><span class=\"line\">    layout-&gt;addWidget(label1);</span><br><span class=\"line\">    layout-&gt;addWidget(label2, 2);</span><br><span class=\"line\">    layout-&gt;addWidget(label3, 3);</span><br><span class=\"line\">    layout-&gt;addWidget(label4, 4);</span><br><span class=\"line\">    layout-&gt;addWidget(label5, 5);</span><br><span class=\"line\"></span><br><span class=\"line\">    auto central = new QWidget;</span><br><span class=\"line\">    central-&gt;setLayout(layout);</span><br><span class=\"line\"></span><br><span class=\"line\">    this-&gt;setCentralWidget(central);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终呈现的效果是：<br><img src=\"https://s2.ax1x.com/2020/02/12/1b3US0.png\" alt></p>\n","site":{"data":{}},"excerpt":"<p>本文环境：</p>\n<ul>\n<li>OS：Ubuntu 18.04.3 LTS</li>\n<li>Qt版本：5.13.1</li>\n<li>Qt Creator版本：4.10.1</li>\n</ul>\n<h2 id=\"布局器概览\"><a href=\"#布局器概览\" class=\"headerlink\" title=\"布局器概览\"></a>布局器概览</h2><p>我们以下图的 Qt 设计师界面来说明布局功能，QtCreator 设计模式的布局功能与 Qt 设计师是一样的。</p>\n<p><img src=\"/images/pasted-0.png\" alt=\"upload successful\">  </p>","more":"<p>在设计师左边列表，可以看到 Layouts 栏目里有四个布局器：<br>直布局器 QVBoxLayout：将内部的控件按照垂直方向排布，一行一个。<br>◆  水平布局器 QHBoxLayout：将内部的控件按照水平方向排布，一列一个。<br>◆  网格布局器 QGridLayout：按照多行、多列的网格排布内部控件，单个控件可以占一个格子或者占据连续多个格子。<br>◆  表单布局器 QFormLayout：Qt 设计师里把这个布局器称为窗体布局器，窗体布局器这个叫法不准。这个布局器就是对应网页设计的表单，通常用于接收用户输入。该布局器就如它的图标一样，就是固定的两列控 件，第一列通常是标签，第二列是输入控件或含有输入控件的布局器。<br>◆  Qt 另外还有一个堆栈布局器 <strong>QStackedLayout</strong>，通常用于容纳多个子窗口布局，每次只显示其中一个。这个布局器隐含在堆栈部件 QStackedWidget 内部，一般直接用 QStackedWidget 就行了，不需要专门设置堆栈布局器。    </p>\n<p>与布局紧密关联的是两个空白条（或叫弹簧条）：<strong>Horizontal Spacer</strong> 水平空白条和 <strong>Vertical Spacer</strong> 垂直空白条，空白条的作用就是填充无用的空隙，如果不希望看到控件拉伸后变丑，就可以塞一个空白条到布局器里面，布局器通常会优先拉伸空白条。两种空白条的类名都是 QSpacerItem，两种空白条只是默认的拉伸方向不一样。</p>\n<h2 id=\"QBoxLayout\"><a href=\"#QBoxLayout\" class=\"headerlink\" title=\"QBoxLayout\"></a>QBoxLayout</h2><p>水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 的基类都是 QBoxLayout，只是二者排列方向不同。水平和垂直布局器的主要功能函数都位于基类 QBoxLayout 里面，我们这里专门介绍一下这个基类的功能。<br>QBoxLayout 构造函数和 setDirection() 都可以指定布局器的方向：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QBoxLayout(Direction dir, QWidget * parent = 0)</span><br><span class=\"line\">void setDirection(Direction direction)</span><br></pre></td></tr></table></figure>\n\n<p>QBoxLayout 布局器的方向 QBoxLayout::​Direction 枚举不仅可以指定水平和垂直，还能指定反方向排列：  </p>\n<table>\n<thead>\n<tr>\n<th>枚举常量</th>\n<th>数值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>QBoxLayout::LeftToRight</td>\n<td>0</td>\n<td>水平布局，从左到右排列</td>\n</tr>\n<tr>\n<td>QBoxLayout::RightToLeft</td>\n<td>1</td>\n<td>水平布局，从右到左排列</td>\n</tr>\n<tr>\n<td>QBoxLayout::TopToBottom</td>\n<td>2</td>\n<td>垂直布局，从上到下排列</td>\n</tr>\n<tr>\n<td>QBoxLayout::BottomToTop</td>\n<td>3</td>\n<td>垂直布局，从下到上排列</td>\n</tr>\n</tbody></table>\n<p>水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 默认是其中的两种：<strong>QBoxLayout::LeftToRight</strong> 和 <strong>QBoxLayout::TopToBottom</strong> 。  </p>\n<p>布局器是一定要往里面添加控件才有用，添加控件的函数如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void addWidget(QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)</span><br><span class=\"line\">void insertWidget(int index, QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)</span><br></pre></td></tr></table></figure>\n\n<p>widget 就是要添加的控件指针，<strong>stretch</strong> 是伸展因子，伸展因子越大，窗口变大时拉伸越 多，<strong>alignment</strong> 一般不需要指定，用默认的即可。<br>第一个 <strong>addWidget()</strong> 是将控件添加到布局里面的控件列表末尾，第二个 <strong>insertWidget()</strong> 是将控件插入到布局里控件列表序号为 index 的位置。</p>\n<p>下面看个例子，我在垂直布局器中添加了5个Label，它们高度按不同的比例分配<br><strong>mainwwindow.cpp</strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainWindow::MainWindow(QWidget *parent)</span><br><span class=\"line\">    : QMainWindow(parent)</span><br><span class=\"line\">    , ui(new Ui::MainWindow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui-&gt;setupUi(this);</span><br><span class=\"line\"></span><br><span class=\"line\">    QLabel *label1 = new QLabel(&quot;One&quot;);</span><br><span class=\"line\">    QLabel *label2 = new QLabel(&quot;Two&quot;);</span><br><span class=\"line\">    QLabel *label3 = new QLabel(&quot;Three&quot;);</span><br><span class=\"line\">    QLabel *label4 = new QLabel(&quot;Four&quot;);</span><br><span class=\"line\">    QLabel *label5 = new QLabel(&quot;Five&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    label1-&gt;setStyleSheet(&quot;background-color: red&quot;);</span><br><span class=\"line\">    label2-&gt;setStyleSheet(&quot;background-color: yellow&quot;);</span><br><span class=\"line\">    label3-&gt;setStyleSheet(&quot;background-color: green&quot;);</span><br><span class=\"line\">    label4-&gt;setStyleSheet(&quot;background-color: black&quot;);</span><br><span class=\"line\">    label5-&gt;setStyleSheet(&quot;background-color: orange&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    QVBoxLayout *layout = new QVBoxLayout;</span><br><span class=\"line\">    layout-&gt;addWidget(label1);</span><br><span class=\"line\">    layout-&gt;addWidget(label2, 2);</span><br><span class=\"line\">    layout-&gt;addWidget(label3, 3);</span><br><span class=\"line\">    layout-&gt;addWidget(label4, 4);</span><br><span class=\"line\">    layout-&gt;addWidget(label5, 5);</span><br><span class=\"line\"></span><br><span class=\"line\">    auto central = new QWidget;</span><br><span class=\"line\">    central-&gt;setLayout(layout);</span><br><span class=\"line\"></span><br><span class=\"line\">    this-&gt;setCentralWidget(central);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终呈现的效果是：<br><img src=\"https://s2.ax1x.com/2020/02/12/1b3US0.png\" alt></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck470me9z0000u8ztzcu1536y","category_id":"ck470mea20002u8ztbw1voa2q","_id":"ck470mea9000bu8ztgl6y4eck"},{"post_id":"ck470mea10001u8ztndko7bxb","category_id":"ck470mea60007u8zt7dgnzpnk","_id":"ck470mea9000eu8ztvobkwmei"},{"post_id":"ck470mea40004u8ztdjqntpd7","category_id":"ck470mea9000cu8zthp5h00yh","_id":"ck470meaa000ju8zta38m8nbz"},{"post_id":"ck470mea50005u8ztppywsuqg","category_id":"ck470mea9000fu8ztxdfaupse","_id":"ck470meab000nu8ztyxyt0c17"},{"post_id":"ck470mea60006u8ztlyfjqw23","category_id":"ck470meaa000ku8ztkxq9xs48","_id":"ck470meab000qu8ztyyn1lpkp"},{"post_id":"ck470mea70009u8zt8fzkuv0n","category_id":"ck470meab000ou8ztzk1ld41e","_id":"ck470meac000vu8ztkgcgq6ij"},{"post_id":"ck470mea8000au8ztqz04a2yr","category_id":"ck470meab000ou8ztzk1ld41e","_id":"ck499fzed0000ks3e2ka5xhma"},{"post_id":"ck5c67mja00009bzt9r5mko64","category_id":"ck5c699pu00029bztgjpxklwv","_id":"ck5c699pv00049bzthoihfofm"},{"post_id":"ck5df7fil0000o93ecjkv5bns","category_id":"ck5c699pu00029bztgjpxklwv","_id":"ck5df8sph0003o93ev8dk4n8h"},{"post_id":"ck5keo9it0000ap3e0zw8ua5e","category_id":"ck5keq8ni0002ap3evz63z4ef","_id":"ck5kewp3600029x3ebgxujgb4"},{"post_id":"ck495sd5o0000213eskef1zsz","category_id":"ck495sd5v0001213eo92alh0p","_id":"ck5ulo9xv00028cztl9ue3o4h"},{"post_id":"ck6jbtz0o0000prztxsjtf1f6","category_id":"ck5keq8ni0002ap3evz63z4ef","_id":"ck6jbudas0002prztczekbsn3"}],"PostTag":[{"post_id":"ck470me9z0000u8ztzcu1536y","tag_id":"ck470mea40003u8zthip3qb0n","_id":"ck470meaa000hu8zt5djh8pw8"},{"post_id":"ck470me9z0000u8ztzcu1536y","tag_id":"ck470mea70008u8ztmm8e1sok","_id":"ck470meaa000iu8ztvl2iwzps"},{"post_id":"ck470me9z0000u8ztzcu1536y","tag_id":"ck470mea9000du8ztbz1tigyw","_id":"ck470meaa000mu8zt9jz6wy3c"},{"post_id":"ck470mea10001u8ztndko7bxb","tag_id":"ck470meaa000gu8zt7u3j0xt4","_id":"ck470meab000tu8zthr2waj5e"},{"post_id":"ck470mea10001u8ztndko7bxb","tag_id":"ck470meaa000lu8ztir4l4p6w","_id":"ck470meab000uu8ztpklf1s11"},{"post_id":"ck470mea10001u8ztndko7bxb","tag_id":"ck470meab000pu8zta6vi54m6","_id":"ck470meac000xu8zt813bgbof"},{"post_id":"ck470mea40004u8ztdjqntpd7","tag_id":"ck470meab000su8ztege4n65p","_id":"ck470meac0011u8ztl7tkizsr"},{"post_id":"ck470mea40004u8ztdjqntpd7","tag_id":"ck470meac000wu8ztyixcehhb","_id":"ck470meac0012u8ztwgie7iyu"},{"post_id":"ck470mea40004u8ztdjqntpd7","tag_id":"ck470meac000zu8zt2usjtfxv","_id":"ck470meac0014u8ztg3exl9d1"},{"post_id":"ck470mea50005u8ztppywsuqg","tag_id":"ck470meac0010u8ztytio7gya","_id":"ck470mead0017u8zt4zwob6uc"},{"post_id":"ck470mea50005u8ztppywsuqg","tag_id":"ck470meac0013u8ztxa3w78ah","_id":"ck470mead0018u8ztdi4keqkg"},{"post_id":"ck470mea50005u8ztppywsuqg","tag_id":"ck470mead0015u8ztcl2mzlt8","_id":"ck470mead001au8zt9jjgs11h"},{"post_id":"ck470mea60006u8ztlyfjqw23","tag_id":"ck470mead0016u8zt8v8lrcar","_id":"ck470mead001cu8ztgjg88bnn"},{"post_id":"ck470mea60006u8ztlyfjqw23","tag_id":"ck470mead0019u8ztvpl2o6yw","_id":"ck470meae001du8ztqoklz5ip"},{"post_id":"ck470mea70009u8zt8fzkuv0n","tag_id":"ck470mead001bu8zt6k8r0bss","_id":"ck470meae001gu8ztipgnrqvl"},{"post_id":"ck470mea70009u8zt8fzkuv0n","tag_id":"ck470meae001eu8zts85o0gz1","_id":"ck470meae001hu8ztl8cin0xz"},{"post_id":"ck470mea8000au8ztqz04a2yr","tag_id":"ck470meae001fu8ztmw5tcuse","_id":"ck470meae001ku8ztnn580gzy"},{"post_id":"ck470mea8000au8ztqz04a2yr","tag_id":"ck470meae001iu8ztjhi6bmk7","_id":"ck470meaf001lu8zt1s6oygk0"},{"post_id":"ck470mea8000au8ztqz04a2yr","tag_id":"ck470meae001ju8zte4kscgfr","_id":"ck470meaf001mu8ztlqg77zbr"},{"post_id":"ck5c67mja00009bzt9r5mko64","tag_id":"ck5c699pu00019bztfbpbkzah","_id":"ck5c699pv00079bztvwh7rsyo"},{"post_id":"ck5c67mja00009bzt9r5mko64","tag_id":"ck5c699pv00039bztj6eq5jti","_id":"ck5c699pw00089bzthv2zzlxl"},{"post_id":"ck5c67mja00009bzt9r5mko64","tag_id":"ck5c699pv00059bzte7wrnz7s","_id":"ck5c699pw00099bzt2sa7m7or"},{"post_id":"ck5c67mja00009bzt9r5mko64","tag_id":"ck5c699pv00069bztamv7p38p","_id":"ck5c699pw000a9bztyptlocg9"},{"post_id":"ck5df7fil0000o93ecjkv5bns","tag_id":"ck5c699pv00039bztj6eq5jti","_id":"ck5df8spg0001o93eh4hq3xer"},{"post_id":"ck5df7fil0000o93ecjkv5bns","tag_id":"ck5c699pu00019bztfbpbkzah","_id":"ck5df8sph0002o93ed80z246l"},{"post_id":"ck5keo9it0000ap3e0zw8ua5e","tag_id":"ck5keq8ni0001ap3en8elrxxl","_id":"ck5kewp3500009x3ezvxxw0fx"},{"post_id":"ck5keo9it0000ap3e0zw8ua5e","tag_id":"ck5keq8nj0003ap3e1dmqsofx","_id":"ck5kewp3600019x3efsenynf1"},{"post_id":"ck495sd5o0000213eskef1zsz","tag_id":"ck495sd5w0002213e6zywqcpx","_id":"ck5ulo9xv00008cztg1p7quhd"},{"post_id":"ck495sd5o0000213eskef1zsz","tag_id":"ck495sd5x0003213ekrp5ul6q","_id":"ck5ulo9xv00018cztd2ye7dc8"},{"post_id":"ck495sd5o0000213eskef1zsz","tag_id":"ck495sd5y0005213ephpq74t2","_id":"ck5ulo9xv00038cztcxrpqbv6"},{"post_id":"ck6jbtz0o0000prztxsjtf1f6","tag_id":"ck5keq8ni0001ap3en8elrxxl","_id":"ck6jbudar0001prztjmb19p15"}],"Tag":[{"name":"C#","_id":"ck470mea40003u8zthip3qb0n"},{"name":"CefSharp","_id":"ck470mea70008u8ztmm8e1sok"},{"name":"WPF","_id":"ck470mea9000du8ztbz1tigyw"},{"name":"NVI","_id":"ck470meaa000gu8zt7u3j0xt4"},{"name":"CUDA","_id":"ck470meaa000lu8ztir4l4p6w"},{"name":"cuDNN","_id":"ck470meab000pu8zta6vi54m6"},{"name":"jenkins","_id":"ck470meab000su8ztege4n65p"},{"name":"ci","_id":"ck470meac000wu8ztyixcehhb"},{"name":"docker","_id":"ck470meac000zu8zt2usjtfxv"},{"name":"Spring","_id":"ck470meac0010u8ztytio7gya"},{"name":"Spring Boot","_id":"ck470meac0013u8ztxa3w78ah"},{"name":"MyBatis","_id":"ck470mead0015u8ztcl2mzlt8"},{"name":"arduino","_id":"ck470mead0016u8zt8v8lrcar"},{"name":"传感器","_id":"ck470mead0019u8ztvpl2o6yw"},{"name":"栈","_id":"ck470mead001bu8zt6k8r0bss"},{"name":"四则运算","_id":"ck470meae001eu8zts85o0gz1"},{"name":"图","_id":"ck470meae001fu8ztmw5tcuse"},{"name":"最小生成树","_id":"ck470meae001iu8ztjhi6bmk7"},{"name":"数据结构","_id":"ck470meae001ju8zte4kscgfr"},{"name":"kubernetes","_id":"ck495sd5w0002213e6zywqcpx"},{"name":"vagrant","_id":"ck495sd5x0003213ekrp5ul6q"},{"name":"virtualbox","_id":"ck495sd5y0005213ephpq74t2"},{"name":"network","_id":"ck5c699pu00019bztfbpbkzah"},{"name":"linux","_id":"ck5c699pv00039bztj6eq5jti"},{"name":"tun","_id":"ck5c699pv00059bzte7wrnz7s"},{"name":"tap","_id":"ck5c699pv00069bztamv7p38p"},{"name":"Qt","_id":"ck5keq8ni0001ap3en8elrxxl"},{"name":"Qt Creator","_id":"ck5keq8nj0003ap3e1dmqsofx"}]}}
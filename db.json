{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/CefSharp-logo.png","path":"images/CefSharp-logo.png","modified":0,"renderable":0},{"_id":"source/images/DHTlib.png","path":"images/DHTlib.png","modified":0,"renderable":0},{"_id":"source/images/Kubernetes_logo.png","path":"images/Kubernetes_logo.png","modified":0,"renderable":0},{"_id":"source/images/MST.png","path":"images/MST.png","modified":0,"renderable":0},{"_id":"source/images/Qt-Gui-Example.png","path":"images/Qt-Gui-Example.png","modified":0,"renderable":0},{"_id":"source/images/RabbitMQ-Logo.png","path":"images/RabbitMQ-Logo.png","modified":0,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/arduino_library.png","path":"images/arduino_library.png","modified":0,"renderable":0},{"_id":"source/images/cuda.png","path":"images/cuda.png","modified":0,"renderable":0},{"_id":"source/images/dht_lcd_final.png","path":"images/dht_lcd_final.png","modified":0,"renderable":0},{"_id":"source/images/disk_cylinder.png","path":"images/disk_cylinder.png","modified":0,"renderable":0},{"_id":"source/images/disk_image.png","path":"images/disk_image.png","modified":0,"renderable":0},{"_id":"source/images/disk_sector.png","path":"images/disk_sector.png","modified":0,"renderable":0},{"_id":"source/images/dos_api.png","path":"images/dos_api.png","modified":0,"renderable":0},{"_id":"source/images/docker-logo.png","path":"images/docker-logo.png","modified":0,"renderable":0},{"_id":"source/images/dos_cal_result.png","path":"images/dos_cal_result.png","modified":0,"renderable":0},{"_id":"source/images/dos_image.png","path":"images/dos_image.png","modified":0,"renderable":0},{"_id":"source/images/gc-java.png","path":"images/gc-java.png","modified":0,"renderable":0},{"_id":"source/images/https-click.png","path":"images/https-click.png","modified":0,"renderable":0},{"_id":"source/images/idea_java_web.png","path":"images/idea_java_web.png","modified":0,"renderable":0},{"_id":"source/images/iic_address.png","path":"images/iic_address.png","modified":0,"renderable":0},{"_id":"source/images/iptables_process.png","path":"images/iptables_process.png","modified":0,"renderable":0},{"_id":"source/images/java-memory-layout.png","path":"images/java-memory-layout.png","modified":0,"renderable":0},{"_id":"source/images/java-web-develop.jpg","path":"images/java-web-develop.jpg","modified":0,"renderable":0},{"_id":"source/images/k8s-dashboard.png","path":"images/k8s-dashboard.png","modified":0,"renderable":0},{"_id":"source/images/lcd_iic.png","path":"images/lcd_iic.png","modified":0,"renderable":0},{"_id":"source/images/lcd_show.jpg","path":"images/lcd_show.jpg","modified":0,"renderable":0},{"_id":"source/images/matrix1.png","path":"images/matrix1.png","modified":0,"renderable":0},{"_id":"source/images/matrix_rotate.png","path":"images/matrix_rotate.png","modified":0,"renderable":0},{"_id":"source/images/mbr_structure.png","path":"images/mbr_structure.png","modified":0,"renderable":0},{"_id":"source/images/my_docker_ping.png","path":"images/my_docker_ping.png","modified":0,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":0,"renderable":0},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":0,"renderable":0},{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":0,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":0,"renderable":0},{"_id":"source/images/pasted-4.png","path":"images/pasted-4.png","modified":0,"renderable":0},{"_id":"source/images/virtualbox-error.png","path":"images/virtualbox-error.png","modified":0,"renderable":0},{"_id":"source/images/virtualbox-port-forward.png","path":"images/virtualbox-port-forward.png","modified":0,"renderable":0},{"_id":"source/images/vsc_run_code.png","path":"images/vsc_run_code.png","modified":0,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":0},{"_id":"source/images/windows_base_image.png","path":"images/windows_base_image.png","modified":0,"renderable":0},{"_id":"source/images/wxWidgets_home.png","path":"images/wxWidgets_home.png","modified":0,"renderable":0},{"_id":"source/images/wxWidgets_vs_settings.jpg","path":"images/wxWidgets_vs_settings.jpg","modified":0,"renderable":0},{"_id":"source/images/zk-logo.png","path":"images/zk-logo.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"8956a8e01046bd4fcf5178b6dd8b3275cc8b0225","modified":1679366899988},{"_id":"source/about/index.md","hash":"c60907f7105d01827fe4489f6c4fcebb8707aa72","modified":1679366900005},{"_id":"source/_posts/ASP-NET-in-Windows-Container.md","hash":"b3333e15a7d05ce8b0c124c7a83e03f13ae61600","modified":1679366899988},{"_id":"source/_posts/C_dynamic linkc.md","hash":"30d25786dbde35f99e6cb273e242b538d2152936","modified":1679366899988},{"_id":"source/_posts/Debug_PHP_source_code.md","hash":"c74a5cedc40e25eea8c63c741ed0ff55ffee04e6","modified":1679366899989},{"_id":"source/_posts/CefSharp_summary.md","hash":"c1bf50d7debee9931972349cabe17fa3dbcdd309","modified":1679366899989},{"_id":"source/_posts/Docker_Cgroups.md","hash":"37d6ef09d17333fe9f95dc151f349735e54a2d95","modified":1679366899989},{"_id":"source/_posts/Docker_Go_Namespace.md","hash":"11211d80a6f1bce6285707618def21e8aecd1299","modified":1679366899990},{"_id":"source/_posts/ES6_class.md","hash":"9ca9248ff2351a85fba814ffdf5d1fec65e87b38","modified":1679366899990},{"_id":"source/_posts/Elasticsearch_to_know.md","hash":"2938c0bd04a50058652fec682895a17b7af13e11","modified":1679366899990},{"_id":"source/_posts/Java_lookback_Java-Web.md","hash":"bcb4338952cbb9de9f2832aec0838913f1d5a1ee","modified":1679366899991},{"_id":"source/_posts/Java_GC.md","hash":"cd646d4d875994159f19728bb91759432590da22","modified":1679366899990},{"_id":"source/_posts/Java_synchronized_underlying.md","hash":"1487c543fec845a491dc49481a69a780278e4d1a","modified":1679366899991},{"_id":"source/_posts/Linu_Veth_and_Bridge.md","hash":"909981e096ce9826dc13618674ba78eed90d6e62","modified":1679366899991},{"_id":"source/_posts/Jenkin_and_docker.md","hash":"f5716a5aa0b77f3f56d22878ea4cc936cf672649","modified":1679366899991},{"_id":"source/_posts/Linux_iptables.md","hash":"eec784ad7f053ec68b2e4d8e827cab523a19fc7e","modified":1679366899992},{"_id":"source/_posts/MyBatis_getstart_lookback.md","hash":"2fbd051fa4fb081ae2d252ebc12c7c2e9f13cf3a","modified":1679366899992},{"_id":"source/_posts/OpenGL_matrix.md","hash":"beefddf6a9b58c727542c8b73cd089ecd30fe3d2","modified":1679372109381},{"_id":"source/_posts/Python_curve_fit.md","hash":"42bf4e1186683904d233f5350cb43b66c72f2f48","modified":1679366899992},{"_id":"source/_posts/Qt_begin.md","hash":"2c318703d98cbcc9a131e5b6149fb73eb0cd3edc","modified":1679366899992},{"_id":"source/_posts/Qt之布局管理.md","hash":"72d0c23b456b52f5aeecb7858b7987fb845dc0b1","modified":1679366899993},{"_id":"source/_posts/Spring-Boot集成MyBatis操作MySQL.md","hash":"b2986b9199360c1526b563a81ace9177de2264af","modified":1679366899993},{"_id":"source/_posts/RabbitMQ_DLX.md","hash":"859c6bd0bc9b2d8510912244a79b0fbdbec766f9","modified":1679366899993},{"_id":"source/_posts/Ubuntu_CUDA_cuDNN.md","hash":"7db4d8baf41e36dd3972690f261f17f8bc13188c","modified":1679366899994},{"_id":"source/_posts/Typescript_learn.md","hash":"24218b0fce284a2ecb9cc60ef7b4900283b18396","modified":1679366899993},{"_id":"source/_posts/Vagrant_Kubernetes_cluster.md","hash":"ecdb74510e728f6d128160eb4cfa3d0729a1f5ff","modified":1679366899994},{"_id":"source/_posts/Win32_assembly.md","hash":"4119bd3c8049ea8b4ed010a7300a69cacd5db496","modified":1679366899994},{"_id":"source/_posts/arduino_DTH11.md","hash":"3e61f9c82f372c9f0ad8027fa6fe9dd2fbf10129","modified":1679366899995},{"_id":"source/_posts/assembly_int21H.md","hash":"5ab6eece220d0adfd0e65041c5ee746889c69309","modified":1679366899995},{"_id":"source/_posts/bochs下启动.md","hash":"6935c61e14b1af4785f02af49b1bcb3a70ac033e","modified":1679366899995},{"_id":"source/_posts/docker-Linux-Namespace-intro.md","hash":"73be1654cc254d879c5500aa42bff846e7c5d4f1","modified":1679366899996},{"_id":"source/_posts/core_dump_in_docker.md","hash":"d3f3e70f1e762cffff1a6f2891c391627ce7a919","modified":1679366899995},{"_id":"source/_posts/ftplib_source.md","hash":"d3a82c33fdb8abec831eaf8fba3ac645cd8cb4df","modified":1679366899996},{"_id":"source/_posts/gRPC_learn.md","hash":"830666abf3d44deba7c93a492008378cb1817754","modified":1679366899996},{"_id":"source/_posts/gdb_use.md","hash":"1faa906e9a8f26a9238663a3cd30618107bfc06e","modified":1679366899996},{"_id":"source/_posts/go_sync_WaitGroup.md","hash":"f4f57a706397f29ac293841f783b4cb5338f400f","modified":1679366899997},{"_id":"source/_posts/https_more.md","hash":"2e4593746b1c2e7c671df3e67474694055033c43","modified":1679366899997},{"_id":"source/_posts/matrix.md","hash":"5db64998362a47aa1fb6c6613df58e75f49a8e70","modified":1679366899997},{"_id":"source/_posts/min_spanning_tree.md","hash":"44da5d9af7b5d28c2e676a5d9872db127eb7adc0","modified":1679366899997},{"_id":"source/_posts/puppeteer使用例子.md","hash":"01cde52333ba6dcf282266b42c59eed83b509da1","modified":1679366899998},{"_id":"source/_posts/stack_si_ze.md","hash":"474c1f0ce1044ff75483a6ccfcef47bcb6c423cf","modified":1679366900003},{"_id":"source/_posts/step_to_step_Docker之Docker_network_underlying.md","hash":"7605963893a66a45a702a07bc6814ea79c3cbce7","modified":1679366900004},{"_id":"source/_posts/wxWidgets使用.md","hash":"4b5e2e0f400d96bcdbafe6320a29d13748636d38","modified":1679366900004},{"_id":"source/_posts/tun-tap.md","hash":"703af3916c98ae5d5b6b54e9c5fddfdd359842ab","modified":1679366900004},{"_id":"source/categories/index.md","hash":"a5c1ee1c93713b4f39baab41208823763a4fe512","modified":1679366900005},{"_id":"source/_posts/zookeeper_cluster_lock.md","hash":"149f1e7d4384b1079d831f5c1c426b04a3f0ebf7","modified":1679366900005},{"_id":"source/images/MST.png","hash":"3232baf855e0d3940cf7f5d9404ec471f227c541","modified":1679366900008},{"_id":"source/images/Qt-Gui-Example.png","hash":"2d9bc040f066b69ab70b239a760038cbb6206241","modified":1679366900008},{"_id":"source/images/RabbitMQ-Logo.png","hash":"fd82f2684433cdfd06f7b12a60b67e8007b53d76","modified":1679366900009},{"_id":"source/images/disk_cylinder.png","hash":"8bd6426c3e1a205d1f1cff4b4b9e0d7666711ff7","modified":1679366900021},{"_id":"source/images/disk_sector.png","hash":"622ad4c77ee8d0330ca4d0e2fa143776b6bc09bd","modified":1679366900023},{"_id":"source/images/docker-logo.png","hash":"7eb0b5f3886839a658170c8860b85c0cd8f84c78","modified":1679366900023},{"_id":"source/images/dos_cal_result.png","hash":"c2b27f00d42c3a224a9fd9641831102899ad2d1c","modified":1679366900025},{"_id":"source/images/iic_address.png","hash":"a65e5e9e7cc5704d8188dff98fc8548be8a20e00","modified":1679366900037},{"_id":"source/images/java-web-develop.jpg","hash":"77a229d177054c0315d2bf5ea2fcfa374a79010e","modified":1679366900039},{"_id":"source/images/matrix1.png","hash":"6c3fe3f4d255028c280db037fcfc3fe1b19496c6","modified":1679366900070},{"_id":"source/images/matrix_rotate.png","hash":"26b508d5a630071bed935eda2c1c8a1461cc1ccc","modified":1679366900071},{"_id":"source/images/pasted-1.png","hash":"1fced657471e4147447d4262d73b15e8ba2d0969","modified":1679366900074},{"_id":"source/images/pasted-3.png","hash":"d68fe9cffc9f8cd4bdd239f2b84326d96e018838","modified":1679366900075},{"_id":"source/images/pasted-4.png","hash":"84969395488f6164bac811d9368889fc6a46d032","modified":1679366900075},{"_id":"source/images/virtualbox-port-forward.png","hash":"0098a4aff2240d247aec495d75ce631343f8b7a3","modified":1679366900077},{"_id":"source/images/vsc_run_code.png","hash":"55b33237cacf5edf71586ae6f1aa09b20ab1bb9d","modified":1679366900077},{"_id":"source/images/windows_base_image.png","hash":"a8c5ba1f1372787843f8630df9ce2430418acdbe","modified":1679366900079},{"_id":"source/tags/index.md","hash":"dc9f663548f9c308dafd77390c6f4f733d430efc","modified":1679366900083},{"_id":"source/images/DHTlib.png","hash":"acd00e5e378d0b700c7f8aec3fe5acffef2560d0","modified":1679366900007},{"_id":"source/images/Kubernetes_logo.png","hash":"c28cb04125232bfa95cde5275e05fd92f59530f0","modified":1679366900008},{"_id":"source/images/alipay.jpg","hash":"6237946d4eacbd2851873579339d8466250faa34","modified":1679366900010},{"_id":"source/images/arduino_library.png","hash":"2e17062c3b2c4b8599747919fff685dafee73bb6","modified":1679366900011},{"_id":"source/images/cuda.png","hash":"3a43233bae96b5c4258d399eddcfbe59be1fdad4","modified":1679366900012},{"_id":"source/images/dos_api.png","hash":"bbe3b552257c2fbbbcc261436a4370847d0f518f","modified":1679366900024},{"_id":"source/images/gc-java.png","hash":"9092729eb550932b00997d61e8e186fac9063310","modified":1679366900027},{"_id":"source/images/idea_java_web.png","hash":"99b491ebb0c26b0920ef26dbf9b387cf491f2c10","modified":1679366900036},{"_id":"source/images/iptables_process.png","hash":"ce5f79aa6ce91408d6bc673472a086945c320804","modified":1679366900038},{"_id":"source/images/java-memory-layout.png","hash":"32b4b575c5d7283c0762a859bf3a2d8fd389be7c","modified":1679366900038},{"_id":"source/images/mbr_structure.png","hash":"41491ec993541f060ee0231a8574e3a369b95b74","modified":1679366900072},{"_id":"source/images/my_docker_ping.png","hash":"a8018f5ce218be3c9baed2d8f52133e4e584c820","modified":1679366900073},{"_id":"source/images/pasted-0.png","hash":"80965aa4d35b515f30842f456ce1dd5bc3fca720","modified":1679366900073},{"_id":"source/images/pasted-2.png","hash":"22a9816479fb36607ad74979f436fcf6d7322fe0","modified":1679366900074},{"_id":"source/images/virtualbox-error.png","hash":"0001f7d09a3ac640a83900f1ef7426b089cd3315","modified":1679366900076},{"_id":"source/images/wechatpay.jpg","hash":"5b1138859cc1d6da1527026a5ab90a5294cccaa6","modified":1679366900078},{"_id":"source/images/wxWidgets_home.png","hash":"4e83e614905e89eee0c16d20901250d77eee5b75","modified":1679366900080},{"_id":"source/images/CefSharp-logo.png","hash":"01cd3aa1cd8cc3ee19c2de584d80c90d3d86e413","modified":1679366900006},{"_id":"source/images/k8s-dashboard.png","hash":"d15237ef8e4aed5fdf77b895e163872125f60544","modified":1679366900040},{"_id":"source/images/wxWidgets_vs_settings.jpg","hash":"e852be3b763103b3d6d51bbc4df5cdd9a8a9e124","modified":1679366900081},{"_id":"source/images/disk_image.png","hash":"54a003b601634d0b092335ca2c16bc7750b5a67b","modified":1679366900022},{"_id":"source/images/dos_image.png","hash":"e55e571328eb8611ebec4c3148ea83d84a0c9e35","modified":1679366900026},{"_id":"source/images/zk-logo.png","hash":"43ad9827a27c2193de185378e02dbe599ece8767","modified":1679366900082},{"_id":"source/images/lcd_iic.png","hash":"216c4a77a18c5ed8ae1120f7c30e3a0e641d84cf","modified":1679366900044},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1679367062793},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"3205799fc6f50b2093e02bae9b70aa96ba0d2901","modified":1679367063344},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"463e3097d6e245105f6612994215ab5c637cae28","modified":1679367063346},{"_id":"node_modules/hexo-theme-next/README.md","hash":"36c4b25587ca494102323dab5a38de5490451a64","modified":1679367062804},{"_id":"node_modules/hexo-theme-next/package.json","hash":"a192fe2e0904b490c885e8545a409536b41ef46e","modified":1679367062783},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1679367062787},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1679367062786},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1679367063342},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1679367062801},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"46026e98fe279a9db5d68bf91afa5d8e41f9ccfb","modified":1679367063347},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"c4fc18c338309271d1afe737e6c404a6fa313bbc","modified":1679367063349},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"4bbdb4284afe495437cf7817b97b45f60e12d1e4","modified":1679367063351},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"8b6d4a8a056df4362d20ae1f6ac7a590dd7246e5","modified":1679367063353},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"74133a827c104d1d84509177f283947fe9327a80","modified":1679367063348},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"1e256c8df039ddeba66526c5eb2d6c79177a7fc6","modified":1679367063354},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"2436942610e38b73b175cb0f8ed1f8f23d42a7ce","modified":1679367063355},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"c4bad93b23c7eefa730fd7fec5b05ace3ce9ca4d","modified":1679367063356},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"4d6efcdaea89dfe751b7707d91858bf33d3538b7","modified":1679367063357},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"a0906702d3c87d0e1661e300ad0bdf7e679a3d91","modified":1679367063357},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"8a4da307b4a19e3c96b90a07a2da8dc5d50e5d9e","modified":1679367063359},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"25ee0d5b9a0464a91af7d2efb33293c09ad5abdf","modified":1679367063359},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"10d80915c41328f31a4f2d8ac736bba020f373d8","modified":1679367063359},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"fa7c43ec872aee2739b25dd7260e0764ea9e26fd","modified":1679367063360},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"16b96783ba363255b4c8156c3e1efebdb37676f8","modified":1679367063361},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"034c5a0df49144e8f16ae2300dba9fde58b9329e","modified":1679367063362},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"4fac74a39d3906c4a727476be4750530a505933a","modified":1679367063364},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"37d9af426b040004841273d163059cd49cd67d65","modified":1679367063364},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"890f87f6a33ad8452b771607d4c3ff14810b35fa","modified":1679367063365},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"fbaed3039ed8605b81422003a4ecb2a6514e339d","modified":1679367063366},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"a6ba04c743a5b494ac56612ce6b858d9ae3ae1bd","modified":1679367063369},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5cebea74f3198a4a20cacf23069c3b91e4f03d85","modified":1679367063370},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"8ab7219563dab13885840207a86055000d173465","modified":1679367063370},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"9fdce9d316e205fc132b2181254ef3b04007a97d","modified":1679367063371},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1679367062806},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1679367062811},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1679367062824},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1679367062884},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1679367063156},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1679367062918},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1679367063167},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"ac3c4a7616ea80f0d32d68d6e53233952ba756dc","modified":1679367062795},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1679367062789},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1679367062792},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"9bbdbb0656505acceef9b9895a576164175fe888","modified":1679367062799},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1679367063132},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"7e8268fd5cbd552322b276f52459fd187c2453d2","modified":1679367063155},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1679367063161},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1679367062834},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"c40760b559c516677c8b11a00ba50c011f2079fd","modified":1679367062843},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1679367062887},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1679367062923},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1679367063173},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1679367063171},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1679367062870},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1679367062839},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"aa37f8e98208177b63e3328d6e53b022c6edf3b2","modified":1679367062876},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1679367062911},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1679367062712},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1679367063158},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1679367062677},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1679367062737},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"ce8477e7fb226525bae5872cd68a1c2c23ad50c8","modified":1679367062745},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1679367062768},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1679367062690},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1679367062699},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1679367062750},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1679367062757},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1679367062754},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"fd24abfaba4d91923ddb6aecf0268b216678c8bd","modified":1679367062759},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1679367062760},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1679367062644},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1679367062646},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1679367062714},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1679367062648},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1679367062706},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1679367062729},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1679367062741},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1679367062724},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1679367062763},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1679367062761},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1679367062773},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1679367062783},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1679367063177},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1679367063193},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1679367063302},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1679367063291},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1679367063174},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1679367062550},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1679367063175},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1679367063175},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1679367063340},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1679367063341},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1679367062640},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1679367062661},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1679367062663},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1679367062672},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1679367062746},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1679367062752},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1679367062765},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1679367062771},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1679367062779},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1679367062858},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1679367062860},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1679367062815},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1679367062906},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1679367062907},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1679367062862},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1679367063166},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1679367062817},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1679367062823},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1679367062914},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1679367063168},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1679367063160},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1679367063138},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1679367063142},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1679367063145},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1679367063150},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1679367063148},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"3f28cc4411c0ffc0e41b7970d5ab329c7e46f497","modified":1679367063152},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1679367062808},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1679367062863},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1679367062898},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"70342218473a6e6aa9148de06bfffe121afb8548","modified":1679367063164},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1679367062814},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1679367062832},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1679367062853},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1679367062855},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1679367062873},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1679367062910},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1679367063119},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"181f69b6718c7a8642a88652260cc0a26084a3ee","modified":1679367063170},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1679367062903},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1679367062829},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1679367062852},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1679367063169},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1679367062826},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1679367062836},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1679367062837},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1679367062885},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1679367062849},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1679367062897},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1679367063170},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1679367062879},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1679367062902},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1679367062886},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1679367062809},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1679367062900},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1679367062819},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1679367062841},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1679367062888},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1679367062881},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1679367062909},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1679367063104},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1679367062717},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1679367062710},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1679367062749},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1679367062670},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1679367062776},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1679367062652},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1679367062782},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1679367062684},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1679367062673},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1679367062681},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1679367062667},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1679367062718},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1679367062731},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1679367062700},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1679367062780},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1679367063296},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1679367063254},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1679367063307},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1679367063211},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1679367063298},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"0c490e9ba82efbb8bdf8465e6b537fafd51e1ed7","modified":1679367062749},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1679367062694},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1679367062762},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1679367062769},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1679367063203},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1679367063260},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1679367063319},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1679367063274},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1679367063297},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1679367063208},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1679367063229},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1679367063233},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1679367063281},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1679367063300},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1679367063304},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1679367063336},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1679367063339},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1679367063285},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"77b85d4de5ab747e04008ab31200311b29748740","modified":1679367063179},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1679367063186},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1679367063189},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1679367063194},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1679367063286},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"7fecfb76420f786d6bf60218a81705bb48fb1d18","modified":1679367063187},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"d856127cd7e0a28a88edf0b2eb860ede9c3fdb60","modified":1679367063183},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"cef9c5f9524fd01b59b0a89e51904b42cbdedc8c","modified":1679367063195},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1679367063190},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1679367063198},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1679367063186},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1679367063286},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"4266eed6f75625bb30ef0280dc5d4093e7c3beb1","modified":1679367063188},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1679367063197},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1679367063192},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1679367063288},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1679367063200},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1679367062634},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1679367062704},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1679367062708},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1679367062740},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1679367062659},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1679367062703},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1679367062775},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1679367062656},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1679367062683},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1679367062686},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1679367062720},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1679367062702},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1679367062733},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1679367062781},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1679367062723},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1679367062738},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1679367062609},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1679367062735},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1679367062725},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1679367062697},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1679367062743},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1679367062764},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1679367063226},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1679367063232},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1679367063261},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1679367063322},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1679367063339},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1679367063265},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1679367063309},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1679367063310},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1679367063311},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1679367063312},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1679367063314},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1679367063315},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1679367063318},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1679367063317},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"40c9839d3288c3b7de0bf38ac2e18f6c8eba6227","modified":1679367063319},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1679367063252},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1679367063255},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1679367063258},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"77550e0d3e029b7458e35d8c5ae1fbd612c9673b","modified":1679367063267},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1679367063292},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1679367063323},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1679367063340},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"0c79462439b1361034a03590cd69a8abb3a678a6","modified":1679367063271},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1679367063222},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1679367063257},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"b750af2fb833c10c4313b5a4258237161a7833d7","modified":1679367063293},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1679367063272},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1679367063334},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1679367063335},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1679367063278},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1679367063321},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1679367063323},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1679367063326},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1679367063325},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1679367063330},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1679367063329},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1679367063332},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1679367063333},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1679367063336},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1679367063247},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1679367063280},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1679367063216},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1679367063259},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1679367063282},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1679367063289},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1679367063290},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1679367063294},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1679367063303},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1679367063305},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1679367063338},{"_id":"source/images/https-click.png","hash":"8340d2c0ec83eca1a0f1ad6fd466ffeec47d6c9d","modified":1679366900036},{"_id":"source/images/dht_lcd_final.png","hash":"9ee64a3de26c5853afd96af60958f5542bb0d94d","modified":1679366900020},{"_id":"source/images/lcd_show.jpg","hash":"753608d5529a96c65995eb47f30c2adc031dd560","modified":1679366900070}],"Category":[{"name":"Docker","_id":"clfhq40kr00042o3m20nggyko"},{"name":"C","_id":"clfhq40kv000a2o3m0y6x0r89"},{"name":"C#","_id":"clfhq40kw000f2o3mg1hfhjps"},{"name":"PHP","_id":"clfhq40ky000n2o3m8z7maw0n"},{"name":"Golang","parent":"clfhq40kr00042o3m20nggyko","_id":"clfhq40kz000t2o3mes5t2j7e"},{"name":"Java","_id":"clfhq40l1000z2o3m5v7t50nl"},{"name":"JavaScript","_id":"clfhq40l200142o3m7ou515hp"},{"name":"linux","_id":"clfhq40l9001v2o3mdoq11zhr"},{"name":"ci","_id":"clfhq40la00232o3mgutb0py0"},{"name":"Linux","_id":"clfhq40lb002a2o3macxs5dez"},{"name":"Python","_id":"clfhq40ld002g2o3m15h98sqa"},{"name":"C++","_id":"clfhq40le002n2o3mgynta35v"},{"name":"RabbitMQ","_id":"clfhq40lg002z2o3m97wqguv6"},{"name":"MyBatis","parent":"clfhq40l1000z2o3m5v7t50nl","_id":"clfhq40li00352o3m23ha5uc5"},{"name":"机器学习","_id":"clfhq40lj003b2o3mazd51ii9"},{"name":"Javascript","_id":"clfhq40lj003h2o3mc6wr308d"},{"name":"kubernetes","_id":"clfhq40lk003n2o3m4uyeh23m"},{"name":"单片机","_id":"clfhq40lk003s2o3mae7n48wh"},{"name":"OS","_id":"clfhq40ll003v2o3m8s9f89m7"},{"name":"nodejs","_id":"clfhq40ll00402o3md9qi67ah"},{"name":"c","_id":"clfhq40lm00432o3mdk67d97v"},{"name":"Go","_id":"clfhq40lm00462o3m5hnceknl"},{"name":"protocol\t","_id":"clfhq40ln004e2o3m9z8w5n4w"},{"name":"Qt","parent":"clfhq40le002n2o3mgynta35v","_id":"clfhq40ln004j2o3m4lagg00t"},{"name":"Matrix","_id":"clfhq40lo004m2o3mezr32phb"},{"name":"算法","_id":"clfhq40lo004p2o3m89r31ixq"},{"name":"Linux","parent":"clfhq40kr00042o3m20nggyko","_id":"clfhq40lp00502o3m0glzc8m7"},{"name":"wxWidgets","parent":"clfhq40le002n2o3mgynta35v","_id":"clfhq40lq00572o3m32xkerkb"},{"name":"gRPC","parent":"clfhq40lm00462o3m5hnceknl","_id":"clfhq40lq005b2o3mbmbl2dog"},{"name":"https","parent":"clfhq40ln004e2o3m9z8w5n4w","_id":"clfhq40lr005f2o3m5lgyc8ue"},{"name":"css","parent":"clfhq40lo004m2o3mezr32phb","_id":"clfhq40lr005j2o3mbkwvbtpo"},{"name":"矩阵","_id":"clfhqsksj007u2o3m7d5g5ard"}],"Data":[],"Page":[{"title":"about","date":"2019-08-27T02:58:30.000Z","_content":"一个数学爱好者\n* [SF](https://segmentfault.com/u/salamander)\n* [Github](https://github.com/pigLoveRabbit520)","source":"about/index.md","raw":"title: about\ndate: 2019-08-27 10:58:30\n---\n一个数学爱好者\n* [SF](https://segmentfault.com/u/salamander)\n* [Github](https://github.com/pigLoveRabbit520)","updated":"2023-03-21T02:48:20.005Z","path":"about/index.html","comments":1,"layout":"page","_id":"clfhq40kk00002o3m6y7v4aad","content":"<p>一个数学爱好者 * <a\r\nhref=\"https://segmentfault.com/u/salamander\">SF</a> * <a\r\nhref=\"https://github.com/pigLoveRabbit520\">Github</a></p>\r\n","site":{"data":{}},"excerpt":"","more":"<p>一个数学爱好者 * <a\r\nhref=\"https://segmentfault.com/u/salamander\">SF</a> * <a\r\nhref=\"https://github.com/pigLoveRabbit520\">Github</a></p>\r\n"},{"title":"categories","date":"2021-03-21T03:02:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-03-21 11:02:55\ntype: \"categories\"\n---\n","updated":"2023-03-21T02:48:20.005Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clfhq40kq00022o3mg3yt6ouw","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: \"tags\"\ntype: tags\nlayout: \"tags\"\n---","date":"2023-03-21T02:48:20.083Z","updated":"2023-03-21T02:48:20.083Z","path":"tags/index.html","comments":1,"_id":"clfhq40kt00062o3mdibx07k5","content":"\r\n","site":{"data":{}},"excerpt":"","more":"\r\n"}],"Post":[{"title":"ASP.NET in Windows Container","author":"pigLoveRabbit","date":"2022-05-11T02:19:00.000Z","_content":"平常我们用的都是`Linux Container`，这些容器用的都是Linux的内核，而今天我们要记录的是`Windows Container`，就是讲这些容器用的是Windows的内核，Windows内核是啥？那就是[Windows NT](https://zh.m.wikipedia.org/zh-hans/Windows_NT)。  \n查看你的Windows内核版本，可以用\n```PowerShell\nGet-ComputerInfo | Select WindowsProductName, WindowsVersion, WindowsInstallationType, OsServerLevel, OsVersion, OsHardwareAbstractionLayer\n```\n类似输出\n```\nWindowsProductName         : Windows 10 Pro for Workstations\nWindowsVersion             : 2009\nWindowsInstallationType    : Client\nOsServerLevel              :\nOsVersion                  : 10.0.19044\nOsHardwareAbstractionLayer : 10.0.19041.1566\n```\n上面NT的版本是10.0.19044。\n\n环境  \n* 安装 [.NET 6 SDK](https://dotnet.microsoft.com/en-us/download/dotnet/6.0)\n* Windows Server 2022\n* Docker（针对Windows Server的docker，没有UI的）\n* 安装一个喜欢的代码编辑器，例如 Visual Studio(Code)。\n\n<!-- more -->\n\n## Docker\n若要在 Windows Server 上安装 Docker，可以使用由 Microsoft 发布的 OneGet 提供程序 PowerShell 模块（称为 DockerMicrosoftProvider）。 此提供程序启用 Windows 中的容器功能，并安装 Docker 引擎和客户端。 以下是操作方法：  \n\n打开提升的 PowerShell 会话，从 PowerShell 库安装 Docker-Microsoft PackageManagement 提供程序。\n\n```PowerShell\nInstall-Module -Name DockerMsftProvider -Repository PSGallery -Force\n```\n如果系统提示安装 NuGet 提供程序，还请键入 Y 进行安装。  \n\n如果在打开 PowerShell 库时遇到错误，则可能需要将 PowerShell 客户端使用的 TLS 版本设置为 TLS 1.2。 为此，请运行以下命令：\n\n```PowerShell\n# Set the TLS version used by the PowerShell client to TLS 1.2.\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12;\n```\n使用 PackageManagement PowerShell 模块安装最新版本的 Docker。  \n\n```PowerShell\nInstall-Package -Name docker -ProviderName DockerMsftProvider\n```\nPowerShell 询问是否信任包源“DockerDefault”时，键入 A 以继续进行安装。  \n\n在安装完成后，请重启计算机。\n\n```PowerShell\nRestart-Computer -Force\n```\n\n## Windows Container\n我们知道Linux容器的Base Image是alpine或者scratch， 那Windows容器的Base Image是什么呢？其实微软官方也有[介绍](https://docs.microsoft.com/en-us/virtualization/windowscontainers/manage-containers/container-base-images)了。  \n\n![upload successful](/images/windows_base_image.png)  \n好了，我们进入正题。  \n\n要确保当前Docker是使用`Windows Container`的，我们可以拉个镜像\n```\ndocker pull mcr.microsoft.com/windows/nanoserver:ltsc2022-amd64\n```\n如果看到错误消息“no matching manifest for linux/amd64 in the manifest list entries”，那说明 Docker 用的是Linux 容器。   \n注意：`mcr.microsoft.com`上的镜像在国内访问挺慢的，你可以先把镜像pull到阿里云，然后再在你电脑上拉取。  \n我们跑一个简单容器（执行cmd）\n```\ndocker run -it mcr.microsoft.com/windows/nanoserver:ltsc2022-amd64  cmd.exe\n```\n在容器中执行一些命令：\n```\nC:\\>dir\n Volume in drive C has no label.\n Volume Serial Number is F63B-D098\n\n Directory of C:\\\n\n05/05/2022  10:35 AM             5,510 License.txt\n05/05/2022  10:37 AM    <DIR>          Users\n05/11/2022  03:37 PM    <DIR>          Windows\n               1 File(s)          5,510 bytes\n               2 Dir(s)  21,302,714,368 bytes free\n               \nC:\\>hostname\nfbb1d7595c03\n\nC:\\>ipconfig/all\n\nWindows IP Configuration\n\n   Host Name . . . . . . . . . . . . : fbb1d7595c03\n   Primary Dns Suffix  . . . . . . . :\n   Node Type . . . . . . . . . . . . : Hybrid\n   IP Routing Enabled. . . . . . . . : No\n   WINS Proxy Enabled. . . . . . . . : No\n   DNS Suffix Search List. . . . . . : lan\n\nEthernet adapter vEthernet (Ethernet):\n\n   Connection-specific DNS Suffix  . : lan\n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Container Adapter\n   Physical Address. . . . . . . . . : 00-15-5D-E5-CC-89\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::a0c8:ad95:72dd:fe6f%17(Preferred)\n   IPv4 Address. . . . . . . . . . . : 172.30.150.168(Preferred)\n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : 172.30.144.1\n   DNS Servers . . . . . . . . . . . : 172.30.144.1\n                                       10.0.2.3\n   NetBIOS over Tcpip. . . . . . . . : Disabled\n   Connection-specific DNS Suffix Search List :\n                                       lan\n```\n可以看到，容器中目录还有hostname，网络都是隔离的。  \n\n\n## 运行一个ASP.NET程序\ndotnet 6已经可以很方便的创建asp程序的骨架了，创建新目录myweb, 终端输入`dotnet new web`，然后sdk就帮你创建了一个hello world程序。  \n看一下Program.cs的内容：\n```\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/\", () => \"Hello World!\");\n\napp.Run();\n```\n恩，蛮简单的，我们在宿主机上运行`dotnet run`，输出\n```\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:7174\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5017\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: /your_path/myweb/\n```\n`curl http://localhost:5017`返回了`Hello World!`，速度阔以的。  \n\n\n为了在Docker中运行程序，我们需要创建一个Dockerfile\n```\nFROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env\nWORKDIR /app\n\n# Copy everything\nCOPY . ./\n# Restore as distinct layers\nRUN dotnet restore\n# Build and publish a release\nRUN dotnet publish -c Release -o out\n\n# Build runtime image\nFROM mcr.microsoft.com/dotnet/aspnet:6.0\nWORKDIR /app\nCOPY --from=build-env /app/out .\nENTRYPOINT [\"dotnet\", \"myweb.dll\"]\n```\n当然，为了docker build能快点，我们应该添加一个`.dockerignore`文件\n```\n# Build results\n[Dd]ebug/\n[Rr]elease/\nx64/\n[Bb]in/\n[Oo]bj/\n# build folder is nowadays used for build scripts and should not be ignored\n#build/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n```\n好了，现在执行`docker build -t fuck_image .`，构建镜像成功后，可以看到\n```\nPS C:\\Users\\Administrator> docker images\nREPOSITORY                             TAG              IMAGE ID       CREATED        SIZE\nfuck_image                             latest           a8b482b53388   5 hours ago   392MB\n```\n我们跑个容器`docker run -d --name fuck_asp  fuck_image`，查看容器日志`docker logs fuck_asp`，发现它的http端口是80\n```\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://[::]:80\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Production\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: C:\\app\\\n```\n进入容器执行curl\n```\ndocker exec -it fuck_asp cmd.exe\nC:\\app>curl http://localhost\nHello World!\n```\nOK了。  \n注：你的Windows Server如果是跑在虚拟机中的，获取虚拟机的ip有个命令：`VBoxManage guestproperty get \"Win Server2022\" \"/VirtualBox/GuestInfo/Net/0/V4/IP\"`\n\n\n参考：\n* [入门：准备适用于容器的 Windows](https://docs.microsoft.com/zh-cn/virtualization/windowscontainers/quick-start/set-up-environment?tabs=Windows-Server)\n* [Tutorial: Containerize a .NET app](https://docs.microsoft.com/en-us/dotnet/core/docker/build-container?tabs=windows)","source":"_posts/ASP-NET-in-Windows-Container.md","raw":"title: ASP.NET in Windows Container\nauthor: pigLoveRabbit\ntags:\n  - Docker\n  - WIndows\ncategories:\n  - Docker\ndate: 2022-05-11 10:19:00\n---\n平常我们用的都是`Linux Container`，这些容器用的都是Linux的内核，而今天我们要记录的是`Windows Container`，就是讲这些容器用的是Windows的内核，Windows内核是啥？那就是[Windows NT](https://zh.m.wikipedia.org/zh-hans/Windows_NT)。  \n查看你的Windows内核版本，可以用\n```PowerShell\nGet-ComputerInfo | Select WindowsProductName, WindowsVersion, WindowsInstallationType, OsServerLevel, OsVersion, OsHardwareAbstractionLayer\n```\n类似输出\n```\nWindowsProductName         : Windows 10 Pro for Workstations\nWindowsVersion             : 2009\nWindowsInstallationType    : Client\nOsServerLevel              :\nOsVersion                  : 10.0.19044\nOsHardwareAbstractionLayer : 10.0.19041.1566\n```\n上面NT的版本是10.0.19044。\n\n环境  \n* 安装 [.NET 6 SDK](https://dotnet.microsoft.com/en-us/download/dotnet/6.0)\n* Windows Server 2022\n* Docker（针对Windows Server的docker，没有UI的）\n* 安装一个喜欢的代码编辑器，例如 Visual Studio(Code)。\n\n<!-- more -->\n\n## Docker\n若要在 Windows Server 上安装 Docker，可以使用由 Microsoft 发布的 OneGet 提供程序 PowerShell 模块（称为 DockerMicrosoftProvider）。 此提供程序启用 Windows 中的容器功能，并安装 Docker 引擎和客户端。 以下是操作方法：  \n\n打开提升的 PowerShell 会话，从 PowerShell 库安装 Docker-Microsoft PackageManagement 提供程序。\n\n```PowerShell\nInstall-Module -Name DockerMsftProvider -Repository PSGallery -Force\n```\n如果系统提示安装 NuGet 提供程序，还请键入 Y 进行安装。  \n\n如果在打开 PowerShell 库时遇到错误，则可能需要将 PowerShell 客户端使用的 TLS 版本设置为 TLS 1.2。 为此，请运行以下命令：\n\n```PowerShell\n# Set the TLS version used by the PowerShell client to TLS 1.2.\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12;\n```\n使用 PackageManagement PowerShell 模块安装最新版本的 Docker。  \n\n```PowerShell\nInstall-Package -Name docker -ProviderName DockerMsftProvider\n```\nPowerShell 询问是否信任包源“DockerDefault”时，键入 A 以继续进行安装。  \n\n在安装完成后，请重启计算机。\n\n```PowerShell\nRestart-Computer -Force\n```\n\n## Windows Container\n我们知道Linux容器的Base Image是alpine或者scratch， 那Windows容器的Base Image是什么呢？其实微软官方也有[介绍](https://docs.microsoft.com/en-us/virtualization/windowscontainers/manage-containers/container-base-images)了。  \n\n![upload successful](/images/windows_base_image.png)  \n好了，我们进入正题。  \n\n要确保当前Docker是使用`Windows Container`的，我们可以拉个镜像\n```\ndocker pull mcr.microsoft.com/windows/nanoserver:ltsc2022-amd64\n```\n如果看到错误消息“no matching manifest for linux/amd64 in the manifest list entries”，那说明 Docker 用的是Linux 容器。   \n注意：`mcr.microsoft.com`上的镜像在国内访问挺慢的，你可以先把镜像pull到阿里云，然后再在你电脑上拉取。  \n我们跑一个简单容器（执行cmd）\n```\ndocker run -it mcr.microsoft.com/windows/nanoserver:ltsc2022-amd64  cmd.exe\n```\n在容器中执行一些命令：\n```\nC:\\>dir\n Volume in drive C has no label.\n Volume Serial Number is F63B-D098\n\n Directory of C:\\\n\n05/05/2022  10:35 AM             5,510 License.txt\n05/05/2022  10:37 AM    <DIR>          Users\n05/11/2022  03:37 PM    <DIR>          Windows\n               1 File(s)          5,510 bytes\n               2 Dir(s)  21,302,714,368 bytes free\n               \nC:\\>hostname\nfbb1d7595c03\n\nC:\\>ipconfig/all\n\nWindows IP Configuration\n\n   Host Name . . . . . . . . . . . . : fbb1d7595c03\n   Primary Dns Suffix  . . . . . . . :\n   Node Type . . . . . . . . . . . . : Hybrid\n   IP Routing Enabled. . . . . . . . : No\n   WINS Proxy Enabled. . . . . . . . : No\n   DNS Suffix Search List. . . . . . : lan\n\nEthernet adapter vEthernet (Ethernet):\n\n   Connection-specific DNS Suffix  . : lan\n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Container Adapter\n   Physical Address. . . . . . . . . : 00-15-5D-E5-CC-89\n   DHCP Enabled. . . . . . . . . . . : No\n   Autoconfiguration Enabled . . . . : Yes\n   Link-local IPv6 Address . . . . . : fe80::a0c8:ad95:72dd:fe6f%17(Preferred)\n   IPv4 Address. . . . . . . . . . . : 172.30.150.168(Preferred)\n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : 172.30.144.1\n   DNS Servers . . . . . . . . . . . : 172.30.144.1\n                                       10.0.2.3\n   NetBIOS over Tcpip. . . . . . . . : Disabled\n   Connection-specific DNS Suffix Search List :\n                                       lan\n```\n可以看到，容器中目录还有hostname，网络都是隔离的。  \n\n\n## 运行一个ASP.NET程序\ndotnet 6已经可以很方便的创建asp程序的骨架了，创建新目录myweb, 终端输入`dotnet new web`，然后sdk就帮你创建了一个hello world程序。  \n看一下Program.cs的内容：\n```\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\napp.MapGet(\"/\", () => \"Hello World!\");\n\napp.Run();\n```\n恩，蛮简单的，我们在宿主机上运行`dotnet run`，输出\n```\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:7174\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5017\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: /your_path/myweb/\n```\n`curl http://localhost:5017`返回了`Hello World!`，速度阔以的。  \n\n\n为了在Docker中运行程序，我们需要创建一个Dockerfile\n```\nFROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env\nWORKDIR /app\n\n# Copy everything\nCOPY . ./\n# Restore as distinct layers\nRUN dotnet restore\n# Build and publish a release\nRUN dotnet publish -c Release -o out\n\n# Build runtime image\nFROM mcr.microsoft.com/dotnet/aspnet:6.0\nWORKDIR /app\nCOPY --from=build-env /app/out .\nENTRYPOINT [\"dotnet\", \"myweb.dll\"]\n```\n当然，为了docker build能快点，我们应该添加一个`.dockerignore`文件\n```\n# Build results\n[Dd]ebug/\n[Rr]elease/\nx64/\n[Bb]in/\n[Oo]bj/\n# build folder is nowadays used for build scripts and should not be ignored\n#build/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n```\n好了，现在执行`docker build -t fuck_image .`，构建镜像成功后，可以看到\n```\nPS C:\\Users\\Administrator> docker images\nREPOSITORY                             TAG              IMAGE ID       CREATED        SIZE\nfuck_image                             latest           a8b482b53388   5 hours ago   392MB\n```\n我们跑个容器`docker run -d --name fuck_asp  fuck_image`，查看容器日志`docker logs fuck_asp`，发现它的http端口是80\n```\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://[::]:80\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Production\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: C:\\app\\\n```\n进入容器执行curl\n```\ndocker exec -it fuck_asp cmd.exe\nC:\\app>curl http://localhost\nHello World!\n```\nOK了。  \n注：你的Windows Server如果是跑在虚拟机中的，获取虚拟机的ip有个命令：`VBoxManage guestproperty get \"Win Server2022\" \"/VirtualBox/GuestInfo/Net/0/V4/IP\"`\n\n\n参考：\n* [入门：准备适用于容器的 Windows](https://docs.microsoft.com/zh-cn/virtualization/windowscontainers/quick-start/set-up-environment?tabs=Windows-Server)\n* [Tutorial: Containerize a .NET app](https://docs.microsoft.com/en-us/dotnet/core/docker/build-container?tabs=windows)","slug":"ASP-NET-in-Windows-Container","published":1,"updated":"2023-03-21T02:48:19.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40kn00012o3maq09a5a9","content":"<p>平常我们用的都是<code>Linux Container</code>，这些容器用的都是Linux的内核，而今天我们要记录的是<code>Windows Container</code>，就是讲这些容器用的是Windows的内核，Windows内核是啥？那就是<a\r\nhref=\"https://zh.m.wikipedia.org/zh-hans/Windows_NT\">Windows\r\nNT</a>。<br />\r\n查看你的Windows内核版本，可以用 <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-ComputerInfo</span> | <span class=\"built_in\">Select</span> WindowsProductName, WindowsVersion, WindowsInstallationType, OsServerLevel, OsVersion, OsHardwareAbstractionLayer</span><br></pre></td></tr></table></figure> 类似输出 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WindowsProductName         : Windows 10 Pro for Workstations</span><br><span class=\"line\">WindowsVersion             : 2009</span><br><span class=\"line\">WindowsInstallationType    : Client</span><br><span class=\"line\">OsServerLevel              :</span><br><span class=\"line\">OsVersion                  : 10.0.19044</span><br><span class=\"line\">OsHardwareAbstractionLayer : 10.0.19041.1566</span><br></pre></td></tr></table></figure>\r\n上面NT的版本是10.0.19044。</p>\r\n<p>环境<br />\r\n* 安装 <a\r\nhref=\"https://dotnet.microsoft.com/en-us/download/dotnet/6.0\">.NET 6\r\nSDK</a> * Windows Server 2022 * Docker（针对Windows\r\nServer的docker，没有UI的） * 安装一个喜欢的代码编辑器，例如 Visual\r\nStudio(Code)。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"docker\">Docker</h2>\r\n<p>若要在 Windows Server 上安装 Docker，可以使用由 Microsoft 发布的\r\nOneGet 提供程序 PowerShell 模块（称为 DockerMicrosoftProvider）。\r\n此提供程序启用 Windows 中的容器功能，并安装 Docker 引擎和客户端。\r\n以下是操作方法：</p>\r\n<p>打开提升的 PowerShell 会话，从 PowerShell 库安装 Docker-Microsoft\r\nPackageManagement 提供程序。</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Install-Module</span> <span class=\"literal\">-Name</span> DockerMsftProvider <span class=\"literal\">-Repository</span> PSGallery <span class=\"literal\">-Force</span></span><br></pre></td></tr></table></figure>\r\n<p>如果系统提示安装 NuGet 提供程序，还请键入 Y 进行安装。</p>\r\n<p>如果在打开 PowerShell 库时遇到错误，则可能需要将 PowerShell\r\n客户端使用的 TLS 版本设置为 TLS 1.2。 为此，请运行以下命令：</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set the TLS version used by the PowerShell client to TLS 1.2.</span></span><br><span class=\"line\">[<span class=\"type\">System.Net.ServicePointManager</span>]::SecurityProtocol = [<span class=\"type\">System.Net.SecurityProtocolType</span>]::Tls12;</span><br></pre></td></tr></table></figure>\r\n<p>使用 PackageManagement PowerShell 模块安装最新版本的 Docker。</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Install-Package</span> <span class=\"literal\">-Name</span> docker <span class=\"literal\">-ProviderName</span> DockerMsftProvider</span><br></pre></td></tr></table></figure>\r\n<p>PowerShell 询问是否信任包源“DockerDefault”时，键入 A\r\n以继续进行安装。</p>\r\n<p>在安装完成后，请重启计算机。</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Restart-Computer</span> <span class=\"literal\">-Force</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"windows-container\">Windows Container</h2>\r\n<p>我们知道Linux容器的Base Image是alpine或者scratch，\r\n那Windows容器的Base Image是什么呢？其实微软官方也有<a\r\nhref=\"https://docs.microsoft.com/en-us/virtualization/windowscontainers/manage-containers/container-base-images\">介绍</a>了。</p>\r\n<p><img src=\"/images/windows_base_image.png\"\r\nalt=\"upload successful\" /><br />\r\n好了，我们进入正题。</p>\r\n<p>要确保当前Docker是使用<code>Windows Container</code>的，我们可以拉个镜像\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mcr.microsoft.com/windows/nanoserver:ltsc2022-amd64</span><br></pre></td></tr></table></figure> 如果看到错误消息“no matching manifest for linux/amd64 in\r\nthe manifest list entries”，那说明 Docker 用的是Linux 容器。<br />\r\n注意：<code>mcr.microsoft.com</code>上的镜像在国内访问挺慢的，你可以先把镜像pull到阿里云，然后再在你电脑上拉取。<br />\r\n我们跑一个简单容器（执行cmd） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it mcr.microsoft.com/windows/nanoserver:ltsc2022-amd64  cmd.exe</span><br></pre></td></tr></table></figure> 在容器中执行一些命令：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\&gt;dir</span><br><span class=\"line\"> Volume in drive C has no label.</span><br><span class=\"line\"> Volume Serial Number is F63B-D098</span><br><span class=\"line\"></span><br><span class=\"line\"> Directory of C:\\</span><br><span class=\"line\"></span><br><span class=\"line\">05/05/2022  10:35 AM             5,510 License.txt</span><br><span class=\"line\">05/05/2022  10:37 AM    &lt;DIR&gt;          Users</span><br><span class=\"line\">05/11/2022  03:37 PM    &lt;DIR&gt;          Windows</span><br><span class=\"line\">               1 File(s)          5,510 bytes</span><br><span class=\"line\">               2 Dir(s)  21,302,714,368 bytes free</span><br><span class=\"line\">               </span><br><span class=\"line\">C:\\&gt;hostname</span><br><span class=\"line\">fbb1d7595c03</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\&gt;ipconfig/all</span><br><span class=\"line\"></span><br><span class=\"line\">Windows IP Configuration</span><br><span class=\"line\"></span><br><span class=\"line\">   Host Name . . . . . . . . . . . . : fbb1d7595c03</span><br><span class=\"line\">   Primary Dns Suffix  . . . . . . . :</span><br><span class=\"line\">   Node Type . . . . . . . . . . . . : Hybrid</span><br><span class=\"line\">   IP Routing Enabled. . . . . . . . : No</span><br><span class=\"line\">   WINS Proxy Enabled. . . . . . . . : No</span><br><span class=\"line\">   DNS Suffix Search List. . . . . . : lan</span><br><span class=\"line\"></span><br><span class=\"line\">Ethernet adapter vEthernet (Ethernet):</span><br><span class=\"line\"></span><br><span class=\"line\">   Connection-specific DNS Suffix  . : lan</span><br><span class=\"line\">   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Container Adapter</span><br><span class=\"line\">   Physical Address. . . . . . . . . : 00-15-5D-E5-CC-89</span><br><span class=\"line\">   DHCP Enabled. . . . . . . . . . . : No</span><br><span class=\"line\">   Autoconfiguration Enabled . . . . : Yes</span><br><span class=\"line\">   Link-local IPv6 Address . . . . . : fe80::a0c8:ad95:72dd:fe6f%17(Preferred)</span><br><span class=\"line\">   IPv4 Address. . . . . . . . . . . : 172.30.150.168(Preferred)</span><br><span class=\"line\">   Subnet Mask . . . . . . . . . . . : 255.255.240.0</span><br><span class=\"line\">   Default Gateway . . . . . . . . . : 172.30.144.1</span><br><span class=\"line\">   DNS Servers . . . . . . . . . . . : 172.30.144.1</span><br><span class=\"line\">                                       10.0.2.3</span><br><span class=\"line\">   NetBIOS over Tcpip. . . . . . . . : Disabled</span><br><span class=\"line\">   Connection-specific DNS Suffix Search List :</span><br><span class=\"line\">                                       lan</span><br></pre></td></tr></table></figure> 可以看到，容器中目录还有hostname，网络都是隔离的。</p>\r\n<h2 id=\"运行一个asp.net程序\">运行一个ASP.NET程序</h2>\r\n<p>dotnet 6已经可以很方便的创建asp程序的骨架了，创建新目录myweb,\r\n终端输入<code>dotnet new web</code>，然后sdk就帮你创建了一个hello\r\nworld程序。<br />\r\n看一下Program.cs的内容： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\">var app = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">app.MapGet(&quot;/&quot;, () =&gt; &quot;Hello World!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.Run();</span><br></pre></td></tr></table></figure>\r\n恩，蛮简单的，我们在宿主机上运行<code>dotnet run</code>，输出\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: Microsoft.Hosting.Lifetime[14]</span><br><span class=\"line\">      Now listening on: https://localhost:7174</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[14]</span><br><span class=\"line\">      Now listening on: http://localhost:5017</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Application started. Press Ctrl+C to shut down.</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Hosting environment: Development</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Content root path: /your_path/myweb/</span><br></pre></td></tr></table></figure>\r\n<code>curl http://localhost:5017</code>返回了<code>Hello World!</code>，速度阔以的。</p>\r\n<p>为了在Docker中运行程序，我们需要创建一个Dockerfile <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\"># Copy everything</span><br><span class=\"line\">COPY . ./</span><br><span class=\"line\"># Restore as distinct layers</span><br><span class=\"line\">RUN dotnet restore</span><br><span class=\"line\"># Build and publish a release</span><br><span class=\"line\">RUN dotnet publish -c Release -o out</span><br><span class=\"line\"></span><br><span class=\"line\"># Build runtime image</span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/aspnet:6.0</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY --from=build-env /app/out .</span><br><span class=\"line\">ENTRYPOINT [&quot;dotnet&quot;, &quot;myweb.dll&quot;]</span><br></pre></td></tr></table></figure>\r\n当然，为了docker\r\nbuild能快点，我们应该添加一个<code>.dockerignore</code>文件\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Build results</span><br><span class=\"line\">[Dd]ebug/</span><br><span class=\"line\">[Rr]elease/</span><br><span class=\"line\">x64/</span><br><span class=\"line\">[Bb]in/</span><br><span class=\"line\">[Oo]bj/</span><br><span class=\"line\"># build folder is nowadays used for build scripts and should not be ignored</span><br><span class=\"line\">#build/</span><br><span class=\"line\"></span><br><span class=\"line\"># NuGet Packages</span><br><span class=\"line\">*.nupkg</span><br><span class=\"line\"># The packages folder can be ignored because of Package Restore</span><br><span class=\"line\">**/packages/*</span><br><span class=\"line\"># except build/, which is used as an MSBuild target.</span><br><span class=\"line\">!**/packages/build/</span><br><span class=\"line\"># Uncomment if necessary however generally it will be regenerated when needed</span><br><span class=\"line\">#!**/packages/repositories.config</span><br><span class=\"line\"></span><br><span class=\"line\"># MSTest test Results</span><br><span class=\"line\">[Tt]est[Rr]esult*/</span><br><span class=\"line\">[Bb]uild[Ll]og.*</span><br></pre></td></tr></table></figure>\r\n好了，现在执行<code>docker build -t fuck_image .</code>，构建镜像成功后，可以看到\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\Administrator&gt; docker images</span><br><span class=\"line\">REPOSITORY                             TAG              IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">fuck_image                             latest           a8b482b53388   5 hours ago   392MB</span><br></pre></td></tr></table></figure>\r\n我们跑个容器<code>docker run -d --name fuck_asp  fuck_image</code>，查看容器日志<code>docker logs fuck_asp</code>，发现它的http端口是80\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: Microsoft.Hosting.Lifetime[14]</span><br><span class=\"line\">      Now listening on: http://[::]:80</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Application started. Press Ctrl+C to shut down.</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Hosting environment: Production</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Content root path: C:\\app\\</span><br></pre></td></tr></table></figure> 进入容器执行curl <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it fuck_asp cmd.exe</span><br><span class=\"line\">C:\\app&gt;curl http://localhost</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure> OK了。<br />\r\n注：你的Windows\r\nServer如果是跑在虚拟机中的，获取虚拟机的ip有个命令：<code>VBoxManage guestproperty get \"Win Server2022\" \"/VirtualBox/GuestInfo/Net/0/V4/IP\"</code></p>\r\n<p>参考： * <a\r\nhref=\"https://docs.microsoft.com/zh-cn/virtualization/windowscontainers/quick-start/set-up-environment?tabs=Windows-Server\">入门：准备适用于容器的\r\nWindows</a> * <a\r\nhref=\"https://docs.microsoft.com/en-us/dotnet/core/docker/build-container?tabs=windows\">Tutorial:\r\nContainerize a .NET app</a></p>\r\n","site":{"data":{}},"excerpt":"<p>平常我们用的都是<code>Linux Container</code>，这些容器用的都是Linux的内核，而今天我们要记录的是<code>Windows Container</code>，就是讲这些容器用的是Windows的内核，Windows内核是啥？那就是<a\r\nhref=\"https://zh.m.wikipedia.org/zh-hans/Windows_NT\">Windows\r\nNT</a>。<br />\r\n查看你的Windows内核版本，可以用 <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-ComputerInfo</span> | <span class=\"built_in\">Select</span> WindowsProductName, WindowsVersion, WindowsInstallationType, OsServerLevel, OsVersion, OsHardwareAbstractionLayer</span><br></pre></td></tr></table></figure> 类似输出 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WindowsProductName         : Windows 10 Pro for Workstations</span><br><span class=\"line\">WindowsVersion             : 2009</span><br><span class=\"line\">WindowsInstallationType    : Client</span><br><span class=\"line\">OsServerLevel              :</span><br><span class=\"line\">OsVersion                  : 10.0.19044</span><br><span class=\"line\">OsHardwareAbstractionLayer : 10.0.19041.1566</span><br></pre></td></tr></table></figure>\r\n上面NT的版本是10.0.19044。</p>\r\n<p>环境<br />\r\n* 安装 <a\r\nhref=\"https://dotnet.microsoft.com/en-us/download/dotnet/6.0\">.NET 6\r\nSDK</a> * Windows Server 2022 * Docker（针对Windows\r\nServer的docker，没有UI的） * 安装一个喜欢的代码编辑器，例如 Visual\r\nStudio(Code)。</p>","more":"<h2 id=\"docker\">Docker</h2>\r\n<p>若要在 Windows Server 上安装 Docker，可以使用由 Microsoft 发布的\r\nOneGet 提供程序 PowerShell 模块（称为 DockerMicrosoftProvider）。\r\n此提供程序启用 Windows 中的容器功能，并安装 Docker 引擎和客户端。\r\n以下是操作方法：</p>\r\n<p>打开提升的 PowerShell 会话，从 PowerShell 库安装 Docker-Microsoft\r\nPackageManagement 提供程序。</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Install-Module</span> <span class=\"literal\">-Name</span> DockerMsftProvider <span class=\"literal\">-Repository</span> PSGallery <span class=\"literal\">-Force</span></span><br></pre></td></tr></table></figure>\r\n<p>如果系统提示安装 NuGet 提供程序，还请键入 Y 进行安装。</p>\r\n<p>如果在打开 PowerShell 库时遇到错误，则可能需要将 PowerShell\r\n客户端使用的 TLS 版本设置为 TLS 1.2。 为此，请运行以下命令：</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set the TLS version used by the PowerShell client to TLS 1.2.</span></span><br><span class=\"line\">[<span class=\"type\">System.Net.ServicePointManager</span>]::SecurityProtocol = [<span class=\"type\">System.Net.SecurityProtocolType</span>]::Tls12;</span><br></pre></td></tr></table></figure>\r\n<p>使用 PackageManagement PowerShell 模块安装最新版本的 Docker。</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Install-Package</span> <span class=\"literal\">-Name</span> docker <span class=\"literal\">-ProviderName</span> DockerMsftProvider</span><br></pre></td></tr></table></figure>\r\n<p>PowerShell 询问是否信任包源“DockerDefault”时，键入 A\r\n以继续进行安装。</p>\r\n<p>在安装完成后，请重启计算机。</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Restart-Computer</span> <span class=\"literal\">-Force</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"windows-container\">Windows Container</h2>\r\n<p>我们知道Linux容器的Base Image是alpine或者scratch，\r\n那Windows容器的Base Image是什么呢？其实微软官方也有<a\r\nhref=\"https://docs.microsoft.com/en-us/virtualization/windowscontainers/manage-containers/container-base-images\">介绍</a>了。</p>\r\n<p><img src=\"/images/windows_base_image.png\"\r\nalt=\"upload successful\" /><br />\r\n好了，我们进入正题。</p>\r\n<p>要确保当前Docker是使用<code>Windows Container</code>的，我们可以拉个镜像\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mcr.microsoft.com/windows/nanoserver:ltsc2022-amd64</span><br></pre></td></tr></table></figure> 如果看到错误消息“no matching manifest for linux/amd64 in\r\nthe manifest list entries”，那说明 Docker 用的是Linux 容器。<br />\r\n注意：<code>mcr.microsoft.com</code>上的镜像在国内访问挺慢的，你可以先把镜像pull到阿里云，然后再在你电脑上拉取。<br />\r\n我们跑一个简单容器（执行cmd） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it mcr.microsoft.com/windows/nanoserver:ltsc2022-amd64  cmd.exe</span><br></pre></td></tr></table></figure> 在容器中执行一些命令：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\&gt;dir</span><br><span class=\"line\"> Volume in drive C has no label.</span><br><span class=\"line\"> Volume Serial Number is F63B-D098</span><br><span class=\"line\"></span><br><span class=\"line\"> Directory of C:\\</span><br><span class=\"line\"></span><br><span class=\"line\">05/05/2022  10:35 AM             5,510 License.txt</span><br><span class=\"line\">05/05/2022  10:37 AM    &lt;DIR&gt;          Users</span><br><span class=\"line\">05/11/2022  03:37 PM    &lt;DIR&gt;          Windows</span><br><span class=\"line\">               1 File(s)          5,510 bytes</span><br><span class=\"line\">               2 Dir(s)  21,302,714,368 bytes free</span><br><span class=\"line\">               </span><br><span class=\"line\">C:\\&gt;hostname</span><br><span class=\"line\">fbb1d7595c03</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\&gt;ipconfig/all</span><br><span class=\"line\"></span><br><span class=\"line\">Windows IP Configuration</span><br><span class=\"line\"></span><br><span class=\"line\">   Host Name . . . . . . . . . . . . : fbb1d7595c03</span><br><span class=\"line\">   Primary Dns Suffix  . . . . . . . :</span><br><span class=\"line\">   Node Type . . . . . . . . . . . . : Hybrid</span><br><span class=\"line\">   IP Routing Enabled. . . . . . . . : No</span><br><span class=\"line\">   WINS Proxy Enabled. . . . . . . . : No</span><br><span class=\"line\">   DNS Suffix Search List. . . . . . : lan</span><br><span class=\"line\"></span><br><span class=\"line\">Ethernet adapter vEthernet (Ethernet):</span><br><span class=\"line\"></span><br><span class=\"line\">   Connection-specific DNS Suffix  . : lan</span><br><span class=\"line\">   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Container Adapter</span><br><span class=\"line\">   Physical Address. . . . . . . . . : 00-15-5D-E5-CC-89</span><br><span class=\"line\">   DHCP Enabled. . . . . . . . . . . : No</span><br><span class=\"line\">   Autoconfiguration Enabled . . . . : Yes</span><br><span class=\"line\">   Link-local IPv6 Address . . . . . : fe80::a0c8:ad95:72dd:fe6f%17(Preferred)</span><br><span class=\"line\">   IPv4 Address. . . . . . . . . . . : 172.30.150.168(Preferred)</span><br><span class=\"line\">   Subnet Mask . . . . . . . . . . . : 255.255.240.0</span><br><span class=\"line\">   Default Gateway . . . . . . . . . : 172.30.144.1</span><br><span class=\"line\">   DNS Servers . . . . . . . . . . . : 172.30.144.1</span><br><span class=\"line\">                                       10.0.2.3</span><br><span class=\"line\">   NetBIOS over Tcpip. . . . . . . . : Disabled</span><br><span class=\"line\">   Connection-specific DNS Suffix Search List :</span><br><span class=\"line\">                                       lan</span><br></pre></td></tr></table></figure> 可以看到，容器中目录还有hostname，网络都是隔离的。</p>\r\n<h2 id=\"运行一个asp.net程序\">运行一个ASP.NET程序</h2>\r\n<p>dotnet 6已经可以很方便的创建asp程序的骨架了，创建新目录myweb,\r\n终端输入<code>dotnet new web</code>，然后sdk就帮你创建了一个hello\r\nworld程序。<br />\r\n看一下Program.cs的内容： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\">var app = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">app.MapGet(&quot;/&quot;, () =&gt; &quot;Hello World!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.Run();</span><br></pre></td></tr></table></figure>\r\n恩，蛮简单的，我们在宿主机上运行<code>dotnet run</code>，输出\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: Microsoft.Hosting.Lifetime[14]</span><br><span class=\"line\">      Now listening on: https://localhost:7174</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[14]</span><br><span class=\"line\">      Now listening on: http://localhost:5017</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Application started. Press Ctrl+C to shut down.</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Hosting environment: Development</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Content root path: /your_path/myweb/</span><br></pre></td></tr></table></figure>\r\n<code>curl http://localhost:5017</code>返回了<code>Hello World!</code>，速度阔以的。</p>\r\n<p>为了在Docker中运行程序，我们需要创建一个Dockerfile <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build-env</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\"># Copy everything</span><br><span class=\"line\">COPY . ./</span><br><span class=\"line\"># Restore as distinct layers</span><br><span class=\"line\">RUN dotnet restore</span><br><span class=\"line\"># Build and publish a release</span><br><span class=\"line\">RUN dotnet publish -c Release -o out</span><br><span class=\"line\"></span><br><span class=\"line\"># Build runtime image</span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/aspnet:6.0</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY --from=build-env /app/out .</span><br><span class=\"line\">ENTRYPOINT [&quot;dotnet&quot;, &quot;myweb.dll&quot;]</span><br></pre></td></tr></table></figure>\r\n当然，为了docker\r\nbuild能快点，我们应该添加一个<code>.dockerignore</code>文件\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Build results</span><br><span class=\"line\">[Dd]ebug/</span><br><span class=\"line\">[Rr]elease/</span><br><span class=\"line\">x64/</span><br><span class=\"line\">[Bb]in/</span><br><span class=\"line\">[Oo]bj/</span><br><span class=\"line\"># build folder is nowadays used for build scripts and should not be ignored</span><br><span class=\"line\">#build/</span><br><span class=\"line\"></span><br><span class=\"line\"># NuGet Packages</span><br><span class=\"line\">*.nupkg</span><br><span class=\"line\"># The packages folder can be ignored because of Package Restore</span><br><span class=\"line\">**/packages/*</span><br><span class=\"line\"># except build/, which is used as an MSBuild target.</span><br><span class=\"line\">!**/packages/build/</span><br><span class=\"line\"># Uncomment if necessary however generally it will be regenerated when needed</span><br><span class=\"line\">#!**/packages/repositories.config</span><br><span class=\"line\"></span><br><span class=\"line\"># MSTest test Results</span><br><span class=\"line\">[Tt]est[Rr]esult*/</span><br><span class=\"line\">[Bb]uild[Ll]og.*</span><br></pre></td></tr></table></figure>\r\n好了，现在执行<code>docker build -t fuck_image .</code>，构建镜像成功后，可以看到\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\Administrator&gt; docker images</span><br><span class=\"line\">REPOSITORY                             TAG              IMAGE ID       CREATED        SIZE</span><br><span class=\"line\">fuck_image                             latest           a8b482b53388   5 hours ago   392MB</span><br></pre></td></tr></table></figure>\r\n我们跑个容器<code>docker run -d --name fuck_asp  fuck_image</code>，查看容器日志<code>docker logs fuck_asp</code>，发现它的http端口是80\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: Microsoft.Hosting.Lifetime[14]</span><br><span class=\"line\">      Now listening on: http://[::]:80</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Application started. Press Ctrl+C to shut down.</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Hosting environment: Production</span><br><span class=\"line\">info: Microsoft.Hosting.Lifetime[0]</span><br><span class=\"line\">      Content root path: C:\\app\\</span><br></pre></td></tr></table></figure> 进入容器执行curl <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it fuck_asp cmd.exe</span><br><span class=\"line\">C:\\app&gt;curl http://localhost</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure> OK了。<br />\r\n注：你的Windows\r\nServer如果是跑在虚拟机中的，获取虚拟机的ip有个命令：<code>VBoxManage guestproperty get \"Win Server2022\" \"/VirtualBox/GuestInfo/Net/0/V4/IP\"</code></p>\r\n<p>参考： * <a\r\nhref=\"https://docs.microsoft.com/zh-cn/virtualization/windowscontainers/quick-start/set-up-environment?tabs=Windows-Server\">入门：准备适用于容器的\r\nWindows</a> * <a\r\nhref=\"https://docs.microsoft.com/en-us/dotnet/core/docker/build-container?tabs=windows\">Tutorial:\r\nContainerize a .NET app</a></p>"},{"title":"C语言动态链接库回顾","author":"Salamander","date":"2020-05-03T02:00:00.000Z","_content":"![C language](https://s1.ax1x.com/2020/05/09/YMO4bV.jpg)\n\n## 动态链接库和静态链接库\n**静态链接库**会在编译时包含到可执行文件中，这样的程序虽然没有依赖问题，但是可执行文件体积较大，包含相同的公共代码，非常浪费内存。  \n动态链接库的好处就是节省内存空间，还有将一些程序升级变得简单。用户只需要升级动态链接库，而无需重新编译链接其他原有的代码就可以完成整个程序的升级。  \n在windows下动态链接库是以`.dll`后缀的文件，静态链接库是以`.lib`的文件  \n而在Linux中，动态链接库是以`.so`作后缀的文件，静态链接库是以`.a`（archive的缩写）的文件。  \n本文中，我们的链接库来自于[ftplib](https://nbpfaus.net/~pfau/ftplib/)，这是一个用C语言实现的跨平台FTP库，我们将会用它生成的动态链接库写个简单的程序（连接ftp服务器，然后查询当前目录）。\n\n\n<!-- more -->\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS 还有 Windows 10专业版\n* ftplib：V4.0-1\n* gcc： 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)\n\n\n## Linux下\n在Linux中，标准库的大部分函数通常放在文件 libc.a 中（这是**静态链接库**），或者放在用于共享的动态链接文件 libc.so 中（文件名后缀.so代表“share object”，译为“共享对象”，这是**动态链接库**）。这些链接库一般位于 /lib/ 或 /usr/lib/，或者位于 GCC 默认搜索的其他目录（默认搜索目录有`/lib` `/usr/lib` `/usr/local/lib`）。  \n观察一下**ftplib**的`Makefile`\n```makefile\n....\n\ninstall : all\n\tinstall qftp /usr/local/bin\n\tinstall -m 644 libftp.so.$(SOVERSION) /usr/local/lib\n\tinstall -m 644 ftplib.h /usr/local/include\n\t(cd /usr/local/lib && \\\n\t ln -sf libftp.so.$(SOVERSION) libftp.so.$(SONAME) && \\\n\t ln -sf libftp.so.$(SONAME) libftp.so)\n\t-(cd /usr/local/bin && \\\n\t  for f in ftpdir ftpget ftplist ftprm ftpsend; \\\n\t  do ln -s qftp $$f; done)\n...\n```\n`make install`的时候会把`ftplib.h`放到`/usr/local/include`，把`libftp.so`放到`/usr/local/lib`，一个是gcc默认的头文件搜索目录，一个是gcc默认的库文件搜索目录。 \n\n## 安装动态链接库\n\n在ftplib的src目录中执行\n```shell\nmake\nsudo make install\n```\n以上操作会把动态链接库放入到我们的系统中。  \n\n\n### 程序引用\n然后我们写一个简单的程序\n```C\n#include <stdio.h>\n#include \"ftplib.h\"\n\nnetbuf *con = NULL;\nchar host[] = \"192.168.1.175:2121\"; // 小米手机的ftp服务\nchar username[] = \"**********\";\nchar password[] = \"********\";\n\nint main()\n{\n    if(!FtpConnect(host, &con))\n    {\n        printf(\"connect failed!!\\n\");\n        return 0;\n    }\n\n    // 登录\n    if(!FtpLogin(username, password, con))\n    {\n        printf(\"login failed!\\n\");\n        FtpQuit(con);\n        return 0;\n    }\n    printf(\"Login successfully!\\n\");\n    char currentDir[20];\n    FtpPwd(currentDir, 10, con);\n    printf(\"Current Directory is %s\\n\", currentDir);\n    FtpQuit(con);\n    return 0;\n}\n```\n好了，现在我们可以用gcc编译它了，因为这里引用了`ftplib`库，所以我们需要手动添加链接库\n```\ngcc main.c -o main /usr/local/lib/libftp.so\n```\n上面使用了链接库的完整路径，其实我们可以用`-l`选项，因为生成的链接库命名是规范的（`-lXX`会去找`libxx.so`这样的文件，自动加`lib`前缀）而且也在gcc的默认搜索目录中\n```\ngcc main.c -o main -lftp\n```\n另外说一句，有时候我们想增加一个自定义的搜索目录，可以使用`-L`选项，例如\n```\ngcc main.c -o main.out -L/usr/lib -lhello\n```\n另外也可以使用环境变量`LD_LIBRARY_PATH`指定搜索目录（在程序执行之前定义这个量就行），路径之间用冒号”:”分隔。  \n我们可以用`ldd`命令查看程序用到的链接库：\n```\n$ ldd main\n        linux-vdso.so.1 (0x00007fff7a7fa000)\n        libftp.so.4 => /usr/local/lib/libftp.so.4 (0x00007f7b5215a000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f7b51d69000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f7b52563000)\n```\n\n\n\n\n\n\n\n\n参考：\n* [Shared libraries with GCC on Linux](https://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html)","source":"_posts/C_dynamic linkc.md","raw":"title: C语言动态链接库回顾\nauthor: Salamander\ntags:\n  - C\ncategories:\n  - C\ndate: 2020-05-03 10:00:00\n---\n![C language](https://s1.ax1x.com/2020/05/09/YMO4bV.jpg)\n\n## 动态链接库和静态链接库\n**静态链接库**会在编译时包含到可执行文件中，这样的程序虽然没有依赖问题，但是可执行文件体积较大，包含相同的公共代码，非常浪费内存。  \n动态链接库的好处就是节省内存空间，还有将一些程序升级变得简单。用户只需要升级动态链接库，而无需重新编译链接其他原有的代码就可以完成整个程序的升级。  \n在windows下动态链接库是以`.dll`后缀的文件，静态链接库是以`.lib`的文件  \n而在Linux中，动态链接库是以`.so`作后缀的文件，静态链接库是以`.a`（archive的缩写）的文件。  \n本文中，我们的链接库来自于[ftplib](https://nbpfaus.net/~pfau/ftplib/)，这是一个用C语言实现的跨平台FTP库，我们将会用它生成的动态链接库写个简单的程序（连接ftp服务器，然后查询当前目录）。\n\n\n<!-- more -->\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS 还有 Windows 10专业版\n* ftplib：V4.0-1\n* gcc： 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)\n\n\n## Linux下\n在Linux中，标准库的大部分函数通常放在文件 libc.a 中（这是**静态链接库**），或者放在用于共享的动态链接文件 libc.so 中（文件名后缀.so代表“share object”，译为“共享对象”，这是**动态链接库**）。这些链接库一般位于 /lib/ 或 /usr/lib/，或者位于 GCC 默认搜索的其他目录（默认搜索目录有`/lib` `/usr/lib` `/usr/local/lib`）。  \n观察一下**ftplib**的`Makefile`\n```makefile\n....\n\ninstall : all\n\tinstall qftp /usr/local/bin\n\tinstall -m 644 libftp.so.$(SOVERSION) /usr/local/lib\n\tinstall -m 644 ftplib.h /usr/local/include\n\t(cd /usr/local/lib && \\\n\t ln -sf libftp.so.$(SOVERSION) libftp.so.$(SONAME) && \\\n\t ln -sf libftp.so.$(SONAME) libftp.so)\n\t-(cd /usr/local/bin && \\\n\t  for f in ftpdir ftpget ftplist ftprm ftpsend; \\\n\t  do ln -s qftp $$f; done)\n...\n```\n`make install`的时候会把`ftplib.h`放到`/usr/local/include`，把`libftp.so`放到`/usr/local/lib`，一个是gcc默认的头文件搜索目录，一个是gcc默认的库文件搜索目录。 \n\n## 安装动态链接库\n\n在ftplib的src目录中执行\n```shell\nmake\nsudo make install\n```\n以上操作会把动态链接库放入到我们的系统中。  \n\n\n### 程序引用\n然后我们写一个简单的程序\n```C\n#include <stdio.h>\n#include \"ftplib.h\"\n\nnetbuf *con = NULL;\nchar host[] = \"192.168.1.175:2121\"; // 小米手机的ftp服务\nchar username[] = \"**********\";\nchar password[] = \"********\";\n\nint main()\n{\n    if(!FtpConnect(host, &con))\n    {\n        printf(\"connect failed!!\\n\");\n        return 0;\n    }\n\n    // 登录\n    if(!FtpLogin(username, password, con))\n    {\n        printf(\"login failed!\\n\");\n        FtpQuit(con);\n        return 0;\n    }\n    printf(\"Login successfully!\\n\");\n    char currentDir[20];\n    FtpPwd(currentDir, 10, con);\n    printf(\"Current Directory is %s\\n\", currentDir);\n    FtpQuit(con);\n    return 0;\n}\n```\n好了，现在我们可以用gcc编译它了，因为这里引用了`ftplib`库，所以我们需要手动添加链接库\n```\ngcc main.c -o main /usr/local/lib/libftp.so\n```\n上面使用了链接库的完整路径，其实我们可以用`-l`选项，因为生成的链接库命名是规范的（`-lXX`会去找`libxx.so`这样的文件，自动加`lib`前缀）而且也在gcc的默认搜索目录中\n```\ngcc main.c -o main -lftp\n```\n另外说一句，有时候我们想增加一个自定义的搜索目录，可以使用`-L`选项，例如\n```\ngcc main.c -o main.out -L/usr/lib -lhello\n```\n另外也可以使用环境变量`LD_LIBRARY_PATH`指定搜索目录（在程序执行之前定义这个量就行），路径之间用冒号”:”分隔。  \n我们可以用`ldd`命令查看程序用到的链接库：\n```\n$ ldd main\n        linux-vdso.so.1 (0x00007fff7a7fa000)\n        libftp.so.4 => /usr/local/lib/libftp.so.4 (0x00007f7b5215a000)\n        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f7b51d69000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f7b52563000)\n```\n\n\n\n\n\n\n\n\n参考：\n* [Shared libraries with GCC on Linux](https://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html)","slug":"C_dynamic linkc","published":1,"updated":"2023-03-21T02:48:19.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40kq00032o3m0ddr4ack","content":"<figure>\r\n<img src=\"https://s1.ax1x.com/2020/05/09/YMO4bV.jpg\" alt=\"C language\" />\r\n<figcaption aria-hidden=\"true\">C language</figcaption>\r\n</figure>\r\n<h2 id=\"动态链接库和静态链接库\">动态链接库和静态链接库</h2>\r\n<p><strong>静态链接库</strong>会在编译时包含到可执行文件中，这样的程序虽然没有依赖问题，但是可执行文件体积较大，包含相同的公共代码，非常浪费内存。<br />\r\n动态链接库的好处就是节省内存空间，还有将一些程序升级变得简单。用户只需要升级动态链接库，而无需重新编译链接其他原有的代码就可以完成整个程序的升级。<br />\r\n在windows下动态链接库是以<code>.dll</code>后缀的文件，静态链接库是以<code>.lib</code>的文件<br />\r\n而在Linux中，动态链接库是以<code>.so</code>作后缀的文件，静态链接库是以<code>.a</code>（archive的缩写）的文件。<br />\r\n本文中，我们的链接库来自于<a\r\nhref=\"https://nbpfaus.net/~pfau/ftplib/\">ftplib</a>，这是一个用C语言实现的跨平台FTP库，我们将会用它生成的动态链接库写个简单的程序（连接ftp服务器，然后查询当前目录）。</p>\r\n<span id=\"more\"></span>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS 还有 Windows 10专业版 *\r\nftplib：V4.0-1 * gcc： 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)</p>\r\n<h2 id=\"linux下\">Linux下</h2>\r\n<p>在Linux中，标准库的大部分函数通常放在文件 libc.a\r\n中（这是<strong>静态链接库</strong>），或者放在用于共享的动态链接文件\r\nlibc.so 中（文件名后缀.so代表“share\r\nobject”，译为“共享对象”，这是<strong>动态链接库</strong>）。这些链接库一般位于\r\n/lib/ 或 /usr/lib/，或者位于 GCC\r\n默认搜索的其他目录（默认搜索目录有<code>/lib</code>\r\n<code>/usr/lib</code> <code>/usr/local/lib</code>）。<br />\r\n观察一下<strong>ftplib</strong>的<code>Makefile</code> <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">install : all</span><br><span class=\"line\">\tinstall qftp /usr/local/bin</span><br><span class=\"line\">\tinstall -m 644 libftp.so.<span class=\"variable\">$(SOVERSION)</span> /usr/local/lib</span><br><span class=\"line\">\tinstall -m 644 ftplib.h /usr/local/<span class=\"keyword\">include</span></span><br><span class=\"line\">\t(cd /usr/local/lib &amp;&amp; \\</span><br><span class=\"line\">\t ln -sf libftp.so.<span class=\"variable\">$(SOVERSION)</span> libftp.so.<span class=\"variable\">$(SONAME)</span> &amp;&amp; \\</span><br><span class=\"line\">\t ln -sf libftp.so.<span class=\"variable\">$(SONAME)</span> libftp.so)</span><br><span class=\"line\">\t-(cd /usr/local/bin &amp;&amp; \\</span><br><span class=\"line\">\t  for f in ftpdir ftpget ftplist ftprm ftpsend; \\</span><br><span class=\"line\">\t  do ln -s qftp $$f; done)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\r\n<code>make install</code>的时候会把<code>ftplib.h</code>放到<code>/usr/local/include</code>，把<code>libftp.so</code>放到<code>/usr/local/lib</code>，一个是gcc默认的头文件搜索目录，一个是gcc默认的库文件搜索目录。</p>\r\n<h2 id=\"安装动态链接库\">安装动态链接库</h2>\r\n<p>在ftplib的src目录中执行 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\r\n以上操作会把动态链接库放入到我们的系统中。</p>\r\n<h3 id=\"程序引用\">程序引用</h3>\r\n<p>然后我们写一个简单的程序 <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ftplib.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">netbuf *con = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> host[] = <span class=\"string\">&quot;192.168.1.175:2121&quot;</span>; <span class=\"comment\">// 小米手机的ftp服务</span></span><br><span class=\"line\"><span class=\"type\">char</span> username[] = <span class=\"string\">&quot;**********&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> password[] = <span class=\"string\">&quot;********&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!FtpConnect(host, &amp;con))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;connect failed!!\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 登录</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!FtpLogin(username, password, con))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;login failed!\\n&quot;</span>);</span><br><span class=\"line\">        FtpQuit(con);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Login successfully!\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> currentDir[<span class=\"number\">20</span>];</span><br><span class=\"line\">    FtpPwd(currentDir, <span class=\"number\">10</span>, con);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Current Directory is %s\\n&quot;</span>, currentDir);</span><br><span class=\"line\">    FtpQuit(con);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n好了，现在我们可以用gcc编译它了，因为这里引用了<code>ftplib</code>库，所以我们需要手动添加链接库\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc main.c -o main /usr/local/lib/libftp.so</span><br></pre></td></tr></table></figure>\r\n上面使用了链接库的完整路径，其实我们可以用<code>-l</code>选项，因为生成的链接库命名是规范的（<code>-lXX</code>会去找<code>libxx.so</code>这样的文件，自动加<code>lib</code>前缀）而且也在gcc的默认搜索目录中\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc main.c -o main -lftp</span><br></pre></td></tr></table></figure>\r\n另外说一句，有时候我们想增加一个自定义的搜索目录，可以使用<code>-L</code>选项，例如\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc main.c -o main.out -L/usr/lib -lhello</span><br></pre></td></tr></table></figure>\r\n另外也可以使用环境变量<code>LD_LIBRARY_PATH</code>指定搜索目录（在程序执行之前定义这个量就行），路径之间用冒号”:”分隔。<br />\r\n我们可以用<code>ldd</code>命令查看程序用到的链接库： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ldd main</span><br><span class=\"line\">        linux-vdso.so.1 (0x00007fff7a7fa000)</span><br><span class=\"line\">        libftp.so.4 =&gt; /usr/local/lib/libftp.so.4 (0x00007f7b5215a000)</span><br><span class=\"line\">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f7b51d69000)</span><br><span class=\"line\">        /lib64/ld-linux-x86-64.so.2 (0x00007f7b52563000)</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html\">Shared\r\nlibraries with GCC on Linux</a></p>\r\n","site":{"data":{}},"excerpt":"<figure>\r\n<img src=\"https://s1.ax1x.com/2020/05/09/YMO4bV.jpg\" alt=\"C language\" />\r\n<figcaption aria-hidden=\"true\">C language</figcaption>\r\n</figure>\r\n<h2 id=\"动态链接库和静态链接库\">动态链接库和静态链接库</h2>\r\n<p><strong>静态链接库</strong>会在编译时包含到可执行文件中，这样的程序虽然没有依赖问题，但是可执行文件体积较大，包含相同的公共代码，非常浪费内存。<br />\r\n动态链接库的好处就是节省内存空间，还有将一些程序升级变得简单。用户只需要升级动态链接库，而无需重新编译链接其他原有的代码就可以完成整个程序的升级。<br />\r\n在windows下动态链接库是以<code>.dll</code>后缀的文件，静态链接库是以<code>.lib</code>的文件<br />\r\n而在Linux中，动态链接库是以<code>.so</code>作后缀的文件，静态链接库是以<code>.a</code>（archive的缩写）的文件。<br />\r\n本文中，我们的链接库来自于<a\r\nhref=\"https://nbpfaus.net/~pfau/ftplib/\">ftplib</a>，这是一个用C语言实现的跨平台FTP库，我们将会用它生成的动态链接库写个简单的程序（连接ftp服务器，然后查询当前目录）。</p>","more":"<p>本文环境： * OS：Ubuntu 18.04.4 LTS 还有 Windows 10专业版 *\r\nftplib：V4.0-1 * gcc： 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)</p>\r\n<h2 id=\"linux下\">Linux下</h2>\r\n<p>在Linux中，标准库的大部分函数通常放在文件 libc.a\r\n中（这是<strong>静态链接库</strong>），或者放在用于共享的动态链接文件\r\nlibc.so 中（文件名后缀.so代表“share\r\nobject”，译为“共享对象”，这是<strong>动态链接库</strong>）。这些链接库一般位于\r\n/lib/ 或 /usr/lib/，或者位于 GCC\r\n默认搜索的其他目录（默认搜索目录有<code>/lib</code>\r\n<code>/usr/lib</code> <code>/usr/local/lib</code>）。<br />\r\n观察一下<strong>ftplib</strong>的<code>Makefile</code> <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">install : all</span><br><span class=\"line\">\tinstall qftp /usr/local/bin</span><br><span class=\"line\">\tinstall -m 644 libftp.so.<span class=\"variable\">$(SOVERSION)</span> /usr/local/lib</span><br><span class=\"line\">\tinstall -m 644 ftplib.h /usr/local/<span class=\"keyword\">include</span></span><br><span class=\"line\">\t(cd /usr/local/lib &amp;&amp; \\</span><br><span class=\"line\">\t ln -sf libftp.so.<span class=\"variable\">$(SOVERSION)</span> libftp.so.<span class=\"variable\">$(SONAME)</span> &amp;&amp; \\</span><br><span class=\"line\">\t ln -sf libftp.so.<span class=\"variable\">$(SONAME)</span> libftp.so)</span><br><span class=\"line\">\t-(cd /usr/local/bin &amp;&amp; \\</span><br><span class=\"line\">\t  for f in ftpdir ftpget ftplist ftprm ftpsend; \\</span><br><span class=\"line\">\t  do ln -s qftp $$f; done)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\r\n<code>make install</code>的时候会把<code>ftplib.h</code>放到<code>/usr/local/include</code>，把<code>libftp.so</code>放到<code>/usr/local/lib</code>，一个是gcc默认的头文件搜索目录，一个是gcc默认的库文件搜索目录。</p>\r\n<h2 id=\"安装动态链接库\">安装动态链接库</h2>\r\n<p>在ftplib的src目录中执行 <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\r\n以上操作会把动态链接库放入到我们的系统中。</p>\r\n<h3 id=\"程序引用\">程序引用</h3>\r\n<p>然后我们写一个简单的程序 <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ftplib.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">netbuf *con = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> host[] = <span class=\"string\">&quot;192.168.1.175:2121&quot;</span>; <span class=\"comment\">// 小米手机的ftp服务</span></span><br><span class=\"line\"><span class=\"type\">char</span> username[] = <span class=\"string\">&quot;**********&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> password[] = <span class=\"string\">&quot;********&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!FtpConnect(host, &amp;con))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;connect failed!!\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 登录</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!FtpLogin(username, password, con))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;login failed!\\n&quot;</span>);</span><br><span class=\"line\">        FtpQuit(con);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Login successfully!\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> currentDir[<span class=\"number\">20</span>];</span><br><span class=\"line\">    FtpPwd(currentDir, <span class=\"number\">10</span>, con);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Current Directory is %s\\n&quot;</span>, currentDir);</span><br><span class=\"line\">    FtpQuit(con);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n好了，现在我们可以用gcc编译它了，因为这里引用了<code>ftplib</code>库，所以我们需要手动添加链接库\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc main.c -o main /usr/local/lib/libftp.so</span><br></pre></td></tr></table></figure>\r\n上面使用了链接库的完整路径，其实我们可以用<code>-l</code>选项，因为生成的链接库命名是规范的（<code>-lXX</code>会去找<code>libxx.so</code>这样的文件，自动加<code>lib</code>前缀）而且也在gcc的默认搜索目录中\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc main.c -o main -lftp</span><br></pre></td></tr></table></figure>\r\n另外说一句，有时候我们想增加一个自定义的搜索目录，可以使用<code>-L</code>选项，例如\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc main.c -o main.out -L/usr/lib -lhello</span><br></pre></td></tr></table></figure>\r\n另外也可以使用环境变量<code>LD_LIBRARY_PATH</code>指定搜索目录（在程序执行之前定义这个量就行），路径之间用冒号”:”分隔。<br />\r\n我们可以用<code>ldd</code>命令查看程序用到的链接库： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ldd main</span><br><span class=\"line\">        linux-vdso.so.1 (0x00007fff7a7fa000)</span><br><span class=\"line\">        libftp.so.4 =&gt; /usr/local/lib/libftp.so.4 (0x00007f7b5215a000)</span><br><span class=\"line\">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f7b51d69000)</span><br><span class=\"line\">        /lib64/ld-linux-x86-64.so.2 (0x00007f7b52563000)</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html\">Shared\r\nlibraries with GCC on Linux</a></p>"},{"title":"CefSharp浅尝辄止","author":"Salamander","date":"2019-11-16T12:00:00.000Z","_content":"![docker logo](/images/CefSharp-logo.png)\n\n## CefSharp\n[CEF](https://github.com/chromiumembedded/cef)全称：**Chromium Embedded Framework**。  \nCefSharp是什么？[官网](http://cefsharp.github.io/)上它是这么写的：CefSharp是在C#或VB.NET应用程序中嵌入全功能标准兼容web浏览器的最简单方法。CefSharp有WinForms和WPF应用程序的浏览器控件，也有自动化项目的无标题（屏幕外）版本。CefSharp基于Chromium嵌入式框架，这是Google Chrome的开源版本。  \n说白了，就是基于C#或VB语言的**可编程浏览器**（当然CEF也有其他语言的，如[Java](https://bitbucket.org/chromiumembedded/java-cef)，[Go](https://github.com/cztomczak/cef2go)）。\n\n<!-- more -->\n\n本文环境：\n* CefSharp版本：75.1.143\n* VS版本：2015\n* 操作系统：Windows 10专业版\n\n## WPF引入CefSharp\nCefSharp有现成的NuGet包，先引入到项目中，然后在XAML中添加响应控件：\n```\n<cefSharp:ChromiumWebBrowser Name=\"myChrome\" Loaded=\"myChrome_Loaded\"/>\n```\n添加`cefSharp`命名空间：\n```\nxmlns:cefSharp=\"clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf\"\n```\n在`myChrome_Loaded`事件中，我们让浏览器打开百度首页：\n```C#\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://www.baidu.com\";\n    myChrome.Load(url);\n}\n```\n运行程序，我们就可以看到百度首页了。\n\n\n## 截断请求\n根据[文档](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_Handler_RequestHandler.htm)，我们可以看到`RequestHandler`类中的方法`GetResourceRequestHandler`会在每次发请求前被调用：\n> GetResourceRequestHandler  \n> Called on the CEF IO thread before a resource request is initiated.\n\n`RequestHandler`类是[`IRequestHandler`](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequestHandler.htm)接口的默认实现，我们自定义请求可以继承这个类：\n> Default implementation of IRequestHandler. \n> This class provides default implementations of the methods from IRequestHandler, therefore providing a convenience base class for any custom request handler.\n\n\n所以我们可以创建一个继承`RequestHandler`的类\n```\n\nclass CustomRequestHandler : RequestHandler\n{\n    protected override IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, ref bool disableDefaultHandling)\n    {\n        return new CustomResourceRequestHandler();\n    }\n}\n```\n\n`GetResourceRequestHandler`是我们要重点关注的方法，里头我们返回了一个类实例，在这个类中我们就可以**自定义请求**。  \n新版的CefSharp（75版本之后）把`OnBeforeResourceLoad`方法移动到了`IResourceRequestHandler`接口里（[文档](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IResourceRequestHandler.htm)），同样的CefSharp也提供了这个接口的默认实现：`ResourceRequestHandler`，所以我们还需要一个继承`ResourceRequestHandler`的类（也就是上面代码中的`CustomResourceRequestHandler`类）：\n```\npublic class CustomResourceRequestHandler : ResourceRequestHandler\n{\n    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n    {\n        var headers = request.Headers;\n        headers[\"Custom-Header\"] = \"My Custom Header\";\n        request.Headers = headers;\n\n        return CefReturnValue.Continue;\n    }\n}\n```\n最后，把自定义请求类设置到CefSharp实例中\n```\nmyChrome.RequestHandler = new CustomRequestHandler();\n```\n通过Fiddler这样的抓包工具，我们就会发现，自定义的`Custom-Header`头已经加上了\n\n![detail](https://s2.ax1x.com/2019/11/16/MBE5Dg.png)\n\n### 添加自定义查询参数\n上面的例子中，我们添加了自定义的header，如果我们想改写`URL`添加一些自定义的查询参数呢，譬如`name=foo`？这里有个坑，如果我们简单地把`request.Url += \"?name=foo\"`，这样会导致无限重定向（因为改了Url就会重定向）。解决方法也很简单，就是判断一下我们想要的查询参数是否已经在`Url`里了：\n```\nprotected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n{\n    var headers = request.Headers;\n    headers[\"Custom-Header\"] = \"My Custom Header\";\n    request.Headers = headers;\n\n    if (!request.Url.Contains(\"name=foo\"))\n    {\n        request.Url += \"?\" + \"name=foo\";\n    }\n\n    return CefReturnValue.Continue;\n}\n```\n\n### 添加自定义Body\n\n根据[IRequest](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequest.htm)的文档，我们可以利用`PostData`属性：\n```\nprotected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n{\n    var headers = request.Headers;\n    headers[\"Custom-Header\"] = \"My Custom Header\";\n    request.Headers = headers;\n\n    string body = \"name=foo\";\n    byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(body);\n\n    request.InitializePostData();\n    var element = request.PostData.CreatePostDataElement();\n    element.Bytes = byteArray;\n    request.PostData.AddElement(element);\n\n    return CefReturnValue.Continue;\n}\n```\n通过Fiddler这样的抓包工具，我们就会发现，POST 数据已经加上了：\n\n![detail](https://s2.ax1x.com/2019/11/30/QVjqp9.png)\n\n## 加载本地HTML字符串\n\n有时候，我们可能需要渲染一个内存中的HTML字符串，CefSharp也提供这样的接口，代码很简单：\n```\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    string html = @\"<!DOCTYPE html>\n<html>\n    <head>\n        <title>这是个标题</title>\n        <meta charset='utf-8' />\n        <meta name = 'viewport' content = 'width=device-width, initial-scale=1' />\n     </head>\n    <body>\n        <h1>这是一个一个简单的HTML</h1>\n        <p>Hello World！</p >\n    </body>\n</html>\";\n    String url = \"https://www.baidu.com\";\n    myChrome.LoadHtml(html, url);\n}\n\n```\n\n## 截断响应\n这里的关键在于`GetResourceResponseFilter`方法，它的签名如下：\n```\nIResponseFilter GetResourceResponseFilter(\n\tIWebBrowser chromiumWebBrowser,\n\tIBrowser browser,\n\tIFrame frame,\n\tIRequest request,\n\tIResponse response\n)\n```\n它返回了一个`IResponseFilter`接口，在这个接口中，我们可以截取到请求响应的内容。在CefSharp最新版本中，`GetResourceResponseFilter`已经被放入到`IResourceRequestHandler`接口中，[最新文档](http://cefsharp.github.io/api/75.1.x/html/M_CefSharp_IResourceRequestHandler_GetResourceResponseFilter.htm)。  \n下面我放了一个截断网页XHR请求的例子：\n```\npublic class TestJsonFilter : IResponseFilter\n{\n    public List<byte> DataAll = new List<byte>();\n\n    public FilterStatus Filter(System.IO.Stream dataIn, out long dataInRead, System.IO.Stream dataOut, out long dataOutWritten)\n    {\n        try\n        {\n            if (dataIn == null || dataIn.Length == 0)\n            {\n                dataInRead = 0;\n                dataOutWritten = 0;\n\n                return FilterStatus.Done;\n            }\n\n            dataInRead = dataIn.Length;\n            dataOutWritten = Math.Min(dataInRead, dataOut.Length);\n\n            dataIn.CopyTo(dataOut);\n            dataIn.Seek(0, SeekOrigin.Begin);\n            byte[] bs = new byte[dataIn.Length];\n            dataIn.Read(bs, 0, bs.Length);\n            DataAll.AddRange(bs);\n\n            dataInRead = dataIn.Length;\n            dataOutWritten = dataIn.Length;\n\n            return FilterStatus.NeedMoreData;\n        }\n        catch (Exception ex)\n        {\n            dataInRead = dataIn.Length;\n            dataOutWritten = dataIn.Length;\n\n            return FilterStatus.Done;\n        }\n    }\n\n    public bool InitFilter()\n    {\n        return true;\n    }\n\n    public void Dispose()\n    {\n\n    }\n}\n\npublic class FilterManager\n{\n    private static Dictionary<string, IResponseFilter> dataList = new Dictionary<string, IResponseFilter>();\n\n    public static IResponseFilter CreateFilter(string guid)\n    {\n        lock (dataList)\n        {\n            var filter = new TestJsonFilter();\n            dataList.Add(guid, filter);\n\n            return filter;\n        }\n    }\n\n    public static IResponseFilter GetFileter(string guid)\n    {\n        lock (dataList)\n        {\n        \n            if (dataList.ContainsKey(guid))  // 这里要检测key存在，不然会报异常，会导致ContextSwitchDeadlock\n            {\n                return dataList[guid];\n            }\n            else\n            {\n                return null;\n            }\n        }\n    }\n}\n\npublic class CustomResourceRequestHandler : ResourceRequestHandler\n{\n    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n    {\n        // 截断请求的代码...\n        return CefReturnValue.Continue;\n    }\n\n\n    protected override IResponseFilter GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response)\n    {\n        if (!(request.ResourceType == ResourceType.Xhr))  // 不是XHR类型就不去过滤\n        {\n            return null;\n        }\n        var filer = FilterManager.CreateFilter(request.Identifier.ToString());\n        return filer;\n    }\n\n    protected override void OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength)\n    {\n        var filer = FilterManager.GetFileter(request.Identifier.ToString()) as TestJsonFilter;\n        if (filer != null)\n        {\n            Console.WriteLine(ASCIIEncoding.UTF8.GetString(filer.DataAll.ToArray()));  // 打印body内容\n        }\n    }\n}\n\n\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://github.com/salamander-mh\";  // github首页上有ajax请求，可以看效果\n    myChrome.Load(url);\n}\n\n```\n运行程序，在`输出`视图就可以看到Ajax请求的body数据。\n\n## 截取cookie\n建立Cookie读取对象，继承接口 ICookieVisitor\n```\npublic class CookieVisitor : CefSharp.ICookieVisitor\n{\n    public event Action<CefSharp.Cookie> SendCookie;\n\n\n    public bool Visit(Cookie cookie, int count, int total, ref bool deleteCookie)\n    {\n        deleteCookie = false;\n        if (SendCookie != null)\n        {\n            SendCookie(cookie);\n        }\n\n        return true;\n    }\n\n    public void Dispose()\n    {\n    }\n}\n```\n在browser事件中进行处理\n```\nprivate void browser_FrameLoadEnd(object sender, CefSharp.FrameLoadEndEventArgs e)\n{\n    var cookieManager = myChrome.GetCookieManager();\n\n    CookieVisitor visitor = new CookieVisitor();\n    visitor.SendCookie += visitor_SendCookie;\n    cookieManager.VisitAllCookies(visitor);\n}\n```\n**回调事件**\n```\nprivate void visitor_SendCookie(CefSharp.Cookie obj)\n{\n    Console.WriteLine(\"获取cookie：\" + obj.Domain.TrimStart('.') + \"^\" + obj.Name + \"^\" + obj.Value + \"$\");\n}\n```\n设置CefSharp实例事件：\n```\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://www.baidu.com\";\n    myChrome.Load(url);\n    myChrome.FrameLoadEnd += browser_FrameLoadEnd;\n}\n```\n运行程序，在`输出`视图就可以看到**cookie**数据了。\n\n## Javascript交互\n\n### C#执行js方法\n```\nmyChrome.GetBrowser().MainFrame.ExecuteJavaScriptAsync(\"document.getElementById('testid').click();\");  \n```\n以上代码就会触发id为`testid`的元素的`click`事件。  \n注意：**脚本是在 Frame 级别执行**，页面永远至少有一个Frame（ MainFrame ）。\n\n### 获取Javascript方法结果\n这里需要使用`Task<JavascriptResponse> EvaluateScriptAsync(string script, TimeSpan? timeout)`方法。 JavaScript代码是异步执行的，因此使用.NET Task 类返回一个响应，其中包含错误消息，结果和一个成功（bool）标志。\n```\n// Get Document Height  \nvar task = frame.EvaluateScriptAsync(\"(function() { var body = document.body, html = document.documentElement; return  Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight ); })();\", null);\n  \ntask.ContinueWith(t =>  \n{  \n    if (!t.IsFaulted)  \n    {  \n        var response = t.Result;  \n        EvaluateJavaScriptResult = response.Success ? (response.Result ?? \"null\") : response.Message;  \n    }  \n}, TaskScheduler.FromCurrentSynchronizationContext());  \n```\n\n\n\n## 资源清理\n关闭应用，发现`CefSharp.BrowserSubprocess.exe`进程会发现没有结束，其实在退出事件中，我们需要调用`Cef.Shutdown()`方法\n```\ntry  \n{  \n    if (browser != null)  \n    {  \n        browser.Dispose();  \n        Cef.Shutdown();  \n    }  \n}  \ncatch { }  \n```\n\n\n\n示例代码[下载](http://file.51lucy.com/BroswerTest.rar)\n\n\n\n参考：\n* [StackOverflow](https://stackoverflow.com/questions/31250797/chromium-send-custom-header-info-on-initial-page-load-c-sharp)\n* [How to read the JSON response content from a XMLHttpRequest?](https://stackoverflow.com/questions/40944056/how-to-read-the-json-response-content-from-a-xmlhttprequest/43652932#43652932)\n* [**CefSharp中文帮助文档**](https://github.com/cefsharp/CefSharp/wiki/CefSharp%E4%B8%AD%E6%96%87%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3)","source":"_posts/CefSharp_summary.md","raw":"title: CefSharp浅尝辄止\nauthor: Salamander\ntags:\n  - 'C#'\n  - CefSharp\n  - WPF\ncategories:\n  - 'C#'\ndate: 2019-11-16 20:00:00\n---\n![docker logo](/images/CefSharp-logo.png)\n\n## CefSharp\n[CEF](https://github.com/chromiumembedded/cef)全称：**Chromium Embedded Framework**。  \nCefSharp是什么？[官网](http://cefsharp.github.io/)上它是这么写的：CefSharp是在C#或VB.NET应用程序中嵌入全功能标准兼容web浏览器的最简单方法。CefSharp有WinForms和WPF应用程序的浏览器控件，也有自动化项目的无标题（屏幕外）版本。CefSharp基于Chromium嵌入式框架，这是Google Chrome的开源版本。  \n说白了，就是基于C#或VB语言的**可编程浏览器**（当然CEF也有其他语言的，如[Java](https://bitbucket.org/chromiumembedded/java-cef)，[Go](https://github.com/cztomczak/cef2go)）。\n\n<!-- more -->\n\n本文环境：\n* CefSharp版本：75.1.143\n* VS版本：2015\n* 操作系统：Windows 10专业版\n\n## WPF引入CefSharp\nCefSharp有现成的NuGet包，先引入到项目中，然后在XAML中添加响应控件：\n```\n<cefSharp:ChromiumWebBrowser Name=\"myChrome\" Loaded=\"myChrome_Loaded\"/>\n```\n添加`cefSharp`命名空间：\n```\nxmlns:cefSharp=\"clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf\"\n```\n在`myChrome_Loaded`事件中，我们让浏览器打开百度首页：\n```C#\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://www.baidu.com\";\n    myChrome.Load(url);\n}\n```\n运行程序，我们就可以看到百度首页了。\n\n\n## 截断请求\n根据[文档](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_Handler_RequestHandler.htm)，我们可以看到`RequestHandler`类中的方法`GetResourceRequestHandler`会在每次发请求前被调用：\n> GetResourceRequestHandler  \n> Called on the CEF IO thread before a resource request is initiated.\n\n`RequestHandler`类是[`IRequestHandler`](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequestHandler.htm)接口的默认实现，我们自定义请求可以继承这个类：\n> Default implementation of IRequestHandler. \n> This class provides default implementations of the methods from IRequestHandler, therefore providing a convenience base class for any custom request handler.\n\n\n所以我们可以创建一个继承`RequestHandler`的类\n```\n\nclass CustomRequestHandler : RequestHandler\n{\n    protected override IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, ref bool disableDefaultHandling)\n    {\n        return new CustomResourceRequestHandler();\n    }\n}\n```\n\n`GetResourceRequestHandler`是我们要重点关注的方法，里头我们返回了一个类实例，在这个类中我们就可以**自定义请求**。  \n新版的CefSharp（75版本之后）把`OnBeforeResourceLoad`方法移动到了`IResourceRequestHandler`接口里（[文档](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IResourceRequestHandler.htm)），同样的CefSharp也提供了这个接口的默认实现：`ResourceRequestHandler`，所以我们还需要一个继承`ResourceRequestHandler`的类（也就是上面代码中的`CustomResourceRequestHandler`类）：\n```\npublic class CustomResourceRequestHandler : ResourceRequestHandler\n{\n    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n    {\n        var headers = request.Headers;\n        headers[\"Custom-Header\"] = \"My Custom Header\";\n        request.Headers = headers;\n\n        return CefReturnValue.Continue;\n    }\n}\n```\n最后，把自定义请求类设置到CefSharp实例中\n```\nmyChrome.RequestHandler = new CustomRequestHandler();\n```\n通过Fiddler这样的抓包工具，我们就会发现，自定义的`Custom-Header`头已经加上了\n\n![detail](https://s2.ax1x.com/2019/11/16/MBE5Dg.png)\n\n### 添加自定义查询参数\n上面的例子中，我们添加了自定义的header，如果我们想改写`URL`添加一些自定义的查询参数呢，譬如`name=foo`？这里有个坑，如果我们简单地把`request.Url += \"?name=foo\"`，这样会导致无限重定向（因为改了Url就会重定向）。解决方法也很简单，就是判断一下我们想要的查询参数是否已经在`Url`里了：\n```\nprotected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n{\n    var headers = request.Headers;\n    headers[\"Custom-Header\"] = \"My Custom Header\";\n    request.Headers = headers;\n\n    if (!request.Url.Contains(\"name=foo\"))\n    {\n        request.Url += \"?\" + \"name=foo\";\n    }\n\n    return CefReturnValue.Continue;\n}\n```\n\n### 添加自定义Body\n\n根据[IRequest](http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequest.htm)的文档，我们可以利用`PostData`属性：\n```\nprotected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n{\n    var headers = request.Headers;\n    headers[\"Custom-Header\"] = \"My Custom Header\";\n    request.Headers = headers;\n\n    string body = \"name=foo\";\n    byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(body);\n\n    request.InitializePostData();\n    var element = request.PostData.CreatePostDataElement();\n    element.Bytes = byteArray;\n    request.PostData.AddElement(element);\n\n    return CefReturnValue.Continue;\n}\n```\n通过Fiddler这样的抓包工具，我们就会发现，POST 数据已经加上了：\n\n![detail](https://s2.ax1x.com/2019/11/30/QVjqp9.png)\n\n## 加载本地HTML字符串\n\n有时候，我们可能需要渲染一个内存中的HTML字符串，CefSharp也提供这样的接口，代码很简单：\n```\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    string html = @\"<!DOCTYPE html>\n<html>\n    <head>\n        <title>这是个标题</title>\n        <meta charset='utf-8' />\n        <meta name = 'viewport' content = 'width=device-width, initial-scale=1' />\n     </head>\n    <body>\n        <h1>这是一个一个简单的HTML</h1>\n        <p>Hello World！</p >\n    </body>\n</html>\";\n    String url = \"https://www.baidu.com\";\n    myChrome.LoadHtml(html, url);\n}\n\n```\n\n## 截断响应\n这里的关键在于`GetResourceResponseFilter`方法，它的签名如下：\n```\nIResponseFilter GetResourceResponseFilter(\n\tIWebBrowser chromiumWebBrowser,\n\tIBrowser browser,\n\tIFrame frame,\n\tIRequest request,\n\tIResponse response\n)\n```\n它返回了一个`IResponseFilter`接口，在这个接口中，我们可以截取到请求响应的内容。在CefSharp最新版本中，`GetResourceResponseFilter`已经被放入到`IResourceRequestHandler`接口中，[最新文档](http://cefsharp.github.io/api/75.1.x/html/M_CefSharp_IResourceRequestHandler_GetResourceResponseFilter.htm)。  \n下面我放了一个截断网页XHR请求的例子：\n```\npublic class TestJsonFilter : IResponseFilter\n{\n    public List<byte> DataAll = new List<byte>();\n\n    public FilterStatus Filter(System.IO.Stream dataIn, out long dataInRead, System.IO.Stream dataOut, out long dataOutWritten)\n    {\n        try\n        {\n            if (dataIn == null || dataIn.Length == 0)\n            {\n                dataInRead = 0;\n                dataOutWritten = 0;\n\n                return FilterStatus.Done;\n            }\n\n            dataInRead = dataIn.Length;\n            dataOutWritten = Math.Min(dataInRead, dataOut.Length);\n\n            dataIn.CopyTo(dataOut);\n            dataIn.Seek(0, SeekOrigin.Begin);\n            byte[] bs = new byte[dataIn.Length];\n            dataIn.Read(bs, 0, bs.Length);\n            DataAll.AddRange(bs);\n\n            dataInRead = dataIn.Length;\n            dataOutWritten = dataIn.Length;\n\n            return FilterStatus.NeedMoreData;\n        }\n        catch (Exception ex)\n        {\n            dataInRead = dataIn.Length;\n            dataOutWritten = dataIn.Length;\n\n            return FilterStatus.Done;\n        }\n    }\n\n    public bool InitFilter()\n    {\n        return true;\n    }\n\n    public void Dispose()\n    {\n\n    }\n}\n\npublic class FilterManager\n{\n    private static Dictionary<string, IResponseFilter> dataList = new Dictionary<string, IResponseFilter>();\n\n    public static IResponseFilter CreateFilter(string guid)\n    {\n        lock (dataList)\n        {\n            var filter = new TestJsonFilter();\n            dataList.Add(guid, filter);\n\n            return filter;\n        }\n    }\n\n    public static IResponseFilter GetFileter(string guid)\n    {\n        lock (dataList)\n        {\n        \n            if (dataList.ContainsKey(guid))  // 这里要检测key存在，不然会报异常，会导致ContextSwitchDeadlock\n            {\n                return dataList[guid];\n            }\n            else\n            {\n                return null;\n            }\n        }\n    }\n}\n\npublic class CustomResourceRequestHandler : ResourceRequestHandler\n{\n    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)\n    {\n        // 截断请求的代码...\n        return CefReturnValue.Continue;\n    }\n\n\n    protected override IResponseFilter GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response)\n    {\n        if (!(request.ResourceType == ResourceType.Xhr))  // 不是XHR类型就不去过滤\n        {\n            return null;\n        }\n        var filer = FilterManager.CreateFilter(request.Identifier.ToString());\n        return filer;\n    }\n\n    protected override void OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength)\n    {\n        var filer = FilterManager.GetFileter(request.Identifier.ToString()) as TestJsonFilter;\n        if (filer != null)\n        {\n            Console.WriteLine(ASCIIEncoding.UTF8.GetString(filer.DataAll.ToArray()));  // 打印body内容\n        }\n    }\n}\n\n\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://github.com/salamander-mh\";  // github首页上有ajax请求，可以看效果\n    myChrome.Load(url);\n}\n\n```\n运行程序，在`输出`视图就可以看到Ajax请求的body数据。\n\n## 截取cookie\n建立Cookie读取对象，继承接口 ICookieVisitor\n```\npublic class CookieVisitor : CefSharp.ICookieVisitor\n{\n    public event Action<CefSharp.Cookie> SendCookie;\n\n\n    public bool Visit(Cookie cookie, int count, int total, ref bool deleteCookie)\n    {\n        deleteCookie = false;\n        if (SendCookie != null)\n        {\n            SendCookie(cookie);\n        }\n\n        return true;\n    }\n\n    public void Dispose()\n    {\n    }\n}\n```\n在browser事件中进行处理\n```\nprivate void browser_FrameLoadEnd(object sender, CefSharp.FrameLoadEndEventArgs e)\n{\n    var cookieManager = myChrome.GetCookieManager();\n\n    CookieVisitor visitor = new CookieVisitor();\n    visitor.SendCookie += visitor_SendCookie;\n    cookieManager.VisitAllCookies(visitor);\n}\n```\n**回调事件**\n```\nprivate void visitor_SendCookie(CefSharp.Cookie obj)\n{\n    Console.WriteLine(\"获取cookie：\" + obj.Domain.TrimStart('.') + \"^\" + obj.Name + \"^\" + obj.Value + \"$\");\n}\n```\n设置CefSharp实例事件：\n```\nprivate void myChrome_Loaded(object sender, RoutedEventArgs e)\n{\n    String url = \"https://www.baidu.com\";\n    myChrome.Load(url);\n    myChrome.FrameLoadEnd += browser_FrameLoadEnd;\n}\n```\n运行程序，在`输出`视图就可以看到**cookie**数据了。\n\n## Javascript交互\n\n### C#执行js方法\n```\nmyChrome.GetBrowser().MainFrame.ExecuteJavaScriptAsync(\"document.getElementById('testid').click();\");  \n```\n以上代码就会触发id为`testid`的元素的`click`事件。  \n注意：**脚本是在 Frame 级别执行**，页面永远至少有一个Frame（ MainFrame ）。\n\n### 获取Javascript方法结果\n这里需要使用`Task<JavascriptResponse> EvaluateScriptAsync(string script, TimeSpan? timeout)`方法。 JavaScript代码是异步执行的，因此使用.NET Task 类返回一个响应，其中包含错误消息，结果和一个成功（bool）标志。\n```\n// Get Document Height  \nvar task = frame.EvaluateScriptAsync(\"(function() { var body = document.body, html = document.documentElement; return  Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight ); })();\", null);\n  \ntask.ContinueWith(t =>  \n{  \n    if (!t.IsFaulted)  \n    {  \n        var response = t.Result;  \n        EvaluateJavaScriptResult = response.Success ? (response.Result ?? \"null\") : response.Message;  \n    }  \n}, TaskScheduler.FromCurrentSynchronizationContext());  \n```\n\n\n\n## 资源清理\n关闭应用，发现`CefSharp.BrowserSubprocess.exe`进程会发现没有结束，其实在退出事件中，我们需要调用`Cef.Shutdown()`方法\n```\ntry  \n{  \n    if (browser != null)  \n    {  \n        browser.Dispose();  \n        Cef.Shutdown();  \n    }  \n}  \ncatch { }  \n```\n\n\n\n示例代码[下载](http://file.51lucy.com/BroswerTest.rar)\n\n\n\n参考：\n* [StackOverflow](https://stackoverflow.com/questions/31250797/chromium-send-custom-header-info-on-initial-page-load-c-sharp)\n* [How to read the JSON response content from a XMLHttpRequest?](https://stackoverflow.com/questions/40944056/how-to-read-the-json-response-content-from-a-xmlhttprequest/43652932#43652932)\n* [**CefSharp中文帮助文档**](https://github.com/cefsharp/CefSharp/wiki/CefSharp%E4%B8%AD%E6%96%87%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3)","slug":"CefSharp_summary","published":1,"updated":"2023-03-21T02:48:19.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40kt00072o3m6mxwd3og","content":"<figure>\r\n<img src=\"/images/CefSharp-logo.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<h2 id=\"cefsharp\">CefSharp</h2>\r\n<p><a\r\nhref=\"https://github.com/chromiumembedded/cef\">CEF</a>全称：<strong>Chromium\r\nEmbedded Framework</strong>。<br />\r\nCefSharp是什么？<a\r\nhref=\"http://cefsharp.github.io/\">官网</a>上它是这么写的：CefSharp是在C#或VB.NET应用程序中嵌入全功能标准兼容web浏览器的最简单方法。CefSharp有WinForms和WPF应用程序的浏览器控件，也有自动化项目的无标题（屏幕外）版本。CefSharp基于Chromium嵌入式框架，这是Google\r\nChrome的开源版本。<br />\r\n说白了，就是基于C#或VB语言的<strong>可编程浏览器</strong>（当然CEF也有其他语言的，如<a\r\nhref=\"https://bitbucket.org/chromiumembedded/java-cef\">Java</a>，<a\r\nhref=\"https://github.com/cztomczak/cef2go\">Go</a>）。</p>\r\n<span id=\"more\"></span>\r\n<p>本文环境： * CefSharp版本：75.1.143 * VS版本：2015 *\r\n操作系统：Windows 10专业版</p>\r\n<h2 id=\"wpf引入cefsharp\">WPF引入CefSharp</h2>\r\n<p>CefSharp有现成的NuGet包，先引入到项目中，然后在XAML中添加响应控件：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;cefSharp:ChromiumWebBrowser Name=&quot;myChrome&quot; Loaded=&quot;myChrome_Loaded&quot;/&gt;</span><br></pre></td></tr></table></figure> 添加<code>cefSharp</code>命名空间： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:cefSharp=&quot;clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf&quot;</span><br></pre></td></tr></table></figure>\r\n在<code>myChrome_Loaded</code>事件中，我们让浏览器打开百度首页：\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">myChrome_Loaded</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = <span class=\"string\">&quot;https://www.baidu.com&quot;</span>;</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 运行程序，我们就可以看到百度首页了。</p>\r\n<h2 id=\"截断请求\">截断请求</h2>\r\n<p>根据<a\r\nhref=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_Handler_RequestHandler.htm\">文档</a>，我们可以看到<code>RequestHandler</code>类中的方法<code>GetResourceRequestHandler</code>会在每次发请求前被调用：\r\n&gt; GetResourceRequestHandler<br />\r\n&gt; Called on the CEF IO thread before a resource request is\r\ninitiated.</p>\r\n<p><code>RequestHandler</code>类是<a\r\nhref=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequestHandler.htm\"><code>IRequestHandler</code></a>接口的默认实现，我们自定义请求可以继承这个类：\r\n&gt; Default implementation of IRequestHandler. &gt; This class provides\r\ndefault implementations of the methods from IRequestHandler, therefore\r\nproviding a convenience base class for any custom request handler.</p>\r\n<p>所以我们可以创建一个继承<code>RequestHandler</code>的类\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class CustomRequestHandler : RequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, ref bool disableDefaultHandling)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new CustomResourceRequestHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p><code>GetResourceRequestHandler</code>是我们要重点关注的方法，里头我们返回了一个类实例，在这个类中我们就可以<strong>自定义请求</strong>。<br />\r\n新版的CefSharp（75版本之后）把<code>OnBeforeResourceLoad</code>方法移动到了<code>IResourceRequestHandler</code>接口里（<a\r\nhref=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IResourceRequestHandler.htm\">文档</a>），同样的CefSharp也提供了这个接口的默认实现：<code>ResourceRequestHandler</code>，所以我们还需要一个继承<code>ResourceRequestHandler</code>的类（也就是上面代码中的<code>CustomResourceRequestHandler</code>类）：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomResourceRequestHandler : ResourceRequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var headers = request.Headers;</span><br><span class=\"line\">        headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">        request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        return CefReturnValue.Continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 最后，把自定义请求类设置到CefSharp实例中 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myChrome.RequestHandler = new CustomRequestHandler();</span><br></pre></td></tr></table></figure>\r\n通过Fiddler这样的抓包工具，我们就会发现，自定义的<code>Custom-Header</code>头已经加上了</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/11/16/MBE5Dg.png\" alt=\"detail\" />\r\n<figcaption aria-hidden=\"true\">detail</figcaption>\r\n</figure>\r\n<h3 id=\"添加自定义查询参数\">添加自定义查询参数</h3>\r\n<p>上面的例子中，我们添加了自定义的header，如果我们想改写<code>URL</code>添加一些自定义的查询参数呢，譬如<code>name=foo</code>？这里有个坑，如果我们简单地把<code>request.Url += \"?name=foo\"</code>，这样会导致无限重定向（因为改了Url就会重定向）。解决方法也很简单，就是判断一下我们想要的查询参数是否已经在<code>Url</code>里了：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var headers = request.Headers;</span><br><span class=\"line\">    headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">    request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!request.Url.Contains(&quot;name=foo&quot;))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        request.Url += &quot;?&quot; + &quot;name=foo&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return CefReturnValue.Continue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"添加自定义body\">添加自定义Body</h3>\r\n<p>根据<a\r\nhref=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequest.htm\">IRequest</a>的文档，我们可以利用<code>PostData</code>属性：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var headers = request.Headers;</span><br><span class=\"line\">    headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">    request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">    string body = &quot;name=foo&quot;;</span><br><span class=\"line\">    byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(body);</span><br><span class=\"line\"></span><br><span class=\"line\">    request.InitializePostData();</span><br><span class=\"line\">    var element = request.PostData.CreatePostDataElement();</span><br><span class=\"line\">    element.Bytes = byteArray;</span><br><span class=\"line\">    request.PostData.AddElement(element);</span><br><span class=\"line\"></span><br><span class=\"line\">    return CefReturnValue.Continue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 通过Fiddler这样的抓包工具，我们就会发现，POST\r\n数据已经加上了：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/11/30/QVjqp9.png\" alt=\"detail\" />\r\n<figcaption aria-hidden=\"true\">detail</figcaption>\r\n</figure>\r\n<h2 id=\"加载本地html字符串\">加载本地HTML字符串</h2>\r\n<p>有时候，我们可能需要渲染一个内存中的HTML字符串，CefSharp也提供这样的接口，代码很简单：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string html = @&quot;&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;这是个标题&lt;/title&gt;</span><br><span class=\"line\">        &lt;meta charset=&#x27;utf-8&#x27; /&gt;</span><br><span class=\"line\">        &lt;meta name = &#x27;viewport&#x27; content = &#x27;width=device-width, initial-scale=1&#x27; /&gt;</span><br><span class=\"line\">     &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;h1&gt;这是一个一个简单的HTML&lt;/h1&gt;</span><br><span class=\"line\">        &lt;p&gt;Hello World！&lt;/p &gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;&quot;;</span><br><span class=\"line\">    String url = &quot;https://www.baidu.com&quot;;</span><br><span class=\"line\">    myChrome.LoadHtml(html, url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"截断响应\">截断响应</h2>\r\n<p>这里的关键在于<code>GetResourceResponseFilter</code>方法，它的签名如下：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IResponseFilter GetResourceResponseFilter(</span><br><span class=\"line\">\tIWebBrowser chromiumWebBrowser,</span><br><span class=\"line\">\tIBrowser browser,</span><br><span class=\"line\">\tIFrame frame,</span><br><span class=\"line\">\tIRequest request,</span><br><span class=\"line\">\tIResponse response</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\r\n它返回了一个<code>IResponseFilter</code>接口，在这个接口中，我们可以截取到请求响应的内容。在CefSharp最新版本中，<code>GetResourceResponseFilter</code>已经被放入到<code>IResourceRequestHandler</code>接口中，<a\r\nhref=\"http://cefsharp.github.io/api/75.1.x/html/M_CefSharp_IResourceRequestHandler_GetResourceResponseFilter.htm\">最新文档</a>。<br />\r\n下面我放了一个截断网页XHR请求的例子： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestJsonFilter : IResponseFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public List&lt;byte&gt; DataAll = new List&lt;byte&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public FilterStatus Filter(System.IO.Stream dataIn, out long dataInRead, System.IO.Stream dataOut, out long dataOutWritten)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        try</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (dataIn == null || dataIn.Length == 0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dataInRead = 0;</span><br><span class=\"line\">                dataOutWritten = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                return FilterStatus.Done;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = Math.Min(dataInRead, dataOut.Length);</span><br><span class=\"line\"></span><br><span class=\"line\">            dataIn.CopyTo(dataOut);</span><br><span class=\"line\">            dataIn.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">            byte[] bs = new byte[dataIn.Length];</span><br><span class=\"line\">            dataIn.Read(bs, 0, bs.Length);</span><br><span class=\"line\">            DataAll.AddRange(bs);</span><br><span class=\"line\"></span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = dataIn.Length;</span><br><span class=\"line\"></span><br><span class=\"line\">            return FilterStatus.NeedMoreData;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = dataIn.Length;</span><br><span class=\"line\"></span><br><span class=\"line\">            return FilterStatus.Done;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool InitFilter()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Dispose()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FilterManager</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private static Dictionary&lt;string, IResponseFilter&gt; dataList = new Dictionary&lt;string, IResponseFilter&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static IResponseFilter CreateFilter(string guid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lock (dataList)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            var filter = new TestJsonFilter();</span><br><span class=\"line\">            dataList.Add(guid, filter);</span><br><span class=\"line\"></span><br><span class=\"line\">            return filter;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static IResponseFilter GetFileter(string guid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lock (dataList)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">            if (dataList.ContainsKey(guid))  // 这里要检测key存在，不然会报异常，会导致ContextSwitchDeadlock</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return dataList[guid];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CustomResourceRequestHandler : ResourceRequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 截断请求的代码...</span><br><span class=\"line\">        return CefReturnValue.Continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    protected override IResponseFilter GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!(request.ResourceType == ResourceType.Xhr))  // 不是XHR类型就不去过滤</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var filer = FilterManager.CreateFilter(request.Identifier.ToString());</span><br><span class=\"line\">        return filer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected override void OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var filer = FilterManager.GetFileter(request.Identifier.ToString()) as TestJsonFilter;</span><br><span class=\"line\">        if (filer != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(ASCIIEncoding.UTF8.GetString(filer.DataAll.ToArray()));  // 打印body内容</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = &quot;https://github.com/salamander-mh&quot;;  // github首页上有ajax请求，可以看效果</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n运行程序，在<code>输出</code>视图就可以看到Ajax请求的body数据。</p>\r\n<h2 id=\"截取cookie\">截取cookie</h2>\r\n<p>建立Cookie读取对象，继承接口 ICookieVisitor <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CookieVisitor : CefSharp.ICookieVisitor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public event Action&lt;CefSharp.Cookie&gt; SendCookie;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public bool Visit(Cookie cookie, int count, int total, ref bool deleteCookie)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        deleteCookie = false;</span><br><span class=\"line\">        if (SendCookie != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SendCookie(cookie);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Dispose()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n在browser事件中进行处理 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void browser_FrameLoadEnd(object sender, CefSharp.FrameLoadEndEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var cookieManager = myChrome.GetCookieManager();</span><br><span class=\"line\"></span><br><span class=\"line\">    CookieVisitor visitor = new CookieVisitor();</span><br><span class=\"line\">    visitor.SendCookie += visitor_SendCookie;</span><br><span class=\"line\">    cookieManager.VisitAllCookies(visitor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> <strong>回调事件</strong>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void visitor_SendCookie(CefSharp.Cookie obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(&quot;获取cookie：&quot; + obj.Domain.TrimStart(&#x27;.&#x27;) + &quot;^&quot; + obj.Name + &quot;^&quot; + obj.Value + &quot;$&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 设置CefSharp实例事件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = &quot;https://www.baidu.com&quot;;</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">    myChrome.FrameLoadEnd += browser_FrameLoadEnd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n运行程序，在<code>输出</code>视图就可以看到<strong>cookie</strong>数据了。</p>\r\n<h2 id=\"javascript交互\">Javascript交互</h2>\r\n<h3 id=\"c执行js方法\">C#执行js方法</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myChrome.GetBrowser().MainFrame.ExecuteJavaScriptAsync(&quot;document.getElementById(&#x27;testid&#x27;).click();&quot;);  </span><br></pre></td></tr></table></figure>\r\n<p>以上代码就会触发id为<code>testid</code>的元素的<code>click</code>事件。<br />\r\n注意：<strong>脚本是在 Frame\r\n级别执行</strong>，页面永远至少有一个Frame（ MainFrame ）。</p>\r\n<h3 id=\"获取javascript方法结果\">获取Javascript方法结果</h3>\r\n<p>这里需要使用<code>Task&lt;JavascriptResponse&gt; EvaluateScriptAsync(string script, TimeSpan? timeout)</code>方法。\r\nJavaScript代码是异步执行的，因此使用.NET Task\r\n类返回一个响应，其中包含错误消息，结果和一个成功（bool）标志。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Get Document Height  </span><br><span class=\"line\">var task = frame.EvaluateScriptAsync(&quot;(function() &#123; var body = document.body, html = document.documentElement; return  Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight ); &#125;)();&quot;, null);</span><br><span class=\"line\">  </span><br><span class=\"line\">task.ContinueWith(t =&gt;  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    if (!t.IsFaulted)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        var response = t.Result;  </span><br><span class=\"line\">        EvaluateJavaScriptResult = response.Success ? (response.Result ?? &quot;null&quot;) : response.Message;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;, TaskScheduler.FromCurrentSynchronizationContext());  </span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"资源清理\">资源清理</h2>\r\n<p>关闭应用，发现<code>CefSharp.BrowserSubprocess.exe</code>进程会发现没有结束，其实在退出事件中，我们需要调用<code>Cef.Shutdown()</code>方法\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    if (browser != null)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        browser.Dispose();  </span><br><span class=\"line\">        Cef.Shutdown();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">catch &#123; &#125;  </span><br></pre></td></tr></table></figure></p>\r\n<p>示例代码<a href=\"http://file.51lucy.com/BroswerTest.rar\">下载</a></p>\r\n<p>参考： * <a\r\nhref=\"https://stackoverflow.com/questions/31250797/chromium-send-custom-header-info-on-initial-page-load-c-sharp\">StackOverflow</a>\r\n* <a\r\nhref=\"https://stackoverflow.com/questions/40944056/how-to-read-the-json-response-content-from-a-xmlhttprequest/43652932#43652932\">How\r\nto read the JSON response content from a XMLHttpRequest?</a> * <a\r\nhref=\"https://github.com/cefsharp/CefSharp/wiki/CefSharp%E4%B8%AD%E6%96%87%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3\"><strong>CefSharp中文帮助文档</strong></a></p>\r\n","site":{"data":{}},"excerpt":"<figure>\r\n<img src=\"/images/CefSharp-logo.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<h2 id=\"cefsharp\">CefSharp</h2>\r\n<p><a\r\nhref=\"https://github.com/chromiumembedded/cef\">CEF</a>全称：<strong>Chromium\r\nEmbedded Framework</strong>。<br />\r\nCefSharp是什么？<a\r\nhref=\"http://cefsharp.github.io/\">官网</a>上它是这么写的：CefSharp是在C#或VB.NET应用程序中嵌入全功能标准兼容web浏览器的最简单方法。CefSharp有WinForms和WPF应用程序的浏览器控件，也有自动化项目的无标题（屏幕外）版本。CefSharp基于Chromium嵌入式框架，这是Google\r\nChrome的开源版本。<br />\r\n说白了，就是基于C#或VB语言的<strong>可编程浏览器</strong>（当然CEF也有其他语言的，如<a\r\nhref=\"https://bitbucket.org/chromiumembedded/java-cef\">Java</a>，<a\r\nhref=\"https://github.com/cztomczak/cef2go\">Go</a>）。</p>","more":"<p>本文环境： * CefSharp版本：75.1.143 * VS版本：2015 *\r\n操作系统：Windows 10专业版</p>\r\n<h2 id=\"wpf引入cefsharp\">WPF引入CefSharp</h2>\r\n<p>CefSharp有现成的NuGet包，先引入到项目中，然后在XAML中添加响应控件：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;cefSharp:ChromiumWebBrowser Name=&quot;myChrome&quot; Loaded=&quot;myChrome_Loaded&quot;/&gt;</span><br></pre></td></tr></table></figure> 添加<code>cefSharp</code>命名空间： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:cefSharp=&quot;clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf&quot;</span><br></pre></td></tr></table></figure>\r\n在<code>myChrome_Loaded</code>事件中，我们让浏览器打开百度首页：\r\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">myChrome_Loaded</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = <span class=\"string\">&quot;https://www.baidu.com&quot;</span>;</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 运行程序，我们就可以看到百度首页了。</p>\r\n<h2 id=\"截断请求\">截断请求</h2>\r\n<p>根据<a\r\nhref=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_Handler_RequestHandler.htm\">文档</a>，我们可以看到<code>RequestHandler</code>类中的方法<code>GetResourceRequestHandler</code>会在每次发请求前被调用：\r\n&gt; GetResourceRequestHandler<br />\r\n&gt; Called on the CEF IO thread before a resource request is\r\ninitiated.</p>\r\n<p><code>RequestHandler</code>类是<a\r\nhref=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequestHandler.htm\"><code>IRequestHandler</code></a>接口的默认实现，我们自定义请求可以继承这个类：\r\n&gt; Default implementation of IRequestHandler. &gt; This class provides\r\ndefault implementations of the methods from IRequestHandler, therefore\r\nproviding a convenience base class for any custom request handler.</p>\r\n<p>所以我们可以创建一个继承<code>RequestHandler</code>的类\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class CustomRequestHandler : RequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override IResourceRequestHandler GetResourceRequestHandler(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, bool isNavigation, bool isDownload, string requestInitiator, ref bool disableDefaultHandling)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new CustomResourceRequestHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p><code>GetResourceRequestHandler</code>是我们要重点关注的方法，里头我们返回了一个类实例，在这个类中我们就可以<strong>自定义请求</strong>。<br />\r\n新版的CefSharp（75版本之后）把<code>OnBeforeResourceLoad</code>方法移动到了<code>IResourceRequestHandler</code>接口里（<a\r\nhref=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IResourceRequestHandler.htm\">文档</a>），同样的CefSharp也提供了这个接口的默认实现：<code>ResourceRequestHandler</code>，所以我们还需要一个继承<code>ResourceRequestHandler</code>的类（也就是上面代码中的<code>CustomResourceRequestHandler</code>类）：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomResourceRequestHandler : ResourceRequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var headers = request.Headers;</span><br><span class=\"line\">        headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">        request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">        return CefReturnValue.Continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 最后，把自定义请求类设置到CefSharp实例中 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myChrome.RequestHandler = new CustomRequestHandler();</span><br></pre></td></tr></table></figure>\r\n通过Fiddler这样的抓包工具，我们就会发现，自定义的<code>Custom-Header</code>头已经加上了</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/11/16/MBE5Dg.png\" alt=\"detail\" />\r\n<figcaption aria-hidden=\"true\">detail</figcaption>\r\n</figure>\r\n<h3 id=\"添加自定义查询参数\">添加自定义查询参数</h3>\r\n<p>上面的例子中，我们添加了自定义的header，如果我们想改写<code>URL</code>添加一些自定义的查询参数呢，譬如<code>name=foo</code>？这里有个坑，如果我们简单地把<code>request.Url += \"?name=foo\"</code>，这样会导致无限重定向（因为改了Url就会重定向）。解决方法也很简单，就是判断一下我们想要的查询参数是否已经在<code>Url</code>里了：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var headers = request.Headers;</span><br><span class=\"line\">    headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">    request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!request.Url.Contains(&quot;name=foo&quot;))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        request.Url += &quot;?&quot; + &quot;name=foo&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return CefReturnValue.Continue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"添加自定义body\">添加自定义Body</h3>\r\n<p>根据<a\r\nhref=\"http://cefsharp.github.io/api/75.1.x/html/T_CefSharp_IRequest.htm\">IRequest</a>的文档，我们可以利用<code>PostData</code>属性：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var headers = request.Headers;</span><br><span class=\"line\">    headers[&quot;Custom-Header&quot;] = &quot;My Custom Header&quot;;</span><br><span class=\"line\">    request.Headers = headers;</span><br><span class=\"line\"></span><br><span class=\"line\">    string body = &quot;name=foo&quot;;</span><br><span class=\"line\">    byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(body);</span><br><span class=\"line\"></span><br><span class=\"line\">    request.InitializePostData();</span><br><span class=\"line\">    var element = request.PostData.CreatePostDataElement();</span><br><span class=\"line\">    element.Bytes = byteArray;</span><br><span class=\"line\">    request.PostData.AddElement(element);</span><br><span class=\"line\"></span><br><span class=\"line\">    return CefReturnValue.Continue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 通过Fiddler这样的抓包工具，我们就会发现，POST\r\n数据已经加上了：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/11/30/QVjqp9.png\" alt=\"detail\" />\r\n<figcaption aria-hidden=\"true\">detail</figcaption>\r\n</figure>\r\n<h2 id=\"加载本地html字符串\">加载本地HTML字符串</h2>\r\n<p>有时候，我们可能需要渲染一个内存中的HTML字符串，CefSharp也提供这样的接口，代码很简单：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string html = @&quot;&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;title&gt;这是个标题&lt;/title&gt;</span><br><span class=\"line\">        &lt;meta charset=&#x27;utf-8&#x27; /&gt;</span><br><span class=\"line\">        &lt;meta name = &#x27;viewport&#x27; content = &#x27;width=device-width, initial-scale=1&#x27; /&gt;</span><br><span class=\"line\">     &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;h1&gt;这是一个一个简单的HTML&lt;/h1&gt;</span><br><span class=\"line\">        &lt;p&gt;Hello World！&lt;/p &gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;&quot;;</span><br><span class=\"line\">    String url = &quot;https://www.baidu.com&quot;;</span><br><span class=\"line\">    myChrome.LoadHtml(html, url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"截断响应\">截断响应</h2>\r\n<p>这里的关键在于<code>GetResourceResponseFilter</code>方法，它的签名如下：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IResponseFilter GetResourceResponseFilter(</span><br><span class=\"line\">\tIWebBrowser chromiumWebBrowser,</span><br><span class=\"line\">\tIBrowser browser,</span><br><span class=\"line\">\tIFrame frame,</span><br><span class=\"line\">\tIRequest request,</span><br><span class=\"line\">\tIResponse response</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\r\n它返回了一个<code>IResponseFilter</code>接口，在这个接口中，我们可以截取到请求响应的内容。在CefSharp最新版本中，<code>GetResourceResponseFilter</code>已经被放入到<code>IResourceRequestHandler</code>接口中，<a\r\nhref=\"http://cefsharp.github.io/api/75.1.x/html/M_CefSharp_IResourceRequestHandler_GetResourceResponseFilter.htm\">最新文档</a>。<br />\r\n下面我放了一个截断网页XHR请求的例子： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestJsonFilter : IResponseFilter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public List&lt;byte&gt; DataAll = new List&lt;byte&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public FilterStatus Filter(System.IO.Stream dataIn, out long dataInRead, System.IO.Stream dataOut, out long dataOutWritten)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        try</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (dataIn == null || dataIn.Length == 0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dataInRead = 0;</span><br><span class=\"line\">                dataOutWritten = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">                return FilterStatus.Done;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = Math.Min(dataInRead, dataOut.Length);</span><br><span class=\"line\"></span><br><span class=\"line\">            dataIn.CopyTo(dataOut);</span><br><span class=\"line\">            dataIn.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">            byte[] bs = new byte[dataIn.Length];</span><br><span class=\"line\">            dataIn.Read(bs, 0, bs.Length);</span><br><span class=\"line\">            DataAll.AddRange(bs);</span><br><span class=\"line\"></span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = dataIn.Length;</span><br><span class=\"line\"></span><br><span class=\"line\">            return FilterStatus.NeedMoreData;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dataInRead = dataIn.Length;</span><br><span class=\"line\">            dataOutWritten = dataIn.Length;</span><br><span class=\"line\"></span><br><span class=\"line\">            return FilterStatus.Done;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool InitFilter()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Dispose()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class FilterManager</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private static Dictionary&lt;string, IResponseFilter&gt; dataList = new Dictionary&lt;string, IResponseFilter&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public static IResponseFilter CreateFilter(string guid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lock (dataList)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            var filter = new TestJsonFilter();</span><br><span class=\"line\">            dataList.Add(guid, filter);</span><br><span class=\"line\"></span><br><span class=\"line\">            return filter;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static IResponseFilter GetFileter(string guid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lock (dataList)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">            if (dataList.ContainsKey(guid))  // 这里要检测key存在，不然会报异常，会导致ContextSwitchDeadlock</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return dataList[guid];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                return null;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class CustomResourceRequestHandler : ResourceRequestHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    protected override CefReturnValue OnBeforeResourceLoad(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IRequestCallback callback)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        // 截断请求的代码...</span><br><span class=\"line\">        return CefReturnValue.Continue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    protected override IResponseFilter GetResourceResponseFilter(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!(request.ResourceType == ResourceType.Xhr))  // 不是XHR类型就不去过滤</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var filer = FilterManager.CreateFilter(request.Identifier.ToString());</span><br><span class=\"line\">        return filer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected override void OnResourceLoadComplete(IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IRequest request, IResponse response, UrlRequestStatus status, long receivedContentLength)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var filer = FilterManager.GetFileter(request.Identifier.ToString()) as TestJsonFilter;</span><br><span class=\"line\">        if (filer != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(ASCIIEncoding.UTF8.GetString(filer.DataAll.ToArray()));  // 打印body内容</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = &quot;https://github.com/salamander-mh&quot;;  // github首页上有ajax请求，可以看效果</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n运行程序，在<code>输出</code>视图就可以看到Ajax请求的body数据。</p>\r\n<h2 id=\"截取cookie\">截取cookie</h2>\r\n<p>建立Cookie读取对象，继承接口 ICookieVisitor <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CookieVisitor : CefSharp.ICookieVisitor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public event Action&lt;CefSharp.Cookie&gt; SendCookie;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    public bool Visit(Cookie cookie, int count, int total, ref bool deleteCookie)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        deleteCookie = false;</span><br><span class=\"line\">        if (SendCookie != null)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SendCookie(cookie);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void Dispose()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n在browser事件中进行处理 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void browser_FrameLoadEnd(object sender, CefSharp.FrameLoadEndEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var cookieManager = myChrome.GetCookieManager();</span><br><span class=\"line\"></span><br><span class=\"line\">    CookieVisitor visitor = new CookieVisitor();</span><br><span class=\"line\">    visitor.SendCookie += visitor_SendCookie;</span><br><span class=\"line\">    cookieManager.VisitAllCookies(visitor);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> <strong>回调事件</strong>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void visitor_SendCookie(CefSharp.Cookie obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(&quot;获取cookie：&quot; + obj.Domain.TrimStart(&#x27;.&#x27;) + &quot;^&quot; + obj.Name + &quot;^&quot; + obj.Value + &quot;$&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 设置CefSharp实例事件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void myChrome_Loaded(object sender, RoutedEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    String url = &quot;https://www.baidu.com&quot;;</span><br><span class=\"line\">    myChrome.Load(url);</span><br><span class=\"line\">    myChrome.FrameLoadEnd += browser_FrameLoadEnd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n运行程序，在<code>输出</code>视图就可以看到<strong>cookie</strong>数据了。</p>\r\n<h2 id=\"javascript交互\">Javascript交互</h2>\r\n<h3 id=\"c执行js方法\">C#执行js方法</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myChrome.GetBrowser().MainFrame.ExecuteJavaScriptAsync(&quot;document.getElementById(&#x27;testid&#x27;).click();&quot;);  </span><br></pre></td></tr></table></figure>\r\n<p>以上代码就会触发id为<code>testid</code>的元素的<code>click</code>事件。<br />\r\n注意：<strong>脚本是在 Frame\r\n级别执行</strong>，页面永远至少有一个Frame（ MainFrame ）。</p>\r\n<h3 id=\"获取javascript方法结果\">获取Javascript方法结果</h3>\r\n<p>这里需要使用<code>Task&lt;JavascriptResponse&gt; EvaluateScriptAsync(string script, TimeSpan? timeout)</code>方法。\r\nJavaScript代码是异步执行的，因此使用.NET Task\r\n类返回一个响应，其中包含错误消息，结果和一个成功（bool）标志。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Get Document Height  </span><br><span class=\"line\">var task = frame.EvaluateScriptAsync(&quot;(function() &#123; var body = document.body, html = document.documentElement; return  Math.max( body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight ); &#125;)();&quot;, null);</span><br><span class=\"line\">  </span><br><span class=\"line\">task.ContinueWith(t =&gt;  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    if (!t.IsFaulted)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        var response = t.Result;  </span><br><span class=\"line\">        EvaluateJavaScriptResult = response.Success ? (response.Result ?? &quot;null&quot;) : response.Message;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;, TaskScheduler.FromCurrentSynchronizationContext());  </span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"资源清理\">资源清理</h2>\r\n<p>关闭应用，发现<code>CefSharp.BrowserSubprocess.exe</code>进程会发现没有结束，其实在退出事件中，我们需要调用<code>Cef.Shutdown()</code>方法\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    if (browser != null)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        browser.Dispose();  </span><br><span class=\"line\">        Cef.Shutdown();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">catch &#123; &#125;  </span><br></pre></td></tr></table></figure></p>\r\n<p>示例代码<a href=\"http://file.51lucy.com/BroswerTest.rar\">下载</a></p>\r\n<p>参考： * <a\r\nhref=\"https://stackoverflow.com/questions/31250797/chromium-send-custom-header-info-on-initial-page-load-c-sharp\">StackOverflow</a>\r\n* <a\r\nhref=\"https://stackoverflow.com/questions/40944056/how-to-read-the-json-response-content-from-a-xmlhttprequest/43652932#43652932\">How\r\nto read the JSON response content from a XMLHttpRequest?</a> * <a\r\nhref=\"https://github.com/cefsharp/CefSharp/wiki/CefSharp%E4%B8%AD%E6%96%87%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3\"><strong>CefSharp中文帮助文档</strong></a></p>"},{"title":"调试PHP源码","author":"Salamander","date":"2020-07-03T12:00:00.000Z","_content":"![](https://s1.ax1x.com/2020/07/05/U91xmt.png)\n\n## 缘由\n有时候，我们想看看一个变量底层对应底层的数据结构或者PHP脚本是如何执行的，gdb就是这样一个好工具，之前有篇[文章写过](/2020/07/02/gdb_use/)如何简单使用gdb。  \n\n本文环境：\n* PHP版本：PHP 7.1.16 (cli) (built: Apr  8 2020 11:56:59) ( ZTS )\n* OS：Ubuntu 18.04.4 LTS\n* gdb: GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git\n\n\n<!-- more -->\n\n\n## 编译\n你可以从[PHP官网下载PHP源码的压缩包](https://www.php.net/downloads)，者是从git.php.net（或者是github的镜像）的git库clone最新的代码库，然后切换到对应的PHP版本的分支，本文使用的是PHP7.1，你可以使用下面的命令完成这些工作：\n```\ngit clone http://git.php.net/repository/php-src.git\ncd php-src\ngit checkout PHP-7.1\n```\n如果你是从git库中clone的代码，那么你先要运行下buildconf命令：\n```\n~/php-src> ./buildconf \n```\n这个命令会生成configure脚本，**从官网下载的源码包中会直接包含这个脚本**，如果你执行`buildconf`出错，那么很可能是因为你的系统中没有`autoconf`这个工具，你可以使用包安装工具进行安装。  \n如果你已经成功生成了configure脚本文件（或者是使用已包含这个脚本文件的源码包），那就可以开始编译了。为了调式PHP源码，我们的编译会disable所有的扩展（除了一些必须包含的外，这些PHP的编译脚本会自行处理），我们使用下面的命令来完成编译安装的工作，假设安装的路径为$HOME/myphp：\n```\n~/php-src> ./configure --disable-all --enable-debug --prefix=$HOME/myphp\n~/php-src> make -jN\n~/php-src> make install\n```\n注意这里的prefix的参数必须为绝对路径，所以你不能写成~/myphp，另外我们这次编译只是为了调式，所以建议一定要设置prefix参数，要不然PHP会被安装到默认路径中，大多数时候是/usr/local/php中，这可能会造成一些没必要的污染。另外我们使用了两个选项，一个是--disable-all，这个表示禁止安装所有扩展（除了一个必须安装的），另外一个就是--enable-debug，这个选项表示以debug模式编译PHP源码，**相当于gcc的-g选项**，它会把调试信息编译进最终的二进制程序中。  \n\n上面的命令make -jN，N表示你的CPU数量（或者是CPU核心的数量），设置了这个参数后就可以使用多个CPU进行并行编译，这可以提高编译效率。\n\n\n## 调试PHP\n我们调试一段简单的PHP代码：\n```\n<?php\n$a = 10;\n$b = 42;\n\necho $b;\n```\n我们想看下`$a`对应的底层变量结构，那我们应该在哪个函数上叫断点呢？通过查阅资料（如《PHP7内核分析》）我们发现，ZendVM的执行器就是一个white循环，在这个循环中依次调用`opline`指令的handler，然后根据handler的返回决定下一步的动作。执行调度器为**zend_execute_ex**，这是函数指针，默认为`execute_ex`，我们看下这个函数的代码：\n```\n//删除了预处理语句\nZEND_API void execute_ex(zend_execute_data *ex)\n{\n    DCL_OPLINE\n\n    const zend_op *orig_opline = opline;\n    zend_execute_data *orig_execute_data = execute_data; /* execute_data是一个全局变量 */\n    execute_data = ex; \n\n\n    LOAD_OPLINE();\n\n    while (1) {\n        ((opcode_handler_t)OPLINE->handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU); //执行OPCode对应的C函数，OPLINE是一个全局变量\n        if (UNEXPECTED(!OPLINE)) { //当前OPArray执行完\n            execute_data = orig_execute_data;\n            opline = orig_opline;\n            return;\n        }\n    }\n    zend_error_noreturn(E_CORE_ERROR, \"Arrived at end of main loop which shouldn't happen\");\n}\n```\n所以我们可以在给`execute_ex`函数打断点。  \n```\ngdb ~/myphp/bin/php\n\n(gdb) r index.php\nStarting program: /home/salamander/myphp/bin/php index.php\n\nBreakpoint 1, execute_ex (ex=0x7ffff7014030) at /home/salamander/php-7.1.16/Zend/zend_vm_execute.h:411\n411             const zend_op *orig_opline = opline;\n(gdb) n\n414             zend_execute_data *orig_execute_data = execute_data;\n(gdb) n\n415             execute_data = ex;\n(gdb) n\n421             LOAD_OPLINE();\n(gdb) n\n422             ZEND_VM_LOOP_INTERRUPT_CHECK();\n(gdb) n\n429                     ((opcode_handler_t)OPLINE->handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);\n```\n现在就要调用`opline`指令的handler，我们应该键入`s`，跳到对应函数内部去： \n```\n(gdb) s\nZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER () at /home/salamander/php-7.1.16/Zend/zend_vm_execute.h:39506\n39506           SAVE_OPLINE();\n(gdb) n\n39507           value = EX_CONSTANT(opline->op2);\n(gdb) n\n39508           variable_ptr = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline->op1.var);\n(gdb) n\n39516                   value = zend_assign_to_variable(variable_ptr, value, IS_CONST);\n(gdb) p value\n$1 = (zval *) 0x7ffff707b460\n(gdb) p *$1\n$3 = {value = {lval = 10, dval = 4.9406564584124654e-323, counted = 0xa, str = 0xa, arr = 0xa, obj = 0xa, res = 0xa, ref = 0xa, ast = 0xa, zv = 0xa, \n    ptr = 0xa, ce = 0xa, func = 0xa, ww = {w1 = 10, w2 = 0}}, u1 = {v = {type = 4 '\\004', type_flags = 0 '\\000', const_flags = 0 '\\000', \n      reserved = 0 '\\000'}, type_info = 4}, u2 = {next = 4294967295, cache_slot = 4294967295, lineno = 4294967295, num_args = 4294967295, \n    fe_pos = 4294967295, fe_iter_idx = 4294967295, access_flags = 4294967295, property_guard = 4294967295, extra = 4294967295}}\n```\n我们第一行PHP代码是`$a = 10;`，这是一条赋值语句,`ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER`是把一个常量赋值给一个变量，`EX_CONSTANT(opline->op2)`是获取常量的值，`$a`为CV变量，分配在zend_execute_data动态变量区，通过`_get_zval_ptr_cv_undef_BP_VAR_W`取到这个变量的地址，剩下的好理解了，就是把变量值赋值给CV变量。  \n`value`就是我们的变量值，`$a`对应的底层变量就是它。  \n回忆一下PHP7变量的数据结构，是一个叫`zval`的结构体，`zend_value`保存具体的变量值：\n```\ntypedef union _zend_value {\n\tzend_long         lval;\t\t\t\t/* long value */\n\tdouble            dval;\t\t\t\t/* double value */\n\tzend_refcounted  *counted;\n\tzend_string      *str;\n\tzend_array       *arr;\n\tzend_object      *obj;\n\tzend_resource    *res;\n\tzend_reference   *ref;\n\tzend_ast_ref     *ast;\n\tzval             *zv;\n\tvoid             *ptr;\n\tzend_class_entry *ce;\n\tzend_function    *func;\n\tstruct {\n\t\tuint32_t w1;\n\t\tuint32_t w2;\n\t} ww;\n} zend_value;\n\nstruct _zval_struct {\n\tzend_value        value;\t\t\t/* value */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    type,\t\t\t/* 变量类型 */\n\t\t\t\tzend_uchar    type_flags,\n\t\t\t\tzend_uchar    const_flags,\n\t\t\t\tzend_uchar    reserved)\t    /* call info for EX(This) */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u1;\n\tunion {\n\t\tuint32_t     next;                 /* hash collision chain */\n\t\tuint32_t     cache_slot;           /* literal cache slot */\n\t\tuint32_t     lineno;               /* line number (for ast nodes) */\n\t\tuint32_t     num_args;             /* arguments number for EX(This) */\n\t\tuint32_t     fe_pos;               /* foreach position */\n\t\tuint32_t     fe_iter_idx;          /* foreach iterator index */\n\t\tuint32_t     access_flags;         /* class constant access flags */\n\t\tuint32_t     property_guard;       /* single property guard */\n\t\tuint32_t     extra;                /* not further specified */\n\t} u2;\n};\n\n#define IS_UNDEF                                        0\n#define IS_NULL                                         1\n#define IS_FALSE                                        2\n#define IS_TRUE                                         3\n#define IS_LONG                                         4\n#define IS_DOUBLE                                       5\n#define IS_STRING                                       6\n#define IS_ARRAY                                        7\n#define IS_OBJECT                                       8\n#define IS_RESOURCE                                     9\n#define IS_REFERENCE                                    10\n\n/* constant expressions */\n#define IS_CONSTANT                                     11\n#define IS_CONSTANT_AST                                 12\n\n```\n我们打印出来的底层变量，`lval`是10，`u1`里的`type`是4，也正好是`IS_LONG`，别的字段的值大家也可以分析看看。\n\n\n\n\n参考：\n* [PHP 7 中函数调用的实现](http://yangxikun.github.io/php/2016/11/04/php-7-func-call.html)","source":"_posts/Debug_PHP_source_code.md","raw":"title: 调试PHP源码\nauthor: Salamander\ntags:\n  - PHP\n  - Linux\ncategories:\n  - PHP\ndate: 2020-07-03 20:00:00\n---\n![](https://s1.ax1x.com/2020/07/05/U91xmt.png)\n\n## 缘由\n有时候，我们想看看一个变量底层对应底层的数据结构或者PHP脚本是如何执行的，gdb就是这样一个好工具，之前有篇[文章写过](/2020/07/02/gdb_use/)如何简单使用gdb。  \n\n本文环境：\n* PHP版本：PHP 7.1.16 (cli) (built: Apr  8 2020 11:56:59) ( ZTS )\n* OS：Ubuntu 18.04.4 LTS\n* gdb: GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git\n\n\n<!-- more -->\n\n\n## 编译\n你可以从[PHP官网下载PHP源码的压缩包](https://www.php.net/downloads)，者是从git.php.net（或者是github的镜像）的git库clone最新的代码库，然后切换到对应的PHP版本的分支，本文使用的是PHP7.1，你可以使用下面的命令完成这些工作：\n```\ngit clone http://git.php.net/repository/php-src.git\ncd php-src\ngit checkout PHP-7.1\n```\n如果你是从git库中clone的代码，那么你先要运行下buildconf命令：\n```\n~/php-src> ./buildconf \n```\n这个命令会生成configure脚本，**从官网下载的源码包中会直接包含这个脚本**，如果你执行`buildconf`出错，那么很可能是因为你的系统中没有`autoconf`这个工具，你可以使用包安装工具进行安装。  \n如果你已经成功生成了configure脚本文件（或者是使用已包含这个脚本文件的源码包），那就可以开始编译了。为了调式PHP源码，我们的编译会disable所有的扩展（除了一些必须包含的外，这些PHP的编译脚本会自行处理），我们使用下面的命令来完成编译安装的工作，假设安装的路径为$HOME/myphp：\n```\n~/php-src> ./configure --disable-all --enable-debug --prefix=$HOME/myphp\n~/php-src> make -jN\n~/php-src> make install\n```\n注意这里的prefix的参数必须为绝对路径，所以你不能写成~/myphp，另外我们这次编译只是为了调式，所以建议一定要设置prefix参数，要不然PHP会被安装到默认路径中，大多数时候是/usr/local/php中，这可能会造成一些没必要的污染。另外我们使用了两个选项，一个是--disable-all，这个表示禁止安装所有扩展（除了一个必须安装的），另外一个就是--enable-debug，这个选项表示以debug模式编译PHP源码，**相当于gcc的-g选项**，它会把调试信息编译进最终的二进制程序中。  \n\n上面的命令make -jN，N表示你的CPU数量（或者是CPU核心的数量），设置了这个参数后就可以使用多个CPU进行并行编译，这可以提高编译效率。\n\n\n## 调试PHP\n我们调试一段简单的PHP代码：\n```\n<?php\n$a = 10;\n$b = 42;\n\necho $b;\n```\n我们想看下`$a`对应的底层变量结构，那我们应该在哪个函数上叫断点呢？通过查阅资料（如《PHP7内核分析》）我们发现，ZendVM的执行器就是一个white循环，在这个循环中依次调用`opline`指令的handler，然后根据handler的返回决定下一步的动作。执行调度器为**zend_execute_ex**，这是函数指针，默认为`execute_ex`，我们看下这个函数的代码：\n```\n//删除了预处理语句\nZEND_API void execute_ex(zend_execute_data *ex)\n{\n    DCL_OPLINE\n\n    const zend_op *orig_opline = opline;\n    zend_execute_data *orig_execute_data = execute_data; /* execute_data是一个全局变量 */\n    execute_data = ex; \n\n\n    LOAD_OPLINE();\n\n    while (1) {\n        ((opcode_handler_t)OPLINE->handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU); //执行OPCode对应的C函数，OPLINE是一个全局变量\n        if (UNEXPECTED(!OPLINE)) { //当前OPArray执行完\n            execute_data = orig_execute_data;\n            opline = orig_opline;\n            return;\n        }\n    }\n    zend_error_noreturn(E_CORE_ERROR, \"Arrived at end of main loop which shouldn't happen\");\n}\n```\n所以我们可以在给`execute_ex`函数打断点。  \n```\ngdb ~/myphp/bin/php\n\n(gdb) r index.php\nStarting program: /home/salamander/myphp/bin/php index.php\n\nBreakpoint 1, execute_ex (ex=0x7ffff7014030) at /home/salamander/php-7.1.16/Zend/zend_vm_execute.h:411\n411             const zend_op *orig_opline = opline;\n(gdb) n\n414             zend_execute_data *orig_execute_data = execute_data;\n(gdb) n\n415             execute_data = ex;\n(gdb) n\n421             LOAD_OPLINE();\n(gdb) n\n422             ZEND_VM_LOOP_INTERRUPT_CHECK();\n(gdb) n\n429                     ((opcode_handler_t)OPLINE->handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);\n```\n现在就要调用`opline`指令的handler，我们应该键入`s`，跳到对应函数内部去： \n```\n(gdb) s\nZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER () at /home/salamander/php-7.1.16/Zend/zend_vm_execute.h:39506\n39506           SAVE_OPLINE();\n(gdb) n\n39507           value = EX_CONSTANT(opline->op2);\n(gdb) n\n39508           variable_ptr = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline->op1.var);\n(gdb) n\n39516                   value = zend_assign_to_variable(variable_ptr, value, IS_CONST);\n(gdb) p value\n$1 = (zval *) 0x7ffff707b460\n(gdb) p *$1\n$3 = {value = {lval = 10, dval = 4.9406564584124654e-323, counted = 0xa, str = 0xa, arr = 0xa, obj = 0xa, res = 0xa, ref = 0xa, ast = 0xa, zv = 0xa, \n    ptr = 0xa, ce = 0xa, func = 0xa, ww = {w1 = 10, w2 = 0}}, u1 = {v = {type = 4 '\\004', type_flags = 0 '\\000', const_flags = 0 '\\000', \n      reserved = 0 '\\000'}, type_info = 4}, u2 = {next = 4294967295, cache_slot = 4294967295, lineno = 4294967295, num_args = 4294967295, \n    fe_pos = 4294967295, fe_iter_idx = 4294967295, access_flags = 4294967295, property_guard = 4294967295, extra = 4294967295}}\n```\n我们第一行PHP代码是`$a = 10;`，这是一条赋值语句,`ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER`是把一个常量赋值给一个变量，`EX_CONSTANT(opline->op2)`是获取常量的值，`$a`为CV变量，分配在zend_execute_data动态变量区，通过`_get_zval_ptr_cv_undef_BP_VAR_W`取到这个变量的地址，剩下的好理解了，就是把变量值赋值给CV变量。  \n`value`就是我们的变量值，`$a`对应的底层变量就是它。  \n回忆一下PHP7变量的数据结构，是一个叫`zval`的结构体，`zend_value`保存具体的变量值：\n```\ntypedef union _zend_value {\n\tzend_long         lval;\t\t\t\t/* long value */\n\tdouble            dval;\t\t\t\t/* double value */\n\tzend_refcounted  *counted;\n\tzend_string      *str;\n\tzend_array       *arr;\n\tzend_object      *obj;\n\tzend_resource    *res;\n\tzend_reference   *ref;\n\tzend_ast_ref     *ast;\n\tzval             *zv;\n\tvoid             *ptr;\n\tzend_class_entry *ce;\n\tzend_function    *func;\n\tstruct {\n\t\tuint32_t w1;\n\t\tuint32_t w2;\n\t} ww;\n} zend_value;\n\nstruct _zval_struct {\n\tzend_value        value;\t\t\t/* value */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    type,\t\t\t/* 变量类型 */\n\t\t\t\tzend_uchar    type_flags,\n\t\t\t\tzend_uchar    const_flags,\n\t\t\t\tzend_uchar    reserved)\t    /* call info for EX(This) */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u1;\n\tunion {\n\t\tuint32_t     next;                 /* hash collision chain */\n\t\tuint32_t     cache_slot;           /* literal cache slot */\n\t\tuint32_t     lineno;               /* line number (for ast nodes) */\n\t\tuint32_t     num_args;             /* arguments number for EX(This) */\n\t\tuint32_t     fe_pos;               /* foreach position */\n\t\tuint32_t     fe_iter_idx;          /* foreach iterator index */\n\t\tuint32_t     access_flags;         /* class constant access flags */\n\t\tuint32_t     property_guard;       /* single property guard */\n\t\tuint32_t     extra;                /* not further specified */\n\t} u2;\n};\n\n#define IS_UNDEF                                        0\n#define IS_NULL                                         1\n#define IS_FALSE                                        2\n#define IS_TRUE                                         3\n#define IS_LONG                                         4\n#define IS_DOUBLE                                       5\n#define IS_STRING                                       6\n#define IS_ARRAY                                        7\n#define IS_OBJECT                                       8\n#define IS_RESOURCE                                     9\n#define IS_REFERENCE                                    10\n\n/* constant expressions */\n#define IS_CONSTANT                                     11\n#define IS_CONSTANT_AST                                 12\n\n```\n我们打印出来的底层变量，`lval`是10，`u1`里的`type`是4，也正好是`IS_LONG`，别的字段的值大家也可以分析看看。\n\n\n\n\n参考：\n* [PHP 7 中函数调用的实现](http://yangxikun.github.io/php/2016/11/04/php-7-func-call.html)","slug":"Debug_PHP_source_code","published":1,"updated":"2023-03-21T02:48:19.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40ku00082o3mdwuz243j","content":"<p><img src=\"https://s1.ax1x.com/2020/07/05/U91xmt.png\" /></p>\r\n<h2 id=\"缘由\">缘由</h2>\r\n<p>有时候，我们想看看一个变量底层对应底层的数据结构或者PHP脚本是如何执行的，gdb就是这样一个好工具，之前有篇<a\r\nhref=\"/2020/07/02/gdb_use/\">文章写过</a>如何简单使用gdb。</p>\r\n<p>本文环境： * PHP版本：PHP 7.1.16 (cli) (built: Apr 8 2020 11:56:59) (\r\nZTS ) * OS：Ubuntu 18.04.4 LTS * gdb: GNU gdb (Ubuntu 8.1-0ubuntu3.2)\r\n8.1.0.20180409-git</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"编译\">编译</h2>\r\n<p>你可以从<a\r\nhref=\"https://www.php.net/downloads\">PHP官网下载PHP源码的压缩包</a>，者是从git.php.net（或者是github的镜像）的git库clone最新的代码库，然后切换到对应的PHP版本的分支，本文使用的是PHP7.1，你可以使用下面的命令完成这些工作：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone http://git.php.net/repository/php-src.git</span><br><span class=\"line\">cd php-src</span><br><span class=\"line\">git checkout PHP-7.1</span><br></pre></td></tr></table></figure>\r\n如果你是从git库中clone的代码，那么你先要运行下buildconf命令：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/php-src&gt; ./buildconf </span><br></pre></td></tr></table></figure>\r\n这个命令会生成configure脚本，<strong>从官网下载的源码包中会直接包含这个脚本</strong>，如果你执行<code>buildconf</code>出错，那么很可能是因为你的系统中没有<code>autoconf</code>这个工具，你可以使用包安装工具进行安装。<br />\r\n如果你已经成功生成了configure脚本文件（或者是使用已包含这个脚本文件的源码包），那就可以开始编译了。为了调式PHP源码，我们的编译会disable所有的扩展（除了一些必须包含的外，这些PHP的编译脚本会自行处理），我们使用下面的命令来完成编译安装的工作，假设安装的路径为$HOME/myphp：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/php-src&gt; ./configure --disable-all --enable-debug --prefix=$HOME/myphp</span><br><span class=\"line\">~/php-src&gt; make -jN</span><br><span class=\"line\">~/php-src&gt; make install</span><br></pre></td></tr></table></figure>\r\n注意这里的prefix的参数必须为绝对路径，所以你不能写成~/myphp，另外我们这次编译只是为了调式，所以建议一定要设置prefix参数，要不然PHP会被安装到默认路径中，大多数时候是/usr/local/php中，这可能会造成一些没必要的污染。另外我们使用了两个选项，一个是--disable-all，这个表示禁止安装所有扩展（除了一个必须安装的），另外一个就是--enable-debug，这个选项表示以debug模式编译PHP源码，<strong>相当于gcc的-g选项</strong>，它会把调试信息编译进最终的二进制程序中。</p>\r\n<p>上面的命令make\r\n-jN，N表示你的CPU数量（或者是CPU核心的数量），设置了这个参数后就可以使用多个CPU进行并行编译，这可以提高编译效率。</p>\r\n<h2 id=\"调试php\">调试PHP</h2>\r\n<p>我们调试一段简单的PHP代码： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = 10;</span><br><span class=\"line\">$b = 42;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $b;</span><br></pre></td></tr></table></figure>\r\n我们想看下<code>$a</code>对应的底层变量结构，那我们应该在哪个函数上叫断点呢？通过查阅资料（如《PHP7内核分析》）我们发现，ZendVM的执行器就是一个white循环，在这个循环中依次调用<code>opline</code>指令的handler，然后根据handler的返回决定下一步的动作。执行调度器为<strong>zend_execute_ex</strong>，这是函数指针，默认为<code>execute_ex</code>，我们看下这个函数的代码：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除了预处理语句</span><br><span class=\"line\">ZEND_API void execute_ex(zend_execute_data *ex)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DCL_OPLINE</span><br><span class=\"line\"></span><br><span class=\"line\">    const zend_op *orig_opline = opline;</span><br><span class=\"line\">    zend_execute_data *orig_execute_data = execute_data; /* execute_data是一个全局变量 */</span><br><span class=\"line\">    execute_data = ex; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    LOAD_OPLINE();</span><br><span class=\"line\"></span><br><span class=\"line\">    while (1) &#123;</span><br><span class=\"line\">        ((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU); //执行OPCode对应的C函数，OPLINE是一个全局变量</span><br><span class=\"line\">        if (UNEXPECTED(!OPLINE)) &#123; //当前OPArray执行完</span><br><span class=\"line\">            execute_data = orig_execute_data;</span><br><span class=\"line\">            opline = orig_opline;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    zend_error_noreturn(E_CORE_ERROR, &quot;Arrived at end of main loop which shouldn&#x27;t happen&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 所以我们可以在给<code>execute_ex</code>函数打断点。<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ~/myphp/bin/php</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) r index.php</span><br><span class=\"line\">Starting program: /home/salamander/myphp/bin/php index.php</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint 1, execute_ex (ex=0x7ffff7014030) at /home/salamander/php-7.1.16/Zend/zend_vm_execute.h:411</span><br><span class=\"line\">411             const zend_op *orig_opline = opline;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">414             zend_execute_data *orig_execute_data = execute_data;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">415             execute_data = ex;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">421             LOAD_OPLINE();</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">422             ZEND_VM_LOOP_INTERRUPT_CHECK();</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">429                     ((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br></pre></td></tr></table></figure>\r\n现在就要调用<code>opline</code>指令的handler，我们应该键入<code>s</code>，跳到对应函数内部去：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) s</span><br><span class=\"line\">ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER () at /home/salamander/php-7.1.16/Zend/zend_vm_execute.h:39506</span><br><span class=\"line\">39506           SAVE_OPLINE();</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">39507           value = EX_CONSTANT(opline-&gt;op2);</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">39508           variable_ptr = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op1.var);</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">39516                   value = zend_assign_to_variable(variable_ptr, value, IS_CONST);</span><br><span class=\"line\">(gdb) p value</span><br><span class=\"line\">$1 = (zval *) 0x7ffff707b460</span><br><span class=\"line\">(gdb) p *$1</span><br><span class=\"line\">$3 = &#123;value = &#123;lval = 10, dval = 4.9406564584124654e-323, counted = 0xa, str = 0xa, arr = 0xa, obj = 0xa, res = 0xa, ref = 0xa, ast = 0xa, zv = 0xa, </span><br><span class=\"line\">    ptr = 0xa, ce = 0xa, func = 0xa, ww = &#123;w1 = 10, w2 = 0&#125;&#125;, u1 = &#123;v = &#123;type = 4 &#x27;\\004&#x27;, type_flags = 0 &#x27;\\000&#x27;, const_flags = 0 &#x27;\\000&#x27;, </span><br><span class=\"line\">      reserved = 0 &#x27;\\000&#x27;&#125;, type_info = 4&#125;, u2 = &#123;next = 4294967295, cache_slot = 4294967295, lineno = 4294967295, num_args = 4294967295, </span><br><span class=\"line\">    fe_pos = 4294967295, fe_iter_idx = 4294967295, access_flags = 4294967295, property_guard = 4294967295, extra = 4294967295&#125;&#125;</span><br></pre></td></tr></table></figure>\r\n我们第一行PHP代码是<code>$a = 10;</code>，这是一条赋值语句,<code>ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER</code>是把一个常量赋值给一个变量，<code>EX_CONSTANT(opline-&gt;op2)</code>是获取常量的值，<code>$a</code>为CV变量，分配在zend_execute_data动态变量区，通过<code>_get_zval_ptr_cv_undef_BP_VAR_W</code>取到这个变量的地址，剩下的好理解了，就是把变量值赋值给CV变量。<br />\r\n<code>value</code>就是我们的变量值，<code>$a</code>对应的底层变量就是它。<br />\r\n回忆一下PHP7变量的数据结构，是一个叫<code>zval</code>的结构体，<code>zend_value</code>保存具体的变量值：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef union _zend_value &#123;</span><br><span class=\"line\">\tzend_long         lval;\t\t\t\t/* long value */</span><br><span class=\"line\">\tdouble            dval;\t\t\t\t/* double value */</span><br><span class=\"line\">\tzend_refcounted  *counted;</span><br><span class=\"line\">\tzend_string      *str;</span><br><span class=\"line\">\tzend_array       *arr;</span><br><span class=\"line\">\tzend_object      *obj;</span><br><span class=\"line\">\tzend_resource    *res;</span><br><span class=\"line\">\tzend_reference   *ref;</span><br><span class=\"line\">\tzend_ast_ref     *ast;</span><br><span class=\"line\">\tzval             *zv;</span><br><span class=\"line\">\tvoid             *ptr;</span><br><span class=\"line\">\tzend_class_entry *ce;</span><br><span class=\"line\">\tzend_function    *func;</span><br><span class=\"line\">\tstruct &#123;</span><br><span class=\"line\">\t\tuint32_t w1;</span><br><span class=\"line\">\t\tuint32_t w2;</span><br><span class=\"line\">\t&#125; ww;</span><br><span class=\"line\">&#125; zend_value;</span><br><span class=\"line\"></span><br><span class=\"line\">struct _zval_struct &#123;</span><br><span class=\"line\">\tzend_value        value;\t\t\t/* value */</span><br><span class=\"line\">\tunion &#123;</span><br><span class=\"line\">\t\tstruct &#123;</span><br><span class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</span><br><span class=\"line\">\t\t\t\tzend_uchar    type,\t\t\t/* 变量类型 */</span><br><span class=\"line\">\t\t\t\tzend_uchar    type_flags,</span><br><span class=\"line\">\t\t\t\tzend_uchar    const_flags,</span><br><span class=\"line\">\t\t\t\tzend_uchar    reserved)\t    /* call info for EX(This) */</span><br><span class=\"line\">\t\t&#125; v;</span><br><span class=\"line\">\t\tuint32_t type_info;</span><br><span class=\"line\">\t&#125; u1;</span><br><span class=\"line\">\tunion &#123;</span><br><span class=\"line\">\t\tuint32_t     next;                 /* hash collision chain */</span><br><span class=\"line\">\t\tuint32_t     cache_slot;           /* literal cache slot */</span><br><span class=\"line\">\t\tuint32_t     lineno;               /* line number (for ast nodes) */</span><br><span class=\"line\">\t\tuint32_t     num_args;             /* arguments number for EX(This) */</span><br><span class=\"line\">\t\tuint32_t     fe_pos;               /* foreach position */</span><br><span class=\"line\">\t\tuint32_t     fe_iter_idx;          /* foreach iterator index */</span><br><span class=\"line\">\t\tuint32_t     access_flags;         /* class constant access flags */</span><br><span class=\"line\">\t\tuint32_t     property_guard;       /* single property guard */</span><br><span class=\"line\">\t\tuint32_t     extra;                /* not further specified */</span><br><span class=\"line\">\t&#125; u2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">#define IS_UNDEF                                        0</span><br><span class=\"line\">#define IS_NULL                                         1</span><br><span class=\"line\">#define IS_FALSE                                        2</span><br><span class=\"line\">#define IS_TRUE                                         3</span><br><span class=\"line\">#define IS_LONG                                         4</span><br><span class=\"line\">#define IS_DOUBLE                                       5</span><br><span class=\"line\">#define IS_STRING                                       6</span><br><span class=\"line\">#define IS_ARRAY                                        7</span><br><span class=\"line\">#define IS_OBJECT                                       8</span><br><span class=\"line\">#define IS_RESOURCE                                     9</span><br><span class=\"line\">#define IS_REFERENCE                                    10</span><br><span class=\"line\"></span><br><span class=\"line\">/* constant expressions */</span><br><span class=\"line\">#define IS_CONSTANT                                     11</span><br><span class=\"line\">#define IS_CONSTANT_AST                                 12</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n我们打印出来的底层变量，<code>lval</code>是10，<code>u1</code>里的<code>type</code>是4，也正好是<code>IS_LONG</code>，别的字段的值大家也可以分析看看。</p>\r\n<p>参考： * <a\r\nhref=\"http://yangxikun.github.io/php/2016/11/04/php-7-func-call.html\">PHP\r\n7 中函数调用的实现</a></p>\r\n","site":{"data":{}},"excerpt":"<p><img src=\"https://s1.ax1x.com/2020/07/05/U91xmt.png\" /></p>\r\n<h2 id=\"缘由\">缘由</h2>\r\n<p>有时候，我们想看看一个变量底层对应底层的数据结构或者PHP脚本是如何执行的，gdb就是这样一个好工具，之前有篇<a\r\nhref=\"/2020/07/02/gdb_use/\">文章写过</a>如何简单使用gdb。</p>\r\n<p>本文环境： * PHP版本：PHP 7.1.16 (cli) (built: Apr 8 2020 11:56:59) (\r\nZTS ) * OS：Ubuntu 18.04.4 LTS * gdb: GNU gdb (Ubuntu 8.1-0ubuntu3.2)\r\n8.1.0.20180409-git</p>","more":"<h2 id=\"编译\">编译</h2>\r\n<p>你可以从<a\r\nhref=\"https://www.php.net/downloads\">PHP官网下载PHP源码的压缩包</a>，者是从git.php.net（或者是github的镜像）的git库clone最新的代码库，然后切换到对应的PHP版本的分支，本文使用的是PHP7.1，你可以使用下面的命令完成这些工作：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone http://git.php.net/repository/php-src.git</span><br><span class=\"line\">cd php-src</span><br><span class=\"line\">git checkout PHP-7.1</span><br></pre></td></tr></table></figure>\r\n如果你是从git库中clone的代码，那么你先要运行下buildconf命令：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/php-src&gt; ./buildconf </span><br></pre></td></tr></table></figure>\r\n这个命令会生成configure脚本，<strong>从官网下载的源码包中会直接包含这个脚本</strong>，如果你执行<code>buildconf</code>出错，那么很可能是因为你的系统中没有<code>autoconf</code>这个工具，你可以使用包安装工具进行安装。<br />\r\n如果你已经成功生成了configure脚本文件（或者是使用已包含这个脚本文件的源码包），那就可以开始编译了。为了调式PHP源码，我们的编译会disable所有的扩展（除了一些必须包含的外，这些PHP的编译脚本会自行处理），我们使用下面的命令来完成编译安装的工作，假设安装的路径为$HOME/myphp：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/php-src&gt; ./configure --disable-all --enable-debug --prefix=$HOME/myphp</span><br><span class=\"line\">~/php-src&gt; make -jN</span><br><span class=\"line\">~/php-src&gt; make install</span><br></pre></td></tr></table></figure>\r\n注意这里的prefix的参数必须为绝对路径，所以你不能写成~/myphp，另外我们这次编译只是为了调式，所以建议一定要设置prefix参数，要不然PHP会被安装到默认路径中，大多数时候是/usr/local/php中，这可能会造成一些没必要的污染。另外我们使用了两个选项，一个是--disable-all，这个表示禁止安装所有扩展（除了一个必须安装的），另外一个就是--enable-debug，这个选项表示以debug模式编译PHP源码，<strong>相当于gcc的-g选项</strong>，它会把调试信息编译进最终的二进制程序中。</p>\r\n<p>上面的命令make\r\n-jN，N表示你的CPU数量（或者是CPU核心的数量），设置了这个参数后就可以使用多个CPU进行并行编译，这可以提高编译效率。</p>\r\n<h2 id=\"调试php\">调试PHP</h2>\r\n<p>我们调试一段简单的PHP代码： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a = 10;</span><br><span class=\"line\">$b = 42;</span><br><span class=\"line\"></span><br><span class=\"line\">echo $b;</span><br></pre></td></tr></table></figure>\r\n我们想看下<code>$a</code>对应的底层变量结构，那我们应该在哪个函数上叫断点呢？通过查阅资料（如《PHP7内核分析》）我们发现，ZendVM的执行器就是一个white循环，在这个循环中依次调用<code>opline</code>指令的handler，然后根据handler的返回决定下一步的动作。执行调度器为<strong>zend_execute_ex</strong>，这是函数指针，默认为<code>execute_ex</code>，我们看下这个函数的代码：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除了预处理语句</span><br><span class=\"line\">ZEND_API void execute_ex(zend_execute_data *ex)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DCL_OPLINE</span><br><span class=\"line\"></span><br><span class=\"line\">    const zend_op *orig_opline = opline;</span><br><span class=\"line\">    zend_execute_data *orig_execute_data = execute_data; /* execute_data是一个全局变量 */</span><br><span class=\"line\">    execute_data = ex; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    LOAD_OPLINE();</span><br><span class=\"line\"></span><br><span class=\"line\">    while (1) &#123;</span><br><span class=\"line\">        ((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU); //执行OPCode对应的C函数，OPLINE是一个全局变量</span><br><span class=\"line\">        if (UNEXPECTED(!OPLINE)) &#123; //当前OPArray执行完</span><br><span class=\"line\">            execute_data = orig_execute_data;</span><br><span class=\"line\">            opline = orig_opline;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    zend_error_noreturn(E_CORE_ERROR, &quot;Arrived at end of main loop which shouldn&#x27;t happen&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 所以我们可以在给<code>execute_ex</code>函数打断点。<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb ~/myphp/bin/php</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) r index.php</span><br><span class=\"line\">Starting program: /home/salamander/myphp/bin/php index.php</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint 1, execute_ex (ex=0x7ffff7014030) at /home/salamander/php-7.1.16/Zend/zend_vm_execute.h:411</span><br><span class=\"line\">411             const zend_op *orig_opline = opline;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">414             zend_execute_data *orig_execute_data = execute_data;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">415             execute_data = ex;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">421             LOAD_OPLINE();</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">422             ZEND_VM_LOOP_INTERRUPT_CHECK();</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">429                     ((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br></pre></td></tr></table></figure>\r\n现在就要调用<code>opline</code>指令的handler，我们应该键入<code>s</code>，跳到对应函数内部去：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) s</span><br><span class=\"line\">ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER () at /home/salamander/php-7.1.16/Zend/zend_vm_execute.h:39506</span><br><span class=\"line\">39506           SAVE_OPLINE();</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">39507           value = EX_CONSTANT(opline-&gt;op2);</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">39508           variable_ptr = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op1.var);</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">39516                   value = zend_assign_to_variable(variable_ptr, value, IS_CONST);</span><br><span class=\"line\">(gdb) p value</span><br><span class=\"line\">$1 = (zval *) 0x7ffff707b460</span><br><span class=\"line\">(gdb) p *$1</span><br><span class=\"line\">$3 = &#123;value = &#123;lval = 10, dval = 4.9406564584124654e-323, counted = 0xa, str = 0xa, arr = 0xa, obj = 0xa, res = 0xa, ref = 0xa, ast = 0xa, zv = 0xa, </span><br><span class=\"line\">    ptr = 0xa, ce = 0xa, func = 0xa, ww = &#123;w1 = 10, w2 = 0&#125;&#125;, u1 = &#123;v = &#123;type = 4 &#x27;\\004&#x27;, type_flags = 0 &#x27;\\000&#x27;, const_flags = 0 &#x27;\\000&#x27;, </span><br><span class=\"line\">      reserved = 0 &#x27;\\000&#x27;&#125;, type_info = 4&#125;, u2 = &#123;next = 4294967295, cache_slot = 4294967295, lineno = 4294967295, num_args = 4294967295, </span><br><span class=\"line\">    fe_pos = 4294967295, fe_iter_idx = 4294967295, access_flags = 4294967295, property_guard = 4294967295, extra = 4294967295&#125;&#125;</span><br></pre></td></tr></table></figure>\r\n我们第一行PHP代码是<code>$a = 10;</code>，这是一条赋值语句,<code>ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER</code>是把一个常量赋值给一个变量，<code>EX_CONSTANT(opline-&gt;op2)</code>是获取常量的值，<code>$a</code>为CV变量，分配在zend_execute_data动态变量区，通过<code>_get_zval_ptr_cv_undef_BP_VAR_W</code>取到这个变量的地址，剩下的好理解了，就是把变量值赋值给CV变量。<br />\r\n<code>value</code>就是我们的变量值，<code>$a</code>对应的底层变量就是它。<br />\r\n回忆一下PHP7变量的数据结构，是一个叫<code>zval</code>的结构体，<code>zend_value</code>保存具体的变量值：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef union _zend_value &#123;</span><br><span class=\"line\">\tzend_long         lval;\t\t\t\t/* long value */</span><br><span class=\"line\">\tdouble            dval;\t\t\t\t/* double value */</span><br><span class=\"line\">\tzend_refcounted  *counted;</span><br><span class=\"line\">\tzend_string      *str;</span><br><span class=\"line\">\tzend_array       *arr;</span><br><span class=\"line\">\tzend_object      *obj;</span><br><span class=\"line\">\tzend_resource    *res;</span><br><span class=\"line\">\tzend_reference   *ref;</span><br><span class=\"line\">\tzend_ast_ref     *ast;</span><br><span class=\"line\">\tzval             *zv;</span><br><span class=\"line\">\tvoid             *ptr;</span><br><span class=\"line\">\tzend_class_entry *ce;</span><br><span class=\"line\">\tzend_function    *func;</span><br><span class=\"line\">\tstruct &#123;</span><br><span class=\"line\">\t\tuint32_t w1;</span><br><span class=\"line\">\t\tuint32_t w2;</span><br><span class=\"line\">\t&#125; ww;</span><br><span class=\"line\">&#125; zend_value;</span><br><span class=\"line\"></span><br><span class=\"line\">struct _zval_struct &#123;</span><br><span class=\"line\">\tzend_value        value;\t\t\t/* value */</span><br><span class=\"line\">\tunion &#123;</span><br><span class=\"line\">\t\tstruct &#123;</span><br><span class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</span><br><span class=\"line\">\t\t\t\tzend_uchar    type,\t\t\t/* 变量类型 */</span><br><span class=\"line\">\t\t\t\tzend_uchar    type_flags,</span><br><span class=\"line\">\t\t\t\tzend_uchar    const_flags,</span><br><span class=\"line\">\t\t\t\tzend_uchar    reserved)\t    /* call info for EX(This) */</span><br><span class=\"line\">\t\t&#125; v;</span><br><span class=\"line\">\t\tuint32_t type_info;</span><br><span class=\"line\">\t&#125; u1;</span><br><span class=\"line\">\tunion &#123;</span><br><span class=\"line\">\t\tuint32_t     next;                 /* hash collision chain */</span><br><span class=\"line\">\t\tuint32_t     cache_slot;           /* literal cache slot */</span><br><span class=\"line\">\t\tuint32_t     lineno;               /* line number (for ast nodes) */</span><br><span class=\"line\">\t\tuint32_t     num_args;             /* arguments number for EX(This) */</span><br><span class=\"line\">\t\tuint32_t     fe_pos;               /* foreach position */</span><br><span class=\"line\">\t\tuint32_t     fe_iter_idx;          /* foreach iterator index */</span><br><span class=\"line\">\t\tuint32_t     access_flags;         /* class constant access flags */</span><br><span class=\"line\">\t\tuint32_t     property_guard;       /* single property guard */</span><br><span class=\"line\">\t\tuint32_t     extra;                /* not further specified */</span><br><span class=\"line\">\t&#125; u2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">#define IS_UNDEF                                        0</span><br><span class=\"line\">#define IS_NULL                                         1</span><br><span class=\"line\">#define IS_FALSE                                        2</span><br><span class=\"line\">#define IS_TRUE                                         3</span><br><span class=\"line\">#define IS_LONG                                         4</span><br><span class=\"line\">#define IS_DOUBLE                                       5</span><br><span class=\"line\">#define IS_STRING                                       6</span><br><span class=\"line\">#define IS_ARRAY                                        7</span><br><span class=\"line\">#define IS_OBJECT                                       8</span><br><span class=\"line\">#define IS_RESOURCE                                     9</span><br><span class=\"line\">#define IS_REFERENCE                                    10</span><br><span class=\"line\"></span><br><span class=\"line\">/* constant expressions */</span><br><span class=\"line\">#define IS_CONSTANT                                     11</span><br><span class=\"line\">#define IS_CONSTANT_AST                                 12</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n我们打印出来的底层变量，<code>lval</code>是10，<code>u1</code>里的<code>type</code>是4，也正好是<code>IS_LONG</code>，别的字段的值大家也可以分析看看。</p>\r\n<p>参考： * <a\r\nhref=\"http://yangxikun.github.io/php/2016/11/04/php-7-func-call.html\">PHP\r\n7 中函数调用的实现</a></p>"},{"title":"一步步自己做个Docker之Cgroups","author":"Salamander","date":"2020-04-06T12:30:00.000Z","_content":"![docker logo](/images/docker-logo.png)\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS\n* Golang版本：1.12.13\n\n\n## 什么是Linux Cgroups\n**Linux Cgroups**（Control Groups）提供了对一组进程及将来的子进程的资源限制、控制和统计的能力，这些资源包括CPU、内存、存储、网络等。本质上来说，**Cgroups** 是内核附加在程序上的一系列钩子(hook)，通过程序运行时对资源的调度触发相应的钩子以达到资源追踪和限制的目的。  \n\n<!-- more -->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考：\n* [linux cgroups 简介](https://www.cnblogs.com/sparkdev/p/8296063.html)","source":"_posts/Docker_Cgroups.md","raw":"title: 一步步自己做个Docker之Cgroups\nauthor: Salamander\ntags:\n  - Docker\n  - Cgroups\ncategories:\n  - Docker\ndate: 2020-04-06 20:30:00\n---\n![docker logo](/images/docker-logo.png)\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS\n* Golang版本：1.12.13\n\n\n## 什么是Linux Cgroups\n**Linux Cgroups**（Control Groups）提供了对一组进程及将来的子进程的资源限制、控制和统计的能力，这些资源包括CPU、内存、存储、网络等。本质上来说，**Cgroups** 是内核附加在程序上的一系列钩子(hook)，通过程序运行时对资源的调度触发相应的钩子以达到资源追踪和限制的目的。  \n\n<!-- more -->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考：\n* [linux cgroups 简介](https://www.cnblogs.com/sparkdev/p/8296063.html)","slug":"Docker_Cgroups","published":1,"updated":"2023-03-21T02:48:19.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40ku00092o3m2sg7f4f4","content":"<figure>\r\n<img src=\"/images/docker-logo.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS * Golang版本：1.12.13</p>\r\n<h2 id=\"什么是linux-cgroups\">什么是Linux Cgroups</h2>\r\n<p><strong>Linux Cgroups</strong>（Control\r\nGroups）提供了对一组进程及将来的子进程的资源限制、控制和统计的能力，这些资源包括CPU、内存、存储、网络等。本质上来说，<strong>Cgroups</strong>\r\n是内核附加在程序上的一系列钩子(hook)，通过程序运行时对资源的调度触发相应的钩子以达到资源追踪和限制的目的。</p>\r\n<span id=\"more\"></span>\r\n<p>参考： * <a\r\nhref=\"https://www.cnblogs.com/sparkdev/p/8296063.html\">linux cgroups\r\n简介</a></p>\r\n","site":{"data":{}},"excerpt":"<figure>\r\n<img src=\"/images/docker-logo.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS * Golang版本：1.12.13</p>\r\n<h2 id=\"什么是linux-cgroups\">什么是Linux Cgroups</h2>\r\n<p><strong>Linux Cgroups</strong>（Control\r\nGroups）提供了对一组进程及将来的子进程的资源限制、控制和统计的能力，这些资源包括CPU、内存、存储、网络等。本质上来说，<strong>Cgroups</strong>\r\n是内核附加在程序上的一系列钩子(hook)，通过程序运行时对资源的调度触发相应的钩子以达到资源追踪和限制的目的。</p>","more":"<p>参考： * <a\r\nhref=\"https://www.cnblogs.com/sparkdev/p/8296063.html\">linux cgroups\r\n简介</a></p>"},{"title":"一步步自己做个Docker之Go调用Namespace","author":"Salamander","date":"2020-03-26T13:00:00.000Z","_content":"![docker logo](/images/docker-logo.png)\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS\n* Golang版本：1.12.13\n\n## Golang\nGo语言是Google开发的一种静态类型、编译型的高级语言，它设计的蛮简单的，学过C的话，其实上手Go很快的，当然相比于C的话，Go有垃圾回收和并发支持，所以写起来心智负担更低一点。  \n对于Go的安装和配置，我以前写过一篇文章——[go语言基本配置](https://segmentfault.com/a/1190000008487280)，我这里就不在赘述了。Go1.11增加了`go modules`，使用它的话，就没必要一定要把代码放到`GOPATH`下面啦~\\(≧▽≦)/~。 `go modules`详细\n使用请参考[go mod 使用](https://juejin.im/post/5c8e503a6fb9a070d878184a)。  \n\n<!-- more -->\n\n## Go调用Namespace\n其实对于Namespace这种系统调用，使用C语言描述是最好的（[上一篇文章](/2019/11/28/docker-Linux-Namespace-intro/)就是用C写的示例），但是C比较难，而且Docker也是用Go是实现的，所以我后面的文章都会用Go来写示例代码。  \n这里我先写了一个`UTS Namespace`的例子，`UTS Namespace`主要用来隔离`nodename`和`domainname`这两个系统标识：   \n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags: syscall.CLONE_NEWUTS,\n\t}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n`exec.Command(\"sh\")`是指定了fork出来的新进程内的初始命令，`cmd.SysProcAttr`这行就是设置了系统调用函数，Go帮我们封装了[clone()](http://man7.org/linux/man-pages/man2/clone.2.html)函数，`syscall.CLONE_NEWUTS`这个标识符标明创建一个`UTS Namespace`。  \n`go build .`编译代码后，执行程序时我们会遇到错误**fork/exec /bin/sh: operation not permitted**，这是因为`clone()`函数需要`CAP_SYS_ADMIN`权限（这个[问题](https://www.v2ex.com/t/618961)我在v站上问过），解决方法是添加设置 `uid` 映射： \n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags:\n\t\t\tsyscall.CLONE_NEWUTS |\n\t\t\tsyscall.CLONE_NEWUSER,\n\t\tUidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getuid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t\tGidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getgid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t}\n\n\t// set identify for this demo\n\tcmd.Env = []string{\"PS1=-[namespace-process]-# \"}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n我增加了`CLONE_NEWUSER`标识，让新进程在`User Namespace`中变成root用户。  \n```\n$ ./uts-easy \n-[namespace-process]-# id\nuid=0(root) gid=0(root) groups=0(root),65534(nogroup)\n-[namespace-process]-# hostname -b bird\n-[namespace-process]-# hostname\nbird\n```\n启动另一个shell，查看宿主机上`hostname`:   \n```\n$ hostname\nsalamander-PC\n```\n可以看到，外部的`hostname`并没有被内部的修改所影响，这里我们大致感受了下`UTS Namespace`的作用。\n\n## 增加IPC Namespace\n`IPC Namespace`用来隔离**System V IPC和POSIX message queues**。每一个`IPC Namespace`都有自己的**System V IPC**和**POSIX message queues**。我们稍微改动一下上面的代码。  \n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags:\n\t\t\tsyscall.CLONE_NEWUTS |\n\t\t\tsyscall.CLONE_NEWUSER |\n\t\t\tsyscall.CLONE_NEWIPC,   // 增加IPC Namespace\n\t\tUidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getuid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t\tGidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getgid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t}\n\n\t// set identify for this demo\n\tcmd.Env = []string{\"PS1=-[namespace-process]-# \"}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n新开一个shell，在宿主机上创建一个message queue:\n```\n$ ipcs -q\n\n--------- 消息队列 -----------\n键        msqid      拥有者  权限     已用字节数 消息      \n\n$ ipcmk -Q\n消息队列 id：0\n$ ipcs -q\n\n--------- 消息队列 -----------\n键        msqid      拥有者  权限     已用字节数 消息      \n0xc59399dd 0          salamander 644        0            0\n```\n运行我们自己的程序：\n```\n$ ./uts-easy \n-[namespace-process]-# ipcs -q\n\n------ Message Queues --------\nkey        msqid      owner      perms      used-bytes   messages\n```\n可以看到，在新的Namespace中，看不到宿主机上创建的`message queue`,说明IPC是隔离的。\n\n\n## 增加PID Namespace\n\n**PID Namespace**是用来隔离进程ID的。我们自己进入Docker 容器的时候，就会发现里面的前台进程的PID为1，但是在容器外PID却不是1，这就是通过**PID Namespace**做到的。修改上述的代码，增加`CLONE_NEWPID`：\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags:\n\t\t\tsyscall.CLONE_NEWUTS |\n\t\t\tsyscall.CLONE_NEWUSER |\n\t\t\tsyscall.CLONE_NEWIPC |\n\t\t\tsyscall.CLONE_NEWPID, // 增加PID Namespace\n\t\tUidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getuid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t\tGidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getgid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t}\n\n\t// set identify for this demo\n\tcmd.Env = []string{\"PS1=-[namespace-process]-# \"}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n运行我们的程序：\n```\n ./uts-easy \n-[namespace-process]-# echo $$\n1\n```\n可以看到在新的`PID Namespace`中进程ID为1。\n```\n$ pstree -pl | grep easy\n           |               |                       |-bash(10739)---uts-easy(10768)-+-sh(10773)\n           |               |                       |                               |-{uts-easy}(10769)\n           |               |                       |                               |-{uts-easy}(10770)\n           |               |                       |                               |-{uts-easy}(10771)\n           |               |                       |                               `-{uts-easy}(10772)\n```\n而我们在宿主机上可以看到它实际的PID（`uts-easy`这个进程）为**10768**。  \n如果细心点，我们会发现，在我们的程序中使用`ps`，`top`这些命令出来的结果跟宿主机上是一样的，这是因为这些命令其实是去使用**/proc**这个文件夹的内容，这个就需要下面的`Mount Namespace`了。\n\n## 增加Mount Namespace\n\n**Mount Namespace**用来隔离各个进程看到的挂载点视图。在不同Namespace的进程中，看到的文件系统层次是不一样的。在**Mount Namespace**中调用`mount()`和`unmount()`只会影响当前Namespace内的文件系统，而对全局的文件系统是没有影响的。  \n看到这里，也许会想到`chroot()`。它也能将某一个子目录变为根节点。但是，**Mount Namespace**不仅能实现这个功能，而且能以更加灵活和安全的方式实现。  \n现在继续修改上述代码，增加`CLONE_NEWNS`（Mount Namespace是Linux实现的第一个Namespace类型，因为，它的系统调用参数是**NEWNS**，NS是New Namespace的缩写。当时人们没有意识到，以后还会有很多类型的Namespace加入Linux大家庭）。\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags:\n\t\t\tsyscall.CLONE_NEWUTS |\n\t\t\tsyscall.CLONE_NEWUSER |\n\t\t\tsyscall.CLONE_NEWIPC |\n\t\t\tsyscall.CLONE_NEWPID|\n\t\t\tsyscall.CLONE_NEWNS,  // 增加Mount Namespace\n\t\tUidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getuid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t\tGidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getgid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t}\n\n\t// set identify for this demo\n\tcmd.Env = []string{\"PS1=-[namespace-process]-# \"}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n运行程序，查看/proc的文件内容。\n```\n-[namespace-process]-# ls /proc\n1     1537  198   212   2487  2818  29    3131  329   3363  3422  3557  3793  4250  492   5273  595  62    6519  72    80    87   919        crypto       kmsg          schedstat          vmstat\n10    16    1983  213   2501  2841  2902  3139  3297  3367  3425  3571  38    430   493   53    598  6220  654   7221  8042  88   922        devices      kpagecgroup   scsi               zoneinfo\n1025  17    2     2133  2506  2846  2913  3156 ....\n```\n这里输出的结果很多，因为**/proc**还是宿主机的，下面将**/proc** mount到我们自己的Namespace下面来：\n```\n-[namespace-process]-# mount -t proc proc /proc\n-[namespace-process]-# ls /proc\n1       buddyinfo  consoles  diskstats    fb           iomem     kcore      kpagecgroup  locks    modules  pagetypeinfo  schedstat  softirqs  sysrq-trigger  tty                vmallocinfo\n4       bus        cpuinfo   dma          filesystems  ioports   key-users  kpagecount   mdstat   mounts   partitions    scsi       stat      sysvipc        uptime             vmstat\nacpi    cgroups    crypto    driver       fs           irq       keys       kpageflags   meminfo  mtrr     pressure      self       swaps     thread-self    version            zoneinfo\nasound  cmdline    devices   execdomains  interrupts   kallsyms  kmsg       loadavg      misc     net      sched_debug   slabinfo   sys       timer_list     version_signature\n```\n结果一下子少了很多，这里我们就可以用**ps**来查看系统的进程了。\n```\n-[namespace-process]-# ps -ef\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 17:07 pts/1    00:00:00 sh\nroot         5     1  0 17:11 pts/1    00:00:00 ps -ef\n```\n可以看到，当前的Namespace中，sh进程是PID为1的进程。  \n\n## 增加Network Namespace\n**Network Namespace**是用来隔离网络设备、IP地址端口等网络栈的Namespace。Network Namespace可以让每个容器拥有自己独立（虚拟的）网络设备，而且容器内的应用可以绑定到自己的端口，每个Namespace内的端口都不会互相冲突。在宿主机上搭建网桥后，就能很方便地实现容器之间通讯，而且不同容器上的应用可以使用相同的端口。  \n继续上述代码，加入`CLONE_NEWNET`：\n```Golang\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags:\n\t\t\tsyscall.CLONE_NEWUTS |\n\t\t\tsyscall.CLONE_NEWUSER |\n\t\t\tsyscall.CLONE_NEWIPC |\n\t\t\tsyscall.CLONE_NEWPID|\n\t\t\tsyscall.CLONE_NEWNS |\n\t\t\tsyscall.CLONE_NEWNET, // 增加Network Namespace\n\t\tUidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getuid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t\tGidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getgid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t}\n\n\t// set identify for this demo\n\tcmd.Env = []string{\"PS1=-[namespace-process]-# \"}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n运行我们的程序，查看网络设备，发现为空\n```\n-[namespace-process]-# ifconfig\n-[namespace-process]-#\n```\n在宿主机上查看网络设备，发现有lo, enp7s0这些网络设备。\n```\nenp7s0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        ether 98:fa:9b:f0:85:c2  txqueuelen 1000  (以太网)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 1000  (本地环回)\n        RX packets 16381  bytes 23729834 (23.7 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 16381  bytes 23729834 (23.7 MB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n....\n```\n从上面的结果我们可以看出Network是隔离了。","source":"_posts/Docker_Go_Namespace.md","raw":"title: 一步步自己做个Docker之Go调用Namespace\nauthor: Salamander\ntags:\n  - Docker\n  - Linux\ncategories:\n  - Docker\n  - Golang\ndate: 2020-03-26 21:00:00\n---\n![docker logo](/images/docker-logo.png)\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS\n* Golang版本：1.12.13\n\n## Golang\nGo语言是Google开发的一种静态类型、编译型的高级语言，它设计的蛮简单的，学过C的话，其实上手Go很快的，当然相比于C的话，Go有垃圾回收和并发支持，所以写起来心智负担更低一点。  \n对于Go的安装和配置，我以前写过一篇文章——[go语言基本配置](https://segmentfault.com/a/1190000008487280)，我这里就不在赘述了。Go1.11增加了`go modules`，使用它的话，就没必要一定要把代码放到`GOPATH`下面啦~\\(≧▽≦)/~。 `go modules`详细\n使用请参考[go mod 使用](https://juejin.im/post/5c8e503a6fb9a070d878184a)。  \n\n<!-- more -->\n\n## Go调用Namespace\n其实对于Namespace这种系统调用，使用C语言描述是最好的（[上一篇文章](/2019/11/28/docker-Linux-Namespace-intro/)就是用C写的示例），但是C比较难，而且Docker也是用Go是实现的，所以我后面的文章都会用Go来写示例代码。  \n这里我先写了一个`UTS Namespace`的例子，`UTS Namespace`主要用来隔离`nodename`和`domainname`这两个系统标识：   \n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags: syscall.CLONE_NEWUTS,\n\t}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n`exec.Command(\"sh\")`是指定了fork出来的新进程内的初始命令，`cmd.SysProcAttr`这行就是设置了系统调用函数，Go帮我们封装了[clone()](http://man7.org/linux/man-pages/man2/clone.2.html)函数，`syscall.CLONE_NEWUTS`这个标识符标明创建一个`UTS Namespace`。  \n`go build .`编译代码后，执行程序时我们会遇到错误**fork/exec /bin/sh: operation not permitted**，这是因为`clone()`函数需要`CAP_SYS_ADMIN`权限（这个[问题](https://www.v2ex.com/t/618961)我在v站上问过），解决方法是添加设置 `uid` 映射： \n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags:\n\t\t\tsyscall.CLONE_NEWUTS |\n\t\t\tsyscall.CLONE_NEWUSER,\n\t\tUidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getuid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t\tGidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getgid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t}\n\n\t// set identify for this demo\n\tcmd.Env = []string{\"PS1=-[namespace-process]-# \"}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n我增加了`CLONE_NEWUSER`标识，让新进程在`User Namespace`中变成root用户。  \n```\n$ ./uts-easy \n-[namespace-process]-# id\nuid=0(root) gid=0(root) groups=0(root),65534(nogroup)\n-[namespace-process]-# hostname -b bird\n-[namespace-process]-# hostname\nbird\n```\n启动另一个shell，查看宿主机上`hostname`:   \n```\n$ hostname\nsalamander-PC\n```\n可以看到，外部的`hostname`并没有被内部的修改所影响，这里我们大致感受了下`UTS Namespace`的作用。\n\n## 增加IPC Namespace\n`IPC Namespace`用来隔离**System V IPC和POSIX message queues**。每一个`IPC Namespace`都有自己的**System V IPC**和**POSIX message queues**。我们稍微改动一下上面的代码。  \n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags:\n\t\t\tsyscall.CLONE_NEWUTS |\n\t\t\tsyscall.CLONE_NEWUSER |\n\t\t\tsyscall.CLONE_NEWIPC,   // 增加IPC Namespace\n\t\tUidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getuid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t\tGidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getgid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t}\n\n\t// set identify for this demo\n\tcmd.Env = []string{\"PS1=-[namespace-process]-# \"}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n新开一个shell，在宿主机上创建一个message queue:\n```\n$ ipcs -q\n\n--------- 消息队列 -----------\n键        msqid      拥有者  权限     已用字节数 消息      \n\n$ ipcmk -Q\n消息队列 id：0\n$ ipcs -q\n\n--------- 消息队列 -----------\n键        msqid      拥有者  权限     已用字节数 消息      \n0xc59399dd 0          salamander 644        0            0\n```\n运行我们自己的程序：\n```\n$ ./uts-easy \n-[namespace-process]-# ipcs -q\n\n------ Message Queues --------\nkey        msqid      owner      perms      used-bytes   messages\n```\n可以看到，在新的Namespace中，看不到宿主机上创建的`message queue`,说明IPC是隔离的。\n\n\n## 增加PID Namespace\n\n**PID Namespace**是用来隔离进程ID的。我们自己进入Docker 容器的时候，就会发现里面的前台进程的PID为1，但是在容器外PID却不是1，这就是通过**PID Namespace**做到的。修改上述的代码，增加`CLONE_NEWPID`：\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags:\n\t\t\tsyscall.CLONE_NEWUTS |\n\t\t\tsyscall.CLONE_NEWUSER |\n\t\t\tsyscall.CLONE_NEWIPC |\n\t\t\tsyscall.CLONE_NEWPID, // 增加PID Namespace\n\t\tUidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getuid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t\tGidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getgid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t}\n\n\t// set identify for this demo\n\tcmd.Env = []string{\"PS1=-[namespace-process]-# \"}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n运行我们的程序：\n```\n ./uts-easy \n-[namespace-process]-# echo $$\n1\n```\n可以看到在新的`PID Namespace`中进程ID为1。\n```\n$ pstree -pl | grep easy\n           |               |                       |-bash(10739)---uts-easy(10768)-+-sh(10773)\n           |               |                       |                               |-{uts-easy}(10769)\n           |               |                       |                               |-{uts-easy}(10770)\n           |               |                       |                               |-{uts-easy}(10771)\n           |               |                       |                               `-{uts-easy}(10772)\n```\n而我们在宿主机上可以看到它实际的PID（`uts-easy`这个进程）为**10768**。  \n如果细心点，我们会发现，在我们的程序中使用`ps`，`top`这些命令出来的结果跟宿主机上是一样的，这是因为这些命令其实是去使用**/proc**这个文件夹的内容，这个就需要下面的`Mount Namespace`了。\n\n## 增加Mount Namespace\n\n**Mount Namespace**用来隔离各个进程看到的挂载点视图。在不同Namespace的进程中，看到的文件系统层次是不一样的。在**Mount Namespace**中调用`mount()`和`unmount()`只会影响当前Namespace内的文件系统，而对全局的文件系统是没有影响的。  \n看到这里，也许会想到`chroot()`。它也能将某一个子目录变为根节点。但是，**Mount Namespace**不仅能实现这个功能，而且能以更加灵活和安全的方式实现。  \n现在继续修改上述代码，增加`CLONE_NEWNS`（Mount Namespace是Linux实现的第一个Namespace类型，因为，它的系统调用参数是**NEWNS**，NS是New Namespace的缩写。当时人们没有意识到，以后还会有很多类型的Namespace加入Linux大家庭）。\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags:\n\t\t\tsyscall.CLONE_NEWUTS |\n\t\t\tsyscall.CLONE_NEWUSER |\n\t\t\tsyscall.CLONE_NEWIPC |\n\t\t\tsyscall.CLONE_NEWPID|\n\t\t\tsyscall.CLONE_NEWNS,  // 增加Mount Namespace\n\t\tUidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getuid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t\tGidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getgid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t}\n\n\t// set identify for this demo\n\tcmd.Env = []string{\"PS1=-[namespace-process]-# \"}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n运行程序，查看/proc的文件内容。\n```\n-[namespace-process]-# ls /proc\n1     1537  198   212   2487  2818  29    3131  329   3363  3422  3557  3793  4250  492   5273  595  62    6519  72    80    87   919        crypto       kmsg          schedstat          vmstat\n10    16    1983  213   2501  2841  2902  3139  3297  3367  3425  3571  38    430   493   53    598  6220  654   7221  8042  88   922        devices      kpagecgroup   scsi               zoneinfo\n1025  17    2     2133  2506  2846  2913  3156 ....\n```\n这里输出的结果很多，因为**/proc**还是宿主机的，下面将**/proc** mount到我们自己的Namespace下面来：\n```\n-[namespace-process]-# mount -t proc proc /proc\n-[namespace-process]-# ls /proc\n1       buddyinfo  consoles  diskstats    fb           iomem     kcore      kpagecgroup  locks    modules  pagetypeinfo  schedstat  softirqs  sysrq-trigger  tty                vmallocinfo\n4       bus        cpuinfo   dma          filesystems  ioports   key-users  kpagecount   mdstat   mounts   partitions    scsi       stat      sysvipc        uptime             vmstat\nacpi    cgroups    crypto    driver       fs           irq       keys       kpageflags   meminfo  mtrr     pressure      self       swaps     thread-self    version            zoneinfo\nasound  cmdline    devices   execdomains  interrupts   kallsyms  kmsg       loadavg      misc     net      sched_debug   slabinfo   sys       timer_list     version_signature\n```\n结果一下子少了很多，这里我们就可以用**ps**来查看系统的进程了。\n```\n-[namespace-process]-# ps -ef\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 17:07 pts/1    00:00:00 sh\nroot         5     1  0 17:11 pts/1    00:00:00 ps -ef\n```\n可以看到，当前的Namespace中，sh进程是PID为1的进程。  \n\n## 增加Network Namespace\n**Network Namespace**是用来隔离网络设备、IP地址端口等网络栈的Namespace。Network Namespace可以让每个容器拥有自己独立（虚拟的）网络设备，而且容器内的应用可以绑定到自己的端口，每个Namespace内的端口都不会互相冲突。在宿主机上搭建网桥后，就能很方便地实现容器之间通讯，而且不同容器上的应用可以使用相同的端口。  \n继续上述代码，加入`CLONE_NEWNET`：\n```Golang\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"syscall\"\n)\n\nfunc main() {\n\tcmd := exec.Command(\"sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{\n\t\tCloneflags:\n\t\t\tsyscall.CLONE_NEWUTS |\n\t\t\tsyscall.CLONE_NEWUSER |\n\t\t\tsyscall.CLONE_NEWIPC |\n\t\t\tsyscall.CLONE_NEWPID|\n\t\t\tsyscall.CLONE_NEWNS |\n\t\t\tsyscall.CLONE_NEWNET, // 增加Network Namespace\n\t\tUidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getuid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t\tGidMappings: []syscall.SysProcIDMap{\n\t\t\t{\n\t\t\t\tContainerID: 0,\n\t\t\t\tHostID:      os.Getgid(),\n\t\t\t\tSize:        1,\n\t\t\t},\n\t\t},\n\t}\n\n\t// set identify for this demo\n\tcmd.Env = []string{\"PS1=-[namespace-process]-# \"}\n\tcmd.Stdin = os.Stdin\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n运行我们的程序，查看网络设备，发现为空\n```\n-[namespace-process]-# ifconfig\n-[namespace-process]-#\n```\n在宿主机上查看网络设备，发现有lo, enp7s0这些网络设备。\n```\nenp7s0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        ether 98:fa:9b:f0:85:c2  txqueuelen 1000  (以太网)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 1000  (本地环回)\n        RX packets 16381  bytes 23729834 (23.7 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 16381  bytes 23729834 (23.7 MB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n....\n```\n从上面的结果我们可以看出Network是隔离了。","slug":"Docker_Go_Namespace","published":1,"updated":"2023-03-21T02:48:19.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40kv000c2o3m3jgt9a87","content":"<figure>\r\n<img src=\"/images/docker-logo.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS * Golang版本：1.12.13</p>\r\n<h2 id=\"golang\">Golang</h2>\r\n<p>Go语言是Google开发的一种静态类型、编译型的高级语言，它设计的蛮简单的，学过C的话，其实上手Go很快的，当然相比于C的话，Go有垃圾回收和并发支持，所以写起来心智负担更低一点。<br />\r\n对于Go的安装和配置，我以前写过一篇文章——<a\r\nhref=\"https://segmentfault.com/a/1190000008487280\">go语言基本配置</a>，我这里就不在赘述了。Go1.11增加了<code>go modules</code>，使用它的话，就没必要一定要把代码放到<code>GOPATH</code>下面啦<sub>(≧▽≦)/</sub>。\r\n<code>go modules</code>详细 使用请参考<a\r\nhref=\"https://juejin.im/post/5c8e503a6fb9a070d878184a\">go mod\r\n使用</a>。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"go调用namespace\">Go调用Namespace</h2>\r\n<p>其实对于Namespace这种系统调用，使用C语言描述是最好的（<a\r\nhref=\"/2019/11/28/docker-Linux-Namespace-intro/\">上一篇文章</a>就是用C写的示例），但是C比较难，而且Docker也是用Go是实现的，所以我后面的文章都会用Go来写示例代码。<br />\r\n这里我先写了一个<code>UTS Namespace</code>的例子，<code>UTS Namespace</code>主要用来隔离<code>nodename</code>和<code>domainname</code>这两个系统标识：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;os/exec&quot;</span><br><span class=\"line\">\t&quot;syscall&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tcmd := exec.Command(&quot;sh&quot;)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags: syscall.CLONE_NEWUTS,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := cmd.Run(); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<code>exec.Command(\"sh\")</code>是指定了fork出来的新进程内的初始命令，<code>cmd.SysProcAttr</code>这行就是设置了系统调用函数，Go帮我们封装了<a\r\nhref=\"http://man7.org/linux/man-pages/man2/clone.2.html\">clone()</a>函数，<code>syscall.CLONE_NEWUTS</code>这个标识符标明创建一个<code>UTS Namespace</code>。<br />\r\n<code>go build .</code>编译代码后，执行程序时我们会遇到错误<strong>fork/exec\r\n/bin/sh: operation not\r\npermitted</strong>，这是因为<code>clone()</code>函数需要<code>CAP_SYS_ADMIN</code>权限（这个<a\r\nhref=\"https://www.v2ex.com/t/618961\">问题</a>我在v站上问过），解决方法是添加设置\r\n<code>uid</code> 映射： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;os/exec&quot;</span><br><span class=\"line\">\t&quot;syscall&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tcmd := exec.Command(&quot;sh&quot;)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags:</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUTS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUSER,</span><br><span class=\"line\">\t\tUidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getuid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tGidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getgid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// set identify for this demo</span><br><span class=\"line\">\tcmd.Env = []string&#123;&quot;PS1=-[namespace-process]-# &quot;&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := cmd.Run(); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n我增加了<code>CLONE_NEWUSER</code>标识，让新进程在<code>User Namespace</code>中变成root用户。<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./uts-easy </span><br><span class=\"line\">-[namespace-process]-# id</span><br><span class=\"line\">uid=0(root) gid=0(root) groups=0(root),65534(nogroup)</span><br><span class=\"line\">-[namespace-process]-# hostname -b bird</span><br><span class=\"line\">-[namespace-process]-# hostname</span><br><span class=\"line\">bird</span><br></pre></td></tr></table></figure> 启动另一个shell，查看宿主机上<code>hostname</code>:<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hostname</span><br><span class=\"line\">salamander-PC</span><br></pre></td></tr></table></figure>\r\n可以看到，外部的<code>hostname</code>并没有被内部的修改所影响，这里我们大致感受了下<code>UTS Namespace</code>的作用。</p>\r\n<h2 id=\"增加ipc-namespace\">增加IPC Namespace</h2>\r\n<p><code>IPC Namespace</code>用来隔离<strong>System V IPC和POSIX message\r\nqueues</strong>。每一个<code>IPC Namespace</code>都有自己的<strong>System\r\nV IPC</strong>和<strong>POSIX message\r\nqueues</strong>。我们稍微改动一下上面的代码。<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;os/exec&quot;</span><br><span class=\"line\">\t&quot;syscall&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tcmd := exec.Command(&quot;sh&quot;)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags:</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUTS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUSER |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWIPC,   // 增加IPC Namespace</span><br><span class=\"line\">\t\tUidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getuid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tGidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getgid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// set identify for this demo</span><br><span class=\"line\">\tcmd.Env = []string&#123;&quot;PS1=-[namespace-process]-# &quot;&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := cmd.Run(); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 新开一个shell，在宿主机上创建一个message queue:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipcs -q</span><br><span class=\"line\"></span><br><span class=\"line\">--------- 消息队列 -----------</span><br><span class=\"line\">键        msqid      拥有者  权限     已用字节数 消息      </span><br><span class=\"line\"></span><br><span class=\"line\">$ ipcmk -Q</span><br><span class=\"line\">消息队列 id：0</span><br><span class=\"line\">$ ipcs -q</span><br><span class=\"line\"></span><br><span class=\"line\">--------- 消息队列 -----------</span><br><span class=\"line\">键        msqid      拥有者  权限     已用字节数 消息      </span><br><span class=\"line\">0xc59399dd 0          salamander 644        0            0</span><br></pre></td></tr></table></figure> 运行我们自己的程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./uts-easy </span><br><span class=\"line\">-[namespace-process]-# ipcs -q</span><br><span class=\"line\"></span><br><span class=\"line\">------ Message Queues --------</span><br><span class=\"line\">key        msqid      owner      perms      used-bytes   messages</span><br></pre></td></tr></table></figure>\r\n可以看到，在新的Namespace中，看不到宿主机上创建的<code>message queue</code>,说明IPC是隔离的。</p>\r\n<h2 id=\"增加pid-namespace\">增加PID Namespace</h2>\r\n<p><strong>PID Namespace</strong>是用来隔离进程ID的。我们自己进入Docker\r\n容器的时候，就会发现里面的前台进程的PID为1，但是在容器外PID却不是1，这就是通过<strong>PID\r\nNamespace</strong>做到的。修改上述的代码，增加<code>CLONE_NEWPID</code>：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;os/exec&quot;</span><br><span class=\"line\">\t&quot;syscall&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tcmd := exec.Command(&quot;sh&quot;)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags:</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUTS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUSER |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWIPC |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWPID, // 增加PID Namespace</span><br><span class=\"line\">\t\tUidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getuid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tGidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getgid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// set identify for this demo</span><br><span class=\"line\">\tcmd.Env = []string&#123;&quot;PS1=-[namespace-process]-# &quot;&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := cmd.Run(); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 运行我们的程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ./uts-easy </span><br><span class=\"line\">-[namespace-process]-# echo $$</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\r\n可以看到在新的<code>PID Namespace</code>中进程ID为1。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pstree -pl | grep easy</span><br><span class=\"line\">           |               |                       |-bash(10739)---uts-easy(10768)-+-sh(10773)</span><br><span class=\"line\">           |               |                       |                               |-&#123;uts-easy&#125;(10769)</span><br><span class=\"line\">           |               |                       |                               |-&#123;uts-easy&#125;(10770)</span><br><span class=\"line\">           |               |                       |                               |-&#123;uts-easy&#125;(10771)</span><br><span class=\"line\">           |               |                       |                               `-&#123;uts-easy&#125;(10772)</span><br></pre></td></tr></table></figure>\r\n而我们在宿主机上可以看到它实际的PID（<code>uts-easy</code>这个进程）为<strong>10768</strong>。<br />\r\n如果细心点，我们会发现，在我们的程序中使用<code>ps</code>，<code>top</code>这些命令出来的结果跟宿主机上是一样的，这是因为这些命令其实是去使用<strong>/proc</strong>这个文件夹的内容，这个就需要下面的<code>Mount Namespace</code>了。</p>\r\n<h2 id=\"增加mount-namespace\">增加Mount Namespace</h2>\r\n<p><strong>Mount\r\nNamespace</strong>用来隔离各个进程看到的挂载点视图。在不同Namespace的进程中，看到的文件系统层次是不一样的。在<strong>Mount\r\nNamespace</strong>中调用<code>mount()</code>和<code>unmount()</code>只会影响当前Namespace内的文件系统，而对全局的文件系统是没有影响的。<br />\r\n看到这里，也许会想到<code>chroot()</code>。它也能将某一个子目录变为根节点。但是，<strong>Mount\r\nNamespace</strong>不仅能实现这个功能，而且能以更加灵活和安全的方式实现。<br />\r\n现在继续修改上述代码，增加<code>CLONE_NEWNS</code>（Mount\r\nNamespace是Linux实现的第一个Namespace类型，因为，它的系统调用参数是<strong>NEWNS</strong>，NS是New\r\nNamespace的缩写。当时人们没有意识到，以后还会有很多类型的Namespace加入Linux大家庭）。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;os/exec&quot;</span><br><span class=\"line\">\t&quot;syscall&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tcmd := exec.Command(&quot;sh&quot;)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags:</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUTS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUSER |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWIPC |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWPID|</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWNS,  // 增加Mount Namespace</span><br><span class=\"line\">\t\tUidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getuid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tGidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getgid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// set identify for this demo</span><br><span class=\"line\">\tcmd.Env = []string&#123;&quot;PS1=-[namespace-process]-# &quot;&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := cmd.Run(); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 运行程序，查看/proc的文件内容。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[namespace-process]-# ls /proc</span><br><span class=\"line\">1     1537  198   212   2487  2818  29    3131  329   3363  3422  3557  3793  4250  492   5273  595  62    6519  72    80    87   919        crypto       kmsg          schedstat          vmstat</span><br><span class=\"line\">10    16    1983  213   2501  2841  2902  3139  3297  3367  3425  3571  38    430   493   53    598  6220  654   7221  8042  88   922        devices      kpagecgroup   scsi               zoneinfo</span><br><span class=\"line\">1025  17    2     2133  2506  2846  2913  3156 ....</span><br></pre></td></tr></table></figure>\r\n这里输出的结果很多，因为<strong>/proc</strong>还是宿主机的，下面将<strong>/proc</strong>\r\nmount到我们自己的Namespace下面来： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[namespace-process]-# mount -t proc proc /proc</span><br><span class=\"line\">-[namespace-process]-# ls /proc</span><br><span class=\"line\">1       buddyinfo  consoles  diskstats    fb           iomem     kcore      kpagecgroup  locks    modules  pagetypeinfo  schedstat  softirqs  sysrq-trigger  tty                vmallocinfo</span><br><span class=\"line\">4       bus        cpuinfo   dma          filesystems  ioports   key-users  kpagecount   mdstat   mounts   partitions    scsi       stat      sysvipc        uptime             vmstat</span><br><span class=\"line\">acpi    cgroups    crypto    driver       fs           irq       keys       kpageflags   meminfo  mtrr     pressure      self       swaps     thread-self    version            zoneinfo</span><br><span class=\"line\">asound  cmdline    devices   execdomains  interrupts   kallsyms  kmsg       loadavg      misc     net      sched_debug   slabinfo   sys       timer_list     version_signature</span><br></pre></td></tr></table></figure>\r\n结果一下子少了很多，这里我们就可以用<strong>ps</strong>来查看系统的进程了。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[namespace-process]-# ps -ef</span><br><span class=\"line\">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root         1     0  0 17:07 pts/1    00:00:00 sh</span><br><span class=\"line\">root         5     1  0 17:11 pts/1    00:00:00 ps -ef</span><br></pre></td></tr></table></figure> 可以看到，当前的Namespace中，sh进程是PID为1的进程。</p>\r\n<h2 id=\"增加network-namespace\">增加Network Namespace</h2>\r\n<p><strong>Network\r\nNamespace</strong>是用来隔离网络设备、IP地址端口等网络栈的Namespace。Network\r\nNamespace可以让每个容器拥有自己独立（虚拟的）网络设备，而且容器内的应用可以绑定到自己的端口，每个Namespace内的端口都不会互相冲突。在宿主机上搭建网桥后，就能很方便地实现容器之间通讯，而且不同容器上的应用可以使用相同的端口。<br />\r\n继续上述代码，加入<code>CLONE_NEWNET</code>： <figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os/exec&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;syscall&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcmd := exec.Command(<span class=\"string\">&quot;sh&quot;</span>)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags:</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUTS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUSER |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWIPC |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWPID|</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWNS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWNET, <span class=\"comment\">// 增加Network Namespace</span></span><br><span class=\"line\">\t\tUidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getuid(),</span><br><span class=\"line\">\t\t\t\tSize:        <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tGidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getgid(),</span><br><span class=\"line\">\t\t\t\tSize:        <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// set identify for this demo</span></span><br><span class=\"line\">\tcmd.Env = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;PS1=-[namespace-process]-# &quot;</span>&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := cmd.Run(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n运行我们的程序，查看网络设备，发现为空 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[namespace-process]-# ifconfig</span><br><span class=\"line\">-[namespace-process]-#</span><br></pre></td></tr></table></figure>\r\n在宿主机上查看网络设备，发现有lo, enp7s0这些网络设备。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enp7s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        ether 98:fa:9b:f0:85:c2  txqueuelen 1000  (以太网)</span><br><span class=\"line\">        RX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class=\"line\">        loop  txqueuelen 1000  (本地环回)</span><br><span class=\"line\">        RX packets 16381  bytes 23729834 (23.7 MB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 16381  bytes 23729834 (23.7 MB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\r\n从上面的结果我们可以看出Network是隔离了。</p>\r\n","site":{"data":{}},"excerpt":"<figure>\r\n<img src=\"/images/docker-logo.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS * Golang版本：1.12.13</p>\r\n<h2 id=\"golang\">Golang</h2>\r\n<p>Go语言是Google开发的一种静态类型、编译型的高级语言，它设计的蛮简单的，学过C的话，其实上手Go很快的，当然相比于C的话，Go有垃圾回收和并发支持，所以写起来心智负担更低一点。<br />\r\n对于Go的安装和配置，我以前写过一篇文章——<a\r\nhref=\"https://segmentfault.com/a/1190000008487280\">go语言基本配置</a>，我这里就不在赘述了。Go1.11增加了<code>go modules</code>，使用它的话，就没必要一定要把代码放到<code>GOPATH</code>下面啦<sub>(≧▽≦)/</sub>。\r\n<code>go modules</code>详细 使用请参考<a\r\nhref=\"https://juejin.im/post/5c8e503a6fb9a070d878184a\">go mod\r\n使用</a>。</p>","more":"<h2 id=\"go调用namespace\">Go调用Namespace</h2>\r\n<p>其实对于Namespace这种系统调用，使用C语言描述是最好的（<a\r\nhref=\"/2019/11/28/docker-Linux-Namespace-intro/\">上一篇文章</a>就是用C写的示例），但是C比较难，而且Docker也是用Go是实现的，所以我后面的文章都会用Go来写示例代码。<br />\r\n这里我先写了一个<code>UTS Namespace</code>的例子，<code>UTS Namespace</code>主要用来隔离<code>nodename</code>和<code>domainname</code>这两个系统标识：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;os/exec&quot;</span><br><span class=\"line\">\t&quot;syscall&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tcmd := exec.Command(&quot;sh&quot;)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags: syscall.CLONE_NEWUTS,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := cmd.Run(); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<code>exec.Command(\"sh\")</code>是指定了fork出来的新进程内的初始命令，<code>cmd.SysProcAttr</code>这行就是设置了系统调用函数，Go帮我们封装了<a\r\nhref=\"http://man7.org/linux/man-pages/man2/clone.2.html\">clone()</a>函数，<code>syscall.CLONE_NEWUTS</code>这个标识符标明创建一个<code>UTS Namespace</code>。<br />\r\n<code>go build .</code>编译代码后，执行程序时我们会遇到错误<strong>fork/exec\r\n/bin/sh: operation not\r\npermitted</strong>，这是因为<code>clone()</code>函数需要<code>CAP_SYS_ADMIN</code>权限（这个<a\r\nhref=\"https://www.v2ex.com/t/618961\">问题</a>我在v站上问过），解决方法是添加设置\r\n<code>uid</code> 映射： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;os/exec&quot;</span><br><span class=\"line\">\t&quot;syscall&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tcmd := exec.Command(&quot;sh&quot;)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags:</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUTS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUSER,</span><br><span class=\"line\">\t\tUidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getuid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tGidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getgid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// set identify for this demo</span><br><span class=\"line\">\tcmd.Env = []string&#123;&quot;PS1=-[namespace-process]-# &quot;&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := cmd.Run(); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n我增加了<code>CLONE_NEWUSER</code>标识，让新进程在<code>User Namespace</code>中变成root用户。<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./uts-easy </span><br><span class=\"line\">-[namespace-process]-# id</span><br><span class=\"line\">uid=0(root) gid=0(root) groups=0(root),65534(nogroup)</span><br><span class=\"line\">-[namespace-process]-# hostname -b bird</span><br><span class=\"line\">-[namespace-process]-# hostname</span><br><span class=\"line\">bird</span><br></pre></td></tr></table></figure> 启动另一个shell，查看宿主机上<code>hostname</code>:<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hostname</span><br><span class=\"line\">salamander-PC</span><br></pre></td></tr></table></figure>\r\n可以看到，外部的<code>hostname</code>并没有被内部的修改所影响，这里我们大致感受了下<code>UTS Namespace</code>的作用。</p>\r\n<h2 id=\"增加ipc-namespace\">增加IPC Namespace</h2>\r\n<p><code>IPC Namespace</code>用来隔离<strong>System V IPC和POSIX message\r\nqueues</strong>。每一个<code>IPC Namespace</code>都有自己的<strong>System\r\nV IPC</strong>和<strong>POSIX message\r\nqueues</strong>。我们稍微改动一下上面的代码。<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;os/exec&quot;</span><br><span class=\"line\">\t&quot;syscall&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tcmd := exec.Command(&quot;sh&quot;)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags:</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUTS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUSER |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWIPC,   // 增加IPC Namespace</span><br><span class=\"line\">\t\tUidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getuid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tGidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getgid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// set identify for this demo</span><br><span class=\"line\">\tcmd.Env = []string&#123;&quot;PS1=-[namespace-process]-# &quot;&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := cmd.Run(); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 新开一个shell，在宿主机上创建一个message queue:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipcs -q</span><br><span class=\"line\"></span><br><span class=\"line\">--------- 消息队列 -----------</span><br><span class=\"line\">键        msqid      拥有者  权限     已用字节数 消息      </span><br><span class=\"line\"></span><br><span class=\"line\">$ ipcmk -Q</span><br><span class=\"line\">消息队列 id：0</span><br><span class=\"line\">$ ipcs -q</span><br><span class=\"line\"></span><br><span class=\"line\">--------- 消息队列 -----------</span><br><span class=\"line\">键        msqid      拥有者  权限     已用字节数 消息      </span><br><span class=\"line\">0xc59399dd 0          salamander 644        0            0</span><br></pre></td></tr></table></figure> 运行我们自己的程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./uts-easy </span><br><span class=\"line\">-[namespace-process]-# ipcs -q</span><br><span class=\"line\"></span><br><span class=\"line\">------ Message Queues --------</span><br><span class=\"line\">key        msqid      owner      perms      used-bytes   messages</span><br></pre></td></tr></table></figure>\r\n可以看到，在新的Namespace中，看不到宿主机上创建的<code>message queue</code>,说明IPC是隔离的。</p>\r\n<h2 id=\"增加pid-namespace\">增加PID Namespace</h2>\r\n<p><strong>PID Namespace</strong>是用来隔离进程ID的。我们自己进入Docker\r\n容器的时候，就会发现里面的前台进程的PID为1，但是在容器外PID却不是1，这就是通过<strong>PID\r\nNamespace</strong>做到的。修改上述的代码，增加<code>CLONE_NEWPID</code>：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;os/exec&quot;</span><br><span class=\"line\">\t&quot;syscall&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tcmd := exec.Command(&quot;sh&quot;)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags:</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUTS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUSER |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWIPC |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWPID, // 增加PID Namespace</span><br><span class=\"line\">\t\tUidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getuid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tGidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getgid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// set identify for this demo</span><br><span class=\"line\">\tcmd.Env = []string&#123;&quot;PS1=-[namespace-process]-# &quot;&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := cmd.Run(); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 运行我们的程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ./uts-easy </span><br><span class=\"line\">-[namespace-process]-# echo $$</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\r\n可以看到在新的<code>PID Namespace</code>中进程ID为1。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pstree -pl | grep easy</span><br><span class=\"line\">           |               |                       |-bash(10739)---uts-easy(10768)-+-sh(10773)</span><br><span class=\"line\">           |               |                       |                               |-&#123;uts-easy&#125;(10769)</span><br><span class=\"line\">           |               |                       |                               |-&#123;uts-easy&#125;(10770)</span><br><span class=\"line\">           |               |                       |                               |-&#123;uts-easy&#125;(10771)</span><br><span class=\"line\">           |               |                       |                               `-&#123;uts-easy&#125;(10772)</span><br></pre></td></tr></table></figure>\r\n而我们在宿主机上可以看到它实际的PID（<code>uts-easy</code>这个进程）为<strong>10768</strong>。<br />\r\n如果细心点，我们会发现，在我们的程序中使用<code>ps</code>，<code>top</code>这些命令出来的结果跟宿主机上是一样的，这是因为这些命令其实是去使用<strong>/proc</strong>这个文件夹的内容，这个就需要下面的<code>Mount Namespace</code>了。</p>\r\n<h2 id=\"增加mount-namespace\">增加Mount Namespace</h2>\r\n<p><strong>Mount\r\nNamespace</strong>用来隔离各个进程看到的挂载点视图。在不同Namespace的进程中，看到的文件系统层次是不一样的。在<strong>Mount\r\nNamespace</strong>中调用<code>mount()</code>和<code>unmount()</code>只会影响当前Namespace内的文件系统，而对全局的文件系统是没有影响的。<br />\r\n看到这里，也许会想到<code>chroot()</code>。它也能将某一个子目录变为根节点。但是，<strong>Mount\r\nNamespace</strong>不仅能实现这个功能，而且能以更加灵活和安全的方式实现。<br />\r\n现在继续修改上述代码，增加<code>CLONE_NEWNS</code>（Mount\r\nNamespace是Linux实现的第一个Namespace类型，因为，它的系统调用参数是<strong>NEWNS</strong>，NS是New\r\nNamespace的缩写。当时人们没有意识到，以后还会有很多类型的Namespace加入Linux大家庭）。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;os&quot;</span><br><span class=\"line\">\t&quot;os/exec&quot;</span><br><span class=\"line\">\t&quot;syscall&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tcmd := exec.Command(&quot;sh&quot;)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags:</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUTS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUSER |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWIPC |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWPID|</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWNS,  // 增加Mount Namespace</span><br><span class=\"line\">\t\tUidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getuid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tGidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: 0,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getgid(),</span><br><span class=\"line\">\t\t\t\tSize:        1,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// set identify for this demo</span><br><span class=\"line\">\tcmd.Env = []string&#123;&quot;PS1=-[namespace-process]-# &quot;&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\tif err := cmd.Run(); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 运行程序，查看/proc的文件内容。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[namespace-process]-# ls /proc</span><br><span class=\"line\">1     1537  198   212   2487  2818  29    3131  329   3363  3422  3557  3793  4250  492   5273  595  62    6519  72    80    87   919        crypto       kmsg          schedstat          vmstat</span><br><span class=\"line\">10    16    1983  213   2501  2841  2902  3139  3297  3367  3425  3571  38    430   493   53    598  6220  654   7221  8042  88   922        devices      kpagecgroup   scsi               zoneinfo</span><br><span class=\"line\">1025  17    2     2133  2506  2846  2913  3156 ....</span><br></pre></td></tr></table></figure>\r\n这里输出的结果很多，因为<strong>/proc</strong>还是宿主机的，下面将<strong>/proc</strong>\r\nmount到我们自己的Namespace下面来： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[namespace-process]-# mount -t proc proc /proc</span><br><span class=\"line\">-[namespace-process]-# ls /proc</span><br><span class=\"line\">1       buddyinfo  consoles  diskstats    fb           iomem     kcore      kpagecgroup  locks    modules  pagetypeinfo  schedstat  softirqs  sysrq-trigger  tty                vmallocinfo</span><br><span class=\"line\">4       bus        cpuinfo   dma          filesystems  ioports   key-users  kpagecount   mdstat   mounts   partitions    scsi       stat      sysvipc        uptime             vmstat</span><br><span class=\"line\">acpi    cgroups    crypto    driver       fs           irq       keys       kpageflags   meminfo  mtrr     pressure      self       swaps     thread-self    version            zoneinfo</span><br><span class=\"line\">asound  cmdline    devices   execdomains  interrupts   kallsyms  kmsg       loadavg      misc     net      sched_debug   slabinfo   sys       timer_list     version_signature</span><br></pre></td></tr></table></figure>\r\n结果一下子少了很多，这里我们就可以用<strong>ps</strong>来查看系统的进程了。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[namespace-process]-# ps -ef</span><br><span class=\"line\">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class=\"line\">root         1     0  0 17:07 pts/1    00:00:00 sh</span><br><span class=\"line\">root         5     1  0 17:11 pts/1    00:00:00 ps -ef</span><br></pre></td></tr></table></figure> 可以看到，当前的Namespace中，sh进程是PID为1的进程。</p>\r\n<h2 id=\"增加network-namespace\">增加Network Namespace</h2>\r\n<p><strong>Network\r\nNamespace</strong>是用来隔离网络设备、IP地址端口等网络栈的Namespace。Network\r\nNamespace可以让每个容器拥有自己独立（虚拟的）网络设备，而且容器内的应用可以绑定到自己的端口，每个Namespace内的端口都不会互相冲突。在宿主机上搭建网桥后，就能很方便地实现容器之间通讯，而且不同容器上的应用可以使用相同的端口。<br />\r\n继续上述代码，加入<code>CLONE_NEWNET</code>： <figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os/exec&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;syscall&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcmd := exec.Command(<span class=\"string\">&quot;sh&quot;</span>)</span><br><span class=\"line\">\tcmd.SysProcAttr = &amp;syscall.SysProcAttr&#123;</span><br><span class=\"line\">\t\tCloneflags:</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUTS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWUSER |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWIPC |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWPID|</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWNS |</span><br><span class=\"line\">\t\t\tsyscall.CLONE_NEWNET, <span class=\"comment\">// 增加Network Namespace</span></span><br><span class=\"line\">\t\tUidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getuid(),</span><br><span class=\"line\">\t\t\t\tSize:        <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tGidMappings: []syscall.SysProcIDMap&#123;</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tContainerID: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\tHostID:      os.Getgid(),</span><br><span class=\"line\">\t\t\t\tSize:        <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// set identify for this demo</span></span><br><span class=\"line\">\tcmd.Env = []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;PS1=-[namespace-process]-# &quot;</span>&#125;</span><br><span class=\"line\">\tcmd.Stdin = os.Stdin</span><br><span class=\"line\">\tcmd.Stdout = os.Stdout</span><br><span class=\"line\">\tcmd.Stderr = os.Stderr</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := cmd.Run(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n运行我们的程序，查看网络设备，发现为空 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[namespace-process]-# ifconfig</span><br><span class=\"line\">-[namespace-process]-#</span><br></pre></td></tr></table></figure>\r\n在宿主机上查看网络设备，发现有lo, enp7s0这些网络设备。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enp7s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        ether 98:fa:9b:f0:85:c2  txqueuelen 1000  (以太网)</span><br><span class=\"line\">        RX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 0  bytes 0 (0.0 B)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class=\"line\">        loop  txqueuelen 1000  (本地环回)</span><br><span class=\"line\">        RX packets 16381  bytes 23729834 (23.7 MB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 16381  bytes 23729834 (23.7 MB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\r\n从上面的结果我们可以看出Network是隔离了。</p>"},{"title":"Elasticsearch简单使用","author":"Salamander","date":"2020-04-21T08:00:00.000Z","_content":"![](https://s1.ax1x.com/2020/04/23/Jd4MOf.png)\n\n## Elasticsearch\n`Elasticsearch`是一个基于Lucene的搜索服务器（Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库）。Elasticsearch使用Java编写并使用Lucene来建立索引并实现搜索功能，但是它的目的是通过简单连贯的`RESTful API`让全文搜索变得简单并隐藏Lucene的复杂性。 \n\n<!-- more -->\n\n\n## 安装单节点Elasticsearch\n`Elasticsearch`是用Java语言开发的，所以你需要安装Java环境，但为了方便起见，我这里选用了`Docker`安装ES（其实ES官网也有用Docker安装的[例子](https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html#docker)，这里我就把它写成了docker-compose服务）。  \ndocker-compose.yml\n```\nversion: '2.2'\nservices:\n  es:\n    image: elasticsearch:6.7.0\n    container_name: es0\n    environment:\n      - node.name=es0\n      - \"discovery.type=single-node\"\n      - node.data=true\n      - bootstrap.memory_lock=true\n      - network.host=0.0.0.0\n      - \"ES_JAVA_OPTS=-Xms1g -Xmx1g\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - ./data:/usr/share/elasticsearch/data\n    ports:\n      - 9200:9200\n      - 9300:9300\n```\nElasticsearch 启动后，启动了两个端口 9200 和 9300：\n* 9200 端口：HTTP RESTful 接口的通讯端口\n* 9300 端口：TCP 通讯端口，用于集群间节点通信和与 Java 客户端通信的端口\n\n```\n- bootstrap.memory_lock=true\n...\nulimits:\n  memlock:\n    soft: -1\n    hard: -1\n```\n这两部分是为了禁止使用swap内存，因为当jvm开始swapping时ES的效率会降低。  \n\n`-Xms1g -Xmx1g`是设置了JVM的初始堆大小和最大堆大小（具体参数含义可以参考[这里](https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html)）。 \n\n启动之前还是需要调高JVM线程数限制数量，不然启动会报错\n```\nvim /etc/sysctl.conf\n# 添加这个\nvm.max_map_count=262144 \n# 保存后执行这个命令\nsysctl -p\n```\n\n\n## 概念\n在进一步使用 Elasticsearch 之前，让我们先了解几个关键概念。\n\n在逻辑层面：  \n* Index (索引)和Type (类型)：这里的 Index 是名词，在之前开始的时候，我们把**索引（index）和类型（type）**类比于SQL数据库中的 database 和 table，但是这样类比是不合适的。刚开始的ES版本一个索引可以有多个类型，在ES6之后每个索引只能有一个类型，所以他们现在都可以当做一张数据表了。\n* Document (文档)：Elasticsearch 使用 JSON 文档来表示一个对象，就像是关系数据库中一个 Table 中的一行数据\n* Field (字段)：每个文档包含多个字段，类似关系数据库中一个 Table 的列\n\n>>>\n为什么要移除映射类型\n开始的时候，我们把**索引（index）和类型（type）**类比于SQL数据库中的 database 和 table，但是这样类比是不合适的。在SQL数据库中，表之间是相互独立的。一个表中的各列并不会影响到其它表中的同名的列。而在映射类型（mapping type）中却不是这样的。\n在同一个 Elasticsearch 索引中，其中不同映射类型中的同名字段在内部是由同一个 Lucene 字段来支持的。换句话说，使用上面的例子，user 类型中的 user_name 字段与 tweet 类型中的 user_name 字段是完全一样的，并且两个 user_name 字段在两个类型中必须具有相同的映射（定义）。\n这会在某些情况下导致一些混乱，比如，在同一个索引中，当你想在其中的一个类型中将 deleted 字段作为 date 类型，而在另一个类型中将其作为 boolean 字段。\n在此之上需要考虑一点，如果同一个索引中存储的各个实体如果只有很少或者根本没有同样的字段，这种情况会导致稀疏数据，并且会影响到Lucene的高效压缩数据的能力\n\n\n在物理层面：  \n\n* Node (节点)：node 是一个运行着的 Elasticsearch 实例，一个 node 就是一个单独的 server\n* Cluster (集群)：cluster 是多个 node 的集合\n* Shard (分片)：数据分片，一个 index 可能会存在于多个 shard\n\n\n\n## 使用\n下面，我们将创建一个存储电影信息的 Document：\n* Index 的名称为 movie\n* Type 为 adventure\n* Document 有两个字段：name 和 actors\n\n我们使用 Elasticsearch 提供的 RESTful API 来执行上述操作，如图所示：  \n\n![](https://s1.ax1x.com/2020/04/23/Jw9Ov6.png)\n\n* 用 url 表示一个资源，比如 /movie/adventure/1 就表示一个 index 为 movie，type 为 adventure，id 为 1 的 document\n* 用 http 方法操作资源，如使用 GET 获取资源，使用 POST、PUT 新增或更新资源，使用 DELETE 删除资源等\n\n用`curl`命令实现上述操作：\n```\ncurl -i -X PUT \"localhost:9200/movie/adventure/1\" -H 'Content-Type: application/json' -d '{\"name\": \"Life of Pi\", \"actors\": [\"Suraj\", \"Irrfan\"]}'\n```\nES6之后需要加上head`Content-Type: application/json`\n\n上述命令返回：\n```\nHTTP/1.1 201 Created\nLocation: /movie/adventure/1\ncontent-type: application/json; charset=UTF-8\ncontent-length: 158\n\n{\"_index\":\"movie\",\"_type\":\"adventure\",\"_id\":\"4\",\"_version\":1,\"result\":\"created\",\"_shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"_seq_no\":1,\"_primary_term\":1}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## elasticsearch.yml配置说明\n```\n#集群的名称\ncluster.name: es6.2\n#节点名称,其余两个节点分别为node-2 和node-3\nnode.name: node-1\n#指定该节点是否有资格被选举成为master节点，默认是true，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master\nnode.master: true\n#允许该节点存储数据(默认开启)\nnode.data: true\n#索引数据的存储路径\npath.data: /usr/local/elk/elasticsearch/data\n#日志文件的存储路径\npath.logs: /usr/local/elk/elasticsearch/logs\n#设置为true来锁住内存。因为内存交换到磁盘对服务器性能来说是致命的，当jvm开始swapping时es的效率会降低，所以要保证它不swap\nbootstrap.memory_lock: true\n#绑定的ip地址\nnetwork.host: 0.0.0.0\n#设置对外服务的http端口，默认为9200\nhttp.port: 9200\n# 设置节点间交互的tcp端口,默认是9300 \ntransport.tcp.port: 9300\n#Elasticsearch将绑定到可用的环回地址，并将扫描端口9300到9305以尝试连接到运行在同一台服务器上的其他节点。\n#这提供了自动集群体验，而无需进行任何配置。数组设置或逗号分隔的设置。每个值的形式应该是host:port或host\n#（如果没有设置，port默认设置会transport.profiles.default.port 回落到transport.tcp.port）。\n#请注意，IPv6主机必须放在括号内。默认为127.0.0.1, [::1]\ndiscovery.zen.ping.unicast.hosts: [\"192.168.8.101:9300\", \"192.168.8.103:9300\", \"192.168.8.104:9300\"]\n#如果没有这种设置,遭受网络故障的集群就有可能将集群分成两个独立的集群 - 分裂的大脑 - 这将导致数据丢失\ndiscovery.zen.minimum_master_nodes: 3\n```\n\n\n\n参考：\n* [Elasticsearch6.2集群搭建](https://blog.csdn.net/qq_34021712/article/details/79330028)\n* [Elasticsearch入门，这一篇就够了](https://www.cnblogs.com/sunsky303/p/9438737.html)","source":"_posts/Elasticsearch_to_know.md","raw":"title: Elasticsearch简单使用\nauthor: Salamander\ntags:\n  - Java\n  - Elasticsearch\ncategories:\n  - Java\ndate: 2020-04-21 16:00:00\n---\n![](https://s1.ax1x.com/2020/04/23/Jd4MOf.png)\n\n## Elasticsearch\n`Elasticsearch`是一个基于Lucene的搜索服务器（Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库）。Elasticsearch使用Java编写并使用Lucene来建立索引并实现搜索功能，但是它的目的是通过简单连贯的`RESTful API`让全文搜索变得简单并隐藏Lucene的复杂性。 \n\n<!-- more -->\n\n\n## 安装单节点Elasticsearch\n`Elasticsearch`是用Java语言开发的，所以你需要安装Java环境，但为了方便起见，我这里选用了`Docker`安装ES（其实ES官网也有用Docker安装的[例子](https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html#docker)，这里我就把它写成了docker-compose服务）。  \ndocker-compose.yml\n```\nversion: '2.2'\nservices:\n  es:\n    image: elasticsearch:6.7.0\n    container_name: es0\n    environment:\n      - node.name=es0\n      - \"discovery.type=single-node\"\n      - node.data=true\n      - bootstrap.memory_lock=true\n      - network.host=0.0.0.0\n      - \"ES_JAVA_OPTS=-Xms1g -Xmx1g\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - ./data:/usr/share/elasticsearch/data\n    ports:\n      - 9200:9200\n      - 9300:9300\n```\nElasticsearch 启动后，启动了两个端口 9200 和 9300：\n* 9200 端口：HTTP RESTful 接口的通讯端口\n* 9300 端口：TCP 通讯端口，用于集群间节点通信和与 Java 客户端通信的端口\n\n```\n- bootstrap.memory_lock=true\n...\nulimits:\n  memlock:\n    soft: -1\n    hard: -1\n```\n这两部分是为了禁止使用swap内存，因为当jvm开始swapping时ES的效率会降低。  \n\n`-Xms1g -Xmx1g`是设置了JVM的初始堆大小和最大堆大小（具体参数含义可以参考[这里](https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html)）。 \n\n启动之前还是需要调高JVM线程数限制数量，不然启动会报错\n```\nvim /etc/sysctl.conf\n# 添加这个\nvm.max_map_count=262144 \n# 保存后执行这个命令\nsysctl -p\n```\n\n\n## 概念\n在进一步使用 Elasticsearch 之前，让我们先了解几个关键概念。\n\n在逻辑层面：  \n* Index (索引)和Type (类型)：这里的 Index 是名词，在之前开始的时候，我们把**索引（index）和类型（type）**类比于SQL数据库中的 database 和 table，但是这样类比是不合适的。刚开始的ES版本一个索引可以有多个类型，在ES6之后每个索引只能有一个类型，所以他们现在都可以当做一张数据表了。\n* Document (文档)：Elasticsearch 使用 JSON 文档来表示一个对象，就像是关系数据库中一个 Table 中的一行数据\n* Field (字段)：每个文档包含多个字段，类似关系数据库中一个 Table 的列\n\n>>>\n为什么要移除映射类型\n开始的时候，我们把**索引（index）和类型（type）**类比于SQL数据库中的 database 和 table，但是这样类比是不合适的。在SQL数据库中，表之间是相互独立的。一个表中的各列并不会影响到其它表中的同名的列。而在映射类型（mapping type）中却不是这样的。\n在同一个 Elasticsearch 索引中，其中不同映射类型中的同名字段在内部是由同一个 Lucene 字段来支持的。换句话说，使用上面的例子，user 类型中的 user_name 字段与 tweet 类型中的 user_name 字段是完全一样的，并且两个 user_name 字段在两个类型中必须具有相同的映射（定义）。\n这会在某些情况下导致一些混乱，比如，在同一个索引中，当你想在其中的一个类型中将 deleted 字段作为 date 类型，而在另一个类型中将其作为 boolean 字段。\n在此之上需要考虑一点，如果同一个索引中存储的各个实体如果只有很少或者根本没有同样的字段，这种情况会导致稀疏数据，并且会影响到Lucene的高效压缩数据的能力\n\n\n在物理层面：  \n\n* Node (节点)：node 是一个运行着的 Elasticsearch 实例，一个 node 就是一个单独的 server\n* Cluster (集群)：cluster 是多个 node 的集合\n* Shard (分片)：数据分片，一个 index 可能会存在于多个 shard\n\n\n\n## 使用\n下面，我们将创建一个存储电影信息的 Document：\n* Index 的名称为 movie\n* Type 为 adventure\n* Document 有两个字段：name 和 actors\n\n我们使用 Elasticsearch 提供的 RESTful API 来执行上述操作，如图所示：  \n\n![](https://s1.ax1x.com/2020/04/23/Jw9Ov6.png)\n\n* 用 url 表示一个资源，比如 /movie/adventure/1 就表示一个 index 为 movie，type 为 adventure，id 为 1 的 document\n* 用 http 方法操作资源，如使用 GET 获取资源，使用 POST、PUT 新增或更新资源，使用 DELETE 删除资源等\n\n用`curl`命令实现上述操作：\n```\ncurl -i -X PUT \"localhost:9200/movie/adventure/1\" -H 'Content-Type: application/json' -d '{\"name\": \"Life of Pi\", \"actors\": [\"Suraj\", \"Irrfan\"]}'\n```\nES6之后需要加上head`Content-Type: application/json`\n\n上述命令返回：\n```\nHTTP/1.1 201 Created\nLocation: /movie/adventure/1\ncontent-type: application/json; charset=UTF-8\ncontent-length: 158\n\n{\"_index\":\"movie\",\"_type\":\"adventure\",\"_id\":\"4\",\"_version\":1,\"result\":\"created\",\"_shards\":{\"total\":2,\"successful\":1,\"failed\":0},\"_seq_no\":1,\"_primary_term\":1}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## elasticsearch.yml配置说明\n```\n#集群的名称\ncluster.name: es6.2\n#节点名称,其余两个节点分别为node-2 和node-3\nnode.name: node-1\n#指定该节点是否有资格被选举成为master节点，默认是true，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master\nnode.master: true\n#允许该节点存储数据(默认开启)\nnode.data: true\n#索引数据的存储路径\npath.data: /usr/local/elk/elasticsearch/data\n#日志文件的存储路径\npath.logs: /usr/local/elk/elasticsearch/logs\n#设置为true来锁住内存。因为内存交换到磁盘对服务器性能来说是致命的，当jvm开始swapping时es的效率会降低，所以要保证它不swap\nbootstrap.memory_lock: true\n#绑定的ip地址\nnetwork.host: 0.0.0.0\n#设置对外服务的http端口，默认为9200\nhttp.port: 9200\n# 设置节点间交互的tcp端口,默认是9300 \ntransport.tcp.port: 9300\n#Elasticsearch将绑定到可用的环回地址，并将扫描端口9300到9305以尝试连接到运行在同一台服务器上的其他节点。\n#这提供了自动集群体验，而无需进行任何配置。数组设置或逗号分隔的设置。每个值的形式应该是host:port或host\n#（如果没有设置，port默认设置会transport.profiles.default.port 回落到transport.tcp.port）。\n#请注意，IPv6主机必须放在括号内。默认为127.0.0.1, [::1]\ndiscovery.zen.ping.unicast.hosts: [\"192.168.8.101:9300\", \"192.168.8.103:9300\", \"192.168.8.104:9300\"]\n#如果没有这种设置,遭受网络故障的集群就有可能将集群分成两个独立的集群 - 分裂的大脑 - 这将导致数据丢失\ndiscovery.zen.minimum_master_nodes: 3\n```\n\n\n\n参考：\n* [Elasticsearch6.2集群搭建](https://blog.csdn.net/qq_34021712/article/details/79330028)\n* [Elasticsearch入门，这一篇就够了](https://www.cnblogs.com/sunsky303/p/9438737.html)","slug":"Elasticsearch_to_know","published":1,"updated":"2023-03-21T02:48:19.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40kw000d2o3mdn6r9ph0","content":"<p><img src=\"https://s1.ax1x.com/2020/04/23/Jd4MOf.png\" /></p>\r\n<h2 id=\"elasticsearch\">Elasticsearch</h2>\r\n<p><code>Elasticsearch</code>是一个基于Lucene的搜索服务器（Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库）。Elasticsearch使用Java编写并使用Lucene来建立索引并实现搜索功能，但是它的目的是通过简单连贯的<code>RESTful API</code>让全文搜索变得简单并隐藏Lucene的复杂性。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"安装单节点elasticsearch\">安装单节点Elasticsearch</h2>\r\n<p><code>Elasticsearch</code>是用Java语言开发的，所以你需要安装Java环境，但为了方便起见，我这里选用了<code>Docker</code>安装ES（其实ES官网也有用Docker安装的<a\r\nhref=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html#docker\">例子</a>，这里我就把它写成了docker-compose服务）。<br />\r\ndocker-compose.yml <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;2.2&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  es:</span><br><span class=\"line\">    image: elasticsearch:6.7.0</span><br><span class=\"line\">    container_name: es0</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - node.name=es0</span><br><span class=\"line\">      - &quot;discovery.type=single-node&quot;</span><br><span class=\"line\">      - node.data=true</span><br><span class=\"line\">      - bootstrap.memory_lock=true</span><br><span class=\"line\">      - network.host=0.0.0.0</span><br><span class=\"line\">      - &quot;ES_JAVA_OPTS=-Xms1g -Xmx1g&quot;</span><br><span class=\"line\">    ulimits:</span><br><span class=\"line\">      memlock:</span><br><span class=\"line\">        soft: -1</span><br><span class=\"line\">        hard: -1</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data:/usr/share/elasticsearch/data</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9200:9200</span><br><span class=\"line\">      - 9300:9300</span><br></pre></td></tr></table></figure> Elasticsearch 启动后，启动了两个端口\r\n9200 和 9300： * 9200 端口：HTTP RESTful 接口的通讯端口 * 9300 端口：TCP\r\n通讯端口，用于集群间节点通信和与 Java 客户端通信的端口</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- bootstrap.memory_lock=true</span><br><span class=\"line\">...</span><br><span class=\"line\">ulimits:</span><br><span class=\"line\">  memlock:</span><br><span class=\"line\">    soft: -1</span><br><span class=\"line\">    hard: -1</span><br></pre></td></tr></table></figure>\r\n<p>这两部分是为了禁止使用swap内存，因为当jvm开始swapping时ES的效率会降低。</p>\r\n<p><code>-Xms1g -Xmx1g</code>是设置了JVM的初始堆大小和最大堆大小（具体参数含义可以参考<a\r\nhref=\"https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html\">这里</a>）。</p>\r\n<p>启动之前还是需要调高JVM线程数限制数量，不然启动会报错\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\"># 添加这个</span><br><span class=\"line\">vm.max_map_count=262144 </span><br><span class=\"line\"># 保存后执行这个命令</span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"概念\">概念</h2>\r\n<p>在进一步使用 Elasticsearch 之前，让我们先了解几个关键概念。</p>\r\n<p>在逻辑层面：<br />\r\n* Index (索引)和Type (类型)：这里的 Index\r\n是名词，在之前开始的时候，我们把<strong>索引（index）和类型（type）</strong>类比于SQL数据库中的\r\ndatabase 和\r\ntable，但是这样类比是不合适的。刚开始的ES版本一个索引可以有多个类型，在ES6之后每个索引只能有一个类型，所以他们现在都可以当做一张数据表了。\r\n* Document (文档)：Elasticsearch 使用 JSON\r\n文档来表示一个对象，就像是关系数据库中一个 Table 中的一行数据 * Field\r\n(字段)：每个文档包含多个字段，类似关系数据库中一个 Table 的列</p>\r\n<blockquote>\r\n<blockquote>\r\n<blockquote>\r\n<p>为什么要移除映射类型\r\n开始的时候，我们把<strong>索引（index）和类型（type）</strong>类比于SQL数据库中的\r\ndatabase 和\r\ntable，但是这样类比是不合适的。在SQL数据库中，表之间是相互独立的。一个表中的各列并不会影响到其它表中的同名的列。而在映射类型（mapping\r\ntype）中却不是这样的。 在同一个 Elasticsearch\r\n索引中，其中不同映射类型中的同名字段在内部是由同一个 Lucene\r\n字段来支持的。换句话说，使用上面的例子，user 类型中的 user_name 字段与\r\ntweet 类型中的 user_name 字段是完全一样的，并且两个 user_name\r\n字段在两个类型中必须具有相同的映射（定义）。\r\n这会在某些情况下导致一些混乱，比如，在同一个索引中，当你想在其中的一个类型中将\r\ndeleted 字段作为 date 类型，而在另一个类型中将其作为 boolean 字段。\r\n在此之上需要考虑一点，如果同一个索引中存储的各个实体如果只有很少或者根本没有同样的字段，这种情况会导致稀疏数据，并且会影响到Lucene的高效压缩数据的能力</p>\r\n</blockquote>\r\n</blockquote>\r\n</blockquote>\r\n<p>在物理层面：</p>\r\n<ul>\r\n<li>Node (节点)：node 是一个运行着的 Elasticsearch 实例，一个 node\r\n就是一个单独的 server</li>\r\n<li>Cluster (集群)：cluster 是多个 node 的集合</li>\r\n<li>Shard (分片)：数据分片，一个 index 可能会存在于多个 shard</li>\r\n</ul>\r\n<h2 id=\"使用\">使用</h2>\r\n<p>下面，我们将创建一个存储电影信息的 Document： * Index 的名称为 movie\r\n* Type 为 adventure * Document 有两个字段：name 和 actors</p>\r\n<p>我们使用 Elasticsearch 提供的 RESTful API\r\n来执行上述操作，如图所示：</p>\r\n<p><img src=\"https://s1.ax1x.com/2020/04/23/Jw9Ov6.png\" /></p>\r\n<ul>\r\n<li>用 url 表示一个资源，比如 /movie/adventure/1 就表示一个 index 为\r\nmovie，type 为 adventure，id 为 1 的 document</li>\r\n<li>用 http 方法操作资源，如使用 GET 获取资源，使用 POST、PUT\r\n新增或更新资源，使用 DELETE 删除资源等</li>\r\n</ul>\r\n<p>用<code>curl</code>命令实现上述操作： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i -X PUT &quot;localhost:9200/movie/adventure/1&quot; -H &#x27;Content-Type: application/json&#x27; -d &#x27;&#123;&quot;name&quot;: &quot;Life of Pi&quot;, &quot;actors&quot;: [&quot;Suraj&quot;, &quot;Irrfan&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure>\r\nES6之后需要加上head<code>Content-Type: application/json</code></p>\r\n<p>上述命令返回： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 201 Created</span><br><span class=\"line\">Location: /movie/adventure/1</span><br><span class=\"line\">content-type: application/json; charset=UTF-8</span><br><span class=\"line\">content-length: 158</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;_index&quot;:&quot;movie&quot;,&quot;_type&quot;:&quot;adventure&quot;,&quot;_id&quot;:&quot;4&quot;,&quot;_version&quot;:1,&quot;result&quot;:&quot;created&quot;,&quot;_shards&quot;:&#123;&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0&#125;,&quot;_seq_no&quot;:1,&quot;_primary_term&quot;:1&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"elasticsearch.yml配置说明\">elasticsearch.yml配置说明</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#集群的名称</span><br><span class=\"line\">cluster.name: es6.2</span><br><span class=\"line\">#节点名称,其余两个节点分别为node-2 和node-3</span><br><span class=\"line\">node.name: node-1</span><br><span class=\"line\">#指定该节点是否有资格被选举成为master节点，默认是true，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master</span><br><span class=\"line\">node.master: true</span><br><span class=\"line\">#允许该节点存储数据(默认开启)</span><br><span class=\"line\">node.data: true</span><br><span class=\"line\">#索引数据的存储路径</span><br><span class=\"line\">path.data: /usr/local/elk/elasticsearch/data</span><br><span class=\"line\">#日志文件的存储路径</span><br><span class=\"line\">path.logs: /usr/local/elk/elasticsearch/logs</span><br><span class=\"line\">#设置为true来锁住内存。因为内存交换到磁盘对服务器性能来说是致命的，当jvm开始swapping时es的效率会降低，所以要保证它不swap</span><br><span class=\"line\">bootstrap.memory_lock: true</span><br><span class=\"line\">#绑定的ip地址</span><br><span class=\"line\">network.host: 0.0.0.0</span><br><span class=\"line\">#设置对外服务的http端口，默认为9200</span><br><span class=\"line\">http.port: 9200</span><br><span class=\"line\"># 设置节点间交互的tcp端口,默认是9300 </span><br><span class=\"line\">transport.tcp.port: 9300</span><br><span class=\"line\">#Elasticsearch将绑定到可用的环回地址，并将扫描端口9300到9305以尝试连接到运行在同一台服务器上的其他节点。</span><br><span class=\"line\">#这提供了自动集群体验，而无需进行任何配置。数组设置或逗号分隔的设置。每个值的形式应该是host:port或host</span><br><span class=\"line\">#（如果没有设置，port默认设置会transport.profiles.default.port 回落到transport.tcp.port）。</span><br><span class=\"line\">#请注意，IPv6主机必须放在括号内。默认为127.0.0.1, [::1]</span><br><span class=\"line\">discovery.zen.ping.unicast.hosts: [&quot;192.168.8.101:9300&quot;, &quot;192.168.8.103:9300&quot;, &quot;192.168.8.104:9300&quot;]</span><br><span class=\"line\">#如果没有这种设置,遭受网络故障的集群就有可能将集群分成两个独立的集群 - 分裂的大脑 - 这将导致数据丢失</span><br><span class=\"line\">discovery.zen.minimum_master_nodes: 3</span><br></pre></td></tr></table></figure>\r\n<p>参考： * <a\r\nhref=\"https://blog.csdn.net/qq_34021712/article/details/79330028\">Elasticsearch6.2集群搭建</a>\r\n* <a\r\nhref=\"https://www.cnblogs.com/sunsky303/p/9438737.html\">Elasticsearch入门，这一篇就够了</a></p>\r\n","site":{"data":{}},"excerpt":"<p><img src=\"https://s1.ax1x.com/2020/04/23/Jd4MOf.png\" /></p>\r\n<h2 id=\"elasticsearch\">Elasticsearch</h2>\r\n<p><code>Elasticsearch</code>是一个基于Lucene的搜索服务器（Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库）。Elasticsearch使用Java编写并使用Lucene来建立索引并实现搜索功能，但是它的目的是通过简单连贯的<code>RESTful API</code>让全文搜索变得简单并隐藏Lucene的复杂性。</p>","more":"<h2 id=\"安装单节点elasticsearch\">安装单节点Elasticsearch</h2>\r\n<p><code>Elasticsearch</code>是用Java语言开发的，所以你需要安装Java环境，但为了方便起见，我这里选用了<code>Docker</code>安装ES（其实ES官网也有用Docker安装的<a\r\nhref=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.5/docker.html#docker\">例子</a>，这里我就把它写成了docker-compose服务）。<br />\r\ndocker-compose.yml <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;2.2&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  es:</span><br><span class=\"line\">    image: elasticsearch:6.7.0</span><br><span class=\"line\">    container_name: es0</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - node.name=es0</span><br><span class=\"line\">      - &quot;discovery.type=single-node&quot;</span><br><span class=\"line\">      - node.data=true</span><br><span class=\"line\">      - bootstrap.memory_lock=true</span><br><span class=\"line\">      - network.host=0.0.0.0</span><br><span class=\"line\">      - &quot;ES_JAVA_OPTS=-Xms1g -Xmx1g&quot;</span><br><span class=\"line\">    ulimits:</span><br><span class=\"line\">      memlock:</span><br><span class=\"line\">        soft: -1</span><br><span class=\"line\">        hard: -1</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data:/usr/share/elasticsearch/data</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9200:9200</span><br><span class=\"line\">      - 9300:9300</span><br></pre></td></tr></table></figure> Elasticsearch 启动后，启动了两个端口\r\n9200 和 9300： * 9200 端口：HTTP RESTful 接口的通讯端口 * 9300 端口：TCP\r\n通讯端口，用于集群间节点通信和与 Java 客户端通信的端口</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- bootstrap.memory_lock=true</span><br><span class=\"line\">...</span><br><span class=\"line\">ulimits:</span><br><span class=\"line\">  memlock:</span><br><span class=\"line\">    soft: -1</span><br><span class=\"line\">    hard: -1</span><br></pre></td></tr></table></figure>\r\n<p>这两部分是为了禁止使用swap内存，因为当jvm开始swapping时ES的效率会降低。</p>\r\n<p><code>-Xms1g -Xmx1g</code>是设置了JVM的初始堆大小和最大堆大小（具体参数含义可以参考<a\r\nhref=\"https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html\">这里</a>）。</p>\r\n<p>启动之前还是需要调高JVM线程数限制数量，不然启动会报错\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\"># 添加这个</span><br><span class=\"line\">vm.max_map_count=262144 </span><br><span class=\"line\"># 保存后执行这个命令</span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"概念\">概念</h2>\r\n<p>在进一步使用 Elasticsearch 之前，让我们先了解几个关键概念。</p>\r\n<p>在逻辑层面：<br />\r\n* Index (索引)和Type (类型)：这里的 Index\r\n是名词，在之前开始的时候，我们把<strong>索引（index）和类型（type）</strong>类比于SQL数据库中的\r\ndatabase 和\r\ntable，但是这样类比是不合适的。刚开始的ES版本一个索引可以有多个类型，在ES6之后每个索引只能有一个类型，所以他们现在都可以当做一张数据表了。\r\n* Document (文档)：Elasticsearch 使用 JSON\r\n文档来表示一个对象，就像是关系数据库中一个 Table 中的一行数据 * Field\r\n(字段)：每个文档包含多个字段，类似关系数据库中一个 Table 的列</p>\r\n<blockquote>\r\n<blockquote>\r\n<blockquote>\r\n<p>为什么要移除映射类型\r\n开始的时候，我们把<strong>索引（index）和类型（type）</strong>类比于SQL数据库中的\r\ndatabase 和\r\ntable，但是这样类比是不合适的。在SQL数据库中，表之间是相互独立的。一个表中的各列并不会影响到其它表中的同名的列。而在映射类型（mapping\r\ntype）中却不是这样的。 在同一个 Elasticsearch\r\n索引中，其中不同映射类型中的同名字段在内部是由同一个 Lucene\r\n字段来支持的。换句话说，使用上面的例子，user 类型中的 user_name 字段与\r\ntweet 类型中的 user_name 字段是完全一样的，并且两个 user_name\r\n字段在两个类型中必须具有相同的映射（定义）。\r\n这会在某些情况下导致一些混乱，比如，在同一个索引中，当你想在其中的一个类型中将\r\ndeleted 字段作为 date 类型，而在另一个类型中将其作为 boolean 字段。\r\n在此之上需要考虑一点，如果同一个索引中存储的各个实体如果只有很少或者根本没有同样的字段，这种情况会导致稀疏数据，并且会影响到Lucene的高效压缩数据的能力</p>\r\n</blockquote>\r\n</blockquote>\r\n</blockquote>\r\n<p>在物理层面：</p>\r\n<ul>\r\n<li>Node (节点)：node 是一个运行着的 Elasticsearch 实例，一个 node\r\n就是一个单独的 server</li>\r\n<li>Cluster (集群)：cluster 是多个 node 的集合</li>\r\n<li>Shard (分片)：数据分片，一个 index 可能会存在于多个 shard</li>\r\n</ul>\r\n<h2 id=\"使用\">使用</h2>\r\n<p>下面，我们将创建一个存储电影信息的 Document： * Index 的名称为 movie\r\n* Type 为 adventure * Document 有两个字段：name 和 actors</p>\r\n<p>我们使用 Elasticsearch 提供的 RESTful API\r\n来执行上述操作，如图所示：</p>\r\n<p><img src=\"https://s1.ax1x.com/2020/04/23/Jw9Ov6.png\" /></p>\r\n<ul>\r\n<li>用 url 表示一个资源，比如 /movie/adventure/1 就表示一个 index 为\r\nmovie，type 为 adventure，id 为 1 的 document</li>\r\n<li>用 http 方法操作资源，如使用 GET 获取资源，使用 POST、PUT\r\n新增或更新资源，使用 DELETE 删除资源等</li>\r\n</ul>\r\n<p>用<code>curl</code>命令实现上述操作： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -i -X PUT &quot;localhost:9200/movie/adventure/1&quot; -H &#x27;Content-Type: application/json&#x27; -d &#x27;&#123;&quot;name&quot;: &quot;Life of Pi&quot;, &quot;actors&quot;: [&quot;Suraj&quot;, &quot;Irrfan&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure>\r\nES6之后需要加上head<code>Content-Type: application/json</code></p>\r\n<p>上述命令返回： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 201 Created</span><br><span class=\"line\">Location: /movie/adventure/1</span><br><span class=\"line\">content-type: application/json; charset=UTF-8</span><br><span class=\"line\">content-length: 158</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;_index&quot;:&quot;movie&quot;,&quot;_type&quot;:&quot;adventure&quot;,&quot;_id&quot;:&quot;4&quot;,&quot;_version&quot;:1,&quot;result&quot;:&quot;created&quot;,&quot;_shards&quot;:&#123;&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0&#125;,&quot;_seq_no&quot;:1,&quot;_primary_term&quot;:1&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"elasticsearch.yml配置说明\">elasticsearch.yml配置说明</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#集群的名称</span><br><span class=\"line\">cluster.name: es6.2</span><br><span class=\"line\">#节点名称,其余两个节点分别为node-2 和node-3</span><br><span class=\"line\">node.name: node-1</span><br><span class=\"line\">#指定该节点是否有资格被选举成为master节点，默认是true，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master</span><br><span class=\"line\">node.master: true</span><br><span class=\"line\">#允许该节点存储数据(默认开启)</span><br><span class=\"line\">node.data: true</span><br><span class=\"line\">#索引数据的存储路径</span><br><span class=\"line\">path.data: /usr/local/elk/elasticsearch/data</span><br><span class=\"line\">#日志文件的存储路径</span><br><span class=\"line\">path.logs: /usr/local/elk/elasticsearch/logs</span><br><span class=\"line\">#设置为true来锁住内存。因为内存交换到磁盘对服务器性能来说是致命的，当jvm开始swapping时es的效率会降低，所以要保证它不swap</span><br><span class=\"line\">bootstrap.memory_lock: true</span><br><span class=\"line\">#绑定的ip地址</span><br><span class=\"line\">network.host: 0.0.0.0</span><br><span class=\"line\">#设置对外服务的http端口，默认为9200</span><br><span class=\"line\">http.port: 9200</span><br><span class=\"line\"># 设置节点间交互的tcp端口,默认是9300 </span><br><span class=\"line\">transport.tcp.port: 9300</span><br><span class=\"line\">#Elasticsearch将绑定到可用的环回地址，并将扫描端口9300到9305以尝试连接到运行在同一台服务器上的其他节点。</span><br><span class=\"line\">#这提供了自动集群体验，而无需进行任何配置。数组设置或逗号分隔的设置。每个值的形式应该是host:port或host</span><br><span class=\"line\">#（如果没有设置，port默认设置会transport.profiles.default.port 回落到transport.tcp.port）。</span><br><span class=\"line\">#请注意，IPv6主机必须放在括号内。默认为127.0.0.1, [::1]</span><br><span class=\"line\">discovery.zen.ping.unicast.hosts: [&quot;192.168.8.101:9300&quot;, &quot;192.168.8.103:9300&quot;, &quot;192.168.8.104:9300&quot;]</span><br><span class=\"line\">#如果没有这种设置,遭受网络故障的集群就有可能将集群分成两个独立的集群 - 分裂的大脑 - 这将导致数据丢失</span><br><span class=\"line\">discovery.zen.minimum_master_nodes: 3</span><br></pre></td></tr></table></figure>\r\n<p>参考： * <a\r\nhref=\"https://blog.csdn.net/qq_34021712/article/details/79330028\">Elasticsearch6.2集群搭建</a>\r\n* <a\r\nhref=\"https://www.cnblogs.com/sunsky303/p/9438737.html\">Elasticsearch入门，这一篇就够了</a></p>"},{"title":"ES6中的class","author":"Salamander","date":"2020-08-29T04:00:00.000Z","_content":"![](https://s1.ax1x.com/2020/08/30/dbt2p6.png)\n\n## ES6\nECMAScript 2015或ES2015是对JavaScript编程语言的重大更新。这是自2009年对ES5进行标准化以来对语言的首次重大更新，ES6加入很多有用的特性。因此，ES2015通常被称为ES6。\n\n本文环境：\n* NodeJs版本：v12.13.0\n* OS：Ubuntu 18.04.4 LTS\n\n<!-- more -->\n\n\n## class语法糖\n\n\n首先我们先来看一下关于 ES6 中的类\n```JavaScript\nclass Persion {\n    say() {\n        console.log('hello~')\n    }\n}\n```\n上面这段代码是 ES6 中定义一个类的写法，其实只是一个语法糖，而实际上当我们给一个类添加一个属性的时候，会调用到 `Object.defineProperty` 这个方法，它会接受三个参数：target 、name 和 descriptor ，所以上面的代码实际上在执行时是这样的：\n```JavaScript\nfunction Persion() {}\n\nObject.defineProperty(Persion.prototype, \"say\", {\n    value: function() { console.log(\"hello ~\"); },\n    enumerable: false,\n    configurable: true,\n    writable: true\n});\n```\n\n## ES6中extends\nES6中可以很方便地用`extends`的实现继承：\n```JavaScript\nclass Shape {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    move(x, y) {\n        this.x += x;\n        this.y += y;\n        console.info('Shape moved.');\n    }\n}\n\nclass Rectangle extends Shape {\n    constructor() {\n        super();  // ES6 要求，子类的构造函数必须执行一次 super 函数，否则会报错。\n    }\n}\n```\n要用ES5实现继承，就是用利用**原型链**。\n```JavaScript\n// Shape - 父类(superclass)\nfunction Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\n// 父类的方法\nShape.prototype.move = function(x, y) {\n  this.x += x;\n  this.y += y;\n  console.info('Shape moved.');\n};\n\n// Rectangle - 子类(subclass)\nfunction Rectangle() {\n  Shape.call(this); // call super constructor.\n}\n\n// 子类续承父类\nRectangle.prototype = Object.create(Shape.prototype);\nRectangle.prototype.constructor = Rectangle;\n\nvar rect = new Rectangle();\n\nconsole.log('Is rect an instance of Rectangle?',\n  rect instanceof Rectangle); // true\nconsole.log('Is rect an instance of Shape?',\n  rect instanceof Shape); // true\nrect.move(1, 1); // Outputs, 'Shape moved.'\n```\n\n\n\n\n\n\n\n\n\n参考：\n* [MDN Object create](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)","source":"_posts/ES6_class.md","raw":"title: ES6中的class\nauthor: Salamander\ntags:\n  - JavaScript\n  - class\ncategories:\n  - JavaScript\ndate: 2020-08-29 12:00:00\n---\n![](https://s1.ax1x.com/2020/08/30/dbt2p6.png)\n\n## ES6\nECMAScript 2015或ES2015是对JavaScript编程语言的重大更新。这是自2009年对ES5进行标准化以来对语言的首次重大更新，ES6加入很多有用的特性。因此，ES2015通常被称为ES6。\n\n本文环境：\n* NodeJs版本：v12.13.0\n* OS：Ubuntu 18.04.4 LTS\n\n<!-- more -->\n\n\n## class语法糖\n\n\n首先我们先来看一下关于 ES6 中的类\n```JavaScript\nclass Persion {\n    say() {\n        console.log('hello~')\n    }\n}\n```\n上面这段代码是 ES6 中定义一个类的写法，其实只是一个语法糖，而实际上当我们给一个类添加一个属性的时候，会调用到 `Object.defineProperty` 这个方法，它会接受三个参数：target 、name 和 descriptor ，所以上面的代码实际上在执行时是这样的：\n```JavaScript\nfunction Persion() {}\n\nObject.defineProperty(Persion.prototype, \"say\", {\n    value: function() { console.log(\"hello ~\"); },\n    enumerable: false,\n    configurable: true,\n    writable: true\n});\n```\n\n## ES6中extends\nES6中可以很方便地用`extends`的实现继承：\n```JavaScript\nclass Shape {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    move(x, y) {\n        this.x += x;\n        this.y += y;\n        console.info('Shape moved.');\n    }\n}\n\nclass Rectangle extends Shape {\n    constructor() {\n        super();  // ES6 要求，子类的构造函数必须执行一次 super 函数，否则会报错。\n    }\n}\n```\n要用ES5实现继承，就是用利用**原型链**。\n```JavaScript\n// Shape - 父类(superclass)\nfunction Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\n// 父类的方法\nShape.prototype.move = function(x, y) {\n  this.x += x;\n  this.y += y;\n  console.info('Shape moved.');\n};\n\n// Rectangle - 子类(subclass)\nfunction Rectangle() {\n  Shape.call(this); // call super constructor.\n}\n\n// 子类续承父类\nRectangle.prototype = Object.create(Shape.prototype);\nRectangle.prototype.constructor = Rectangle;\n\nvar rect = new Rectangle();\n\nconsole.log('Is rect an instance of Rectangle?',\n  rect instanceof Rectangle); // true\nconsole.log('Is rect an instance of Shape?',\n  rect instanceof Shape); // true\nrect.move(1, 1); // Outputs, 'Shape moved.'\n```\n\n\n\n\n\n\n\n\n\n参考：\n* [MDN Object create](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)","slug":"ES6_class","published":1,"updated":"2023-03-21T02:48:19.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40kx000h2o3mf7u1b9gc","content":"<p><img src=\"https://s1.ax1x.com/2020/08/30/dbt2p6.png\" /></p>\r\n<h2 id=\"es6\">ES6</h2>\r\n<p>ECMAScript\r\n2015或ES2015是对JavaScript编程语言的重大更新。这是自2009年对ES5进行标准化以来对语言的首次重大更新，ES6加入很多有用的特性。因此，ES2015通常被称为ES6。</p>\r\n<p>本文环境： * NodeJs版本：v12.13.0 * OS：Ubuntu 18.04.4 LTS</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"class语法糖\">class语法糖</h2>\r\n<p>首先我们先来看一下关于 ES6 中的类 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Persion</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">say</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello~&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 上面这段代码是 ES6\r\n中定义一个类的写法，其实只是一个语法糖，而实际上当我们给一个类添加一个属性的时候，会调用到\r\n<code>Object.defineProperty</code> 这个方法，它会接受三个参数：target\r\n、name 和 descriptor ，所以上面的代码实际上在执行时是这样的：\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Persion</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Persion</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&quot;say&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello ~&quot;</span>); &#125;,</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"es6中extends\">ES6中extends</h2>\r\n<p>ES6中可以很方便地用<code>extends</code>的实现继承： <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">move</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> += x;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> += y;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;Shape moved.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>();  <span class=\"comment\">// ES6 要求，子类的构造函数必须执行一次 super 函数，否则会报错。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n要用ES5实现继承，就是用利用<strong>原型链</strong>。 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Shape - 父类(superclass)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Shape</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父类的方法</span></span><br><span class=\"line\"><span class=\"title class_\">Shape</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">move</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> += x;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> += y;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;Shape moved.&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Rectangle - 子类(subclass)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Rectangle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Shape</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// call super constructor.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类续承父类</span></span><br><span class=\"line\"><span class=\"title class_\">Rectangle</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Shape</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"><span class=\"title class_\">Rectangle</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Rectangle</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Is rect an instance of Rectangle?&#x27;</span>,</span><br><span class=\"line\">  rect <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Rectangle</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Is rect an instance of Shape?&#x27;</span>,</span><br><span class=\"line\">  rect <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Shape</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">rect.<span class=\"title function_\">move</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// Outputs, &#x27;Shape moved.&#x27;</span></span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">MDN\r\nObject create</a></p>\r\n","site":{"data":{}},"excerpt":"<p><img src=\"https://s1.ax1x.com/2020/08/30/dbt2p6.png\" /></p>\r\n<h2 id=\"es6\">ES6</h2>\r\n<p>ECMAScript\r\n2015或ES2015是对JavaScript编程语言的重大更新。这是自2009年对ES5进行标准化以来对语言的首次重大更新，ES6加入很多有用的特性。因此，ES2015通常被称为ES6。</p>\r\n<p>本文环境： * NodeJs版本：v12.13.0 * OS：Ubuntu 18.04.4 LTS</p>","more":"<h2 id=\"class语法糖\">class语法糖</h2>\r\n<p>首先我们先来看一下关于 ES6 中的类 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Persion</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">say</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello~&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 上面这段代码是 ES6\r\n中定义一个类的写法，其实只是一个语法糖，而实际上当我们给一个类添加一个属性的时候，会调用到\r\n<code>Object.defineProperty</code> 这个方法，它会接受三个参数：target\r\n、name 和 descriptor ，所以上面的代码实际上在执行时是这样的：\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Persion</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Persion</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&quot;say&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello ~&quot;</span>); &#125;,</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"es6中extends\">ES6中extends</h2>\r\n<p>ES6中可以很方便地用<code>extends</code>的实现继承： <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">move</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> += x;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> += y;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;Shape moved.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>();  <span class=\"comment\">// ES6 要求，子类的构造函数必须执行一次 super 函数，否则会报错。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n要用ES5实现继承，就是用利用<strong>原型链</strong>。 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Shape - 父类(superclass)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Shape</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父类的方法</span></span><br><span class=\"line\"><span class=\"title class_\">Shape</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">move</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> += x;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> += y;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;Shape moved.&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Rectangle - 子类(subclass)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Rectangle</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Shape</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// call super constructor.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类续承父类</span></span><br><span class=\"line\"><span class=\"title class_\">Rectangle</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Shape</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"><span class=\"title class_\">Rectangle</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Rectangle</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Is rect an instance of Rectangle?&#x27;</span>,</span><br><span class=\"line\">  rect <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Rectangle</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Is rect an instance of Shape?&#x27;</span>,</span><br><span class=\"line\">  rect <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Shape</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">rect.<span class=\"title function_\">move</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">// Outputs, &#x27;Shape moved.&#x27;</span></span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">MDN\r\nObject create</a></p>"},{"title":"Java经典回顾之Java Web","author":"Salamander","date":"2020-04-09T13:00:00.000Z","_content":"<img src=\"/images/java-web-develop.jpg\" width=\"800px\" >\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS\n* Java版本：1.8.0_221\n\n\n## Java Web\n虽然我们现在会用`SpringBoot`快速创建一个Web Demo，但是基础不能忘（`SpringBoot`或者`SpringMVC`都是封装后的产物），下面就让我们回顾一下一个最基本的Java Web项目。\n\n<!-- more -->\n\n## 创建项目\n这里我们使用**IDEA**来创建项目，点击菜单`File`=>`New`=>`Project`，选择`Java Enterprise`，在**Additional Libraries and Framework**中，选择`Web Application`（我这里是4.0，旧版本的`IDEA`可能其他的），`Application Server`就是Java Web项目编译打包后运行所需要的Web服务器（你需要自己配置一下）。\n\n![upload successful](/images/idea_java_web.png)\n\n点击`Next`后，填写项目名称就好了，这里我创建了一个`simplejavaweb`的项目。  \n我们来看一下**项目结构**  \n\n![upload successful](/images/pasted-4.png)   \n* **src**就是我们写Java代码的地方\n* **web**目录是web应用部署根目录\n* web中的**WEB_INF**是Java的web应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。  \n* WEB_INF中的**web.xml**是Java web 项目最主要的构成部分之一，它是Web应用程序配置文件，描述了 `servlet` 和其他的应用组件配置及命名规则。","source":"_posts/Java_lookback_Java-Web.md","raw":"title: Java经典回顾之Java Web\nauthor: Salamander\ntags:\n  - Java\n  - Java Web\ncategories:\n  - Java\ndate: 2020-04-09 21:00:00\n---\n<img src=\"/images/java-web-develop.jpg\" width=\"800px\" >\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS\n* Java版本：1.8.0_221\n\n\n## Java Web\n虽然我们现在会用`SpringBoot`快速创建一个Web Demo，但是基础不能忘（`SpringBoot`或者`SpringMVC`都是封装后的产物），下面就让我们回顾一下一个最基本的Java Web项目。\n\n<!-- more -->\n\n## 创建项目\n这里我们使用**IDEA**来创建项目，点击菜单`File`=>`New`=>`Project`，选择`Java Enterprise`，在**Additional Libraries and Framework**中，选择`Web Application`（我这里是4.0，旧版本的`IDEA`可能其他的），`Application Server`就是Java Web项目编译打包后运行所需要的Web服务器（你需要自己配置一下）。\n\n![upload successful](/images/idea_java_web.png)\n\n点击`Next`后，填写项目名称就好了，这里我创建了一个`simplejavaweb`的项目。  \n我们来看一下**项目结构**  \n\n![upload successful](/images/pasted-4.png)   \n* **src**就是我们写Java代码的地方\n* **web**目录是web应用部署根目录\n* web中的**WEB_INF**是Java的web应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。  \n* WEB_INF中的**web.xml**是Java web 项目最主要的构成部分之一，它是Web应用程序配置文件，描述了 `servlet` 和其他的应用组件配置及命名规则。","slug":"Java_lookback_Java-Web","published":1,"updated":"2023-03-21T02:48:19.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40kx000k2o3meuckb6mj","content":"<p><img src=\"/images/java-web-develop.jpg\" width=\"800px\" ></p>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS * Java版本：1.8.0_221</p>\r\n<h2 id=\"java-web\">Java Web</h2>\r\n<p>虽然我们现在会用<code>SpringBoot</code>快速创建一个Web\r\nDemo，但是基础不能忘（<code>SpringBoot</code>或者<code>SpringMVC</code>都是封装后的产物），下面就让我们回顾一下一个最基本的Java\r\nWeb项目。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"创建项目\">创建项目</h2>\r\n<p>这里我们使用<strong>IDEA</strong>来创建项目，点击菜单<code>File</code>=&gt;<code>New</code>=&gt;<code>Project</code>，选择<code>Java Enterprise</code>，在<strong>Additional\r\nLibraries and\r\nFramework</strong>中，选择<code>Web Application</code>（我这里是4.0，旧版本的<code>IDEA</code>可能其他的），<code>Application Server</code>就是Java\r\nWeb项目编译打包后运行所需要的Web服务器（你需要自己配置一下）。</p>\r\n<figure>\r\n<img src=\"/images/idea_java_web.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>点击<code>Next</code>后，填写项目名称就好了，这里我创建了一个<code>simplejavaweb</code>的项目。<br />\r\n我们来看一下<strong>项目结构</strong></p>\r\n<p><img src=\"/images/pasted-4.png\" alt=\"upload successful\" /><br />\r\n* <strong>src</strong>就是我们写Java代码的地方 *\r\n<strong>web</strong>目录是web应用部署根目录 *\r\nweb中的<strong>WEB_INF</strong>是Java的web应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。<br />\r\n* WEB_INF中的<strong>web.xml</strong>是Java web\r\n项目最主要的构成部分之一，它是Web应用程序配置文件，描述了\r\n<code>servlet</code> 和其他的应用组件配置及命名规则。</p>\r\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/java-web-develop.jpg\" width=\"800px\" ></p>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS * Java版本：1.8.0_221</p>\r\n<h2 id=\"java-web\">Java Web</h2>\r\n<p>虽然我们现在会用<code>SpringBoot</code>快速创建一个Web\r\nDemo，但是基础不能忘（<code>SpringBoot</code>或者<code>SpringMVC</code>都是封装后的产物），下面就让我们回顾一下一个最基本的Java\r\nWeb项目。</p>","more":"<h2 id=\"创建项目\">创建项目</h2>\r\n<p>这里我们使用<strong>IDEA</strong>来创建项目，点击菜单<code>File</code>=&gt;<code>New</code>=&gt;<code>Project</code>，选择<code>Java Enterprise</code>，在<strong>Additional\r\nLibraries and\r\nFramework</strong>中，选择<code>Web Application</code>（我这里是4.0，旧版本的<code>IDEA</code>可能其他的），<code>Application Server</code>就是Java\r\nWeb项目编译打包后运行所需要的Web服务器（你需要自己配置一下）。</p>\r\n<figure>\r\n<img src=\"/images/idea_java_web.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>点击<code>Next</code>后，填写项目名称就好了，这里我创建了一个<code>simplejavaweb</code>的项目。<br />\r\n我们来看一下<strong>项目结构</strong></p>\r\n<p><img src=\"/images/pasted-4.png\" alt=\"upload successful\" /><br />\r\n* <strong>src</strong>就是我们写Java代码的地方 *\r\n<strong>web</strong>目录是web应用部署根目录 *\r\nweb中的<strong>WEB_INF</strong>是Java的web应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。<br />\r\n* WEB_INF中的<strong>web.xml</strong>是Java web\r\n项目最主要的构成部分之一，它是Web应用程序配置文件，描述了\r\n<code>servlet</code> 和其他的应用组件配置及命名规则。</p>"},{"title":"Java之GC","author":"Salamander","date":"2020-04-01T01:00:00.000Z","_content":"\n![upload successful](/images/gc-java.png)  \n\n## GC\nGC就是垃圾回收（`Garbage Collection`），如果你写过C++或者C程序的，你就会知道`new`一个数据后，就需要`delete`它的内存，这就是手动管理内存，但这样如果你粗心点的话，就容易造成内存泄露，所以就有了自动垃圾回收，也就我们这里所讨论的GC。Java的GC会对JVM（Java Virtual Machine）中的内存进行标记，并确定哪些内存需要回收，根据一定的回收策略，自动的回收内存，永不停息（Nerver Stop）的保证JVM中的内存空间，防止出现内存泄露和溢出问题。  \n其实GC很早就有了，1960年诞生于MIT的**Lisp**是第一门真正使用内存动态分配和垃圾收集技术的语言。\n\n<!-- more -->\n\n\n## 内存布局\n\n![upload successful](/images/java-memory-layout.png)  \n\nJVM 在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域。有的区域依赖线程的启动和结束而建立和销毁，这样的区域可看作是线程私有的区域（Per-Thread Data Area）；其他的区域则随着虚拟机进程的启动而存在，可以看做是线程间共享的区域。  \n\n具体而言，JVM 的运行时数据区域包括如下：  \n\n* **程序计数器**（Program Counter Register）：线程私有的数据区域，保存当前正在执行的虚拟机指令的地址；\n* **Java 虚拟机栈**（Java Virtual Machine Stack）：线程私有的数据区域，每个栈帧中存放当前执行方法的本地变量及返回地址；\n* **Java 堆（Heap）**：线程共享的数据区域，对象及数组的分配空间；\n* **方法区**（Method Area）：线程共享的数据区域，存放由类加载器加载的类型信息、常量及静态变量；\n* **本地方法栈（Native Method Stack）**：用于 Native 方法的方法栈  \n\n**运行时常量池**（Runtime Constant Pool）是方法区的一部分，用于存储编译器生成的常量和引用。一般来说，常量的分配在编译时就能确定，但也不全是，也可以存储在运行时期产生的常量。比如String类的intern（）方法，作用是String类维护了一个常量池，如果调用的字符\"hello\"已经在常量池中，则直接返回常量池中的地址，否则新建一个常量加入池中，并返回地址。\n\n\n\n\n\n## GC大致过程\n\n![upload successful](/images/pasted-3.png) \n\n\n在JVM的堆内存中，被分为了年轻代（Young Generation）和老年代（Old Generation、持久代（Permanent Generation）。其中年轻代又被分为Eden区和survivor区，而survivor区又被分为大小相等的2个区，分别称为S1区和S2区。持久代在**Sun Hotpot虚拟机**中就是指方法区（有些JVM根本就没有持久代这一说法）\n\n当程序需要在堆上分配内存时，会首先在eden区进行分配。\n\n当eden区内存已满无法再分配对象时，会触发第一次minor gc，将eden区存活的对象拷贝到其中一个survivor区，比如S1，并把eden区的内存清空，以备使用。\n\n当eden区的内存再次被使用完时，会触发第二次minor gc，将eden区和S1区中存活的对象拷贝到S2区，并将eden区和S1区的内存清空以备使用。在有的书中会提到from区和to区，其实from区和to区是相对而言的，当把S1区的内容拷贝到S2区时，S1为from区，S2为to区。而将S2区的内容拷贝到S1时，S2为from区，S1为to区。\n\n当eden区的内存再次被用完时，会触发第三次minor gc，将eden区和S2区存活的对象拷贝到S1区，并清空eden区和S2区的内存，以备使用。\n\n上述过程循环往复。\n\n当某个对象经历了一次minor gc并且存活下来，没有被清理掉，则说这个对象长大了一岁。当某个对象的年龄大于一定阈值，通常是15岁时，该对象在下次minor gc时会被放到老年代中。\n\n当老年代中的内存不够用时，会触发full gc。","source":"_posts/Java_GC.md","raw":"title: Java之GC\nauthor: Salamander\ntags:\n  - GC\n  - Java\ncategories:\n  - Java\ndate: 2020-04-01 09:00:00\n---\n\n![upload successful](/images/gc-java.png)  \n\n## GC\nGC就是垃圾回收（`Garbage Collection`），如果你写过C++或者C程序的，你就会知道`new`一个数据后，就需要`delete`它的内存，这就是手动管理内存，但这样如果你粗心点的话，就容易造成内存泄露，所以就有了自动垃圾回收，也就我们这里所讨论的GC。Java的GC会对JVM（Java Virtual Machine）中的内存进行标记，并确定哪些内存需要回收，根据一定的回收策略，自动的回收内存，永不停息（Nerver Stop）的保证JVM中的内存空间，防止出现内存泄露和溢出问题。  \n其实GC很早就有了，1960年诞生于MIT的**Lisp**是第一门真正使用内存动态分配和垃圾收集技术的语言。\n\n<!-- more -->\n\n\n## 内存布局\n\n![upload successful](/images/java-memory-layout.png)  \n\nJVM 在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域。有的区域依赖线程的启动和结束而建立和销毁，这样的区域可看作是线程私有的区域（Per-Thread Data Area）；其他的区域则随着虚拟机进程的启动而存在，可以看做是线程间共享的区域。  \n\n具体而言，JVM 的运行时数据区域包括如下：  \n\n* **程序计数器**（Program Counter Register）：线程私有的数据区域，保存当前正在执行的虚拟机指令的地址；\n* **Java 虚拟机栈**（Java Virtual Machine Stack）：线程私有的数据区域，每个栈帧中存放当前执行方法的本地变量及返回地址；\n* **Java 堆（Heap）**：线程共享的数据区域，对象及数组的分配空间；\n* **方法区**（Method Area）：线程共享的数据区域，存放由类加载器加载的类型信息、常量及静态变量；\n* **本地方法栈（Native Method Stack）**：用于 Native 方法的方法栈  \n\n**运行时常量池**（Runtime Constant Pool）是方法区的一部分，用于存储编译器生成的常量和引用。一般来说，常量的分配在编译时就能确定，但也不全是，也可以存储在运行时期产生的常量。比如String类的intern（）方法，作用是String类维护了一个常量池，如果调用的字符\"hello\"已经在常量池中，则直接返回常量池中的地址，否则新建一个常量加入池中，并返回地址。\n\n\n\n\n\n## GC大致过程\n\n![upload successful](/images/pasted-3.png) \n\n\n在JVM的堆内存中，被分为了年轻代（Young Generation）和老年代（Old Generation、持久代（Permanent Generation）。其中年轻代又被分为Eden区和survivor区，而survivor区又被分为大小相等的2个区，分别称为S1区和S2区。持久代在**Sun Hotpot虚拟机**中就是指方法区（有些JVM根本就没有持久代这一说法）\n\n当程序需要在堆上分配内存时，会首先在eden区进行分配。\n\n当eden区内存已满无法再分配对象时，会触发第一次minor gc，将eden区存活的对象拷贝到其中一个survivor区，比如S1，并把eden区的内存清空，以备使用。\n\n当eden区的内存再次被使用完时，会触发第二次minor gc，将eden区和S1区中存活的对象拷贝到S2区，并将eden区和S1区的内存清空以备使用。在有的书中会提到from区和to区，其实from区和to区是相对而言的，当把S1区的内容拷贝到S2区时，S1为from区，S2为to区。而将S2区的内容拷贝到S1时，S2为from区，S1为to区。\n\n当eden区的内存再次被用完时，会触发第三次minor gc，将eden区和S2区存活的对象拷贝到S1区，并清空eden区和S2区的内存，以备使用。\n\n上述过程循环往复。\n\n当某个对象经历了一次minor gc并且存活下来，没有被清理掉，则说这个对象长大了一岁。当某个对象的年龄大于一定阈值，通常是15岁时，该对象在下次minor gc时会被放到老年代中。\n\n当老年代中的内存不够用时，会触发full gc。","slug":"Java_GC","published":1,"updated":"2023-03-21T02:48:19.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40ky000p2o3m30vjejns","content":"<figure>\r\n<img src=\"/images/gc-java.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<h2 id=\"gc\">GC</h2>\r\n<p>GC就是垃圾回收（<code>Garbage Collection</code>），如果你写过C++或者C程序的，你就会知道<code>new</code>一个数据后，就需要<code>delete</code>它的内存，这就是手动管理内存，但这样如果你粗心点的话，就容易造成内存泄露，所以就有了自动垃圾回收，也就我们这里所讨论的GC。Java的GC会对JVM（Java\r\nVirtual\r\nMachine）中的内存进行标记，并确定哪些内存需要回收，根据一定的回收策略，自动的回收内存，永不停息（Nerver\r\nStop）的保证JVM中的内存空间，防止出现内存泄露和溢出问题。<br />\r\n其实GC很早就有了，1960年诞生于MIT的<strong>Lisp</strong>是第一门真正使用内存动态分配和垃圾收集技术的语言。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"内存布局\">内存布局</h2>\r\n<figure>\r\n<img src=\"/images/java-memory-layout.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>JVM 在执行 Java\r\n程序的过程中会把它所管理的内存划分为若干个不同的数据区域。有的区域依赖线程的启动和结束而建立和销毁，这样的区域可看作是线程私有的区域（Per-Thread\r\nData\r\nArea）；其他的区域则随着虚拟机进程的启动而存在，可以看做是线程间共享的区域。</p>\r\n<p>具体而言，JVM 的运行时数据区域包括如下：</p>\r\n<ul>\r\n<li><strong>程序计数器</strong>（Program Counter\r\nRegister）：线程私有的数据区域，保存当前正在执行的虚拟机指令的地址；</li>\r\n<li><strong>Java 虚拟机栈</strong>（Java Virtual Machine\r\nStack）：线程私有的数据区域，每个栈帧中存放当前执行方法的本地变量及返回地址；</li>\r\n<li><strong>Java\r\n堆（Heap）</strong>：线程共享的数据区域，对象及数组的分配空间；</li>\r\n<li><strong>方法区</strong>（Method\r\nArea）：线程共享的数据区域，存放由类加载器加载的类型信息、常量及静态变量；</li>\r\n<li><strong>本地方法栈（Native Method Stack）</strong>：用于 Native\r\n方法的方法栈</li>\r\n</ul>\r\n<p><strong>运行时常量池</strong>（Runtime Constant\r\nPool）是方法区的一部分，用于存储编译器生成的常量和引用。一般来说，常量的分配在编译时就能确定，但也不全是，也可以存储在运行时期产生的常量。比如String类的intern（）方法，作用是String类维护了一个常量池，如果调用的字符\"hello\"已经在常量池中，则直接返回常量池中的地址，否则新建一个常量加入池中，并返回地址。</p>\r\n<h2 id=\"gc大致过程\">GC大致过程</h2>\r\n<figure>\r\n<img src=\"/images/pasted-3.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>在JVM的堆内存中，被分为了年轻代（Young Generation）和老年代（Old\r\nGeneration、持久代（Permanent\r\nGeneration）。其中年轻代又被分为Eden区和survivor区，而survivor区又被分为大小相等的2个区，分别称为S1区和S2区。持久代在<strong>Sun\r\nHotpot虚拟机</strong>中就是指方法区（有些JVM根本就没有持久代这一说法）</p>\r\n<p>当程序需要在堆上分配内存时，会首先在eden区进行分配。</p>\r\n<p>当eden区内存已满无法再分配对象时，会触发第一次minor\r\ngc，将eden区存活的对象拷贝到其中一个survivor区，比如S1，并把eden区的内存清空，以备使用。</p>\r\n<p>当eden区的内存再次被使用完时，会触发第二次minor\r\ngc，将eden区和S1区中存活的对象拷贝到S2区，并将eden区和S1区的内存清空以备使用。在有的书中会提到from区和to区，其实from区和to区是相对而言的，当把S1区的内容拷贝到S2区时，S1为from区，S2为to区。而将S2区的内容拷贝到S1时，S2为from区，S1为to区。</p>\r\n<p>当eden区的内存再次被用完时，会触发第三次minor\r\ngc，将eden区和S2区存活的对象拷贝到S1区，并清空eden区和S2区的内存，以备使用。</p>\r\n<p>上述过程循环往复。</p>\r\n<p>当某个对象经历了一次minor\r\ngc并且存活下来，没有被清理掉，则说这个对象长大了一岁。当某个对象的年龄大于一定阈值，通常是15岁时，该对象在下次minor\r\ngc时会被放到老年代中。</p>\r\n<p>当老年代中的内存不够用时，会触发full gc。</p>\r\n","site":{"data":{}},"excerpt":"<figure>\r\n<img src=\"/images/gc-java.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<h2 id=\"gc\">GC</h2>\r\n<p>GC就是垃圾回收（<code>Garbage Collection</code>），如果你写过C++或者C程序的，你就会知道<code>new</code>一个数据后，就需要<code>delete</code>它的内存，这就是手动管理内存，但这样如果你粗心点的话，就容易造成内存泄露，所以就有了自动垃圾回收，也就我们这里所讨论的GC。Java的GC会对JVM（Java\r\nVirtual\r\nMachine）中的内存进行标记，并确定哪些内存需要回收，根据一定的回收策略，自动的回收内存，永不停息（Nerver\r\nStop）的保证JVM中的内存空间，防止出现内存泄露和溢出问题。<br />\r\n其实GC很早就有了，1960年诞生于MIT的<strong>Lisp</strong>是第一门真正使用内存动态分配和垃圾收集技术的语言。</p>","more":"<h2 id=\"内存布局\">内存布局</h2>\r\n<figure>\r\n<img src=\"/images/java-memory-layout.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>JVM 在执行 Java\r\n程序的过程中会把它所管理的内存划分为若干个不同的数据区域。有的区域依赖线程的启动和结束而建立和销毁，这样的区域可看作是线程私有的区域（Per-Thread\r\nData\r\nArea）；其他的区域则随着虚拟机进程的启动而存在，可以看做是线程间共享的区域。</p>\r\n<p>具体而言，JVM 的运行时数据区域包括如下：</p>\r\n<ul>\r\n<li><strong>程序计数器</strong>（Program Counter\r\nRegister）：线程私有的数据区域，保存当前正在执行的虚拟机指令的地址；</li>\r\n<li><strong>Java 虚拟机栈</strong>（Java Virtual Machine\r\nStack）：线程私有的数据区域，每个栈帧中存放当前执行方法的本地变量及返回地址；</li>\r\n<li><strong>Java\r\n堆（Heap）</strong>：线程共享的数据区域，对象及数组的分配空间；</li>\r\n<li><strong>方法区</strong>（Method\r\nArea）：线程共享的数据区域，存放由类加载器加载的类型信息、常量及静态变量；</li>\r\n<li><strong>本地方法栈（Native Method Stack）</strong>：用于 Native\r\n方法的方法栈</li>\r\n</ul>\r\n<p><strong>运行时常量池</strong>（Runtime Constant\r\nPool）是方法区的一部分，用于存储编译器生成的常量和引用。一般来说，常量的分配在编译时就能确定，但也不全是，也可以存储在运行时期产生的常量。比如String类的intern（）方法，作用是String类维护了一个常量池，如果调用的字符\"hello\"已经在常量池中，则直接返回常量池中的地址，否则新建一个常量加入池中，并返回地址。</p>\r\n<h2 id=\"gc大致过程\">GC大致过程</h2>\r\n<figure>\r\n<img src=\"/images/pasted-3.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>在JVM的堆内存中，被分为了年轻代（Young Generation）和老年代（Old\r\nGeneration、持久代（Permanent\r\nGeneration）。其中年轻代又被分为Eden区和survivor区，而survivor区又被分为大小相等的2个区，分别称为S1区和S2区。持久代在<strong>Sun\r\nHotpot虚拟机</strong>中就是指方法区（有些JVM根本就没有持久代这一说法）</p>\r\n<p>当程序需要在堆上分配内存时，会首先在eden区进行分配。</p>\r\n<p>当eden区内存已满无法再分配对象时，会触发第一次minor\r\ngc，将eden区存活的对象拷贝到其中一个survivor区，比如S1，并把eden区的内存清空，以备使用。</p>\r\n<p>当eden区的内存再次被使用完时，会触发第二次minor\r\ngc，将eden区和S1区中存活的对象拷贝到S2区，并将eden区和S1区的内存清空以备使用。在有的书中会提到from区和to区，其实from区和to区是相对而言的，当把S1区的内容拷贝到S2区时，S1为from区，S2为to区。而将S2区的内容拷贝到S1时，S2为from区，S1为to区。</p>\r\n<p>当eden区的内存再次被用完时，会触发第三次minor\r\ngc，将eden区和S2区存活的对象拷贝到S1区，并清空eden区和S2区的内存，以备使用。</p>\r\n<p>上述过程循环往复。</p>\r\n<p>当某个对象经历了一次minor\r\ngc并且存活下来，没有被清理掉，则说这个对象长大了一岁。当某个对象的年龄大于一定阈值，通常是15岁时，该对象在下次minor\r\ngc时会被放到老年代中。</p>\r\n<p>当老年代中的内存不够用时，会触发full gc。</p>"},{"title":"Java之synchronized的实现原理","author":"Salamander","date":"2020-02-25T11:00:00.000Z","_content":"## synchronized\n在Java多线程编程中，我们最先碰到的也是最简单的方法就利用`synchronized`关键字。用它的方式有三种：\n* 修饰实例方法，锁是当前实例对象\n* 修饰静态方法，锁是当前类的class对象（每个类都有一个Class对象）\n* 修饰代码块，锁定括号里的对象\n\n加上`synchronized`之后，我们的代码就变成了同步代码，神奇又强大，但有的时候也不禁会思考下：Java底层是怎么实现`synchronized`关键字的？  \n在阅读了一些文章之后，我在这里做了一些归纳和总结。\n\n<!-- more -->\n\n首先，看一段简单的Java代码：\n```\npublic class SyncTest {\n    public synchronized void test1(){\n\n    }\n\n    public void test2(){\n        synchronized (this){\n\n        }\n    }\n}\n```\n先用`javac SyncTest.java`编译出class文件，再利用`javap -v -c SyncTest.class`查看`synchronized`的实现。`javap`是jdk自带的反解析工具。它的作用就是根据class字节码文件，反解析出当前类对应的code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等等信息。  \n反解析结果为：\n```\n....\n{\n  public synchronized void test1();\n    descriptor: ()V\n    flags: ACC_PUBLIC, ACC_SYNCHRONIZED\n    Code:\n      stack=0, locals=1, args_size=1\n         0: return\n      LineNumberTable:\n        line 4: 0\n\n  public void test2();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=3, args_size=1\n         0: aload_0\n         1: dup\n         2: astore_1\n         3: monitorenter          // 监视器进入，获取锁\n         4: aload_1\n         5: monitorexit           // 监视器退出，释放锁\n         6: goto          14\n         9: astore_2\n        10: aload_1\n        11: monitorexit\n        12: aload_2\n        13: athrow\n        14: return\n      Exception table:\n         from    to  target type\n             4     6     9   any\n             9    12     9   any\n      LineNumberTable:\n        line 7: 0\n        line 9: 4\n        line 10: 14\n      StackMapTable: number_of_entries = 2\n        frame_type = 255 /* full_frame */\n          offset_delta = 9\n          locals = [ class SyncTest, class java/lang/Object ]\n          stack = [ class java/lang/Throwable ]\n        frame_type = 250 /* chop */\n          offset_delta = 4\n}\nSourceFile: \"SyncTest.java\"\n```\n\n从上面可以看出，同步代码块是使用monitorenter和monitorexit指令实现的，同步方法（在这看不出来需要看JVM底层实现）依靠的是方法修饰符上的`ACC_SYNCHRONIZED实现`。\n\n\n## Java对象头\nJava对象头和monitor是实现synchronized的基础。  \nHotSpot虚拟机中，对象在内存中存储的布局可以分为三块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。  \n\n![](https://s2.ax1x.com/2020/03/01/3gzdxg.png)  \n普通对象的对象头包括两部分：Mark Word 和 Class Metadata Address （类型指针）（如上图所示），如果是数组对象还包括一个额外的Array length数组长度部分（这里我没给出图片）。  \n\n在32位虚拟机中，一字宽等于四字节，即32bit。  \nHotSpot虚拟机的对象头(Object Header)包括两部分信息，第一部分用于存储对象自身的运行时数据， 如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等等，这部分数据的长度在32位和64位的虚拟机（暂不考虑开启压缩指针的场景）中分别为32个和64个Bits，官方称它为“Mark Word”（标记字段）。  \n\n对象需要存储的运行时数据很多，其实已经超出了32、64位Bitmap结构所能记录的限度，但是对象头信息是与对象自身定义的数据无关的额 外存储成本，考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，它会根据对象的状态复用自己的存储空间。例如在32位的HotSpot虚拟机 中对象未被锁定的状态下，Mark Word的32个Bits空间中的25Bits用于存储对象哈希码（HashCode），4Bits用于存储对象分代年龄，2Bits用于存储锁标志 位，1Bit固定为0，在其他状态（轻量级锁定、重量级锁定、GC标记、可偏向）下对象的存储内容如下表所示：  \n\n![](https://s2.ax1x.com/2020/03/01/32ClfP.jpg)\n\n注意偏向锁、轻量级锁、重量级锁等都是jdk 1.6以后引入的。  \n![](https://s2.ax1x.com/2020/03/01/32iYIs.png)\n\n## monitor对象\n\n轻量级锁和偏向锁是Java 6 对 synchronized 锁进行优化后新增加的，稍后我们会简要分析。这里我们主要分析一下重量级锁也就是通常说`synchronized`的对象锁，锁标识位为10，其中指针指向的是monitor对象（也称为管程或监视器锁）的起始地址。每个对象都存在着一个 monitor 与之关联，对象与其 monitor 之间的关系有存在多种实现方式，如monitor可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个 monitor 被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）：  \n```\nObjectMonitor() {\n    _header       = NULL;\n    _count        = 0; //记录个数\n    _waiters      = 0,\n    _recursions   = 0;\n    _object       = NULL;\n    _owner        = NULL;\n    _WaitSet      = NULL; //处于wait状态的线程，会被加入到_WaitSet\n    _WaitSetLock  = 0 ;\n    _Responsible  = NULL ;\n    _succ         = NULL ;\n    _cxq          = NULL ;\n    FreeNext      = NULL ;\n    _EntryList    = NULL ; //处于等待锁block状态的线程，会被加入到该列表\n    _SpinFreq     = 0 ;\n    _SpinClock    = 0 ;\n    OwnerIsThread = 0 ;\n  }\n```\n\nObjectMonitor中有两个队列，_WaitSet和_EntryList，用来保存ObjectWaiter对象列表(每个等待锁的线程都会被封装成ObjectWaiter对象)，_owner指向持有ObjectMonitor对象的线程，当多个线程同时访问一段同步代码时，首先会进入 _EntryList 集合，当线程获取到对象的monitor 后进入 _Owner 区域并把monitor中的owner变量设置为当前线程同时monitor中的计数器count加1，若线程调用wait()方法，将释放当前持有的monitor，owner变量恢复为null，count自减1，同时该线程进入WaitSet集合中等待被唤醒。若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)。如下图所示：  \n\n![](https://s2.ax1x.com/2020/03/06/3qfHBQ.gif)\n\n## 锁优化\n从上一节看出，`synchronized`的实现依赖于与某个对象向关联的monitor（监视器）实现，而monitor是基于底层操作系统的[Mutex Lock](https://en.cppreference.com/w/cpp/thread/mutex)实现的，而基于Mutex Lock实现的同步必须经历从用户态到核心态的转换，这个开销特别大，成本非常高。所以频繁的通过Synchronized实现同步会严重影响到程序效率，而这种依赖于`Mutex Lock`实现的锁机制也被称为“重量级锁”，为了减少重量级锁带来的性能开销，JDK对`synchronized`进行了种种优化。  \n\nJava SE1.6为了减少获得锁和释放锁所带来的性能消耗，引入了“偏向锁”和“轻量级锁”，所以在Java SE1.6里锁一共有四种状态，无锁状态，偏向锁状态，轻量级锁状态和重量级锁状态，它会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。  \n\n### 偏向锁\n\nHotspot的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。  \n![](https://s1.ax1x.com/2020/03/19/8sdygH.png)\n\n**获取锁：**  \n1. 检测Mark Word是否为可偏向状态，即是否为偏向锁1，锁标识位为01；\n2. 若为可偏向状态，则测试线程ID是否为当前线程ID，如果是，则执行步骤（5），否则执行步骤（3）；\n3. 如果线程ID不为当前线程ID，则通过CAS操作竞争锁，竞争成功，则将Mark Word的线程ID替换为当前线程ID，否则执行线程（4）；\n4. 通过CAS竞争锁失败，证明当前存在多线程竞争情况，当到达全局安全点，获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块；\n5. 执行同步代码块  \n\n**释放锁：**\n偏向锁的释放采用了一种只有竞争才会释放锁的机制，线程是不会主动去释放偏向锁，需要等待其他线程来竞争。偏向锁的撤销需要等待全局安全点（这个时间点是上没有正在执行的代码）。其步骤如下：  \n\n* 暂停拥有偏向锁的线程，判断锁对象石是否还处于被锁定状态；\n* 撤销偏向苏，恢复到无锁状态（01）或者轻量级锁的状态；\n\n\n### 轻量级锁\n\n引入轻量级锁的主要目的是在多没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。 当关闭偏向锁功能或者多个线程竞争偏向锁导致偏向锁升级为轻量级锁，则会尝试获取轻量级锁，其步骤如下：  \n![](https://s1.ax1x.com/2020/03/19/8saew6.png)  \n\n\n**获取锁：**\n\n1. 判断当前对象是否处于无锁状态（hashcode、0、01），若是，则JVM首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝（官方把这份拷贝加了一个Displaced前缀，即Displaced Mark Word）；否则执行步骤（3）；\n2. JVM利用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指正，如果成功表示竞争到锁，则将锁标志位变成00（表示此对象处于轻量级锁状态），执行同步操作；如果失败则执行步骤（3）；\n3. 判断当前对象的Mark Word是否指向当前线程的栈帧，如果是则表示当前线程已经持有当前对象的锁，则直接执行同步代码块；否则只能说明该锁对象已经被其他线程抢占了，这时轻量级锁需要膨胀为重量级锁，锁标志位变成10，后面等待的线程将会进入阻塞状态；  \n\n\n**释放锁：**  \n轻量级锁的释放也是通过CAS操作来进行的，主要步骤如下：\n\n1. 取出在获取轻量级锁保存在Displaced Mark Word中的数据；\n2. 用CAS操作将取出的数据替换当前对象的Mark Word中，如果成功，则说明释放锁成功，否则执行（3）；\n3. 如果CAS操作替换失败，说明有其他线程尝试获取该锁，则需要在释放锁的同时需要唤醒被挂起的线程。\n\n轻量级锁状态时，位置被锁指针占用，那hashCode等信息要存到哪里？这里的问题就比较简单了，因为有拷贝的mark word，所以Displaced Mark Word中存在所需要的信息。\n\n### 重量级锁\n重量级锁通过对象内部的监视器（monitor）实现，其中monitor的本质是依赖于底层操作系统的Mutex Lock实现，操作系统实现线程之间的切换需要从用户态到内核态的切换，切换成本非常高。\n\n### 自旋锁\n轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。自旋是把双刃剑，如果旋的时间过长会影响整体性能，时间过短又达不到延迟阻塞的目的。显然，自旋的周期选择显得非常重要，但这与操作系统、硬件体系、系统的负载等诸多场景相关，很难选择，如果选择不当，不但性能得不到提高，可能还会下降。\n\n\n### 适应自旋锁\nJDK 1.6引入了更加聪明的自旋锁，即自适应自旋锁。所谓自适应就意味着自旋的次数不再是固定的，它是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。它怎么做呢？线程如果自旋成功了，那么下次自旋的次数会更加多，因为虚拟机认为既然上次成功了，那么此次自旋也很有可能会再次成功，那么它就会允许自旋等待持续的次数更多。反之，如果对于某个锁，很少有自旋能够成功的，那么在以后要或者这个锁的时候自旋的次数会减少甚至省略掉自旋过程，以免浪费处理器资源。\n\n### 锁消除\n为了保证数据的完整性，我们在进行操作时需要对这部分操作进行同步控制，但是在有些情况下，JVM检测到不可能存在共享数据竞争，这是JVM会对这些同步锁进行锁消除。锁消除的依据是逃逸分析的数据支持。\n如果不存在竞争，为什么还需要加锁呢？所以锁消除可以节省毫无意义的请求锁的时间。变量是否逃逸，对于虚拟机来说需要使用数据流分析来确定，但是对于我们程序员来说这还不清楚么？我们会在明明知道不存在数据竞争的代码块前加上同步吗？但是有时候程序并不是我们所想的那样？我们虽然没有显示使用锁，但是我们在使用一些JDK的内置API时，如StringBuffer、Vector、HashTable等，这个时候会存在隐形的加锁操作。比如`StringBuffer`的append()方法，`Vector`的add()方法。\n\n### 锁的膨胀流程\n在前面偏向锁和轻量级锁的小节中已经大概了解的锁的膨胀流程：  \n偏向锁->轻量级锁->重量级锁  \n\n偏向所锁，轻量级锁都是乐观锁，重量级锁是悲观锁。 \n\n一个对象刚开始实例化的时候，没有任何线程来访问它的时候。它是可偏向的，意味着，它现在认为只可能有一个线程来访问它，所以当第一个线程来访问它的时候，它会偏向这个线程，此时，对象持有偏向锁。 \n\n偏向第一个线程，这个线程在修改对象头成为偏向锁的时候使用CAS操作，并将对象头中的ThreadID改成自己的ID，之后再次访问这个对象时，只需要对比ID，不需要再使用CAS在进行操作。  \n\n一旦有第二个线程访问这个对象，因为偏向锁不会主动释放，所以第二个线程可以看到对象是偏向状态，这时表明在这个对象上已经存在竞争了，检查原来持有该对象锁的线程是否依然存活，如果挂了，则可以将对象变为无锁状态，然后重新偏向新的线程，如果原来的线程依然存活，则马上执行那个线程的操作栈，检查该对象的使用情况，如果仍然需要持有偏向锁，则偏向锁升级为轻量级锁，（偏向锁就是这个时候升级为轻量级锁的）。如果不存在使用了，则可以将对象回复成无锁状态，然后重新偏向。   \n\n轻量级锁认为竞争存在，但是竞争的程度很轻，一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。 但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁膨胀为重量级锁，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考：\n* [【死磕Java并发】-----深入分析synchronized的实现原理\n](https://blog.csdn.net/chenssy/article/details/54883355)\n* [java对象在内存中的结构（HotSpot虚拟机）\n](https://www.cnblogs.com/duanxz/p/4967042.html)\n* [Difference between lock and monitor – Java Concurrency\n](https://howtodoinjava.com/java/multi-threading/multithreading-difference-between-lock-and-monitor/)","source":"_posts/Java_synchronized_underlying.md","raw":"title: Java之synchronized的实现原理\nauthor: Salamander\ntags:\n  - synchronized\n  - java\ncategories:\n  - Java\ndate: 2020-02-25 19:00:00\n---\n## synchronized\n在Java多线程编程中，我们最先碰到的也是最简单的方法就利用`synchronized`关键字。用它的方式有三种：\n* 修饰实例方法，锁是当前实例对象\n* 修饰静态方法，锁是当前类的class对象（每个类都有一个Class对象）\n* 修饰代码块，锁定括号里的对象\n\n加上`synchronized`之后，我们的代码就变成了同步代码，神奇又强大，但有的时候也不禁会思考下：Java底层是怎么实现`synchronized`关键字的？  \n在阅读了一些文章之后，我在这里做了一些归纳和总结。\n\n<!-- more -->\n\n首先，看一段简单的Java代码：\n```\npublic class SyncTest {\n    public synchronized void test1(){\n\n    }\n\n    public void test2(){\n        synchronized (this){\n\n        }\n    }\n}\n```\n先用`javac SyncTest.java`编译出class文件，再利用`javap -v -c SyncTest.class`查看`synchronized`的实现。`javap`是jdk自带的反解析工具。它的作用就是根据class字节码文件，反解析出当前类对应的code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等等信息。  \n反解析结果为：\n```\n....\n{\n  public synchronized void test1();\n    descriptor: ()V\n    flags: ACC_PUBLIC, ACC_SYNCHRONIZED\n    Code:\n      stack=0, locals=1, args_size=1\n         0: return\n      LineNumberTable:\n        line 4: 0\n\n  public void test2();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=3, args_size=1\n         0: aload_0\n         1: dup\n         2: astore_1\n         3: monitorenter          // 监视器进入，获取锁\n         4: aload_1\n         5: monitorexit           // 监视器退出，释放锁\n         6: goto          14\n         9: astore_2\n        10: aload_1\n        11: monitorexit\n        12: aload_2\n        13: athrow\n        14: return\n      Exception table:\n         from    to  target type\n             4     6     9   any\n             9    12     9   any\n      LineNumberTable:\n        line 7: 0\n        line 9: 4\n        line 10: 14\n      StackMapTable: number_of_entries = 2\n        frame_type = 255 /* full_frame */\n          offset_delta = 9\n          locals = [ class SyncTest, class java/lang/Object ]\n          stack = [ class java/lang/Throwable ]\n        frame_type = 250 /* chop */\n          offset_delta = 4\n}\nSourceFile: \"SyncTest.java\"\n```\n\n从上面可以看出，同步代码块是使用monitorenter和monitorexit指令实现的，同步方法（在这看不出来需要看JVM底层实现）依靠的是方法修饰符上的`ACC_SYNCHRONIZED实现`。\n\n\n## Java对象头\nJava对象头和monitor是实现synchronized的基础。  \nHotSpot虚拟机中，对象在内存中存储的布局可以分为三块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。  \n\n![](https://s2.ax1x.com/2020/03/01/3gzdxg.png)  \n普通对象的对象头包括两部分：Mark Word 和 Class Metadata Address （类型指针）（如上图所示），如果是数组对象还包括一个额外的Array length数组长度部分（这里我没给出图片）。  \n\n在32位虚拟机中，一字宽等于四字节，即32bit。  \nHotSpot虚拟机的对象头(Object Header)包括两部分信息，第一部分用于存储对象自身的运行时数据， 如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等等，这部分数据的长度在32位和64位的虚拟机（暂不考虑开启压缩指针的场景）中分别为32个和64个Bits，官方称它为“Mark Word”（标记字段）。  \n\n对象需要存储的运行时数据很多，其实已经超出了32、64位Bitmap结构所能记录的限度，但是对象头信息是与对象自身定义的数据无关的额 外存储成本，考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，它会根据对象的状态复用自己的存储空间。例如在32位的HotSpot虚拟机 中对象未被锁定的状态下，Mark Word的32个Bits空间中的25Bits用于存储对象哈希码（HashCode），4Bits用于存储对象分代年龄，2Bits用于存储锁标志 位，1Bit固定为0，在其他状态（轻量级锁定、重量级锁定、GC标记、可偏向）下对象的存储内容如下表所示：  \n\n![](https://s2.ax1x.com/2020/03/01/32ClfP.jpg)\n\n注意偏向锁、轻量级锁、重量级锁等都是jdk 1.6以后引入的。  \n![](https://s2.ax1x.com/2020/03/01/32iYIs.png)\n\n## monitor对象\n\n轻量级锁和偏向锁是Java 6 对 synchronized 锁进行优化后新增加的，稍后我们会简要分析。这里我们主要分析一下重量级锁也就是通常说`synchronized`的对象锁，锁标识位为10，其中指针指向的是monitor对象（也称为管程或监视器锁）的起始地址。每个对象都存在着一个 monitor 与之关联，对象与其 monitor 之间的关系有存在多种实现方式，如monitor可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个 monitor 被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）：  \n```\nObjectMonitor() {\n    _header       = NULL;\n    _count        = 0; //记录个数\n    _waiters      = 0,\n    _recursions   = 0;\n    _object       = NULL;\n    _owner        = NULL;\n    _WaitSet      = NULL; //处于wait状态的线程，会被加入到_WaitSet\n    _WaitSetLock  = 0 ;\n    _Responsible  = NULL ;\n    _succ         = NULL ;\n    _cxq          = NULL ;\n    FreeNext      = NULL ;\n    _EntryList    = NULL ; //处于等待锁block状态的线程，会被加入到该列表\n    _SpinFreq     = 0 ;\n    _SpinClock    = 0 ;\n    OwnerIsThread = 0 ;\n  }\n```\n\nObjectMonitor中有两个队列，_WaitSet和_EntryList，用来保存ObjectWaiter对象列表(每个等待锁的线程都会被封装成ObjectWaiter对象)，_owner指向持有ObjectMonitor对象的线程，当多个线程同时访问一段同步代码时，首先会进入 _EntryList 集合，当线程获取到对象的monitor 后进入 _Owner 区域并把monitor中的owner变量设置为当前线程同时monitor中的计数器count加1，若线程调用wait()方法，将释放当前持有的monitor，owner变量恢复为null，count自减1，同时该线程进入WaitSet集合中等待被唤醒。若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)。如下图所示：  \n\n![](https://s2.ax1x.com/2020/03/06/3qfHBQ.gif)\n\n## 锁优化\n从上一节看出，`synchronized`的实现依赖于与某个对象向关联的monitor（监视器）实现，而monitor是基于底层操作系统的[Mutex Lock](https://en.cppreference.com/w/cpp/thread/mutex)实现的，而基于Mutex Lock实现的同步必须经历从用户态到核心态的转换，这个开销特别大，成本非常高。所以频繁的通过Synchronized实现同步会严重影响到程序效率，而这种依赖于`Mutex Lock`实现的锁机制也被称为“重量级锁”，为了减少重量级锁带来的性能开销，JDK对`synchronized`进行了种种优化。  \n\nJava SE1.6为了减少获得锁和释放锁所带来的性能消耗，引入了“偏向锁”和“轻量级锁”，所以在Java SE1.6里锁一共有四种状态，无锁状态，偏向锁状态，轻量级锁状态和重量级锁状态，它会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。  \n\n### 偏向锁\n\nHotspot的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。  \n![](https://s1.ax1x.com/2020/03/19/8sdygH.png)\n\n**获取锁：**  \n1. 检测Mark Word是否为可偏向状态，即是否为偏向锁1，锁标识位为01；\n2. 若为可偏向状态，则测试线程ID是否为当前线程ID，如果是，则执行步骤（5），否则执行步骤（3）；\n3. 如果线程ID不为当前线程ID，则通过CAS操作竞争锁，竞争成功，则将Mark Word的线程ID替换为当前线程ID，否则执行线程（4）；\n4. 通过CAS竞争锁失败，证明当前存在多线程竞争情况，当到达全局安全点，获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块；\n5. 执行同步代码块  \n\n**释放锁：**\n偏向锁的释放采用了一种只有竞争才会释放锁的机制，线程是不会主动去释放偏向锁，需要等待其他线程来竞争。偏向锁的撤销需要等待全局安全点（这个时间点是上没有正在执行的代码）。其步骤如下：  \n\n* 暂停拥有偏向锁的线程，判断锁对象石是否还处于被锁定状态；\n* 撤销偏向苏，恢复到无锁状态（01）或者轻量级锁的状态；\n\n\n### 轻量级锁\n\n引入轻量级锁的主要目的是在多没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。 当关闭偏向锁功能或者多个线程竞争偏向锁导致偏向锁升级为轻量级锁，则会尝试获取轻量级锁，其步骤如下：  \n![](https://s1.ax1x.com/2020/03/19/8saew6.png)  \n\n\n**获取锁：**\n\n1. 判断当前对象是否处于无锁状态（hashcode、0、01），若是，则JVM首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝（官方把这份拷贝加了一个Displaced前缀，即Displaced Mark Word）；否则执行步骤（3）；\n2. JVM利用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指正，如果成功表示竞争到锁，则将锁标志位变成00（表示此对象处于轻量级锁状态），执行同步操作；如果失败则执行步骤（3）；\n3. 判断当前对象的Mark Word是否指向当前线程的栈帧，如果是则表示当前线程已经持有当前对象的锁，则直接执行同步代码块；否则只能说明该锁对象已经被其他线程抢占了，这时轻量级锁需要膨胀为重量级锁，锁标志位变成10，后面等待的线程将会进入阻塞状态；  \n\n\n**释放锁：**  \n轻量级锁的释放也是通过CAS操作来进行的，主要步骤如下：\n\n1. 取出在获取轻量级锁保存在Displaced Mark Word中的数据；\n2. 用CAS操作将取出的数据替换当前对象的Mark Word中，如果成功，则说明释放锁成功，否则执行（3）；\n3. 如果CAS操作替换失败，说明有其他线程尝试获取该锁，则需要在释放锁的同时需要唤醒被挂起的线程。\n\n轻量级锁状态时，位置被锁指针占用，那hashCode等信息要存到哪里？这里的问题就比较简单了，因为有拷贝的mark word，所以Displaced Mark Word中存在所需要的信息。\n\n### 重量级锁\n重量级锁通过对象内部的监视器（monitor）实现，其中monitor的本质是依赖于底层操作系统的Mutex Lock实现，操作系统实现线程之间的切换需要从用户态到内核态的切换，切换成本非常高。\n\n### 自旋锁\n轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。自旋是把双刃剑，如果旋的时间过长会影响整体性能，时间过短又达不到延迟阻塞的目的。显然，自旋的周期选择显得非常重要，但这与操作系统、硬件体系、系统的负载等诸多场景相关，很难选择，如果选择不当，不但性能得不到提高，可能还会下降。\n\n\n### 适应自旋锁\nJDK 1.6引入了更加聪明的自旋锁，即自适应自旋锁。所谓自适应就意味着自旋的次数不再是固定的，它是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。它怎么做呢？线程如果自旋成功了，那么下次自旋的次数会更加多，因为虚拟机认为既然上次成功了，那么此次自旋也很有可能会再次成功，那么它就会允许自旋等待持续的次数更多。反之，如果对于某个锁，很少有自旋能够成功的，那么在以后要或者这个锁的时候自旋的次数会减少甚至省略掉自旋过程，以免浪费处理器资源。\n\n### 锁消除\n为了保证数据的完整性，我们在进行操作时需要对这部分操作进行同步控制，但是在有些情况下，JVM检测到不可能存在共享数据竞争，这是JVM会对这些同步锁进行锁消除。锁消除的依据是逃逸分析的数据支持。\n如果不存在竞争，为什么还需要加锁呢？所以锁消除可以节省毫无意义的请求锁的时间。变量是否逃逸，对于虚拟机来说需要使用数据流分析来确定，但是对于我们程序员来说这还不清楚么？我们会在明明知道不存在数据竞争的代码块前加上同步吗？但是有时候程序并不是我们所想的那样？我们虽然没有显示使用锁，但是我们在使用一些JDK的内置API时，如StringBuffer、Vector、HashTable等，这个时候会存在隐形的加锁操作。比如`StringBuffer`的append()方法，`Vector`的add()方法。\n\n### 锁的膨胀流程\n在前面偏向锁和轻量级锁的小节中已经大概了解的锁的膨胀流程：  \n偏向锁->轻量级锁->重量级锁  \n\n偏向所锁，轻量级锁都是乐观锁，重量级锁是悲观锁。 \n\n一个对象刚开始实例化的时候，没有任何线程来访问它的时候。它是可偏向的，意味着，它现在认为只可能有一个线程来访问它，所以当第一个线程来访问它的时候，它会偏向这个线程，此时，对象持有偏向锁。 \n\n偏向第一个线程，这个线程在修改对象头成为偏向锁的时候使用CAS操作，并将对象头中的ThreadID改成自己的ID，之后再次访问这个对象时，只需要对比ID，不需要再使用CAS在进行操作。  \n\n一旦有第二个线程访问这个对象，因为偏向锁不会主动释放，所以第二个线程可以看到对象是偏向状态，这时表明在这个对象上已经存在竞争了，检查原来持有该对象锁的线程是否依然存活，如果挂了，则可以将对象变为无锁状态，然后重新偏向新的线程，如果原来的线程依然存活，则马上执行那个线程的操作栈，检查该对象的使用情况，如果仍然需要持有偏向锁，则偏向锁升级为轻量级锁，（偏向锁就是这个时候升级为轻量级锁的）。如果不存在使用了，则可以将对象回复成无锁状态，然后重新偏向。   \n\n轻量级锁认为竞争存在，但是竞争的程度很轻，一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。 但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁膨胀为重量级锁，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考：\n* [【死磕Java并发】-----深入分析synchronized的实现原理\n](https://blog.csdn.net/chenssy/article/details/54883355)\n* [java对象在内存中的结构（HotSpot虚拟机）\n](https://www.cnblogs.com/duanxz/p/4967042.html)\n* [Difference between lock and monitor – Java Concurrency\n](https://howtodoinjava.com/java/multi-threading/multithreading-difference-between-lock-and-monitor/)","slug":"Java_synchronized_underlying","published":1,"updated":"2023-03-21T02:48:19.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40kz000r2o3m05vt9b81","content":"<h2 id=\"synchronized\">synchronized</h2>\r\n<p>在Java多线程编程中，我们最先碰到的也是最简单的方法就利用<code>synchronized</code>关键字。用它的方式有三种：\r\n* 修饰实例方法，锁是当前实例对象 *\r\n修饰静态方法，锁是当前类的class对象（每个类都有一个Class对象） *\r\n修饰代码块，锁定括号里的对象</p>\r\n<p>加上<code>synchronized</code>之后，我们的代码就变成了同步代码，神奇又强大，但有的时候也不禁会思考下：Java底层是怎么实现<code>synchronized</code>关键字的？<br />\r\n在阅读了一些文章之后，我在这里做了一些归纳和总结。</p>\r\n<span id=\"more\"></span>\r\n<p>首先，看一段简单的Java代码： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SyncTest &#123;</span><br><span class=\"line\">    public synchronized void test1()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void test2()&#123;</span><br><span class=\"line\">        synchronized (this)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n先用<code>javac SyncTest.java</code>编译出class文件，再利用<code>javap -v -c SyncTest.class</code>查看<code>synchronized</code>的实现。<code>javap</code>是jdk自带的反解析工具。它的作用就是根据class字节码文件，反解析出当前类对应的code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等等信息。<br />\r\n反解析结果为： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public synchronized void test1();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=0, locals=1, args_size=1</span><br><span class=\"line\">         0: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 4: 0</span><br><span class=\"line\"></span><br><span class=\"line\">  public void test2();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=3, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: dup</span><br><span class=\"line\">         2: astore_1</span><br><span class=\"line\">         3: monitorenter          // 监视器进入，获取锁</span><br><span class=\"line\">         4: aload_1</span><br><span class=\"line\">         5: monitorexit           // 监视器退出，释放锁</span><br><span class=\"line\">         6: goto          14</span><br><span class=\"line\">         9: astore_2</span><br><span class=\"line\">        10: aload_1</span><br><span class=\"line\">        11: monitorexit</span><br><span class=\"line\">        12: aload_2</span><br><span class=\"line\">        13: athrow</span><br><span class=\"line\">        14: return</span><br><span class=\"line\">      Exception table:</span><br><span class=\"line\">         from    to  target type</span><br><span class=\"line\">             4     6     9   any</span><br><span class=\"line\">             9    12     9   any</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 7: 0</span><br><span class=\"line\">        line 9: 4</span><br><span class=\"line\">        line 10: 14</span><br><span class=\"line\">      StackMapTable: number_of_entries = 2</span><br><span class=\"line\">        frame_type = 255 /* full_frame */</span><br><span class=\"line\">          offset_delta = 9</span><br><span class=\"line\">          locals = [ class SyncTest, class java/lang/Object ]</span><br><span class=\"line\">          stack = [ class java/lang/Throwable ]</span><br><span class=\"line\">        frame_type = 250 /* chop */</span><br><span class=\"line\">          offset_delta = 4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: &quot;SyncTest.java&quot;</span><br></pre></td></tr></table></figure></p>\r\n<p>从上面可以看出，同步代码块是使用monitorenter和monitorexit指令实现的，同步方法（在这看不出来需要看JVM底层实现）依靠的是方法修饰符上的<code>ACC_SYNCHRONIZED实现</code>。</p>\r\n<h2 id=\"java对象头\">Java对象头</h2>\r\n<p>Java对象头和monitor是实现synchronized的基础。<br />\r\nHotSpot虚拟机中，对象在内存中存储的布局可以分为三块区域：对象头（Header）、实例数据（Instance\r\nData）和对齐填充（Padding）。</p>\r\n<p><img src=\"https://s2.ax1x.com/2020/03/01/3gzdxg.png\" /><br />\r\n普通对象的对象头包括两部分：Mark Word 和 Class Metadata Address\r\n（类型指针）（如上图所示），如果是数组对象还包括一个额外的Array\r\nlength数组长度部分（这里我没给出图片）。</p>\r\n<p>在32位虚拟机中，一字宽等于四字节，即32bit。<br />\r\nHotSpot虚拟机的对象头(Object\r\nHeader)包括两部分信息，第一部分用于存储对象自身的运行时数据，\r\n如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等等，这部分数据的长度在32位和64位的虚拟机（暂不考虑开启压缩指针的场景）中分别为32个和64个Bits，官方称它为“Mark\r\nWord”（标记字段）。</p>\r\n<p>对象需要存储的运行时数据很多，其实已经超出了32、64位Bitmap结构所能记录的限度，但是对象头信息是与对象自身定义的数据无关的额\r\n外存储成本，考虑到虚拟机的空间效率，Mark\r\nWord被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，它会根据对象的状态复用自己的存储空间。例如在32位的HotSpot虚拟机\r\n中对象未被锁定的状态下，Mark\r\nWord的32个Bits空间中的25Bits用于存储对象哈希码（HashCode），4Bits用于存储对象分代年龄，2Bits用于存储锁标志\r\n位，1Bit固定为0，在其他状态（轻量级锁定、重量级锁定、GC标记、可偏向）下对象的存储内容如下表所示：</p>\r\n<p><img src=\"https://s2.ax1x.com/2020/03/01/32ClfP.jpg\" /></p>\r\n<p>注意偏向锁、轻量级锁、重量级锁等都是jdk 1.6以后引入的。<br />\r\n<img src=\"https://s2.ax1x.com/2020/03/01/32iYIs.png\" /></p>\r\n<h2 id=\"monitor对象\">monitor对象</h2>\r\n<p>轻量级锁和偏向锁是Java 6 对 synchronized\r\n锁进行优化后新增加的，稍后我们会简要分析。这里我们主要分析一下重量级锁也就是通常说<code>synchronized</code>的对象锁，锁标识位为10，其中指针指向的是monitor对象（也称为管程或监视器锁）的起始地址。每个对象都存在着一个\r\nmonitor 与之关联，对象与其 monitor\r\n之间的关系有存在多种实现方式，如monitor可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个\r\nmonitor\r\n被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectMonitor() &#123;</span><br><span class=\"line\">    _header       = NULL;</span><br><span class=\"line\">    _count        = 0; //记录个数</span><br><span class=\"line\">    _waiters      = 0,</span><br><span class=\"line\">    _recursions   = 0;</span><br><span class=\"line\">    _object       = NULL;</span><br><span class=\"line\">    _owner        = NULL;</span><br><span class=\"line\">    _WaitSet      = NULL; //处于wait状态的线程，会被加入到_WaitSet</span><br><span class=\"line\">    _WaitSetLock  = 0 ;</span><br><span class=\"line\">    _Responsible  = NULL ;</span><br><span class=\"line\">    _succ         = NULL ;</span><br><span class=\"line\">    _cxq          = NULL ;</span><br><span class=\"line\">    FreeNext      = NULL ;</span><br><span class=\"line\">    _EntryList    = NULL ; //处于等待锁block状态的线程，会被加入到该列表</span><br><span class=\"line\">    _SpinFreq     = 0 ;</span><br><span class=\"line\">    _SpinClock    = 0 ;</span><br><span class=\"line\">    OwnerIsThread = 0 ;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>ObjectMonitor中有两个队列，_WaitSet和_EntryList，用来保存ObjectWaiter对象列表(每个等待锁的线程都会被封装成ObjectWaiter对象)，_owner指向持有ObjectMonitor对象的线程，当多个线程同时访问一段同步代码时，首先会进入\r\n_EntryList 集合，当线程获取到对象的monitor 后进入 _Owner\r\n区域并把monitor中的owner变量设置为当前线程同时monitor中的计数器count加1，若线程调用wait()方法，将释放当前持有的monitor，owner变量恢复为null，count自减1，同时该线程进入WaitSet集合中等待被唤醒。若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)。如下图所示：</p>\r\n<p><img src=\"https://s2.ax1x.com/2020/03/06/3qfHBQ.gif\" /></p>\r\n<h2 id=\"锁优化\">锁优化</h2>\r\n<p>从上一节看出，<code>synchronized</code>的实现依赖于与某个对象向关联的monitor（监视器）实现，而monitor是基于底层操作系统的<a\r\nhref=\"https://en.cppreference.com/w/cpp/thread/mutex\">Mutex\r\nLock</a>实现的，而基于Mutex\r\nLock实现的同步必须经历从用户态到核心态的转换，这个开销特别大，成本非常高。所以频繁的通过Synchronized实现同步会严重影响到程序效率，而这种依赖于<code>Mutex Lock</code>实现的锁机制也被称为“重量级锁”，为了减少重量级锁带来的性能开销，JDK对<code>synchronized</code>进行了种种优化。</p>\r\n<p>Java\r\nSE1.6为了减少获得锁和释放锁所带来的性能消耗，引入了“偏向锁”和“轻量级锁”，所以在Java\r\nSE1.6里锁一共有四种状态，无锁状态，偏向锁状态，轻量级锁状态和重量级锁状态，它会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。</p>\r\n<h3 id=\"偏向锁\">偏向锁</h3>\r\n<p>Hotspot的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。<br />\r\n<img src=\"https://s1.ax1x.com/2020/03/19/8sdygH.png\" /></p>\r\n<p><strong>获取锁：</strong><br />\r\n1. 检测Mark Word是否为可偏向状态，即是否为偏向锁1，锁标识位为01； 2.\r\n若为可偏向状态，则测试线程ID是否为当前线程ID，如果是，则执行步骤（5），否则执行步骤（3）；\r\n3. 如果线程ID不为当前线程ID，则通过CAS操作竞争锁，竞争成功，则将Mark\r\nWord的线程ID替换为当前线程ID，否则执行线程（4）； 4.\r\n通过CAS竞争锁失败，证明当前存在多线程竞争情况，当到达全局安全点，获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块；\r\n5. 执行同步代码块</p>\r\n<p><strong>释放锁：</strong>\r\n偏向锁的释放采用了一种只有竞争才会释放锁的机制，线程是不会主动去释放偏向锁，需要等待其他线程来竞争。偏向锁的撤销需要等待全局安全点（这个时间点是上没有正在执行的代码）。其步骤如下：</p>\r\n<ul>\r\n<li>暂停拥有偏向锁的线程，判断锁对象石是否还处于被锁定状态；</li>\r\n<li>撤销偏向苏，恢复到无锁状态（01）或者轻量级锁的状态；</li>\r\n</ul>\r\n<h3 id=\"轻量级锁\">轻量级锁</h3>\r\n<p>引入轻量级锁的主要目的是在多没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。\r\n当关闭偏向锁功能或者多个线程竞争偏向锁导致偏向锁升级为轻量级锁，则会尝试获取轻量级锁，其步骤如下：<br />\r\n<img src=\"https://s1.ax1x.com/2020/03/19/8saew6.png\" /></p>\r\n<p><strong>获取锁：</strong></p>\r\n<ol type=\"1\">\r\n<li>判断当前对象是否处于无锁状态（hashcode、0、01），若是，则JVM首先将在当前线程的栈帧中建立一个名为锁记录（Lock\r\nRecord）的空间，用于存储锁对象目前的Mark\r\nWord的拷贝（官方把这份拷贝加了一个Displaced前缀，即Displaced Mark\r\nWord）；否则执行步骤（3）；</li>\r\n<li>JVM利用CAS操作尝试将对象的Mark Word更新为指向Lock\r\nRecord的指正，如果成功表示竞争到锁，则将锁标志位变成00（表示此对象处于轻量级锁状态），执行同步操作；如果失败则执行步骤（3）；</li>\r\n<li>判断当前对象的Mark\r\nWord是否指向当前线程的栈帧，如果是则表示当前线程已经持有当前对象的锁，则直接执行同步代码块；否则只能说明该锁对象已经被其他线程抢占了，这时轻量级锁需要膨胀为重量级锁，锁标志位变成10，后面等待的线程将会进入阻塞状态；</li>\r\n</ol>\r\n<p><strong>释放锁：</strong><br />\r\n轻量级锁的释放也是通过CAS操作来进行的，主要步骤如下：</p>\r\n<ol type=\"1\">\r\n<li>取出在获取轻量级锁保存在Displaced Mark Word中的数据；</li>\r\n<li>用CAS操作将取出的数据替换当前对象的Mark\r\nWord中，如果成功，则说明释放锁成功，否则执行（3）；</li>\r\n<li>如果CAS操作替换失败，说明有其他线程尝试获取该锁，则需要在释放锁的同时需要唤醒被挂起的线程。</li>\r\n</ol>\r\n<p>轻量级锁状态时，位置被锁指针占用，那hashCode等信息要存到哪里？这里的问题就比较简单了，因为有拷贝的mark\r\nword，所以Displaced Mark Word中存在所需要的信息。</p>\r\n<h3 id=\"重量级锁\">重量级锁</h3>\r\n<p>重量级锁通过对象内部的监视器（monitor）实现，其中monitor的本质是依赖于底层操作系统的Mutex\r\nLock实现，操作系统实现线程之间的切换需要从用户态到内核态的切换，切换成本非常高。</p>\r\n<h3 id=\"自旋锁\">自旋锁</h3>\r\n<p>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。自旋是把双刃剑，如果旋的时间过长会影响整体性能，时间过短又达不到延迟阻塞的目的。显然，自旋的周期选择显得非常重要，但这与操作系统、硬件体系、系统的负载等诸多场景相关，很难选择，如果选择不当，不但性能得不到提高，可能还会下降。</p>\r\n<h3 id=\"适应自旋锁\">适应自旋锁</h3>\r\n<p>JDK\r\n1.6引入了更加聪明的自旋锁，即自适应自旋锁。所谓自适应就意味着自旋的次数不再是固定的，它是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。它怎么做呢？线程如果自旋成功了，那么下次自旋的次数会更加多，因为虚拟机认为既然上次成功了，那么此次自旋也很有可能会再次成功，那么它就会允许自旋等待持续的次数更多。反之，如果对于某个锁，很少有自旋能够成功的，那么在以后要或者这个锁的时候自旋的次数会减少甚至省略掉自旋过程，以免浪费处理器资源。</p>\r\n<h3 id=\"锁消除\">锁消除</h3>\r\n<p>为了保证数据的完整性，我们在进行操作时需要对这部分操作进行同步控制，但是在有些情况下，JVM检测到不可能存在共享数据竞争，这是JVM会对这些同步锁进行锁消除。锁消除的依据是逃逸分析的数据支持。\r\n如果不存在竞争，为什么还需要加锁呢？所以锁消除可以节省毫无意义的请求锁的时间。变量是否逃逸，对于虚拟机来说需要使用数据流分析来确定，但是对于我们程序员来说这还不清楚么？我们会在明明知道不存在数据竞争的代码块前加上同步吗？但是有时候程序并不是我们所想的那样？我们虽然没有显示使用锁，但是我们在使用一些JDK的内置API时，如StringBuffer、Vector、HashTable等，这个时候会存在隐形的加锁操作。比如<code>StringBuffer</code>的append()方法，<code>Vector</code>的add()方法。</p>\r\n<h3 id=\"锁的膨胀流程\">锁的膨胀流程</h3>\r\n<p>在前面偏向锁和轻量级锁的小节中已经大概了解的锁的膨胀流程：<br />\r\n偏向锁-&gt;轻量级锁-&gt;重量级锁</p>\r\n<p>偏向所锁，轻量级锁都是乐观锁，重量级锁是悲观锁。</p>\r\n<p>一个对象刚开始实例化的时候，没有任何线程来访问它的时候。它是可偏向的，意味着，它现在认为只可能有一个线程来访问它，所以当第一个线程来访问它的时候，它会偏向这个线程，此时，对象持有偏向锁。</p>\r\n<p>偏向第一个线程，这个线程在修改对象头成为偏向锁的时候使用CAS操作，并将对象头中的ThreadID改成自己的ID，之后再次访问这个对象时，只需要对比ID，不需要再使用CAS在进行操作。</p>\r\n<p>一旦有第二个线程访问这个对象，因为偏向锁不会主动释放，所以第二个线程可以看到对象是偏向状态，这时表明在这个对象上已经存在竞争了，检查原来持有该对象锁的线程是否依然存活，如果挂了，则可以将对象变为无锁状态，然后重新偏向新的线程，如果原来的线程依然存活，则马上执行那个线程的操作栈，检查该对象的使用情况，如果仍然需要持有偏向锁，则偏向锁升级为轻量级锁，（偏向锁就是这个时候升级为轻量级锁的）。如果不存在使用了，则可以将对象回复成无锁状态，然后重新偏向。</p>\r\n<p>轻量级锁认为竞争存在，但是竞争的程度很轻，一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。\r\n但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁膨胀为重量级锁，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。</p>\r\n<p>参考： * <a\r\nhref=\"https://blog.csdn.net/chenssy/article/details/54883355\">【死磕Java并发】-----深入分析synchronized的实现原理</a>\r\n* <a\r\nhref=\"https://www.cnblogs.com/duanxz/p/4967042.html\">java对象在内存中的结构（HotSpot虚拟机）</a>\r\n* <a\r\nhref=\"https://howtodoinjava.com/java/multi-threading/multithreading-difference-between-lock-and-monitor/\">Difference\r\nbetween lock and monitor – Java Concurrency</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"synchronized\">synchronized</h2>\r\n<p>在Java多线程编程中，我们最先碰到的也是最简单的方法就利用<code>synchronized</code>关键字。用它的方式有三种：\r\n* 修饰实例方法，锁是当前实例对象 *\r\n修饰静态方法，锁是当前类的class对象（每个类都有一个Class对象） *\r\n修饰代码块，锁定括号里的对象</p>\r\n<p>加上<code>synchronized</code>之后，我们的代码就变成了同步代码，神奇又强大，但有的时候也不禁会思考下：Java底层是怎么实现<code>synchronized</code>关键字的？<br />\r\n在阅读了一些文章之后，我在这里做了一些归纳和总结。</p>","more":"<p>首先，看一段简单的Java代码： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SyncTest &#123;</span><br><span class=\"line\">    public synchronized void test1()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void test2()&#123;</span><br><span class=\"line\">        synchronized (this)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n先用<code>javac SyncTest.java</code>编译出class文件，再利用<code>javap -v -c SyncTest.class</code>查看<code>synchronized</code>的实现。<code>javap</code>是jdk自带的反解析工具。它的作用就是根据class字节码文件，反解析出当前类对应的code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等等信息。<br />\r\n反解析结果为： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public synchronized void test1();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=0, locals=1, args_size=1</span><br><span class=\"line\">         0: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 4: 0</span><br><span class=\"line\"></span><br><span class=\"line\">  public void test2();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=3, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: dup</span><br><span class=\"line\">         2: astore_1</span><br><span class=\"line\">         3: monitorenter          // 监视器进入，获取锁</span><br><span class=\"line\">         4: aload_1</span><br><span class=\"line\">         5: monitorexit           // 监视器退出，释放锁</span><br><span class=\"line\">         6: goto          14</span><br><span class=\"line\">         9: astore_2</span><br><span class=\"line\">        10: aload_1</span><br><span class=\"line\">        11: monitorexit</span><br><span class=\"line\">        12: aload_2</span><br><span class=\"line\">        13: athrow</span><br><span class=\"line\">        14: return</span><br><span class=\"line\">      Exception table:</span><br><span class=\"line\">         from    to  target type</span><br><span class=\"line\">             4     6     9   any</span><br><span class=\"line\">             9    12     9   any</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 7: 0</span><br><span class=\"line\">        line 9: 4</span><br><span class=\"line\">        line 10: 14</span><br><span class=\"line\">      StackMapTable: number_of_entries = 2</span><br><span class=\"line\">        frame_type = 255 /* full_frame */</span><br><span class=\"line\">          offset_delta = 9</span><br><span class=\"line\">          locals = [ class SyncTest, class java/lang/Object ]</span><br><span class=\"line\">          stack = [ class java/lang/Throwable ]</span><br><span class=\"line\">        frame_type = 250 /* chop */</span><br><span class=\"line\">          offset_delta = 4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: &quot;SyncTest.java&quot;</span><br></pre></td></tr></table></figure></p>\r\n<p>从上面可以看出，同步代码块是使用monitorenter和monitorexit指令实现的，同步方法（在这看不出来需要看JVM底层实现）依靠的是方法修饰符上的<code>ACC_SYNCHRONIZED实现</code>。</p>\r\n<h2 id=\"java对象头\">Java对象头</h2>\r\n<p>Java对象头和monitor是实现synchronized的基础。<br />\r\nHotSpot虚拟机中，对象在内存中存储的布局可以分为三块区域：对象头（Header）、实例数据（Instance\r\nData）和对齐填充（Padding）。</p>\r\n<p><img src=\"https://s2.ax1x.com/2020/03/01/3gzdxg.png\" /><br />\r\n普通对象的对象头包括两部分：Mark Word 和 Class Metadata Address\r\n（类型指针）（如上图所示），如果是数组对象还包括一个额外的Array\r\nlength数组长度部分（这里我没给出图片）。</p>\r\n<p>在32位虚拟机中，一字宽等于四字节，即32bit。<br />\r\nHotSpot虚拟机的对象头(Object\r\nHeader)包括两部分信息，第一部分用于存储对象自身的运行时数据，\r\n如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等等，这部分数据的长度在32位和64位的虚拟机（暂不考虑开启压缩指针的场景）中分别为32个和64个Bits，官方称它为“Mark\r\nWord”（标记字段）。</p>\r\n<p>对象需要存储的运行时数据很多，其实已经超出了32、64位Bitmap结构所能记录的限度，但是对象头信息是与对象自身定义的数据无关的额\r\n外存储成本，考虑到虚拟机的空间效率，Mark\r\nWord被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，它会根据对象的状态复用自己的存储空间。例如在32位的HotSpot虚拟机\r\n中对象未被锁定的状态下，Mark\r\nWord的32个Bits空间中的25Bits用于存储对象哈希码（HashCode），4Bits用于存储对象分代年龄，2Bits用于存储锁标志\r\n位，1Bit固定为0，在其他状态（轻量级锁定、重量级锁定、GC标记、可偏向）下对象的存储内容如下表所示：</p>\r\n<p><img src=\"https://s2.ax1x.com/2020/03/01/32ClfP.jpg\" /></p>\r\n<p>注意偏向锁、轻量级锁、重量级锁等都是jdk 1.6以后引入的。<br />\r\n<img src=\"https://s2.ax1x.com/2020/03/01/32iYIs.png\" /></p>\r\n<h2 id=\"monitor对象\">monitor对象</h2>\r\n<p>轻量级锁和偏向锁是Java 6 对 synchronized\r\n锁进行优化后新增加的，稍后我们会简要分析。这里我们主要分析一下重量级锁也就是通常说<code>synchronized</code>的对象锁，锁标识位为10，其中指针指向的是monitor对象（也称为管程或监视器锁）的起始地址。每个对象都存在着一个\r\nmonitor 与之关联，对象与其 monitor\r\n之间的关系有存在多种实现方式，如monitor可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个\r\nmonitor\r\n被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectMonitor() &#123;</span><br><span class=\"line\">    _header       = NULL;</span><br><span class=\"line\">    _count        = 0; //记录个数</span><br><span class=\"line\">    _waiters      = 0,</span><br><span class=\"line\">    _recursions   = 0;</span><br><span class=\"line\">    _object       = NULL;</span><br><span class=\"line\">    _owner        = NULL;</span><br><span class=\"line\">    _WaitSet      = NULL; //处于wait状态的线程，会被加入到_WaitSet</span><br><span class=\"line\">    _WaitSetLock  = 0 ;</span><br><span class=\"line\">    _Responsible  = NULL ;</span><br><span class=\"line\">    _succ         = NULL ;</span><br><span class=\"line\">    _cxq          = NULL ;</span><br><span class=\"line\">    FreeNext      = NULL ;</span><br><span class=\"line\">    _EntryList    = NULL ; //处于等待锁block状态的线程，会被加入到该列表</span><br><span class=\"line\">    _SpinFreq     = 0 ;</span><br><span class=\"line\">    _SpinClock    = 0 ;</span><br><span class=\"line\">    OwnerIsThread = 0 ;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>ObjectMonitor中有两个队列，_WaitSet和_EntryList，用来保存ObjectWaiter对象列表(每个等待锁的线程都会被封装成ObjectWaiter对象)，_owner指向持有ObjectMonitor对象的线程，当多个线程同时访问一段同步代码时，首先会进入\r\n_EntryList 集合，当线程获取到对象的monitor 后进入 _Owner\r\n区域并把monitor中的owner变量设置为当前线程同时monitor中的计数器count加1，若线程调用wait()方法，将释放当前持有的monitor，owner变量恢复为null，count自减1，同时该线程进入WaitSet集合中等待被唤醒。若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)。如下图所示：</p>\r\n<p><img src=\"https://s2.ax1x.com/2020/03/06/3qfHBQ.gif\" /></p>\r\n<h2 id=\"锁优化\">锁优化</h2>\r\n<p>从上一节看出，<code>synchronized</code>的实现依赖于与某个对象向关联的monitor（监视器）实现，而monitor是基于底层操作系统的<a\r\nhref=\"https://en.cppreference.com/w/cpp/thread/mutex\">Mutex\r\nLock</a>实现的，而基于Mutex\r\nLock实现的同步必须经历从用户态到核心态的转换，这个开销特别大，成本非常高。所以频繁的通过Synchronized实现同步会严重影响到程序效率，而这种依赖于<code>Mutex Lock</code>实现的锁机制也被称为“重量级锁”，为了减少重量级锁带来的性能开销，JDK对<code>synchronized</code>进行了种种优化。</p>\r\n<p>Java\r\nSE1.6为了减少获得锁和释放锁所带来的性能消耗，引入了“偏向锁”和“轻量级锁”，所以在Java\r\nSE1.6里锁一共有四种状态，无锁状态，偏向锁状态，轻量级锁状态和重量级锁状态，它会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。</p>\r\n<h3 id=\"偏向锁\">偏向锁</h3>\r\n<p>Hotspot的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。<br />\r\n<img src=\"https://s1.ax1x.com/2020/03/19/8sdygH.png\" /></p>\r\n<p><strong>获取锁：</strong><br />\r\n1. 检测Mark Word是否为可偏向状态，即是否为偏向锁1，锁标识位为01； 2.\r\n若为可偏向状态，则测试线程ID是否为当前线程ID，如果是，则执行步骤（5），否则执行步骤（3）；\r\n3. 如果线程ID不为当前线程ID，则通过CAS操作竞争锁，竞争成功，则将Mark\r\nWord的线程ID替换为当前线程ID，否则执行线程（4）； 4.\r\n通过CAS竞争锁失败，证明当前存在多线程竞争情况，当到达全局安全点，获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块；\r\n5. 执行同步代码块</p>\r\n<p><strong>释放锁：</strong>\r\n偏向锁的释放采用了一种只有竞争才会释放锁的机制，线程是不会主动去释放偏向锁，需要等待其他线程来竞争。偏向锁的撤销需要等待全局安全点（这个时间点是上没有正在执行的代码）。其步骤如下：</p>\r\n<ul>\r\n<li>暂停拥有偏向锁的线程，判断锁对象石是否还处于被锁定状态；</li>\r\n<li>撤销偏向苏，恢复到无锁状态（01）或者轻量级锁的状态；</li>\r\n</ul>\r\n<h3 id=\"轻量级锁\">轻量级锁</h3>\r\n<p>引入轻量级锁的主要目的是在多没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。\r\n当关闭偏向锁功能或者多个线程竞争偏向锁导致偏向锁升级为轻量级锁，则会尝试获取轻量级锁，其步骤如下：<br />\r\n<img src=\"https://s1.ax1x.com/2020/03/19/8saew6.png\" /></p>\r\n<p><strong>获取锁：</strong></p>\r\n<ol type=\"1\">\r\n<li>判断当前对象是否处于无锁状态（hashcode、0、01），若是，则JVM首先将在当前线程的栈帧中建立一个名为锁记录（Lock\r\nRecord）的空间，用于存储锁对象目前的Mark\r\nWord的拷贝（官方把这份拷贝加了一个Displaced前缀，即Displaced Mark\r\nWord）；否则执行步骤（3）；</li>\r\n<li>JVM利用CAS操作尝试将对象的Mark Word更新为指向Lock\r\nRecord的指正，如果成功表示竞争到锁，则将锁标志位变成00（表示此对象处于轻量级锁状态），执行同步操作；如果失败则执行步骤（3）；</li>\r\n<li>判断当前对象的Mark\r\nWord是否指向当前线程的栈帧，如果是则表示当前线程已经持有当前对象的锁，则直接执行同步代码块；否则只能说明该锁对象已经被其他线程抢占了，这时轻量级锁需要膨胀为重量级锁，锁标志位变成10，后面等待的线程将会进入阻塞状态；</li>\r\n</ol>\r\n<p><strong>释放锁：</strong><br />\r\n轻量级锁的释放也是通过CAS操作来进行的，主要步骤如下：</p>\r\n<ol type=\"1\">\r\n<li>取出在获取轻量级锁保存在Displaced Mark Word中的数据；</li>\r\n<li>用CAS操作将取出的数据替换当前对象的Mark\r\nWord中，如果成功，则说明释放锁成功，否则执行（3）；</li>\r\n<li>如果CAS操作替换失败，说明有其他线程尝试获取该锁，则需要在释放锁的同时需要唤醒被挂起的线程。</li>\r\n</ol>\r\n<p>轻量级锁状态时，位置被锁指针占用，那hashCode等信息要存到哪里？这里的问题就比较简单了，因为有拷贝的mark\r\nword，所以Displaced Mark Word中存在所需要的信息。</p>\r\n<h3 id=\"重量级锁\">重量级锁</h3>\r\n<p>重量级锁通过对象内部的监视器（monitor）实现，其中monitor的本质是依赖于底层操作系统的Mutex\r\nLock实现，操作系统实现线程之间的切换需要从用户态到内核态的切换，切换成本非常高。</p>\r\n<h3 id=\"自旋锁\">自旋锁</h3>\r\n<p>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。自旋是把双刃剑，如果旋的时间过长会影响整体性能，时间过短又达不到延迟阻塞的目的。显然，自旋的周期选择显得非常重要，但这与操作系统、硬件体系、系统的负载等诸多场景相关，很难选择，如果选择不当，不但性能得不到提高，可能还会下降。</p>\r\n<h3 id=\"适应自旋锁\">适应自旋锁</h3>\r\n<p>JDK\r\n1.6引入了更加聪明的自旋锁，即自适应自旋锁。所谓自适应就意味着自旋的次数不再是固定的，它是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。它怎么做呢？线程如果自旋成功了，那么下次自旋的次数会更加多，因为虚拟机认为既然上次成功了，那么此次自旋也很有可能会再次成功，那么它就会允许自旋等待持续的次数更多。反之，如果对于某个锁，很少有自旋能够成功的，那么在以后要或者这个锁的时候自旋的次数会减少甚至省略掉自旋过程，以免浪费处理器资源。</p>\r\n<h3 id=\"锁消除\">锁消除</h3>\r\n<p>为了保证数据的完整性，我们在进行操作时需要对这部分操作进行同步控制，但是在有些情况下，JVM检测到不可能存在共享数据竞争，这是JVM会对这些同步锁进行锁消除。锁消除的依据是逃逸分析的数据支持。\r\n如果不存在竞争，为什么还需要加锁呢？所以锁消除可以节省毫无意义的请求锁的时间。变量是否逃逸，对于虚拟机来说需要使用数据流分析来确定，但是对于我们程序员来说这还不清楚么？我们会在明明知道不存在数据竞争的代码块前加上同步吗？但是有时候程序并不是我们所想的那样？我们虽然没有显示使用锁，但是我们在使用一些JDK的内置API时，如StringBuffer、Vector、HashTable等，这个时候会存在隐形的加锁操作。比如<code>StringBuffer</code>的append()方法，<code>Vector</code>的add()方法。</p>\r\n<h3 id=\"锁的膨胀流程\">锁的膨胀流程</h3>\r\n<p>在前面偏向锁和轻量级锁的小节中已经大概了解的锁的膨胀流程：<br />\r\n偏向锁-&gt;轻量级锁-&gt;重量级锁</p>\r\n<p>偏向所锁，轻量级锁都是乐观锁，重量级锁是悲观锁。</p>\r\n<p>一个对象刚开始实例化的时候，没有任何线程来访问它的时候。它是可偏向的，意味着，它现在认为只可能有一个线程来访问它，所以当第一个线程来访问它的时候，它会偏向这个线程，此时，对象持有偏向锁。</p>\r\n<p>偏向第一个线程，这个线程在修改对象头成为偏向锁的时候使用CAS操作，并将对象头中的ThreadID改成自己的ID，之后再次访问这个对象时，只需要对比ID，不需要再使用CAS在进行操作。</p>\r\n<p>一旦有第二个线程访问这个对象，因为偏向锁不会主动释放，所以第二个线程可以看到对象是偏向状态，这时表明在这个对象上已经存在竞争了，检查原来持有该对象锁的线程是否依然存活，如果挂了，则可以将对象变为无锁状态，然后重新偏向新的线程，如果原来的线程依然存活，则马上执行那个线程的操作栈，检查该对象的使用情况，如果仍然需要持有偏向锁，则偏向锁升级为轻量级锁，（偏向锁就是这个时候升级为轻量级锁的）。如果不存在使用了，则可以将对象回复成无锁状态，然后重新偏向。</p>\r\n<p>轻量级锁认为竞争存在，但是竞争的程度很轻，一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。\r\n但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁膨胀为重量级锁，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。</p>\r\n<p>参考： * <a\r\nhref=\"https://blog.csdn.net/chenssy/article/details/54883355\">【死磕Java并发】-----深入分析synchronized的实现原理</a>\r\n* <a\r\nhref=\"https://www.cnblogs.com/duanxz/p/4967042.html\">java对象在内存中的结构（HotSpot虚拟机）</a>\r\n* <a\r\nhref=\"https://howtodoinjava.com/java/multi-threading/multithreading-difference-between-lock-and-monitor/\">Difference\r\nbetween lock and monitor – Java Concurrency</a></p>"},{"title":"Linux网络虚拟化技术之Veth和Bridge","author":"Salamander","date":"2020-01-14T05:00:00.000Z","_content":"## Veth\nVeth缩写是Virtual ETHernet。veth设备是在linux内核中是成对出现（所以也叫`veth-pair`），两个设备彼此相连，一个设备从协议栈读取数据后，会将数据发送到另一个设备上去。这个设备其实是专门为`container`所建的，作用就是把一个**network namespace**发出的数据包转发到另一个**namespace**（通常就是宿主机）。    \n![](https://s2.ax1x.com/2020/01/14/lbBga9.png)  \n\n<!-- more -->\n\n\n### 添加Veth设备\n```\n$ sudo ip netns add net0\n$ sudo ip netns add net1\n$ sudo ip link add veth0 netns net0 type veth peer name veth1 netns net1 #添加 veth 设备对\n```\n上面的命令将创建两个命名空间net0和net1，以及一对veth设备，并将veth1分配给命名空间net0，将veth2分配给命名空间net1。这两个名称空间与此VETH对相连。分配一对IP地址，你就可以ping通两者之间的通讯。\n\n```\n$ ip netns ls  # 查看创建的network namespace\nnet1\nnet0\n$ sudo ip netns exec net0 ip addr # 查看net0下的网络设备\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: veth0@if2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether d6:6e:4f:fb:6b:76 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n$ sudo ip netns exec net1 ip addr\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: veth1@if2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 92:05:82:e6:da:73 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n```\n我们给这对 veth pair 配置上 ip 地址，并启用它们以及 lo 接口:\n```\nsudo ip netns exec net0 ip link set veth0 up\nsudo ip netns exec net0 ip addr add 10.0.1.1/24 dev veth0\nsudo ip netns exec net0 ip link set lo up\nsudo ip netns exec net0 ip route\n10.0.1.0/24 dev veth0 proto kernel scope link src 10.0.1.1 linkdown \n\n\nsudo ip netns exec net1 ip link set veth1 up\nsudo ip netns exec net1 ip addr add 10.0.1.2/24 dev veth1\nsudo ip netns exec net1 ip link set lo up\nsudo ip netns exec net1 ip route\n10.0.1.0/24 dev veth1 proto kernel scope link src 10.0.1.2\n```\n可以看到，在每个 namespace 中，在配置了 ip 之后，还自动生成了对应的\n路由表信息，网络 10.0.1.0/24 数据报文都会通过 vethpair 进行传输。下面使用 ping 命令 可以验证它们的连通性，并在 veth0 和 veth1 上抓包：\n```\nsudo ip netns exec net0 ping -c 3 10.0.1.2\n```\n![](https://s2.ax1x.com/2020/01/14/lb4nOA.png)\n\n\n## Bridge\nBridge（桥）是 Linux 上用来做 TCP/IP 二层协议交换的设备，与现实世界中的交换机功能相似。Bridge 设备实例可以和 Linux 上其他网络设备实例连接，既 attach 一个从设备，类似于在现实世界中的交换机和一个用户终端之间连接一根网线。当有数据到达时，Bridge 会根据报文中的 MAC 信息进行广播、转发、丢弃处理。\n\n![](https://s2.ax1x.com/2020/01/14/lb48fS.png)\n\n使用Bridge前，需要安装`bridge-utils`包\n```\nsudo apt install bridge-utils\n```\n### 查看bridge\n```\n$ brctl show\n\nbridge name\tbridge id\t\tSTP enabled\tinterfaces\nbr-1f7059361887\t\t8000.0242740c4703\tno\t\tveth35716a0\n\t\t\t\t\t\t\tvethc51a0aa\n\t\t\t\t\t\t\tvethd17adab\nbr-4646ac4e576a\t\t8000.02421afdd01b\tno\t\t\nbr-4b05476c9f71\t\t8000.024240053946\tno\t\t\nbr-5282ac3290df\t\t8000.0242ad5bae1e\tno\t\t\nbr-638972aaac40\t\t8000.024278b6d203\tno\t\t\nbr-67973b91b458\t\t8000.024279f6c039\tno\t\t\nbr-96dbd98373e7\t\t8000.0242f23b4758\tno\t\tveth13b0e48\n\t\t\t\t\t\t\tveth3af358a\n\t\t\t\t\t\t\tveth52b951a\n\t\t\t\t\t\t\tveth5adc514\n\t\t\t\t\t\t\tveth6e141f8\n\t\t\t\t\t\t\tveth6fcb89b\n\t\t\t\t\t\t\tveth710d968\n\t\t\t\t\t\t\tvethc9477cd\n\t\t\t\t\t\t\tvethcf35aff\ndocker0\t\t8000.0242fee4c327\tno\t\t\n```\n上面这个是`docker0`的是Docker给你创建的bridge（如果你设备上装有docker的话 就可以看到）。  \n\n### 创建一个bridge\n```\nbrctl addbr br66\n```\n\n上面命令创建一个名为br66的桥。  \n接下来我们可以把已有的网络设备绑定到这个桥上，在这之前可以看看我们有有哪些网卡接口，可以用\n```\nip addr show\n```\n假设上面查出来，有eth0和eth1两个网卡接口，下面我们把他们用命令绑定到一起\n```\nbrctl addif br0 eth0 eth1 # eth0和eth1的顺序不重要，不影响结果\n```\n再来查看绑定关系\n```\n$ brctl show\nbridge name     bridge id               STP enabled     interfaces\nbr66             8000.001ec952d26b       yes             eth0\n                                                        eth1\n```\n就是说eth0和eth1绑定到了br0这个桥上了。\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 参考文章\n[Linux 上的基础网络设备详解](https://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html)","source":"_posts/Linu_Veth_and_Bridge.md","raw":"title: Linux网络虚拟化技术之Veth和Bridge\nauthor: Salamander\ntags:\n  - linux\n  - network\ncategories:\n  - linux\ndate: 2020-01-14 13:00:00\n---\n## Veth\nVeth缩写是Virtual ETHernet。veth设备是在linux内核中是成对出现（所以也叫`veth-pair`），两个设备彼此相连，一个设备从协议栈读取数据后，会将数据发送到另一个设备上去。这个设备其实是专门为`container`所建的，作用就是把一个**network namespace**发出的数据包转发到另一个**namespace**（通常就是宿主机）。    \n![](https://s2.ax1x.com/2020/01/14/lbBga9.png)  \n\n<!-- more -->\n\n\n### 添加Veth设备\n```\n$ sudo ip netns add net0\n$ sudo ip netns add net1\n$ sudo ip link add veth0 netns net0 type veth peer name veth1 netns net1 #添加 veth 设备对\n```\n上面的命令将创建两个命名空间net0和net1，以及一对veth设备，并将veth1分配给命名空间net0，将veth2分配给命名空间net1。这两个名称空间与此VETH对相连。分配一对IP地址，你就可以ping通两者之间的通讯。\n\n```\n$ ip netns ls  # 查看创建的network namespace\nnet1\nnet0\n$ sudo ip netns exec net0 ip addr # 查看net0下的网络设备\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: veth0@if2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether d6:6e:4f:fb:6b:76 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n\n$ sudo ip netns exec net1 ip addr\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: veth1@if2: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 92:05:82:e6:da:73 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n```\n我们给这对 veth pair 配置上 ip 地址，并启用它们以及 lo 接口:\n```\nsudo ip netns exec net0 ip link set veth0 up\nsudo ip netns exec net0 ip addr add 10.0.1.1/24 dev veth0\nsudo ip netns exec net0 ip link set lo up\nsudo ip netns exec net0 ip route\n10.0.1.0/24 dev veth0 proto kernel scope link src 10.0.1.1 linkdown \n\n\nsudo ip netns exec net1 ip link set veth1 up\nsudo ip netns exec net1 ip addr add 10.0.1.2/24 dev veth1\nsudo ip netns exec net1 ip link set lo up\nsudo ip netns exec net1 ip route\n10.0.1.0/24 dev veth1 proto kernel scope link src 10.0.1.2\n```\n可以看到，在每个 namespace 中，在配置了 ip 之后，还自动生成了对应的\n路由表信息，网络 10.0.1.0/24 数据报文都会通过 vethpair 进行传输。下面使用 ping 命令 可以验证它们的连通性，并在 veth0 和 veth1 上抓包：\n```\nsudo ip netns exec net0 ping -c 3 10.0.1.2\n```\n![](https://s2.ax1x.com/2020/01/14/lb4nOA.png)\n\n\n## Bridge\nBridge（桥）是 Linux 上用来做 TCP/IP 二层协议交换的设备，与现实世界中的交换机功能相似。Bridge 设备实例可以和 Linux 上其他网络设备实例连接，既 attach 一个从设备，类似于在现实世界中的交换机和一个用户终端之间连接一根网线。当有数据到达时，Bridge 会根据报文中的 MAC 信息进行广播、转发、丢弃处理。\n\n![](https://s2.ax1x.com/2020/01/14/lb48fS.png)\n\n使用Bridge前，需要安装`bridge-utils`包\n```\nsudo apt install bridge-utils\n```\n### 查看bridge\n```\n$ brctl show\n\nbridge name\tbridge id\t\tSTP enabled\tinterfaces\nbr-1f7059361887\t\t8000.0242740c4703\tno\t\tveth35716a0\n\t\t\t\t\t\t\tvethc51a0aa\n\t\t\t\t\t\t\tvethd17adab\nbr-4646ac4e576a\t\t8000.02421afdd01b\tno\t\t\nbr-4b05476c9f71\t\t8000.024240053946\tno\t\t\nbr-5282ac3290df\t\t8000.0242ad5bae1e\tno\t\t\nbr-638972aaac40\t\t8000.024278b6d203\tno\t\t\nbr-67973b91b458\t\t8000.024279f6c039\tno\t\t\nbr-96dbd98373e7\t\t8000.0242f23b4758\tno\t\tveth13b0e48\n\t\t\t\t\t\t\tveth3af358a\n\t\t\t\t\t\t\tveth52b951a\n\t\t\t\t\t\t\tveth5adc514\n\t\t\t\t\t\t\tveth6e141f8\n\t\t\t\t\t\t\tveth6fcb89b\n\t\t\t\t\t\t\tveth710d968\n\t\t\t\t\t\t\tvethc9477cd\n\t\t\t\t\t\t\tvethcf35aff\ndocker0\t\t8000.0242fee4c327\tno\t\t\n```\n上面这个是`docker0`的是Docker给你创建的bridge（如果你设备上装有docker的话 就可以看到）。  \n\n### 创建一个bridge\n```\nbrctl addbr br66\n```\n\n上面命令创建一个名为br66的桥。  \n接下来我们可以把已有的网络设备绑定到这个桥上，在这之前可以看看我们有有哪些网卡接口，可以用\n```\nip addr show\n```\n假设上面查出来，有eth0和eth1两个网卡接口，下面我们把他们用命令绑定到一起\n```\nbrctl addif br0 eth0 eth1 # eth0和eth1的顺序不重要，不影响结果\n```\n再来查看绑定关系\n```\n$ brctl show\nbridge name     bridge id               STP enabled     interfaces\nbr66             8000.001ec952d26b       yes             eth0\n                                                        eth1\n```\n就是说eth0和eth1绑定到了br0这个桥上了。\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 参考文章\n[Linux 上的基础网络设备详解](https://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html)","slug":"Linu_Veth_and_Bridge","published":1,"updated":"2023-03-21T02:48:19.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l0000v2o3m2h2g56s2","content":"<h2 id=\"veth\">Veth</h2>\r\n<p>Veth缩写是Virtual\r\nETHernet。veth设备是在linux内核中是成对出现（所以也叫<code>veth-pair</code>），两个设备彼此相连，一个设备从协议栈读取数据后，会将数据发送到另一个设备上去。这个设备其实是专门为<code>container</code>所建的，作用就是把一个<strong>network\r\nnamespace</strong>发出的数据包转发到另一个<strong>namespace</strong>（通常就是宿主机）。<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/14/lbBga9.png\" /></p>\r\n<span id=\"more\"></span>\r\n<h3 id=\"添加veth设备\">添加Veth设备</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ip netns add net0</span><br><span class=\"line\">$ sudo ip netns add net1</span><br><span class=\"line\">$ sudo ip link add veth0 netns net0 type veth peer name veth1 netns net1 #添加 veth 设备对</span><br></pre></td></tr></table></figure>\r\n<p>上面的命令将创建两个命名空间net0和net1，以及一对veth设备，并将veth1分配给命名空间net0，将veth2分配给命名空间net1。这两个名称空间与此VETH对相连。分配一对IP地址，你就可以ping通两者之间的通讯。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip netns ls  # 查看创建的network namespace</span><br><span class=\"line\">net1</span><br><span class=\"line\">net0</span><br><span class=\"line\">$ sudo ip netns exec net0 ip addr # 查看net0下的网络设备</span><br><span class=\"line\">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">2: veth0@if2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether d6:6e:4f:fb:6b:76 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo ip netns exec net1 ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">2: veth1@if2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 92:05:82:e6:da:73 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></table></figure>\r\n<p>我们给这对 veth pair 配置上 ip 地址，并启用它们以及 lo 接口:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec net0 ip link set veth0 up</span><br><span class=\"line\">sudo ip netns exec net0 ip addr add 10.0.1.1/24 dev veth0</span><br><span class=\"line\">sudo ip netns exec net0 ip link set lo up</span><br><span class=\"line\">sudo ip netns exec net0 ip route</span><br><span class=\"line\">10.0.1.0/24 dev veth0 proto kernel scope link src 10.0.1.1 linkdown </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo ip netns exec net1 ip link set veth1 up</span><br><span class=\"line\">sudo ip netns exec net1 ip addr add 10.0.1.2/24 dev veth1</span><br><span class=\"line\">sudo ip netns exec net1 ip link set lo up</span><br><span class=\"line\">sudo ip netns exec net1 ip route</span><br><span class=\"line\">10.0.1.0/24 dev veth1 proto kernel scope link src 10.0.1.2</span><br></pre></td></tr></table></figure> 可以看到，在每个 namespace 中，在配置了 ip\r\n之后，还自动生成了对应的 路由表信息，网络 10.0.1.0/24 数据报文都会通过\r\nvethpair 进行传输。下面使用 ping 命令 可以验证它们的连通性，并在 veth0\r\n和 veth1 上抓包： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec net0 ping -c 3 10.0.1.2</span><br></pre></td></tr></table></figure> <img\r\nsrc=\"https://s2.ax1x.com/2020/01/14/lb4nOA.png\" /></p>\r\n<h2 id=\"bridge\">Bridge</h2>\r\n<p>Bridge（桥）是 Linux 上用来做 TCP/IP\r\n二层协议交换的设备，与现实世界中的交换机功能相似。Bridge 设备实例可以和\r\nLinux 上其他网络设备实例连接，既 attach\r\n一个从设备，类似于在现实世界中的交换机和一个用户终端之间连接一根网线。当有数据到达时，Bridge\r\n会根据报文中的 MAC 信息进行广播、转发、丢弃处理。</p>\r\n<p><img src=\"https://s2.ax1x.com/2020/01/14/lb48fS.png\" /></p>\r\n<p>使用Bridge前，需要安装<code>bridge-utils</code>包 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install bridge-utils</span><br></pre></td></tr></table></figure> ###\r\n查看bridge <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brctl show</span><br><span class=\"line\"></span><br><span class=\"line\">bridge name\tbridge id\t\tSTP enabled\tinterfaces</span><br><span class=\"line\">br-1f7059361887\t\t8000.0242740c4703\tno\t\tveth35716a0</span><br><span class=\"line\">\t\t\t\t\t\t\tvethc51a0aa</span><br><span class=\"line\">\t\t\t\t\t\t\tvethd17adab</span><br><span class=\"line\">br-4646ac4e576a\t\t8000.02421afdd01b\tno\t\t</span><br><span class=\"line\">br-4b05476c9f71\t\t8000.024240053946\tno\t\t</span><br><span class=\"line\">br-5282ac3290df\t\t8000.0242ad5bae1e\tno\t\t</span><br><span class=\"line\">br-638972aaac40\t\t8000.024278b6d203\tno\t\t</span><br><span class=\"line\">br-67973b91b458\t\t8000.024279f6c039\tno\t\t</span><br><span class=\"line\">br-96dbd98373e7\t\t8000.0242f23b4758\tno\t\tveth13b0e48</span><br><span class=\"line\">\t\t\t\t\t\t\tveth3af358a</span><br><span class=\"line\">\t\t\t\t\t\t\tveth52b951a</span><br><span class=\"line\">\t\t\t\t\t\t\tveth5adc514</span><br><span class=\"line\">\t\t\t\t\t\t\tveth6e141f8</span><br><span class=\"line\">\t\t\t\t\t\t\tveth6fcb89b</span><br><span class=\"line\">\t\t\t\t\t\t\tveth710d968</span><br><span class=\"line\">\t\t\t\t\t\t\tvethc9477cd</span><br><span class=\"line\">\t\t\t\t\t\t\tvethcf35aff</span><br><span class=\"line\">docker0\t\t8000.0242fee4c327\tno\t\t</span><br></pre></td></tr></table></figure>\r\n上面这个是<code>docker0</code>的是Docker给你创建的bridge（如果你设备上装有docker的话\r\n就可以看到）。</p>\r\n<h3 id=\"创建一个bridge\">创建一个bridge</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brctl addbr br66</span><br></pre></td></tr></table></figure>\r\n<p>上面命令创建一个名为br66的桥。<br />\r\n接下来我们可以把已有的网络设备绑定到这个桥上，在这之前可以看看我们有有哪些网卡接口，可以用\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr show</span><br></pre></td></tr></table></figure>\r\n假设上面查出来，有eth0和eth1两个网卡接口，下面我们把他们用命令绑定到一起\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brctl addif br0 eth0 eth1 # eth0和eth1的顺序不重要，不影响结果</span><br></pre></td></tr></table></figure> 再来查看绑定关系 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brctl show</span><br><span class=\"line\">bridge name     bridge id               STP enabled     interfaces</span><br><span class=\"line\">br66             8000.001ec952d26b       yes             eth0</span><br><span class=\"line\">                                                        eth1</span><br></pre></td></tr></table></figure>\r\n就是说eth0和eth1绑定到了br0这个桥上了。</p>\r\n<h2 id=\"参考文章\">参考文章</h2>\r\n<p><a\r\nhref=\"https://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html\">Linux\r\n上的基础网络设备详解</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"veth\">Veth</h2>\r\n<p>Veth缩写是Virtual\r\nETHernet。veth设备是在linux内核中是成对出现（所以也叫<code>veth-pair</code>），两个设备彼此相连，一个设备从协议栈读取数据后，会将数据发送到另一个设备上去。这个设备其实是专门为<code>container</code>所建的，作用就是把一个<strong>network\r\nnamespace</strong>发出的数据包转发到另一个<strong>namespace</strong>（通常就是宿主机）。<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/14/lbBga9.png\" /></p>","more":"<h3 id=\"添加veth设备\">添加Veth设备</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ip netns add net0</span><br><span class=\"line\">$ sudo ip netns add net1</span><br><span class=\"line\">$ sudo ip link add veth0 netns net0 type veth peer name veth1 netns net1 #添加 veth 设备对</span><br></pre></td></tr></table></figure>\r\n<p>上面的命令将创建两个命名空间net0和net1，以及一对veth设备，并将veth1分配给命名空间net0，将veth2分配给命名空间net1。这两个名称空间与此VETH对相连。分配一对IP地址，你就可以ping通两者之间的通讯。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ip netns ls  # 查看创建的network namespace</span><br><span class=\"line\">net1</span><br><span class=\"line\">net0</span><br><span class=\"line\">$ sudo ip netns exec net0 ip addr # 查看net0下的网络设备</span><br><span class=\"line\">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">2: veth0@if2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether d6:6e:4f:fb:6b:76 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo ip netns exec net1 ip addr</span><br><span class=\"line\">1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">2: veth1@if2: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 92:05:82:e6:da:73 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></table></figure>\r\n<p>我们给这对 veth pair 配置上 ip 地址，并启用它们以及 lo 接口:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec net0 ip link set veth0 up</span><br><span class=\"line\">sudo ip netns exec net0 ip addr add 10.0.1.1/24 dev veth0</span><br><span class=\"line\">sudo ip netns exec net0 ip link set lo up</span><br><span class=\"line\">sudo ip netns exec net0 ip route</span><br><span class=\"line\">10.0.1.0/24 dev veth0 proto kernel scope link src 10.0.1.1 linkdown </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo ip netns exec net1 ip link set veth1 up</span><br><span class=\"line\">sudo ip netns exec net1 ip addr add 10.0.1.2/24 dev veth1</span><br><span class=\"line\">sudo ip netns exec net1 ip link set lo up</span><br><span class=\"line\">sudo ip netns exec net1 ip route</span><br><span class=\"line\">10.0.1.0/24 dev veth1 proto kernel scope link src 10.0.1.2</span><br></pre></td></tr></table></figure> 可以看到，在每个 namespace 中，在配置了 ip\r\n之后，还自动生成了对应的 路由表信息，网络 10.0.1.0/24 数据报文都会通过\r\nvethpair 进行传输。下面使用 ping 命令 可以验证它们的连通性，并在 veth0\r\n和 veth1 上抓包： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec net0 ping -c 3 10.0.1.2</span><br></pre></td></tr></table></figure> <img\r\nsrc=\"https://s2.ax1x.com/2020/01/14/lb4nOA.png\" /></p>\r\n<h2 id=\"bridge\">Bridge</h2>\r\n<p>Bridge（桥）是 Linux 上用来做 TCP/IP\r\n二层协议交换的设备，与现实世界中的交换机功能相似。Bridge 设备实例可以和\r\nLinux 上其他网络设备实例连接，既 attach\r\n一个从设备，类似于在现实世界中的交换机和一个用户终端之间连接一根网线。当有数据到达时，Bridge\r\n会根据报文中的 MAC 信息进行广播、转发、丢弃处理。</p>\r\n<p><img src=\"https://s2.ax1x.com/2020/01/14/lb48fS.png\" /></p>\r\n<p>使用Bridge前，需要安装<code>bridge-utils</code>包 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install bridge-utils</span><br></pre></td></tr></table></figure> ###\r\n查看bridge <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brctl show</span><br><span class=\"line\"></span><br><span class=\"line\">bridge name\tbridge id\t\tSTP enabled\tinterfaces</span><br><span class=\"line\">br-1f7059361887\t\t8000.0242740c4703\tno\t\tveth35716a0</span><br><span class=\"line\">\t\t\t\t\t\t\tvethc51a0aa</span><br><span class=\"line\">\t\t\t\t\t\t\tvethd17adab</span><br><span class=\"line\">br-4646ac4e576a\t\t8000.02421afdd01b\tno\t\t</span><br><span class=\"line\">br-4b05476c9f71\t\t8000.024240053946\tno\t\t</span><br><span class=\"line\">br-5282ac3290df\t\t8000.0242ad5bae1e\tno\t\t</span><br><span class=\"line\">br-638972aaac40\t\t8000.024278b6d203\tno\t\t</span><br><span class=\"line\">br-67973b91b458\t\t8000.024279f6c039\tno\t\t</span><br><span class=\"line\">br-96dbd98373e7\t\t8000.0242f23b4758\tno\t\tveth13b0e48</span><br><span class=\"line\">\t\t\t\t\t\t\tveth3af358a</span><br><span class=\"line\">\t\t\t\t\t\t\tveth52b951a</span><br><span class=\"line\">\t\t\t\t\t\t\tveth5adc514</span><br><span class=\"line\">\t\t\t\t\t\t\tveth6e141f8</span><br><span class=\"line\">\t\t\t\t\t\t\tveth6fcb89b</span><br><span class=\"line\">\t\t\t\t\t\t\tveth710d968</span><br><span class=\"line\">\t\t\t\t\t\t\tvethc9477cd</span><br><span class=\"line\">\t\t\t\t\t\t\tvethcf35aff</span><br><span class=\"line\">docker0\t\t8000.0242fee4c327\tno\t\t</span><br></pre></td></tr></table></figure>\r\n上面这个是<code>docker0</code>的是Docker给你创建的bridge（如果你设备上装有docker的话\r\n就可以看到）。</p>\r\n<h3 id=\"创建一个bridge\">创建一个bridge</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brctl addbr br66</span><br></pre></td></tr></table></figure>\r\n<p>上面命令创建一个名为br66的桥。<br />\r\n接下来我们可以把已有的网络设备绑定到这个桥上，在这之前可以看看我们有有哪些网卡接口，可以用\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr show</span><br></pre></td></tr></table></figure>\r\n假设上面查出来，有eth0和eth1两个网卡接口，下面我们把他们用命令绑定到一起\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brctl addif br0 eth0 eth1 # eth0和eth1的顺序不重要，不影响结果</span><br></pre></td></tr></table></figure> 再来查看绑定关系 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brctl show</span><br><span class=\"line\">bridge name     bridge id               STP enabled     interfaces</span><br><span class=\"line\">br66             8000.001ec952d26b       yes             eth0</span><br><span class=\"line\">                                                        eth1</span><br></pre></td></tr></table></figure>\r\n就是说eth0和eth1绑定到了br0这个桥上了。</p>\r\n<h2 id=\"参考文章\">参考文章</h2>\r\n<p><a\r\nhref=\"https://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html\">Linux\r\n上的基础网络设备详解</a></p>"},{"title":"Jenkins在Docker中运行中的坑","author":"Salamander","date":"2019-11-07T12:00:00.000Z","_content":"## jenkins是什么？\n  Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。  \n上面的介绍是抄的（逃，简单讲，就是Jenkins能帮我们**自动编译，测试，发布软件**。\n\n<!-- more -->\n\n\n## 安装运行\nJenkins有单独的war包，通过`java -jar jenkins.war`直接就可以运行（[官网下载](https://jenkins.io/zh/download/)，选择`Generic Java package (.war)`，或者[官方镜像](http://mirrors.jenkins.io/)），选择LTS Releases\t中的`war-stable`），但是jre环境，当然对于熟悉Java的人来说，这个是配置一下即可。本文介绍在Docker中运行Jenkins以及会遇到的一些问题。  \n* 操作系统：Ubuntu 18.04.3 LTS\n* docker版本：19.03.4\n* jdk版本：java version \"1.8.0_221\"\n\n在`vim`中打开中文有时候会乱码，可以通过下面命令解决：\n```\nsudo locale-gen zh_CN.UTF-8\n```\n好了，让我们开始安装`Jenkins`。  \n首先，编写一份自定义的`Dockerfile`：\n```\nFROM jenkins/jenkins:lts\n\nUSER root\n\nRUN echo ' \\n\\\ndeb http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\\ndeb http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\\ndeb http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free ' > /etc/apt/sources.list\n\nRUN cat /etc/apt/sources.list\n\n#更新源并安装缺少的包\nRUN apt-get update && apt-get install -y gcc g++ make openssl pkg-config\n\n\nUSER jenkins\n```\n基础镜像是`jenkins/jenkins:lts`，观察一下这个镜像\n![](https://s2.ax1x.com/2019/11/07/MAz11g.png)  \n发现它是基于`FROM openjdk:8-jdk-stretch`，这是带有jdk的debian 9镜像。所以我在`Dockerfile`中修改了apt源，这里使用了阿里云的apt源（`\\n\\`是换行加上续行符）。\n\n再配合`docker-compose.yml`：\n```\nversion: '3'\nservices:\n  jenkins:\n    build: .\n    volumes:\n      - ./data:/var/jenkins_home\n    environment:\n      - \"JAVA_OPTS=-Duser.timezone=Asia/Shanghai -Xms1g -Xmx1g\"\n    ports: \n      - 127.0.0.1:8080:8080\n      - 50000:50000\n```\n现在我们就可以启动Jenkins了，打开终端，键入命令：\n```\ndocker-compose up\n```\n这时候，我们会遇到错误：\n```\njenkins_1  | touch: cannot touch '/var/jenkins_home/copy_reference_file.log': Permission denied\njenkins_1  | Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?\n```\n看描述是**权限问题**，观察一下目录下的`data`文件夹：\n```\ndrwxr-xr-x  2 root       root       4096 11月 17 20:47 data\n```\n发现目录的属主是`root`用户，这是什么原因呢？\n\n## 原因探究\n查看`Jenkins`容器的当前用户和目录`/var/jenkins_home`属主，我们发现当前用户是`Jenkins`，`/var/jenkins_home`属主用户是`jenkins`：\n```\ndocker run -ti --rm --entrypoint=\"/bin/bash\"  jenkins/jenkins:lts  -c \"whoami && id\"\njenkins\nuid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins)\n\ndocker run -ti --rm --entrypoint=\"/bin/bash\" jenkins/jenkins:lts -c \"ls -la /var\"\ndrwxr-xr-x 1 root    root    4096 Oct 17 08:29 cache\ndrwxr-xr-x 2 jenkins jenkins 4096 Nov 17 14:05 jenkins_home\n\n```\n上述命令中，`--rm`选项是让容器退出时自动清除，`--entrypoint`是覆盖镜像中的`ENTRYPOINT`。  \n现在我们知道了，因为`/var/jenkins_home`映射到本地数据卷时，目录的拥有者变成了root用户，所以出现了`Permission denied`的问题。  \n发现问题之后，相应的解决方法也很简单：把当前目录的拥有者赋值给uid 1000，再启动\"jenkins\"容器就一切正常了。\n```\nsudo chown -R 1000:1000 data\n```\n这时利用浏览器访问 \"http://localhost:8080/\" 就可以看到Jenkins的经典Web界面了。\n\n\n\n\n参考：\n* [谈谈 Docker Volume 之权限管理（一）](https://yq.aliyun.com/articles/53990)","source":"_posts/Jenkin_and_docker.md","raw":"title: Jenkins在Docker中运行中的坑\nauthor: Salamander\ntags:\n  - jenkins\n  - ci\n  - docker\ncategories:\n  - ci\ndate: 2019-11-07 20:00:00\n---\n## jenkins是什么？\n  Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。  \n上面的介绍是抄的（逃，简单讲，就是Jenkins能帮我们**自动编译，测试，发布软件**。\n\n<!-- more -->\n\n\n## 安装运行\nJenkins有单独的war包，通过`java -jar jenkins.war`直接就可以运行（[官网下载](https://jenkins.io/zh/download/)，选择`Generic Java package (.war)`，或者[官方镜像](http://mirrors.jenkins.io/)），选择LTS Releases\t中的`war-stable`），但是jre环境，当然对于熟悉Java的人来说，这个是配置一下即可。本文介绍在Docker中运行Jenkins以及会遇到的一些问题。  \n* 操作系统：Ubuntu 18.04.3 LTS\n* docker版本：19.03.4\n* jdk版本：java version \"1.8.0_221\"\n\n在`vim`中打开中文有时候会乱码，可以通过下面命令解决：\n```\nsudo locale-gen zh_CN.UTF-8\n```\n好了，让我们开始安装`Jenkins`。  \n首先，编写一份自定义的`Dockerfile`：\n```\nFROM jenkins/jenkins:lts\n\nUSER root\n\nRUN echo ' \\n\\\ndeb http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\\ndeb http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\\ndeb http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free \\n\\\ndeb-src http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free ' > /etc/apt/sources.list\n\nRUN cat /etc/apt/sources.list\n\n#更新源并安装缺少的包\nRUN apt-get update && apt-get install -y gcc g++ make openssl pkg-config\n\n\nUSER jenkins\n```\n基础镜像是`jenkins/jenkins:lts`，观察一下这个镜像\n![](https://s2.ax1x.com/2019/11/07/MAz11g.png)  \n发现它是基于`FROM openjdk:8-jdk-stretch`，这是带有jdk的debian 9镜像。所以我在`Dockerfile`中修改了apt源，这里使用了阿里云的apt源（`\\n\\`是换行加上续行符）。\n\n再配合`docker-compose.yml`：\n```\nversion: '3'\nservices:\n  jenkins:\n    build: .\n    volumes:\n      - ./data:/var/jenkins_home\n    environment:\n      - \"JAVA_OPTS=-Duser.timezone=Asia/Shanghai -Xms1g -Xmx1g\"\n    ports: \n      - 127.0.0.1:8080:8080\n      - 50000:50000\n```\n现在我们就可以启动Jenkins了，打开终端，键入命令：\n```\ndocker-compose up\n```\n这时候，我们会遇到错误：\n```\njenkins_1  | touch: cannot touch '/var/jenkins_home/copy_reference_file.log': Permission denied\njenkins_1  | Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?\n```\n看描述是**权限问题**，观察一下目录下的`data`文件夹：\n```\ndrwxr-xr-x  2 root       root       4096 11月 17 20:47 data\n```\n发现目录的属主是`root`用户，这是什么原因呢？\n\n## 原因探究\n查看`Jenkins`容器的当前用户和目录`/var/jenkins_home`属主，我们发现当前用户是`Jenkins`，`/var/jenkins_home`属主用户是`jenkins`：\n```\ndocker run -ti --rm --entrypoint=\"/bin/bash\"  jenkins/jenkins:lts  -c \"whoami && id\"\njenkins\nuid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins)\n\ndocker run -ti --rm --entrypoint=\"/bin/bash\" jenkins/jenkins:lts -c \"ls -la /var\"\ndrwxr-xr-x 1 root    root    4096 Oct 17 08:29 cache\ndrwxr-xr-x 2 jenkins jenkins 4096 Nov 17 14:05 jenkins_home\n\n```\n上述命令中，`--rm`选项是让容器退出时自动清除，`--entrypoint`是覆盖镜像中的`ENTRYPOINT`。  \n现在我们知道了，因为`/var/jenkins_home`映射到本地数据卷时，目录的拥有者变成了root用户，所以出现了`Permission denied`的问题。  \n发现问题之后，相应的解决方法也很简单：把当前目录的拥有者赋值给uid 1000，再启动\"jenkins\"容器就一切正常了。\n```\nsudo chown -R 1000:1000 data\n```\n这时利用浏览器访问 \"http://localhost:8080/\" 就可以看到Jenkins的经典Web界面了。\n\n\n\n\n参考：\n* [谈谈 Docker Volume 之权限管理（一）](https://yq.aliyun.com/articles/53990)","slug":"Jenkin_and_docker","published":1,"updated":"2023-03-21T02:48:19.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l0000w2o3m5zn96xke","content":"<h2 id=\"jenkins是什么\">jenkins是什么？</h2>\r\n<p> \r\nJenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。<br />\r\n上面的介绍是抄的（逃，简单讲，就是Jenkins能帮我们<strong>自动编译，测试，发布软件</strong>。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"安装运行\">安装运行</h2>\r\n<p>Jenkins有单独的war包，通过<code>java -jar jenkins.war</code>直接就可以运行（<a\r\nhref=\"https://jenkins.io/zh/download/\">官网下载</a>，选择<code>Generic Java package (.war)</code>，或者<a\r\nhref=\"http://mirrors.jenkins.io/\">官方镜像</a>），选择LTS Releases\r\n中的<code>war-stable</code>），但是jre环境，当然对于熟悉Java的人来说，这个是配置一下即可。本文介绍在Docker中运行Jenkins以及会遇到的一些问题。<br />\r\n* 操作系统：Ubuntu 18.04.3 LTS * docker版本：19.03.4 * jdk版本：java\r\nversion \"1.8.0_221\"</p>\r\n<p>在<code>vim</code>中打开中文有时候会乱码，可以通过下面命令解决：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo locale-gen zh_CN.UTF-8</span><br></pre></td></tr></table></figure> 好了，让我们开始安装<code>Jenkins</code>。<br />\r\n首先，编写一份自定义的<code>Dockerfile</code>： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM jenkins/jenkins:lts</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\"></span><br><span class=\"line\">RUN echo &#x27; \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free &#x27; &gt; /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cat /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">#更新源并安装缺少的包</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y gcc g++ make openssl pkg-config</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">USER jenkins</span><br></pre></td></tr></table></figure>\r\n基础镜像是<code>jenkins/jenkins:lts</code>，观察一下这个镜像 <img\r\nsrc=\"https://s2.ax1x.com/2019/11/07/MAz11g.png\" /><br />\r\n发现它是基于<code>FROM openjdk:8-jdk-stretch</code>，这是带有jdk的debian\r\n9镜像。所以我在<code>Dockerfile</code>中修改了apt源，这里使用了阿里云的apt源（<code>\\n\\</code>是换行加上续行符）。</p>\r\n<p>再配合<code>docker-compose.yml</code>： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  jenkins:</span><br><span class=\"line\">    build: .</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data:/var/jenkins_home</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - &quot;JAVA_OPTS=-Duser.timezone=Asia/Shanghai -Xms1g -Xmx1g&quot;</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - 127.0.0.1:8080:8080</span><br><span class=\"line\">      - 50000:50000</span><br></pre></td></tr></table></figure>\r\n现在我们就可以启动Jenkins了，打开终端，键入命令： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure>\r\n这时候，我们会遇到错误： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenkins_1  | touch: cannot touch &#x27;/var/jenkins_home/copy_reference_file.log&#x27;: Permission denied</span><br><span class=\"line\">jenkins_1  | Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?</span><br></pre></td></tr></table></figure>\r\n看描述是<strong>权限问题</strong>，观察一下目录下的<code>data</code>文件夹：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x  2 root       root       4096 11月 17 20:47 data</span><br></pre></td></tr></table></figure>\r\n发现目录的属主是<code>root</code>用户，这是什么原因呢？</p>\r\n<h2 id=\"原因探究\">原因探究</h2>\r\n<p>查看<code>Jenkins</code>容器的当前用户和目录<code>/var/jenkins_home</code>属主，我们发现当前用户是<code>Jenkins</code>，<code>/var/jenkins_home</code>属主用户是<code>jenkins</code>：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -ti --rm --entrypoint=&quot;/bin/bash&quot;  jenkins/jenkins:lts  -c &quot;whoami &amp;&amp; id&quot;</span><br><span class=\"line\">jenkins</span><br><span class=\"line\">uid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins)</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -ti --rm --entrypoint=&quot;/bin/bash&quot; jenkins/jenkins:lts -c &quot;ls -la /var&quot;</span><br><span class=\"line\">drwxr-xr-x 1 root    root    4096 Oct 17 08:29 cache</span><br><span class=\"line\">drwxr-xr-x 2 jenkins jenkins 4096 Nov 17 14:05 jenkins_home</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n上述命令中，<code>--rm</code>选项是让容器退出时自动清除，<code>--entrypoint</code>是覆盖镜像中的<code>ENTRYPOINT</code>。<br />\r\n现在我们知道了，因为<code>/var/jenkins_home</code>映射到本地数据卷时，目录的拥有者变成了root用户，所以出现了<code>Permission denied</code>的问题。<br />\r\n发现问题之后，相应的解决方法也很简单：把当前目录的拥有者赋值给uid\r\n1000，再启动\"jenkins\"容器就一切正常了。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R 1000:1000 data</span><br></pre></td></tr></table></figure> 这时利用浏览器访问\r\n\"http://localhost:8080/\" 就可以看到Jenkins的经典Web界面了。</p>\r\n<p>参考： * <a href=\"https://yq.aliyun.com/articles/53990\">谈谈 Docker\r\nVolume 之权限管理（一）</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"jenkins是什么\">jenkins是什么？</h2>\r\n<p> \r\nJenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。<br />\r\n上面的介绍是抄的（逃，简单讲，就是Jenkins能帮我们<strong>自动编译，测试，发布软件</strong>。</p>","more":"<h2 id=\"安装运行\">安装运行</h2>\r\n<p>Jenkins有单独的war包，通过<code>java -jar jenkins.war</code>直接就可以运行（<a\r\nhref=\"https://jenkins.io/zh/download/\">官网下载</a>，选择<code>Generic Java package (.war)</code>，或者<a\r\nhref=\"http://mirrors.jenkins.io/\">官方镜像</a>），选择LTS Releases\r\n中的<code>war-stable</code>），但是jre环境，当然对于熟悉Java的人来说，这个是配置一下即可。本文介绍在Docker中运行Jenkins以及会遇到的一些问题。<br />\r\n* 操作系统：Ubuntu 18.04.3 LTS * docker版本：19.03.4 * jdk版本：java\r\nversion \"1.8.0_221\"</p>\r\n<p>在<code>vim</code>中打开中文有时候会乱码，可以通过下面命令解决：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo locale-gen zh_CN.UTF-8</span><br></pre></td></tr></table></figure> 好了，让我们开始安装<code>Jenkins</code>。<br />\r\n首先，编写一份自定义的<code>Dockerfile</code>： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM jenkins/jenkins:lts</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\"></span><br><span class=\"line\">RUN echo &#x27; \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian stretch main contrib non-free \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian stretch-updates main contrib non-free \\n\\</span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free \\n\\</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free &#x27; &gt; /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">RUN cat /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">#更新源并安装缺少的包</span><br><span class=\"line\">RUN apt-get update &amp;&amp; apt-get install -y gcc g++ make openssl pkg-config</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">USER jenkins</span><br></pre></td></tr></table></figure>\r\n基础镜像是<code>jenkins/jenkins:lts</code>，观察一下这个镜像 <img\r\nsrc=\"https://s2.ax1x.com/2019/11/07/MAz11g.png\" /><br />\r\n发现它是基于<code>FROM openjdk:8-jdk-stretch</code>，这是带有jdk的debian\r\n9镜像。所以我在<code>Dockerfile</code>中修改了apt源，这里使用了阿里云的apt源（<code>\\n\\</code>是换行加上续行符）。</p>\r\n<p>再配合<code>docker-compose.yml</code>： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  jenkins:</span><br><span class=\"line\">    build: .</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./data:/var/jenkins_home</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - &quot;JAVA_OPTS=-Duser.timezone=Asia/Shanghai -Xms1g -Xmx1g&quot;</span><br><span class=\"line\">    ports: </span><br><span class=\"line\">      - 127.0.0.1:8080:8080</span><br><span class=\"line\">      - 50000:50000</span><br></pre></td></tr></table></figure>\r\n现在我们就可以启动Jenkins了，打开终端，键入命令： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure>\r\n这时候，我们会遇到错误： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenkins_1  | touch: cannot touch &#x27;/var/jenkins_home/copy_reference_file.log&#x27;: Permission denied</span><br><span class=\"line\">jenkins_1  | Can not write to /var/jenkins_home/copy_reference_file.log. Wrong volume permissions?</span><br></pre></td></tr></table></figure>\r\n看描述是<strong>权限问题</strong>，观察一下目录下的<code>data</code>文件夹：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drwxr-xr-x  2 root       root       4096 11月 17 20:47 data</span><br></pre></td></tr></table></figure>\r\n发现目录的属主是<code>root</code>用户，这是什么原因呢？</p>\r\n<h2 id=\"原因探究\">原因探究</h2>\r\n<p>查看<code>Jenkins</code>容器的当前用户和目录<code>/var/jenkins_home</code>属主，我们发现当前用户是<code>Jenkins</code>，<code>/var/jenkins_home</code>属主用户是<code>jenkins</code>：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -ti --rm --entrypoint=&quot;/bin/bash&quot;  jenkins/jenkins:lts  -c &quot;whoami &amp;&amp; id&quot;</span><br><span class=\"line\">jenkins</span><br><span class=\"line\">uid=1000(jenkins) gid=1000(jenkins) groups=1000(jenkins)</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -ti --rm --entrypoint=&quot;/bin/bash&quot; jenkins/jenkins:lts -c &quot;ls -la /var&quot;</span><br><span class=\"line\">drwxr-xr-x 1 root    root    4096 Oct 17 08:29 cache</span><br><span class=\"line\">drwxr-xr-x 2 jenkins jenkins 4096 Nov 17 14:05 jenkins_home</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n上述命令中，<code>--rm</code>选项是让容器退出时自动清除，<code>--entrypoint</code>是覆盖镜像中的<code>ENTRYPOINT</code>。<br />\r\n现在我们知道了，因为<code>/var/jenkins_home</code>映射到本地数据卷时，目录的拥有者变成了root用户，所以出现了<code>Permission denied</code>的问题。<br />\r\n发现问题之后，相应的解决方法也很简单：把当前目录的拥有者赋值给uid\r\n1000，再启动\"jenkins\"容器就一切正常了。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R 1000:1000 data</span><br></pre></td></tr></table></figure> 这时利用浏览器访问\r\n\"http://localhost:8080/\" 就可以看到Jenkins的经典Web界面了。</p>\r\n<p>参考： * <a href=\"https://yq.aliyun.com/articles/53990\">谈谈 Docker\r\nVolume 之权限管理（一）</a></p>"},{"title":"Linux之iptables","author":"Salamander","date":"2020-04-26T05:00:00.000Z","_content":"## 简介\n管理网络流量是系统管理员必需处理的最棘手工作之一，我们必需规定连接系统的用户满足防火墙的传入和传出要求，以最大限度保证系统免受攻击。`iptables`正是这样的工具。\n\n其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的\"安全框架\"中，这个\"安全框架\"才是真正的防火墙，这个框架的名字叫**netfilter**。\n\n\n<!-- more -->\n\n## 流程\niptables有5个链:PREROUTING,INPUT,FORWARD,OUTPUT,POSTROUTING,4个表:filter,nat,mangle,raw。（4表5链）  \n4个表的优先级由高到低的顺序为:raw-->mangle-->nat-->filter  \n\n\n![upload successful](/images/iptables_process.png)\n\n* filter：一般的过滤功能\n* nat:用于nat功能（端口映射，地址映射等）\n* mangle:用于对特定数据包的修改\n* raw:优先级最高，设置raw时一般是为了不再让iptables做数据包的链接跟踪处理，提高性能\n\n图片中，**PREROUTING**会有个分叉，系统是根据IP数据包中的`destination ip address`中的IP地址对数据包进行分发。\n如果destination ip adress是**本机地址**，数据将会被转交给INPUT链。如果不是本机地址，则交给FORWARD链检测。\n\n\n## 使用\n\n### 启动、停止和重启iptables\n\n虽然 iptables 并不是一项服务，但在 Linux 中还是可以像服务一样对其状态进行管理。\n\n基于SystemD的系统\n```\nsystemctl start iptables\nsystemctl stop iptables\nsystemctl restart iptables\n```\n\n\n### 查看规则\n查看iptables防火墙策略\n```\nsudo iptables -vL \n```\n或者带上序号\n```\nsudo iptables -vL  --line-number //--line-number可以显示规则序号，在删除的时候比较方便 \n```\n以上命令是查看默认的 FILTER 表，如果你只希望查看特定的表，可以在 -t 参数后跟上要单独查看的表名。例如只查看 NAT 表中的规则，可以使用如下命令：\n```\nsudo iptables -vL -t nat\n```\n\n\n### 添加规则\n命令格式为：\"iptables [-t 表名] 选项 [链名] [条件] [-j 控制动作]\"。\n此处列出一些常用的动作：  \n* ACCEPT：允许数据包通过。\n* DROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。\n* REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。\n* SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。\n* MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。\n* DNAT：目标地址转换。\n* REDIRECT：在本机做端口映射。\n* LOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。\n\n\n拒绝转发来自`192.168.1.10`主机的数据，允许转发来自`192.168.0.0/24`网段的数据\n```\niptables -A FORWARD -s 192.168.1.11 -j REJECT \niptables -A FORWARD -s 192.168.0.0/24 -j ACCEPT\n说明：注意要把拒绝的放在前面不然就不起作用了啊。\n```\n允许本机开放从TCP端口20-1024提供的应用服务。\n```\niptables -A INPUT -p tcp --dport 20:1024 -j ACCEPT \niptables -A OUTPUT -p tcp --sport 20:1024 -j ACCEPT\n```\n允许转发来自192.168.0.0/24局域网段的DNS解析请求数据包。\n```\niptables -A FORWARD -s 192.168.0.0/24 -p udp --dport 53 -j ACCEPT \niptables -A FORWARD -d 192.168.0.0/24 -p udp --sport 53 -j ACCEPT\n```\n### DNAT和SNAT\n\n我们要做的DNAT要在进入这个菱形转发区域之前，也就是在**PREROUTING链**中做，例如要把访问`202.103.96.112`的访问转发到`192.168.0.112`上：\n```\niptables -t nat -A PREROUTING -d 202.103.96.112 -j DNAT --to-destination 192.168.0.112\n```\n而SNAT自然是要在数据包流出这台机器之前的最后一个链也就是**POSTROUTING链**来进行操作\n```\niptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source 58.20.51.66\n```\n假如当前系统用的是ADSL/3G/4G动态拨号方式，那么每次拨号，出口IP都会改变，SNAT就会有局限性。\n```\n iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE\n```\n重点在那个『 MASQUERADE 』！这个设定值就是『IP伪装成为封包出去(-o)的那块装置上的IP』！\n\n不管现在eth0的出口获得了怎样的动态ip，MASQUERADE会自动读取eth0现在的ip地址然后做SNAT出去，这样就实现了很好的动态SNAT地址转换。\n\n\n\n\n### 删除iptables规则\n```\niptables -D INPUT 3  //删除input的第3条规则  \n  \niptables -t nat -D POSTROUTING 1  //删除nat表中postrouting的第一条规则  \n  \niptables -F INPUT   //清空 filter表INPUT所有规则  \n\niptables -F    //清空所有规则  \n\niptables -t nat -F POSTROUTING   //清空nat表POSTROUTING所有规则  \n\n```\n\n### 保存和恢复\niptables 命令修改后规则只存在于内存中，但是我们保存当前规则用来恢复\n```\niptables-save > /etc/sysconfig/iptables.20180606\n\niptables-restore < /etc/sysconfig/iptables.20180606\n```\n\n\n\n\n\n\n\n参考：\n* [iptables之FORWARD转发链](https://blog.51cto.com/linuxcgi/1965296)\n* [iptables中DNAT、SNAT和MASQUERADE](https://www.cnblogs.com/liuhongru/p/11422460.html)\n* [iptables介绍](https://www.jianshu.com/p/196e57a99a9a)\n* [Linux iptables用法与NAT](https://www.cnblogs.com/whych/p/9147900.html)","source":"_posts/Linux_iptables.md","raw":"title: Linux之iptables\nauthor: Salamander\ntags:\n  - Linux\n  - iptables\ncategories:\n  - Linux\ndate: 2020-04-26 13:00:00\n---\n## 简介\n管理网络流量是系统管理员必需处理的最棘手工作之一，我们必需规定连接系统的用户满足防火墙的传入和传出要求，以最大限度保证系统免受攻击。`iptables`正是这样的工具。\n\n其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的\"安全框架\"中，这个\"安全框架\"才是真正的防火墙，这个框架的名字叫**netfilter**。\n\n\n<!-- more -->\n\n## 流程\niptables有5个链:PREROUTING,INPUT,FORWARD,OUTPUT,POSTROUTING,4个表:filter,nat,mangle,raw。（4表5链）  \n4个表的优先级由高到低的顺序为:raw-->mangle-->nat-->filter  \n\n\n![upload successful](/images/iptables_process.png)\n\n* filter：一般的过滤功能\n* nat:用于nat功能（端口映射，地址映射等）\n* mangle:用于对特定数据包的修改\n* raw:优先级最高，设置raw时一般是为了不再让iptables做数据包的链接跟踪处理，提高性能\n\n图片中，**PREROUTING**会有个分叉，系统是根据IP数据包中的`destination ip address`中的IP地址对数据包进行分发。\n如果destination ip adress是**本机地址**，数据将会被转交给INPUT链。如果不是本机地址，则交给FORWARD链检测。\n\n\n## 使用\n\n### 启动、停止和重启iptables\n\n虽然 iptables 并不是一项服务，但在 Linux 中还是可以像服务一样对其状态进行管理。\n\n基于SystemD的系统\n```\nsystemctl start iptables\nsystemctl stop iptables\nsystemctl restart iptables\n```\n\n\n### 查看规则\n查看iptables防火墙策略\n```\nsudo iptables -vL \n```\n或者带上序号\n```\nsudo iptables -vL  --line-number //--line-number可以显示规则序号，在删除的时候比较方便 \n```\n以上命令是查看默认的 FILTER 表，如果你只希望查看特定的表，可以在 -t 参数后跟上要单独查看的表名。例如只查看 NAT 表中的规则，可以使用如下命令：\n```\nsudo iptables -vL -t nat\n```\n\n\n### 添加规则\n命令格式为：\"iptables [-t 表名] 选项 [链名] [条件] [-j 控制动作]\"。\n此处列出一些常用的动作：  \n* ACCEPT：允许数据包通过。\n* DROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。\n* REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。\n* SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。\n* MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。\n* DNAT：目标地址转换。\n* REDIRECT：在本机做端口映射。\n* LOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。\n\n\n拒绝转发来自`192.168.1.10`主机的数据，允许转发来自`192.168.0.0/24`网段的数据\n```\niptables -A FORWARD -s 192.168.1.11 -j REJECT \niptables -A FORWARD -s 192.168.0.0/24 -j ACCEPT\n说明：注意要把拒绝的放在前面不然就不起作用了啊。\n```\n允许本机开放从TCP端口20-1024提供的应用服务。\n```\niptables -A INPUT -p tcp --dport 20:1024 -j ACCEPT \niptables -A OUTPUT -p tcp --sport 20:1024 -j ACCEPT\n```\n允许转发来自192.168.0.0/24局域网段的DNS解析请求数据包。\n```\niptables -A FORWARD -s 192.168.0.0/24 -p udp --dport 53 -j ACCEPT \niptables -A FORWARD -d 192.168.0.0/24 -p udp --sport 53 -j ACCEPT\n```\n### DNAT和SNAT\n\n我们要做的DNAT要在进入这个菱形转发区域之前，也就是在**PREROUTING链**中做，例如要把访问`202.103.96.112`的访问转发到`192.168.0.112`上：\n```\niptables -t nat -A PREROUTING -d 202.103.96.112 -j DNAT --to-destination 192.168.0.112\n```\n而SNAT自然是要在数据包流出这台机器之前的最后一个链也就是**POSTROUTING链**来进行操作\n```\niptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source 58.20.51.66\n```\n假如当前系统用的是ADSL/3G/4G动态拨号方式，那么每次拨号，出口IP都会改变，SNAT就会有局限性。\n```\n iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE\n```\n重点在那个『 MASQUERADE 』！这个设定值就是『IP伪装成为封包出去(-o)的那块装置上的IP』！\n\n不管现在eth0的出口获得了怎样的动态ip，MASQUERADE会自动读取eth0现在的ip地址然后做SNAT出去，这样就实现了很好的动态SNAT地址转换。\n\n\n\n\n### 删除iptables规则\n```\niptables -D INPUT 3  //删除input的第3条规则  \n  \niptables -t nat -D POSTROUTING 1  //删除nat表中postrouting的第一条规则  \n  \niptables -F INPUT   //清空 filter表INPUT所有规则  \n\niptables -F    //清空所有规则  \n\niptables -t nat -F POSTROUTING   //清空nat表POSTROUTING所有规则  \n\n```\n\n### 保存和恢复\niptables 命令修改后规则只存在于内存中，但是我们保存当前规则用来恢复\n```\niptables-save > /etc/sysconfig/iptables.20180606\n\niptables-restore < /etc/sysconfig/iptables.20180606\n```\n\n\n\n\n\n\n\n参考：\n* [iptables之FORWARD转发链](https://blog.51cto.com/linuxcgi/1965296)\n* [iptables中DNAT、SNAT和MASQUERADE](https://www.cnblogs.com/liuhongru/p/11422460.html)\n* [iptables介绍](https://www.jianshu.com/p/196e57a99a9a)\n* [Linux iptables用法与NAT](https://www.cnblogs.com/whych/p/9147900.html)","slug":"Linux_iptables","published":1,"updated":"2023-03-21T02:48:19.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l1000y2o3m89ug44o5","content":"<h2 id=\"简介\">简介</h2>\r\n<p>管理网络流量是系统管理员必需处理的最棘手工作之一，我们必需规定连接系统的用户满足防火墙的传入和传出要求，以最大限度保证系统免受攻击。<code>iptables</code>正是这样的工具。</p>\r\n<p>其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的\"安全框架\"中，这个\"安全框架\"才是真正的防火墙，这个框架的名字叫<strong>netfilter</strong>。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"流程\">流程</h2>\r\n<p>iptables有5个链:PREROUTING,INPUT,FORWARD,OUTPUT,POSTROUTING,4个表:filter,nat,mangle,raw。（4表5链）<br />\r\n4个表的优先级由高到低的顺序为:raw--&gt;mangle--&gt;nat--&gt;filter</p>\r\n<figure>\r\n<img src=\"/images/iptables_process.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<ul>\r\n<li>filter：一般的过滤功能</li>\r\n<li>nat:用于nat功能（端口映射，地址映射等）</li>\r\n<li>mangle:用于对特定数据包的修改</li>\r\n<li>raw:优先级最高，设置raw时一般是为了不再让iptables做数据包的链接跟踪处理，提高性能</li>\r\n</ul>\r\n<p>图片中，<strong>PREROUTING</strong>会有个分叉，系统是根据IP数据包中的<code>destination ip address</code>中的IP地址对数据包进行分发。\r\n如果destination ip\r\nadress是<strong>本机地址</strong>，数据将会被转交给INPUT链。如果不是本机地址，则交给FORWARD链检测。</p>\r\n<h2 id=\"使用\">使用</h2>\r\n<h3 id=\"启动停止和重启iptables\">启动、停止和重启iptables</h3>\r\n<p>虽然 iptables 并不是一项服务，但在 Linux\r\n中还是可以像服务一样对其状态进行管理。</p>\r\n<p>基于SystemD的系统 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start iptables</span><br><span class=\"line\">systemctl stop iptables</span><br><span class=\"line\">systemctl restart iptables</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"查看规则\">查看规则</h3>\r\n<p>查看iptables防火墙策略 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -vL </span><br></pre></td></tr></table></figure> 或者带上序号 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -vL  --line-number //--line-number可以显示规则序号，在删除的时候比较方便 </span><br></pre></td></tr></table></figure>\r\n以上命令是查看默认的 FILTER 表，如果你只希望查看特定的表，可以在 -t\r\n参数后跟上要单独查看的表名。例如只查看 NAT\r\n表中的规则，可以使用如下命令： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -vL -t nat</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"添加规则\">添加规则</h3>\r\n<p>命令格式为：\"iptables [-t 表名] 选项 [链名] [条件] [-j 控制动作]\"。\r\n此处列出一些常用的动作：<br />\r\n* ACCEPT：允许数据包通过。 *\r\nDROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。\r\n*\r\nREJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。\r\n* SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。 *\r\nMASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。 *\r\nDNAT：目标地址转换。 * REDIRECT：在本机做端口映射。 *\r\nLOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</p>\r\n<p>拒绝转发来自<code>192.168.1.10</code>主机的数据，允许转发来自<code>192.168.0.0/24</code>网段的数据\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A FORWARD -s 192.168.1.11 -j REJECT </span><br><span class=\"line\">iptables -A FORWARD -s 192.168.0.0/24 -j ACCEPT</span><br><span class=\"line\">说明：注意要把拒绝的放在前面不然就不起作用了啊。</span><br></pre></td></tr></table></figure> 允许本机开放从TCP端口20-1024提供的应用服务。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A INPUT -p tcp --dport 20:1024 -j ACCEPT </span><br><span class=\"line\">iptables -A OUTPUT -p tcp --sport 20:1024 -j ACCEPT</span><br></pre></td></tr></table></figure>\r\n允许转发来自192.168.0.0/24局域网段的DNS解析请求数据包。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A FORWARD -s 192.168.0.0/24 -p udp --dport 53 -j ACCEPT </span><br><span class=\"line\">iptables -A FORWARD -d 192.168.0.0/24 -p udp --sport 53 -j ACCEPT</span><br></pre></td></tr></table></figure>\r\n### DNAT和SNAT</p>\r\n<p>我们要做的DNAT要在进入这个菱形转发区域之前，也就是在<strong>PREROUTING链</strong>中做，例如要把访问<code>202.103.96.112</code>的访问转发到<code>192.168.0.112</code>上：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d 202.103.96.112 -j DNAT --to-destination 192.168.0.112</span><br></pre></td></tr></table></figure>\r\n而SNAT自然是要在数据包流出这台机器之前的最后一个链也就是<strong>POSTROUTING链</strong>来进行操作\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source 58.20.51.66</span><br></pre></td></tr></table></figure>\r\n假如当前系统用的是ADSL/3G/4G动态拨号方式，那么每次拨号，出口IP都会改变，SNAT就会有局限性。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure> 重点在那个『 MASQUERADE\r\n』！这个设定值就是『IP伪装成为封包出去(-o)的那块装置上的IP』！</p>\r\n<p>不管现在eth0的出口获得了怎样的动态ip，MASQUERADE会自动读取eth0现在的ip地址然后做SNAT出去，这样就实现了很好的动态SNAT地址转换。</p>\r\n<h3 id=\"删除iptables规则\">删除iptables规则</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -D INPUT 3  //删除input的第3条规则  </span><br><span class=\"line\">  </span><br><span class=\"line\">iptables -t nat -D POSTROUTING 1  //删除nat表中postrouting的第一条规则  </span><br><span class=\"line\">  </span><br><span class=\"line\">iptables -F INPUT   //清空 filter表INPUT所有规则  </span><br><span class=\"line\"></span><br><span class=\"line\">iptables -F    //清空所有规则  </span><br><span class=\"line\"></span><br><span class=\"line\">iptables -t nat -F POSTROUTING   //清空nat表POSTROUTING所有规则  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"保存和恢复\">保存和恢复</h3>\r\n<p>iptables 命令修改后规则只存在于内存中，但是我们保存当前规则用来恢复\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-save &gt; /etc/sysconfig/iptables.20180606</span><br><span class=\"line\"></span><br><span class=\"line\">iptables-restore &lt; /etc/sysconfig/iptables.20180606</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://blog.51cto.com/linuxcgi/1965296\">iptables之FORWARD转发链</a>\r\n* <a\r\nhref=\"https://www.cnblogs.com/liuhongru/p/11422460.html\">iptables中DNAT、SNAT和MASQUERADE</a>\r\n* <a href=\"https://www.jianshu.com/p/196e57a99a9a\">iptables介绍</a> * <a\r\nhref=\"https://www.cnblogs.com/whych/p/9147900.html\">Linux\r\niptables用法与NAT</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\">简介</h2>\r\n<p>管理网络流量是系统管理员必需处理的最棘手工作之一，我们必需规定连接系统的用户满足防火墙的传入和传出要求，以最大限度保证系统免受攻击。<code>iptables</code>正是这样的工具。</p>\r\n<p>其实不是真正的防火墙，我们可以把它理解成一个客户端代理，用户通过iptables这个代理，将用户的安全设定执行到对应的\"安全框架\"中，这个\"安全框架\"才是真正的防火墙，这个框架的名字叫<strong>netfilter</strong>。</p>","more":"<h2 id=\"流程\">流程</h2>\r\n<p>iptables有5个链:PREROUTING,INPUT,FORWARD,OUTPUT,POSTROUTING,4个表:filter,nat,mangle,raw。（4表5链）<br />\r\n4个表的优先级由高到低的顺序为:raw--&gt;mangle--&gt;nat--&gt;filter</p>\r\n<figure>\r\n<img src=\"/images/iptables_process.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<ul>\r\n<li>filter：一般的过滤功能</li>\r\n<li>nat:用于nat功能（端口映射，地址映射等）</li>\r\n<li>mangle:用于对特定数据包的修改</li>\r\n<li>raw:优先级最高，设置raw时一般是为了不再让iptables做数据包的链接跟踪处理，提高性能</li>\r\n</ul>\r\n<p>图片中，<strong>PREROUTING</strong>会有个分叉，系统是根据IP数据包中的<code>destination ip address</code>中的IP地址对数据包进行分发。\r\n如果destination ip\r\nadress是<strong>本机地址</strong>，数据将会被转交给INPUT链。如果不是本机地址，则交给FORWARD链检测。</p>\r\n<h2 id=\"使用\">使用</h2>\r\n<h3 id=\"启动停止和重启iptables\">启动、停止和重启iptables</h3>\r\n<p>虽然 iptables 并不是一项服务，但在 Linux\r\n中还是可以像服务一样对其状态进行管理。</p>\r\n<p>基于SystemD的系统 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start iptables</span><br><span class=\"line\">systemctl stop iptables</span><br><span class=\"line\">systemctl restart iptables</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"查看规则\">查看规则</h3>\r\n<p>查看iptables防火墙策略 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -vL </span><br></pre></td></tr></table></figure> 或者带上序号 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -vL  --line-number //--line-number可以显示规则序号，在删除的时候比较方便 </span><br></pre></td></tr></table></figure>\r\n以上命令是查看默认的 FILTER 表，如果你只希望查看特定的表，可以在 -t\r\n参数后跟上要单独查看的表名。例如只查看 NAT\r\n表中的规则，可以使用如下命令： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -vL -t nat</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"添加规则\">添加规则</h3>\r\n<p>命令格式为：\"iptables [-t 表名] 选项 [链名] [条件] [-j 控制动作]\"。\r\n此处列出一些常用的动作：<br />\r\n* ACCEPT：允许数据包通过。 *\r\nDROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。\r\n*\r\nREJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。\r\n* SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。 *\r\nMASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。 *\r\nDNAT：目标地址转换。 * REDIRECT：在本机做端口映射。 *\r\nLOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</p>\r\n<p>拒绝转发来自<code>192.168.1.10</code>主机的数据，允许转发来自<code>192.168.0.0/24</code>网段的数据\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A FORWARD -s 192.168.1.11 -j REJECT </span><br><span class=\"line\">iptables -A FORWARD -s 192.168.0.0/24 -j ACCEPT</span><br><span class=\"line\">说明：注意要把拒绝的放在前面不然就不起作用了啊。</span><br></pre></td></tr></table></figure> 允许本机开放从TCP端口20-1024提供的应用服务。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A INPUT -p tcp --dport 20:1024 -j ACCEPT </span><br><span class=\"line\">iptables -A OUTPUT -p tcp --sport 20:1024 -j ACCEPT</span><br></pre></td></tr></table></figure>\r\n允许转发来自192.168.0.0/24局域网段的DNS解析请求数据包。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A FORWARD -s 192.168.0.0/24 -p udp --dport 53 -j ACCEPT </span><br><span class=\"line\">iptables -A FORWARD -d 192.168.0.0/24 -p udp --sport 53 -j ACCEPT</span><br></pre></td></tr></table></figure>\r\n### DNAT和SNAT</p>\r\n<p>我们要做的DNAT要在进入这个菱形转发区域之前，也就是在<strong>PREROUTING链</strong>中做，例如要把访问<code>202.103.96.112</code>的访问转发到<code>192.168.0.112</code>上：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d 202.103.96.112 -j DNAT --to-destination 192.168.0.112</span><br></pre></td></tr></table></figure>\r\n而SNAT自然是要在数据包流出这台机器之前的最后一个链也就是<strong>POSTROUTING链</strong>来进行操作\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source 58.20.51.66</span><br></pre></td></tr></table></figure>\r\n假如当前系统用的是ADSL/3G/4G动态拨号方式，那么每次拨号，出口IP都会改变，SNAT就会有局限性。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure> 重点在那个『 MASQUERADE\r\n』！这个设定值就是『IP伪装成为封包出去(-o)的那块装置上的IP』！</p>\r\n<p>不管现在eth0的出口获得了怎样的动态ip，MASQUERADE会自动读取eth0现在的ip地址然后做SNAT出去，这样就实现了很好的动态SNAT地址转换。</p>\r\n<h3 id=\"删除iptables规则\">删除iptables规则</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -D INPUT 3  //删除input的第3条规则  </span><br><span class=\"line\">  </span><br><span class=\"line\">iptables -t nat -D POSTROUTING 1  //删除nat表中postrouting的第一条规则  </span><br><span class=\"line\">  </span><br><span class=\"line\">iptables -F INPUT   //清空 filter表INPUT所有规则  </span><br><span class=\"line\"></span><br><span class=\"line\">iptables -F    //清空所有规则  </span><br><span class=\"line\"></span><br><span class=\"line\">iptables -t nat -F POSTROUTING   //清空nat表POSTROUTING所有规则  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"保存和恢复\">保存和恢复</h3>\r\n<p>iptables 命令修改后规则只存在于内存中，但是我们保存当前规则用来恢复\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables-save &gt; /etc/sysconfig/iptables.20180606</span><br><span class=\"line\"></span><br><span class=\"line\">iptables-restore &lt; /etc/sysconfig/iptables.20180606</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://blog.51cto.com/linuxcgi/1965296\">iptables之FORWARD转发链</a>\r\n* <a\r\nhref=\"https://www.cnblogs.com/liuhongru/p/11422460.html\">iptables中DNAT、SNAT和MASQUERADE</a>\r\n* <a href=\"https://www.jianshu.com/p/196e57a99a9a\">iptables介绍</a> * <a\r\nhref=\"https://www.cnblogs.com/whych/p/9147900.html\">Linux\r\niptables用法与NAT</a></p>"},{"title":"MyBatis经典入门回顾","author":"Salamander","date":"2020-02-21T04:00:00.000Z","_content":"<img src=\"https://mybatis.org/images/mybatis-logo.png\" width=\"600px\" >\n\n\n其实，无论是Mybatis、Hibernate都是ORM的一种实现框架，都是对**JDBC**的一种封装。 \n\n之前我写过一篇[Spring Boot集成MyBatis操作MySQL](2019/10/27/Spring-Boot集成MyBatis操作MySQL/)，不过在这里让我们脱离Spring（不过很多代码是一样的,Dao类，Model类，数据库配置），就单独回顾下MyBatis的使用，来了解下MyBatis的使用流程。  \n\n## Mybatis工作流程\n\n* 通过Reader对象读取Mybatis配置文件\n* 通过SqlSessionFactoryBuilder对象创建SqlSessionFactory对象\n* 获取当前线程的SQLSession\n* 事务默认开启\n* 通过SQLSession读取映射文件中的操作编号，从而读取SQL语句\n* 提交事务\n* 关闭资源\n\n<!-- more -->\n\n**SqlSessionFactory**是一个很重要的类，每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先定制的 Configuration 的实例构建出 SqlSessionFactory 的实例。\n\n## pom.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.51lucy.test</groupId>\n    <artifactId>mybatis-simple</artifactId>\n    <version>1.0</version>\n\n\n    <dependencies>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.5.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.41</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n## 数据库配置jdbc.properties\n在**src/main/resources**文件夹下创建`jdbc.properties`文件：\n```\njdbc.driverClassName=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/spring_db\njdbc.username=root\njdbc.password=***********\n```\n\n\n## mybatis配置文件\n在**src/main/resources**文件夹下创建`mybatis-config.xml`文件：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <properties resource=\"jdbc.properties\"/>\n\n    <environments default=\"development\">\n        <!-- 设置一个默认的连接环境信息 -->\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${jdbc.driverClassName}\"/>\n                <property name=\"url\" value=\"${jdbc.url}\"/>\n                <property name=\"username\" value=\"${jdbc.username}\"/>\n                <property name=\"password\" value=\"${jdbc.password}\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <mapper resource=\"mappers/User.xml\"/>\n    </mappers>\n</configuration>\n```\n\n\n## 添加Dao接口\nUserDao接口（其实就是Mapper接口）\n```\npackage com.lucy.test.dao;\n\nimport com.lucy.test.model.User;\n\npublic interface UserDao {\n    User findByName(String name);\n\n    int insertUser(User user);\n}\n\n```\n\n## xml映射文件\n在**src/main/resources/mappers**文件夹下创建`User.xml`文件：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!--namespace要写对-->\n<mapper namespace=\"com.lucy.test.dao.UserDao\">\n    <select id=\"findByName\" parameterType=\"java.lang.String\"  resultType=\"com.lucy.test.model.User\">\n        select  uid, name, age, address, created_time\n        from  user\n        where name = #{name}\n    </select>\n\n    <insert id=\"insertUser\" parameterType=\"com.lucy.test.model.User\">\n        insert into user(name, age, address, created_time) VALUES (\n        #{name}, #{age}, #{address}, #{createdDatetime}\n        )\n    </insert>\n</mapper>\n\n```\n\n## 测试类\n让我们写个测试类看看效果：\n```\npackage com.lucy.test;\n\nimport com.lucy.test.dao.UserDao;\nimport com.lucy.test.model.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        String resource = \"mybatis-config.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        try {\n            UserDao userMapper = sqlSession.getMapper(UserDao.class);\n            User user = userMapper.findByName(\"meng\");\n            System.out.println(user.toString());\n            sqlSession.commit();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        } finally {\n            sqlSession.close();\n        }\n\n    }\n}\n```\n\n参考：\n* [MyBatis Tutorial – CRUD Operations and Mapping Relationships – Part 1\n](https://www.javacodegeeks.com/2012/11/mybatis-tutorial-crud-operations-and-mapping-relationships-part-1.html)","source":"_posts/MyBatis_getstart_lookback.md","raw":"title: MyBatis经典入门回顾\nauthor: Salamander\ntags:\n  - MyBatis\ncategories:\n  - Java\n  - ''\ndate: 2020-02-21 12:00:00\n---\n<img src=\"https://mybatis.org/images/mybatis-logo.png\" width=\"600px\" >\n\n\n其实，无论是Mybatis、Hibernate都是ORM的一种实现框架，都是对**JDBC**的一种封装。 \n\n之前我写过一篇[Spring Boot集成MyBatis操作MySQL](2019/10/27/Spring-Boot集成MyBatis操作MySQL/)，不过在这里让我们脱离Spring（不过很多代码是一样的,Dao类，Model类，数据库配置），就单独回顾下MyBatis的使用，来了解下MyBatis的使用流程。  \n\n## Mybatis工作流程\n\n* 通过Reader对象读取Mybatis配置文件\n* 通过SqlSessionFactoryBuilder对象创建SqlSessionFactory对象\n* 获取当前线程的SQLSession\n* 事务默认开启\n* 通过SQLSession读取映射文件中的操作编号，从而读取SQL语句\n* 提交事务\n* 关闭资源\n\n<!-- more -->\n\n**SqlSessionFactory**是一个很重要的类，每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先定制的 Configuration 的实例构建出 SqlSessionFactory 的实例。\n\n## pom.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.51lucy.test</groupId>\n    <artifactId>mybatis-simple</artifactId>\n    <version>1.0</version>\n\n\n    <dependencies>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.5.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.41</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n## 数据库配置jdbc.properties\n在**src/main/resources**文件夹下创建`jdbc.properties`文件：\n```\njdbc.driverClassName=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/spring_db\njdbc.username=root\njdbc.password=***********\n```\n\n\n## mybatis配置文件\n在**src/main/resources**文件夹下创建`mybatis-config.xml`文件：\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <properties resource=\"jdbc.properties\"/>\n\n    <environments default=\"development\">\n        <!-- 设置一个默认的连接环境信息 -->\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${jdbc.driverClassName}\"/>\n                <property name=\"url\" value=\"${jdbc.url}\"/>\n                <property name=\"username\" value=\"${jdbc.username}\"/>\n                <property name=\"password\" value=\"${jdbc.password}\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <mapper resource=\"mappers/User.xml\"/>\n    </mappers>\n</configuration>\n```\n\n\n## 添加Dao接口\nUserDao接口（其实就是Mapper接口）\n```\npackage com.lucy.test.dao;\n\nimport com.lucy.test.model.User;\n\npublic interface UserDao {\n    User findByName(String name);\n\n    int insertUser(User user);\n}\n\n```\n\n## xml映射文件\n在**src/main/resources/mappers**文件夹下创建`User.xml`文件：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!--namespace要写对-->\n<mapper namespace=\"com.lucy.test.dao.UserDao\">\n    <select id=\"findByName\" parameterType=\"java.lang.String\"  resultType=\"com.lucy.test.model.User\">\n        select  uid, name, age, address, created_time\n        from  user\n        where name = #{name}\n    </select>\n\n    <insert id=\"insertUser\" parameterType=\"com.lucy.test.model.User\">\n        insert into user(name, age, address, created_time) VALUES (\n        #{name}, #{age}, #{address}, #{createdDatetime}\n        )\n    </insert>\n</mapper>\n\n```\n\n## 测试类\n让我们写个测试类看看效果：\n```\npackage com.lucy.test;\n\nimport com.lucy.test.dao.UserDao;\nimport com.lucy.test.model.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        String resource = \"mybatis-config.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        try {\n            UserDao userMapper = sqlSession.getMapper(UserDao.class);\n            User user = userMapper.findByName(\"meng\");\n            System.out.println(user.toString());\n            sqlSession.commit();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        } finally {\n            sqlSession.close();\n        }\n\n    }\n}\n```\n\n参考：\n* [MyBatis Tutorial – CRUD Operations and Mapping Relationships – Part 1\n](https://www.javacodegeeks.com/2012/11/mybatis-tutorial-crud-operations-and-mapping-relationships-part-1.html)","slug":"MyBatis_getstart_lookback","published":1,"updated":"2023-03-21T02:48:19.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l100112o3me042fv0q","content":"<p><img src=\"https://mybatis.org/images/mybatis-logo.png\" width=\"600px\" ></p>\r\n<p>其实，无论是Mybatis、Hibernate都是ORM的一种实现框架，都是对<strong>JDBC</strong>的一种封装。</p>\r\n<p>之前我写过一篇<a\r\nhref=\"2019/10/27/Spring-Boot集成MyBatis操作MySQL/\">Spring\r\nBoot集成MyBatis操作MySQL</a>，不过在这里让我们脱离Spring（不过很多代码是一样的,Dao类，Model类，数据库配置），就单独回顾下MyBatis的使用，来了解下MyBatis的使用流程。</p>\r\n<h2 id=\"mybatis工作流程\">Mybatis工作流程</h2>\r\n<ul>\r\n<li>通过Reader对象读取Mybatis配置文件</li>\r\n<li>通过SqlSessionFactoryBuilder对象创建SqlSessionFactory对象</li>\r\n<li>获取当前线程的SQLSession</li>\r\n<li>事务默认开启</li>\r\n<li>通过SQLSession读取映射文件中的操作编号，从而读取SQL语句</li>\r\n<li>提交事务</li>\r\n<li>关闭资源</li>\r\n</ul>\r\n<span id=\"more\"></span>\r\n<p><strong>SqlSessionFactory</strong>是一个很重要的类，每个基于 MyBatis\r\n的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory\r\n的实例可以通过 SqlSessionFactoryBuilder 获得。而\r\nSqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先定制的\r\nConfiguration 的实例构建出 SqlSessionFactory 的实例。</p>\r\n<h2 id=\"pom.xml\">pom.xml</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.51lucy.test&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-simple&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.5.3&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.1.41&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"数据库配置jdbc.properties\">数据库配置jdbc.properties</h2>\r\n<p>在<strong>src/main/resources</strong>文件夹下创建<code>jdbc.properties</code>文件：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql://localhost:3306/spring_db</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=***********</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"mybatis配置文件\">mybatis配置文件</h2>\r\n<p>在<strong>src/main/resources</strong>文件夹下创建<code>mybatis-config.xml</code>文件：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;properties resource=&quot;jdbc.properties&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 设置一个默认的连接环境信息 --&gt;</span><br><span class=\"line\">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class=\"line\">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class=\"line\">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\">    &lt;/environments&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=&quot;mappers/User.xml&quot;/&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"添加dao接口\">添加Dao接口</h2>\r\n<p>UserDao接口（其实就是Mapper接口） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lucy.test.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.lucy.test.model.User;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserDao &#123;</span><br><span class=\"line\">    User findByName(String name);</span><br><span class=\"line\"></span><br><span class=\"line\">    int insertUser(User user);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"xml映射文件\">xml映射文件</h2>\r\n<p>在<strong>src/main/resources/mappers</strong>文件夹下创建<code>User.xml</code>文件：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">&lt;!--namespace要写对--&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;com.lucy.test.dao.UserDao&quot;&gt;</span><br><span class=\"line\">    &lt;select id=&quot;findByName&quot; parameterType=&quot;java.lang.String&quot;  resultType=&quot;com.lucy.test.model.User&quot;&gt;</span><br><span class=\"line\">        select  uid, name, age, address, created_time</span><br><span class=\"line\">        from  user</span><br><span class=\"line\">        where name = #&#123;name&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.lucy.test.model.User&quot;&gt;</span><br><span class=\"line\">        insert into user(name, age, address, created_time) VALUES (</span><br><span class=\"line\">        #&#123;name&#125;, #&#123;age&#125;, #&#123;address&#125;, #&#123;createdDatetime&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &lt;/insert&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"测试类\">测试类</h2>\r\n<p>让我们写个测试类看看效果： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lucy.test;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.lucy.test.dao.UserDao;</span><br><span class=\"line\">import com.lucy.test.model.User;</span><br><span class=\"line\">import org.apache.ibatis.io.Resources;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        String resource = &quot;mybatis-config.xml&quot;;</span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            UserDao userMapper = sqlSession.getMapper(UserDao.class);</span><br><span class=\"line\">            User user = userMapper.findByName(&quot;meng&quot;);</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">            sqlSession.commit();</span><br><span class=\"line\">        &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            sqlSession.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://www.javacodegeeks.com/2012/11/mybatis-tutorial-crud-operations-and-mapping-relationships-part-1.html\">MyBatis\r\nTutorial – CRUD Operations and Mapping Relationships – Part 1</a></p>\r\n","site":{"data":{}},"excerpt":"<p><img src=\"https://mybatis.org/images/mybatis-logo.png\" width=\"600px\" ></p>\r\n<p>其实，无论是Mybatis、Hibernate都是ORM的一种实现框架，都是对<strong>JDBC</strong>的一种封装。</p>\r\n<p>之前我写过一篇<a\r\nhref=\"2019/10/27/Spring-Boot集成MyBatis操作MySQL/\">Spring\r\nBoot集成MyBatis操作MySQL</a>，不过在这里让我们脱离Spring（不过很多代码是一样的,Dao类，Model类，数据库配置），就单独回顾下MyBatis的使用，来了解下MyBatis的使用流程。</p>\r\n<h2 id=\"mybatis工作流程\">Mybatis工作流程</h2>\r\n<ul>\r\n<li>通过Reader对象读取Mybatis配置文件</li>\r\n<li>通过SqlSessionFactoryBuilder对象创建SqlSessionFactory对象</li>\r\n<li>获取当前线程的SQLSession</li>\r\n<li>事务默认开启</li>\r\n<li>通过SQLSession读取映射文件中的操作编号，从而读取SQL语句</li>\r\n<li>提交事务</li>\r\n<li>关闭资源</li>\r\n</ul>","more":"<p><strong>SqlSessionFactory</strong>是一个很重要的类，每个基于 MyBatis\r\n的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory\r\n的实例可以通过 SqlSessionFactoryBuilder 获得。而\r\nSqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先定制的\r\nConfiguration 的实例构建出 SqlSessionFactory 的实例。</p>\r\n<h2 id=\"pom.xml\">pom.xml</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;com.51lucy.test&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-simple&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.5.3&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;5.1.41&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"数据库配置jdbc.properties\">数据库配置jdbc.properties</h2>\r\n<p>在<strong>src/main/resources</strong>文件夹下创建<code>jdbc.properties</code>文件：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql://localhost:3306/spring_db</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=***********</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"mybatis配置文件\">mybatis配置文件</h2>\r\n<p>在<strong>src/main/resources</strong>文件夹下创建<code>mybatis-config.xml</code>文件：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;properties resource=&quot;jdbc.properties&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class=\"line\">        &lt;!-- 设置一个默认的连接环境信息 --&gt;</span><br><span class=\"line\">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class=\"line\">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class=\"line\">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">                &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driverClassName&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\">    &lt;/environments&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=&quot;mappers/User.xml&quot;/&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"添加dao接口\">添加Dao接口</h2>\r\n<p>UserDao接口（其实就是Mapper接口） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lucy.test.dao;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.lucy.test.model.User;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserDao &#123;</span><br><span class=\"line\">    User findByName(String name);</span><br><span class=\"line\"></span><br><span class=\"line\">    int insertUser(User user);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"xml映射文件\">xml映射文件</h2>\r\n<p>在<strong>src/main/resources/mappers</strong>文件夹下创建<code>User.xml</code>文件：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">&lt;!--namespace要写对--&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;com.lucy.test.dao.UserDao&quot;&gt;</span><br><span class=\"line\">    &lt;select id=&quot;findByName&quot; parameterType=&quot;java.lang.String&quot;  resultType=&quot;com.lucy.test.model.User&quot;&gt;</span><br><span class=\"line\">        select  uid, name, age, address, created_time</span><br><span class=\"line\">        from  user</span><br><span class=\"line\">        where name = #&#123;name&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.lucy.test.model.User&quot;&gt;</span><br><span class=\"line\">        insert into user(name, age, address, created_time) VALUES (</span><br><span class=\"line\">        #&#123;name&#125;, #&#123;age&#125;, #&#123;address&#125;, #&#123;createdDatetime&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &lt;/insert&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"测试类\">测试类</h2>\r\n<p>让我们写个测试类看看效果： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.lucy.test;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.lucy.test.dao.UserDao;</span><br><span class=\"line\">import com.lucy.test.model.User;</span><br><span class=\"line\">import org.apache.ibatis.io.Resources;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws IOException &#123;</span><br><span class=\"line\">        String resource = &quot;mybatis-config.xml&quot;;</span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            UserDao userMapper = sqlSession.getMapper(UserDao.class);</span><br><span class=\"line\">            User user = userMapper.findByName(&quot;meng&quot;);</span><br><span class=\"line\">            System.out.println(user.toString());</span><br><span class=\"line\">            sqlSession.commit();</span><br><span class=\"line\">        &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            sqlSession.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://www.javacodegeeks.com/2012/11/mybatis-tutorial-crud-operations-and-mapping-relationships-part-1.html\">MyBatis\r\nTutorial – CRUD Operations and Mapping Relationships – Part 1</a></p>"},{"title":"OpenGL中旋转矩阵","mathjax":true,"author":"pigLoveRabbit","date":"2023-03-21T03:00:00.000Z","_content":"## 旋转矩阵\n首先要说明的是，左右手旋转矩阵是不一样的，而OpenGL用的是**右手坐标系**，这里给出的旋转矩阵也是基于右手坐标系的  \n\n绕x轴旋转矩阵：  \n\n\n\\begin{bmatrix} \n\\color{red}1 & \\color{red}0 & \\color{red}0 & \\\\ \n\\color{green}0 & \\color{green}{\\cos \\theta} & - \\color{green}{\\sin \\theta} \\\\  \n\\color{blue}0 & \\color{blue}{\\sin \\theta} & \\color{blue}{\\cos \\theta} \\\\  \\end{bmatrix} \n\n\n沿y轴旋转矩阵：  \n\\begin{bmatrix} \n\\color{red}{\\cos \\theta} & \\color{red}0 & \\color{red}{\\sin \\theta} \\\\ \n\\color{green}0 & \\color{green}1 & \\color{green}0  \\\\ \n- \\color{blue}{\\sin \\theta} & \\color{blue}0 & \\color{blue}{\\cos \\theta}\n\\end{bmatrix}\n\n\n沿z轴旋转矩阵：  \n\\begin{bmatrix} \n\\color{red}{\\cos \\theta} & - \\color{red}{\\sin \\theta} & \\color{red}0  \\\\ \n\\color{green}{\\sin \\theta} & \\color{green}{\\cos \\theta} & \\color{green}0  \\\\ \n\\color{blue}0 & \\color{blue}0 & \\color{blue}1  \\\\ \n\\end{bmatrix}\n\n\n\n\n\n\n\n\n\n\n参考：  \n* [变换](https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/07%20Transformations/#_18)\n","source":"_posts/OpenGL_matrix.md","raw":"title: OpenGL中旋转矩阵\nmathjax: true\nauthor: pigLoveRabbit\ntags:\n  - 矩阵\ncategories:\n  - 矩阵\ndate: 2023-03-21 11:00:00\n---\n## 旋转矩阵\n首先要说明的是，左右手旋转矩阵是不一样的，而OpenGL用的是**右手坐标系**，这里给出的旋转矩阵也是基于右手坐标系的  \n\n绕x轴旋转矩阵：  \n\n\n\\begin{bmatrix} \n\\color{red}1 & \\color{red}0 & \\color{red}0 & \\\\ \n\\color{green}0 & \\color{green}{\\cos \\theta} & - \\color{green}{\\sin \\theta} \\\\  \n\\color{blue}0 & \\color{blue}{\\sin \\theta} & \\color{blue}{\\cos \\theta} \\\\  \\end{bmatrix} \n\n\n沿y轴旋转矩阵：  \n\\begin{bmatrix} \n\\color{red}{\\cos \\theta} & \\color{red}0 & \\color{red}{\\sin \\theta} \\\\ \n\\color{green}0 & \\color{green}1 & \\color{green}0  \\\\ \n- \\color{blue}{\\sin \\theta} & \\color{blue}0 & \\color{blue}{\\cos \\theta}\n\\end{bmatrix}\n\n\n沿z轴旋转矩阵：  \n\\begin{bmatrix} \n\\color{red}{\\cos \\theta} & - \\color{red}{\\sin \\theta} & \\color{red}0  \\\\ \n\\color{green}{\\sin \\theta} & \\color{green}{\\cos \\theta} & \\color{green}0  \\\\ \n\\color{blue}0 & \\color{blue}0 & \\color{blue}1  \\\\ \n\\end{bmatrix}\n\n\n\n\n\n\n\n\n\n\n参考：  \n* [变换](https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/07%20Transformations/#_18)\n","slug":"OpenGL_matrix","published":1,"updated":"2023-03-21T04:15:09.381Z","_id":"clfhq40l200122o3m3b5x39jy","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"旋转矩阵\">旋转矩阵</h2>\r\n<p>首先要说明的是，左右手旋转矩阵是不一样的，而OpenGL用的是<strong>右手坐标系</strong>，这里给出的旋转矩阵也是基于右手坐标系的</p>\r\n<p>绕x轴旋转矩阵：</p>\r\n<span class=\"math display\">\\[\\begin{bmatrix}\r\n\\color{red}1 &amp; \\color{red}0 &amp; \\color{red}0 &amp; \\\\\r\n\\color{green}0 &amp; \\color{green}{\\cos \\theta} &amp; -\r\n\\color{green}{\\sin \\theta} \\\\  \r\n\\color{blue}0 &amp; \\color{blue}{\\sin \\theta} &amp; \\color{blue}{\\cos\r\n\\theta} \\\\  \\end{bmatrix}\\]</span>\r\n沿y轴旋转矩阵：<br />\r\n\r\n<span class=\"math display\">\\[\\begin{bmatrix}\r\n\\color{red}{\\cos \\theta} &amp; \\color{red}0 &amp; \\color{red}{\\sin\r\n\\theta} \\\\\r\n\\color{green}0 &amp; \\color{green}1 &amp; \\color{green}0  \\\\\r\n- \\color{blue}{\\sin \\theta} &amp; \\color{blue}0 &amp; \\color{blue}{\\cos\r\n\\theta}\r\n\\end{bmatrix}\\]</span>\r\n沿z轴旋转矩阵：<br />\r\n\r\n<span class=\"math display\">\\[\\begin{bmatrix}\r\n\\color{red}{\\cos \\theta} &amp; - \\color{red}{\\sin \\theta} &amp;\r\n\\color{red}0  \\\\\r\n\\color{green}{\\sin \\theta} &amp; \\color{green}{\\cos \\theta} &amp;\r\n\\color{green}0  \\\\\r\n\\color{blue}0 &amp; \\color{blue}0 &amp; \\color{blue}1  \\\\\r\n\\end{bmatrix}\\]</span>\r\n<p>参考：<br />\r\n* <a\r\nhref=\"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/07%20Transformations/#_18\">变换</a></p>\r\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"旋转矩阵\">旋转矩阵</h2>\r\n<p>首先要说明的是，左右手旋转矩阵是不一样的，而OpenGL用的是<strong>右手坐标系</strong>，这里给出的旋转矩阵也是基于右手坐标系的</p>\r\n<p>绕x轴旋转矩阵：</p>\r\n<span class=\"math display\">\\[\\begin{bmatrix}\r\n\\color{red}1 &amp; \\color{red}0 &amp; \\color{red}0 &amp; \\\\\r\n\\color{green}0 &amp; \\color{green}{\\cos \\theta} &amp; -\r\n\\color{green}{\\sin \\theta} \\\\  \r\n\\color{blue}0 &amp; \\color{blue}{\\sin \\theta} &amp; \\color{blue}{\\cos\r\n\\theta} \\\\  \\end{bmatrix}\\]</span>\r\n沿y轴旋转矩阵：<br />\r\n\r\n<span class=\"math display\">\\[\\begin{bmatrix}\r\n\\color{red}{\\cos \\theta} &amp; \\color{red}0 &amp; \\color{red}{\\sin\r\n\\theta} \\\\\r\n\\color{green}0 &amp; \\color{green}1 &amp; \\color{green}0  \\\\\r\n- \\color{blue}{\\sin \\theta} &amp; \\color{blue}0 &amp; \\color{blue}{\\cos\r\n\\theta}\r\n\\end{bmatrix}\\]</span>\r\n沿z轴旋转矩阵：<br />\r\n\r\n<span class=\"math display\">\\[\\begin{bmatrix}\r\n\\color{red}{\\cos \\theta} &amp; - \\color{red}{\\sin \\theta} &amp;\r\n\\color{red}0  \\\\\r\n\\color{green}{\\sin \\theta} &amp; \\color{green}{\\cos \\theta} &amp;\r\n\\color{green}0  \\\\\r\n\\color{blue}0 &amp; \\color{blue}0 &amp; \\color{blue}1  \\\\\r\n\\end{bmatrix}\\]</span>\r\n<p>参考：<br />\r\n* <a\r\nhref=\"https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/07%20Transformations/#_18\">变换</a></p>\r\n"},{"title":"Python曲线拟合","author":"Salamander","date":"2020-04-12T05:00:00.000Z","_content":"## Python曲线拟合\n\n![](https://s1.ax1x.com/2020/04/16/JkSI7F.png)\n\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS\n* Python版本：3.6.9\n\n\n## 曲线拟合\n现在我们有一组数据，表达的含义是在不同的时间点的充值金额，反映在坐标上就是一系列的散点，我们希望选择适当的曲线类型（如`y = a*x^2 + b`）“最佳”地逼近或拟合已知数据，这便是**曲线拟合**（curve fitting）。当然，变量间未必都是线性关系，我们可能会用到指数函数、对数函数、幂函数等。\n\n<!-- more -->\n\n## Python拟合库\n![](https://s1.ax1x.com/2020/04/16/Jkp7b8.png)  \nPython的[**SciPy**](https://www.scipy.org/)库是一个用于数学、科学、工程领域的常用软件包，可以处理插值、积分、优化、图像处理、常微分方程数值解的求解、信号处理等问题。SciPy是基于**NumPy**，所以你也需要安装NumPy，另外用了**Matplotlib**库来绘制图表，所以也需要安装`Matplotlib`。（Python在科学计算领域，numpy、Scipy、Matplotlib是非常受欢迎的三个库）  \n\n\n## 使用案例\n首先安装所需依赖（`pip`使用豆瓣镜像）\n```\npip  install  -i  https://pypi.doubanio.com/simple/  numpy scipy matplotlib\n```\n\n### 多项式拟合\n第一种是进行多项式拟合，数学上可以证明，任意函数都可以表示为多项式形式。用的函数是`numpy`的`polyfit`函数\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 定义x、y散点坐标\nx = [10, 20, 30, 40, 50, 60, 70, 80]\ny = [174, 236, 305, 334, 349, 351, 342, 323]\n\n# 转化为numpy的数组\nx = np.array(x)\ny = np.array(y)\n\n# 这里的3表示最高幂，也就是函数形式为y = a* x^3 + b * x^2 + c * x + d\nparameter = np.polyfit(x, y, 3)\nprint('函数系数为:\\n', parameter)\n\nfunc1 = np.poly1d(parameter)\nprint('函数为 :\\n', func1)\n\n# 也可使用newY=np.polyval(func1, x)\nnewY = func1(x)  # 拟合y值\n\n# 绘图\nplot1 = plt.plot(x, y, 's', label='original values')\nplot2 = plt.plot(x, newY, 'r', label='polyfit values')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend(loc=4)  # 指定legend的位置右下角\nplt.title('polyfitting')\nplt.show()\n```\n拟合结果:  \n![](https://s1.ax1x.com/2020/04/16/JktOn1.png)\n\n\n### 给定函数形式拟合\nscipy模块的子模块optimize中提供了一个专门用于曲线拟合的函数`curve_fit()`  \n下面通过示例来说明一下如何使用curve_fit()进行直线和曲线的拟合与绘制。  \n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import optimize\n \n#直线方程函数\ndef f_1(x, A, B):\n    return A*x + B\n \n#二次曲线方程\ndef f_2(x, A, B, C):\n    return A*x*x + B*x + C\n \n#三次曲线方程\ndef f_3(x, A, B, C, D):\n    return A*x*x*x + B*x*x + C*x + D\n \ndef plot_test():\n \n    plt.figure()\n \n    #拟合点\n    x0 = [1, 2, 3, 4, 5]\n    y0 = [1, 3, 8, 18, 36]\n \n    #绘制散点\n    plt.scatter(x0[:], y0[:], 25, \"red\")\n \n    #直线拟合与绘制\n    A1, B1 = optimize.curve_fit(f_1, x0, y0)[0]\n    x1 = np.arange(0, 6, 0.01)\n    y1 = A1*x1 + B1\n    plt.plot(x1, y1, \"blue\")\n \n    #二次曲线拟合与绘制\n    A2, B2, C2 = optimize.curve_fit(f_2, x0, y0)[0]\n    x2 = np.arange(0, 6, 0.01)\n    y2 = A2*x2*x2 + B2*x2 + C2 \n    plt.plot(x2, y2, \"green\")\n \n    #三次曲线拟合与绘制\n    A3, B3, C3, D3= optimize.curve_fit(f_3, x0, y0)[0]\n    x3 = np.arange(0, 6, 0.01)\n    y3 = A3*x3*x3*x3 + B3*x3*x3 + C3*x3 + D3 \n    plt.plot(x3, y3, \"purple\")\n \n    plt.title(\"test\")\n    plt.xlabel('x')\n    plt.ylabel('y')\n \n    plt.show()\n \n    return\n```\n\n当然，curve_fit()函数不仅可以用于直线、二次曲线、三次曲线的拟合和绘制，仿照代码中的形式，可以适用于任意形式的曲线的拟合和绘制，只要定义好合适的曲线方程即可。\n\n\n\n\n参考：\n* [np.polyfit()与np.poly1d()将点拟合成曲线](https://drivingc.com/p/5af5ab892392ec35c23048e2)\n* [直线和曲线的拟合与绘制](https://blog.csdn.net/guduruyu/article/details/70313176)","source":"_posts/Python_curve_fit.md","raw":"title: Python曲线拟合\nauthor: Salamander\ntags:\n  - Python\n  - Matplotlib\ncategories:\n  - Python\ndate: 2020-04-12 13:00:00\n---\n## Python曲线拟合\n\n![](https://s1.ax1x.com/2020/04/16/JkSI7F.png)\n\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS\n* Python版本：3.6.9\n\n\n## 曲线拟合\n现在我们有一组数据，表达的含义是在不同的时间点的充值金额，反映在坐标上就是一系列的散点，我们希望选择适当的曲线类型（如`y = a*x^2 + b`）“最佳”地逼近或拟合已知数据，这便是**曲线拟合**（curve fitting）。当然，变量间未必都是线性关系，我们可能会用到指数函数、对数函数、幂函数等。\n\n<!-- more -->\n\n## Python拟合库\n![](https://s1.ax1x.com/2020/04/16/Jkp7b8.png)  \nPython的[**SciPy**](https://www.scipy.org/)库是一个用于数学、科学、工程领域的常用软件包，可以处理插值、积分、优化、图像处理、常微分方程数值解的求解、信号处理等问题。SciPy是基于**NumPy**，所以你也需要安装NumPy，另外用了**Matplotlib**库来绘制图表，所以也需要安装`Matplotlib`。（Python在科学计算领域，numpy、Scipy、Matplotlib是非常受欢迎的三个库）  \n\n\n## 使用案例\n首先安装所需依赖（`pip`使用豆瓣镜像）\n```\npip  install  -i  https://pypi.doubanio.com/simple/  numpy scipy matplotlib\n```\n\n### 多项式拟合\n第一种是进行多项式拟合，数学上可以证明，任意函数都可以表示为多项式形式。用的函数是`numpy`的`polyfit`函数\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 定义x、y散点坐标\nx = [10, 20, 30, 40, 50, 60, 70, 80]\ny = [174, 236, 305, 334, 349, 351, 342, 323]\n\n# 转化为numpy的数组\nx = np.array(x)\ny = np.array(y)\n\n# 这里的3表示最高幂，也就是函数形式为y = a* x^3 + b * x^2 + c * x + d\nparameter = np.polyfit(x, y, 3)\nprint('函数系数为:\\n', parameter)\n\nfunc1 = np.poly1d(parameter)\nprint('函数为 :\\n', func1)\n\n# 也可使用newY=np.polyval(func1, x)\nnewY = func1(x)  # 拟合y值\n\n# 绘图\nplot1 = plt.plot(x, y, 's', label='original values')\nplot2 = plt.plot(x, newY, 'r', label='polyfit values')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend(loc=4)  # 指定legend的位置右下角\nplt.title('polyfitting')\nplt.show()\n```\n拟合结果:  \n![](https://s1.ax1x.com/2020/04/16/JktOn1.png)\n\n\n### 给定函数形式拟合\nscipy模块的子模块optimize中提供了一个专门用于曲线拟合的函数`curve_fit()`  \n下面通过示例来说明一下如何使用curve_fit()进行直线和曲线的拟合与绘制。  \n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import optimize\n \n#直线方程函数\ndef f_1(x, A, B):\n    return A*x + B\n \n#二次曲线方程\ndef f_2(x, A, B, C):\n    return A*x*x + B*x + C\n \n#三次曲线方程\ndef f_3(x, A, B, C, D):\n    return A*x*x*x + B*x*x + C*x + D\n \ndef plot_test():\n \n    plt.figure()\n \n    #拟合点\n    x0 = [1, 2, 3, 4, 5]\n    y0 = [1, 3, 8, 18, 36]\n \n    #绘制散点\n    plt.scatter(x0[:], y0[:], 25, \"red\")\n \n    #直线拟合与绘制\n    A1, B1 = optimize.curve_fit(f_1, x0, y0)[0]\n    x1 = np.arange(0, 6, 0.01)\n    y1 = A1*x1 + B1\n    plt.plot(x1, y1, \"blue\")\n \n    #二次曲线拟合与绘制\n    A2, B2, C2 = optimize.curve_fit(f_2, x0, y0)[0]\n    x2 = np.arange(0, 6, 0.01)\n    y2 = A2*x2*x2 + B2*x2 + C2 \n    plt.plot(x2, y2, \"green\")\n \n    #三次曲线拟合与绘制\n    A3, B3, C3, D3= optimize.curve_fit(f_3, x0, y0)[0]\n    x3 = np.arange(0, 6, 0.01)\n    y3 = A3*x3*x3*x3 + B3*x3*x3 + C3*x3 + D3 \n    plt.plot(x3, y3, \"purple\")\n \n    plt.title(\"test\")\n    plt.xlabel('x')\n    plt.ylabel('y')\n \n    plt.show()\n \n    return\n```\n\n当然，curve_fit()函数不仅可以用于直线、二次曲线、三次曲线的拟合和绘制，仿照代码中的形式，可以适用于任意形式的曲线的拟合和绘制，只要定义好合适的曲线方程即可。\n\n\n\n\n参考：\n* [np.polyfit()与np.poly1d()将点拟合成曲线](https://drivingc.com/p/5af5ab892392ec35c23048e2)\n* [直线和曲线的拟合与绘制](https://blog.csdn.net/guduruyu/article/details/70313176)","slug":"Python_curve_fit","published":1,"updated":"2023-03-21T02:48:19.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l300162o3m3zseejee","content":"<h2 id=\"python曲线拟合\">Python曲线拟合</h2>\r\n<p><img src=\"https://s1.ax1x.com/2020/04/16/JkSI7F.png\" /></p>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS * Python版本：3.6.9</p>\r\n<h2 id=\"曲线拟合\">曲线拟合</h2>\r\n<p>现在我们有一组数据，表达的含义是在不同的时间点的充值金额，反映在坐标上就是一系列的散点，我们希望选择适当的曲线类型（如<code>y = a*x^2 + b</code>）“最佳”地逼近或拟合已知数据，这便是<strong>曲线拟合</strong>（curve\r\nfitting）。当然，变量间未必都是线性关系，我们可能会用到指数函数、对数函数、幂函数等。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"python拟合库\">Python拟合库</h2>\r\n<p><img src=\"https://s1.ax1x.com/2020/04/16/Jkp7b8.png\" /><br />\r\nPython的<a\r\nhref=\"https://www.scipy.org/\"><strong>SciPy</strong></a>库是一个用于数学、科学、工程领域的常用软件包，可以处理插值、积分、优化、图像处理、常微分方程数值解的求解、信号处理等问题。SciPy是基于<strong>NumPy</strong>，所以你也需要安装NumPy，另外用了<strong>Matplotlib</strong>库来绘制图表，所以也需要安装<code>Matplotlib</code>。（Python在科学计算领域，numpy、Scipy、Matplotlib是非常受欢迎的三个库）</p>\r\n<h2 id=\"使用案例\">使用案例</h2>\r\n<p>首先安装所需依赖（<code>pip</code>使用豆瓣镜像） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip  install  -i  https://pypi.doubanio.com/simple/  numpy scipy matplotlib</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"多项式拟合\">多项式拟合</h3>\r\n<p>第一种是进行多项式拟合，数学上可以证明，任意函数都可以表示为多项式形式。用的函数是<code>numpy</code>的<code>polyfit</code>函数\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\"></span><br><span class=\"line\"># 定义x、y散点坐标</span><br><span class=\"line\">x = [10, 20, 30, 40, 50, 60, 70, 80]</span><br><span class=\"line\">y = [174, 236, 305, 334, 349, 351, 342, 323]</span><br><span class=\"line\"></span><br><span class=\"line\"># 转化为numpy的数组</span><br><span class=\"line\">x = np.array(x)</span><br><span class=\"line\">y = np.array(y)</span><br><span class=\"line\"></span><br><span class=\"line\"># 这里的3表示最高幂，也就是函数形式为y = a* x^3 + b * x^2 + c * x + d</span><br><span class=\"line\">parameter = np.polyfit(x, y, 3)</span><br><span class=\"line\">print(&#x27;函数系数为:\\n&#x27;, parameter)</span><br><span class=\"line\"></span><br><span class=\"line\">func1 = np.poly1d(parameter)</span><br><span class=\"line\">print(&#x27;函数为 :\\n&#x27;, func1)</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可使用newY=np.polyval(func1, x)</span><br><span class=\"line\">newY = func1(x)  # 拟合y值</span><br><span class=\"line\"></span><br><span class=\"line\"># 绘图</span><br><span class=\"line\">plot1 = plt.plot(x, y, &#x27;s&#x27;, label=&#x27;original values&#x27;)</span><br><span class=\"line\">plot2 = plt.plot(x, newY, &#x27;r&#x27;, label=&#x27;polyfit values&#x27;)</span><br><span class=\"line\">plt.xlabel(&#x27;x&#x27;)</span><br><span class=\"line\">plt.ylabel(&#x27;y&#x27;)</span><br><span class=\"line\">plt.legend(loc=4)  # 指定legend的位置右下角</span><br><span class=\"line\">plt.title(&#x27;polyfitting&#x27;)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure> 拟合结果:<br />\r\n<img src=\"https://s1.ax1x.com/2020/04/16/JktOn1.png\" /></p>\r\n<h3 id=\"给定函数形式拟合\">给定函数形式拟合</h3>\r\n<p>scipy模块的子模块optimize中提供了一个专门用于曲线拟合的函数<code>curve_fit()</code><br />\r\n下面通过示例来说明一下如何使用curve_fit()进行直线和曲线的拟合与绘制。<br />\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy <span class=\"keyword\">import</span> optimize</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#直线方程函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f_1</span>(<span class=\"params\">x, A, B</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A*x + B</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#二次曲线方程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f_2</span>(<span class=\"params\">x, A, B, C</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A*x*x + B*x + C</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#三次曲线方程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f_3</span>(<span class=\"params\">x, A, B, C, D</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A*x*x*x + B*x*x + C*x + D</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plot_test</span>():</span><br><span class=\"line\"> </span><br><span class=\"line\">    plt.figure()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#拟合点</span></span><br><span class=\"line\">    x0 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">    y0 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">18</span>, <span class=\"number\">36</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#绘制散点</span></span><br><span class=\"line\">    plt.scatter(x0[:], y0[:], <span class=\"number\">25</span>, <span class=\"string\">&quot;red&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#直线拟合与绘制</span></span><br><span class=\"line\">    A1, B1 = optimize.curve_fit(f_1, x0, y0)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    x1 = np.arange(<span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">0.01</span>)</span><br><span class=\"line\">    y1 = A1*x1 + B1</span><br><span class=\"line\">    plt.plot(x1, y1, <span class=\"string\">&quot;blue&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#二次曲线拟合与绘制</span></span><br><span class=\"line\">    A2, B2, C2 = optimize.curve_fit(f_2, x0, y0)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    x2 = np.arange(<span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">0.01</span>)</span><br><span class=\"line\">    y2 = A2*x2*x2 + B2*x2 + C2 </span><br><span class=\"line\">    plt.plot(x2, y2, <span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#三次曲线拟合与绘制</span></span><br><span class=\"line\">    A3, B3, C3, D3= optimize.curve_fit(f_3, x0, y0)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    x3 = np.arange(<span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">0.01</span>)</span><br><span class=\"line\">    y3 = A3*x3*x3*x3 + B3*x3*x3 + C3*x3 + D3 </span><br><span class=\"line\">    plt.plot(x3, y3, <span class=\"string\">&quot;purple&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    plt.title(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">    plt.xlabel(<span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">    plt.ylabel(<span class=\"string\">&#x27;y&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure></p>\r\n<p>当然，curve_fit()函数不仅可以用于直线、二次曲线、三次曲线的拟合和绘制，仿照代码中的形式，可以适用于任意形式的曲线的拟合和绘制，只要定义好合适的曲线方程即可。</p>\r\n<p>参考： * <a\r\nhref=\"https://drivingc.com/p/5af5ab892392ec35c23048e2\">np.polyfit()与np.poly1d()将点拟合成曲线</a>\r\n* <a\r\nhref=\"https://blog.csdn.net/guduruyu/article/details/70313176\">直线和曲线的拟合与绘制</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"python曲线拟合\">Python曲线拟合</h2>\r\n<p><img src=\"https://s1.ax1x.com/2020/04/16/JkSI7F.png\" /></p>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS * Python版本：3.6.9</p>\r\n<h2 id=\"曲线拟合\">曲线拟合</h2>\r\n<p>现在我们有一组数据，表达的含义是在不同的时间点的充值金额，反映在坐标上就是一系列的散点，我们希望选择适当的曲线类型（如<code>y = a*x^2 + b</code>）“最佳”地逼近或拟合已知数据，这便是<strong>曲线拟合</strong>（curve\r\nfitting）。当然，变量间未必都是线性关系，我们可能会用到指数函数、对数函数、幂函数等。</p>","more":"<h2 id=\"python拟合库\">Python拟合库</h2>\r\n<p><img src=\"https://s1.ax1x.com/2020/04/16/Jkp7b8.png\" /><br />\r\nPython的<a\r\nhref=\"https://www.scipy.org/\"><strong>SciPy</strong></a>库是一个用于数学、科学、工程领域的常用软件包，可以处理插值、积分、优化、图像处理、常微分方程数值解的求解、信号处理等问题。SciPy是基于<strong>NumPy</strong>，所以你也需要安装NumPy，另外用了<strong>Matplotlib</strong>库来绘制图表，所以也需要安装<code>Matplotlib</code>。（Python在科学计算领域，numpy、Scipy、Matplotlib是非常受欢迎的三个库）</p>\r\n<h2 id=\"使用案例\">使用案例</h2>\r\n<p>首先安装所需依赖（<code>pip</code>使用豆瓣镜像） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip  install  -i  https://pypi.doubanio.com/simple/  numpy scipy matplotlib</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"多项式拟合\">多项式拟合</h3>\r\n<p>第一种是进行多项式拟合，数学上可以证明，任意函数都可以表示为多项式形式。用的函数是<code>numpy</code>的<code>polyfit</code>函数\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import numpy as np</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\"></span><br><span class=\"line\"># 定义x、y散点坐标</span><br><span class=\"line\">x = [10, 20, 30, 40, 50, 60, 70, 80]</span><br><span class=\"line\">y = [174, 236, 305, 334, 349, 351, 342, 323]</span><br><span class=\"line\"></span><br><span class=\"line\"># 转化为numpy的数组</span><br><span class=\"line\">x = np.array(x)</span><br><span class=\"line\">y = np.array(y)</span><br><span class=\"line\"></span><br><span class=\"line\"># 这里的3表示最高幂，也就是函数形式为y = a* x^3 + b * x^2 + c * x + d</span><br><span class=\"line\">parameter = np.polyfit(x, y, 3)</span><br><span class=\"line\">print(&#x27;函数系数为:\\n&#x27;, parameter)</span><br><span class=\"line\"></span><br><span class=\"line\">func1 = np.poly1d(parameter)</span><br><span class=\"line\">print(&#x27;函数为 :\\n&#x27;, func1)</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可使用newY=np.polyval(func1, x)</span><br><span class=\"line\">newY = func1(x)  # 拟合y值</span><br><span class=\"line\"></span><br><span class=\"line\"># 绘图</span><br><span class=\"line\">plot1 = plt.plot(x, y, &#x27;s&#x27;, label=&#x27;original values&#x27;)</span><br><span class=\"line\">plot2 = plt.plot(x, newY, &#x27;r&#x27;, label=&#x27;polyfit values&#x27;)</span><br><span class=\"line\">plt.xlabel(&#x27;x&#x27;)</span><br><span class=\"line\">plt.ylabel(&#x27;y&#x27;)</span><br><span class=\"line\">plt.legend(loc=4)  # 指定legend的位置右下角</span><br><span class=\"line\">plt.title(&#x27;polyfitting&#x27;)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure> 拟合结果:<br />\r\n<img src=\"https://s1.ax1x.com/2020/04/16/JktOn1.png\" /></p>\r\n<h3 id=\"给定函数形式拟合\">给定函数形式拟合</h3>\r\n<p>scipy模块的子模块optimize中提供了一个专门用于曲线拟合的函数<code>curve_fit()</code><br />\r\n下面通过示例来说明一下如何使用curve_fit()进行直线和曲线的拟合与绘制。<br />\r\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy <span class=\"keyword\">import</span> optimize</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#直线方程函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f_1</span>(<span class=\"params\">x, A, B</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A*x + B</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#二次曲线方程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f_2</span>(<span class=\"params\">x, A, B, C</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A*x*x + B*x + C</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#三次曲线方程</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f_3</span>(<span class=\"params\">x, A, B, C, D</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A*x*x*x + B*x*x + C*x + D</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plot_test</span>():</span><br><span class=\"line\"> </span><br><span class=\"line\">    plt.figure()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#拟合点</span></span><br><span class=\"line\">    x0 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">    y0 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">18</span>, <span class=\"number\">36</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#绘制散点</span></span><br><span class=\"line\">    plt.scatter(x0[:], y0[:], <span class=\"number\">25</span>, <span class=\"string\">&quot;red&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#直线拟合与绘制</span></span><br><span class=\"line\">    A1, B1 = optimize.curve_fit(f_1, x0, y0)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    x1 = np.arange(<span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">0.01</span>)</span><br><span class=\"line\">    y1 = A1*x1 + B1</span><br><span class=\"line\">    plt.plot(x1, y1, <span class=\"string\">&quot;blue&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#二次曲线拟合与绘制</span></span><br><span class=\"line\">    A2, B2, C2 = optimize.curve_fit(f_2, x0, y0)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    x2 = np.arange(<span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">0.01</span>)</span><br><span class=\"line\">    y2 = A2*x2*x2 + B2*x2 + C2 </span><br><span class=\"line\">    plt.plot(x2, y2, <span class=\"string\">&quot;green&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">#三次曲线拟合与绘制</span></span><br><span class=\"line\">    A3, B3, C3, D3= optimize.curve_fit(f_3, x0, y0)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    x3 = np.arange(<span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">0.01</span>)</span><br><span class=\"line\">    y3 = A3*x3*x3*x3 + B3*x3*x3 + C3*x3 + D3 </span><br><span class=\"line\">    plt.plot(x3, y3, <span class=\"string\">&quot;purple&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    plt.title(<span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">    plt.xlabel(<span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">    plt.ylabel(<span class=\"string\">&#x27;y&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure></p>\r\n<p>当然，curve_fit()函数不仅可以用于直线、二次曲线、三次曲线的拟合和绘制，仿照代码中的形式，可以适用于任意形式的曲线的拟合和绘制，只要定义好合适的曲线方程即可。</p>\r\n<p>参考： * <a\r\nhref=\"https://drivingc.com/p/5af5ab892392ec35c23048e2\">np.polyfit()与np.poly1d()将点拟合成曲线</a>\r\n* <a\r\nhref=\"https://blog.csdn.net/guduruyu/article/details/70313176\">直线和曲线的拟合与绘制</a></p>"},{"title":"Qt之初步尝试","author":"Salamander","date":"2020-01-18T02:00:00.000Z","_content":"本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Qt版本：5.14.1\n* Qt Creator版本：4.10.1\n\n## Qt安装\n首先，我们得明白一些概念。  \n**Qt**是一个C++库，或者说是开发框架，里面集成了一些库函数，提高开发效率。  \n**Qt Creator**是Qt集成开发环境，你可以在这里编写，编译，运行你的程序。所以最开始写Qt只安装**Qt Creator**这个是不行的，因为还没有相关的Qt库呢，但是新版的**Qt Creator**（5.9开始）已经集成了Qt了，所以入门就方便很多了。  \n关于Qt下载，大家可以打开这里的[链接](http://download.qt.io/archive/qt/)，里面有各版本Qt（**Qt**和**Qt Creator**的集成包），操作简单，最新版本是**5.14**。  \n\n<!-- more -->\n\nwindows版本只要双击exe就可以安装了，Linux版本需要先添加执行权限然后运行文件\n```\n$ chmod +x qt-opensource-linux-x64-5.13.2.run\n$ ./qt-opensource-linux-x64-5.13.2.run\n```\n对于Linux系统，需要安装C/C++编译器，以Ubuntu为例，需要执行：\n```\nsudo apt-get install -y gcc g++\n```\n在用到`WebEngine`组件的会遇到问题\n**error: GL/gl.h: No such file or directory**，需要\n```\nsudo apt-get install mesa-common-dev\n```\nNote: Just installing the above-mentioned mesa-common-dev kit is not sufficient for more recent Ubuntu versions. Based on a comment in the Qt forum an additional package needs installation. Execute following command:\n```\nsudo apt-get install libglu1-mesa-dev -y\n```\nTested with Qt5.3.1 and Ubuntu 14.04 and it solved the problem with missing **-lGL**.\n\n\n\n\n这一步需要注册一个账号，随便注册一个即可。  \n![install 1](https://s2.ax1x.com/2020/01/18/1p7NOs.png)  \n这一步选择你需要的组件（不清楚的话，就像我这样选择好了）  \n![install 2](https://s2.ax1x.com/2020/01/18/1p7IfO.png)  \n最后来到Qt Creator的启动界面  \n![](https://s2.ax1x.com/2020/01/18/1pqSyQ.png)\n\n\n## 配置环境变量\n这一步配置的环境变量在打包Qt程序的时候是需要的。  \n\n编辑`vim ~/.bashrc`，加入以下变量\n```\nexport QTDIR=/home/salamander/Qt5.14.1/5.14.1/gcc_64   #这个路径依据你安装的Qt路径定\nexport PATH=$QTDIR/bin:$PATH\nexport MANPATH=$QTDIR/man:$MANPATH\nexport LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH\n```\n但是在你执行`qmake`命令的时候，你会发现错误：\n```\nqmake: could not exec '/usr/lib/x86_64-linux-gnu/qt4/bin/qmake': no such file or directory\n```\n我们发现`qmake`默认指向了qt4（Ubuntu 18默认装了qt4），其实现在qt官方推荐使用**qtchooser**来管理多个qt版本。\n\n### 什么是qtchooser\nqtchooser其实和jdk版本管理软件一样,是一个qt版本管理软件.用于设置安装多个qt的系统中默认使用的qt版本.我们知道环境变量有一个缺陷:一次只支持一个版本的qt,有的应用可能只兼容低版本qt,这样又要配置环境变量非常麻烦.使用qtchooser方便快速切换qt版本而又不用每次重新配置环境变量\n\n\n首先，我们导入自己安装的qt\n```\nsudo qtchooser -install 5.14.1 /home/salamander/Qt5.14.1/5.14.1/gcc_64/bin/qmake\n```\n注意**目录**一定要精确到qmake这个程序,然后用`qtchooser -l`查看当前系统所有的qt版本,得到如下输出:\n```\n4\n5.14.1\n5\ndefault\nqt4-x86_64-linux-gnu\nqt4\nqt5-x86_64-linux-gnu\nqt5\n```\n可以看到我们自己新安装并命名的**5.14.1**已经导入了,接下来就是设定默认qt版本了,按照qtchooser使用提示,可以添加一个名为`QT_SELECT`的环境变量,来选择默认qt版本:\n```\nexport QT_SELECT=5.14.1\n```\n可以看出这个环境变量后面的值跟的是系统已安装的qt的名称,这些名称可以用`qtchooser -l`查看.\n执行`qmake -v`，发现版本已经是我们自己安装的了：\n```\n$ qmake -v\nQMake version 3.1\nUsing Qt version 5.14.1 in /home/salamander/Qt5.14.1/5.14.1/gcc_64/lib\n```\n每次export这个`QT_SELECT`变量有点麻烦，你可以编辑`.bashrc`来自动切换qt版本。\n\n\n\n\n\n## 写个hello world\n点击**文件**菜单，然后新建项目，选择`Qt Console Application`。  \n![](https://s2.ax1x.com/2020/01/18/19CDSA.png)  \n编辑`main.cpp`文件，代码为：  \n```\n#include <QCoreApplication>\n#include <QDebug>\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication a(argc, argv);\n\n    qDebug() << \"hello world\";\n    return a.exec();\n}\n```\n点击左下角的`Run`按钮，就可以启动程序。  \n![](https://s2.ax1x.com/2020/01/18/19PDNF.png)\n\n## 信号和槽\n信号和槽机制是 QT 的**核心机制**，要精通 QT 编程就必须对信号和槽有所了解。不同于传统的函数回调方式。信号和插槽是 Qt 中非常有特色的地方，可以说是Qt编程区别于其它编程的标志。信号和槽是一种高级接口，应用于对象之间的通信，它是 Qt 的核心特性。\n\n### 信号（signal）\n当一个对象中某些可能会有别的对象关心的状态被修改时，将会发出信号。只有定义了信号的类及其子类可以发出信号。\n\n当一个信号被发出时，连接到这个信号的槽立即被调用，就像一个普通的函数调用。当这种情况发生时，信号槽机制独立于任何 GUI 事件循环。emit 语句之后的代码将在所有的槽返回之后被执行。这种情况与使用连接队列略有不同：使用连接队列的时候，emit 语句之后的代码将立即被执行，而槽在之后执行。\n\n如果一个信号连接了多个槽，当信号发出时，这些槽将以连接的顺序一个接一个地被执行（顺序不确定）。\n\n\n### 槽（slot）\n当连接到的信号发出时，槽就会被调用。槽是**普通的 C++ 函数**，能够被正常的调用。它们的唯一特点是能够与信号连接。\n\n既然信号就是普通的成员函数，当它们像普通函数一样调用的时候，遵循标准 C++ 的规则。但是，作为槽，它们又能够通过信号槽的连接被任何组件调用，不论这个组件的访问级别。这意味着任意类的实例发出的信号，都可以使得不相关的类的私有槽被调用。  \n\n你也能把槽定义成虚的，这一点在实际应用中非常有用。\n\n### 信号与槽的关联\n通过调用 **QObject** 对象的 connect 函数来将某个对象的信号与另外一个对象的槽函数相关联，这样当发射者发射信号时，接收者的槽函数将被调用。  \n\nconnect()语句的原型类似于：\n```\nconnect(sender, SIGNAL(signal), receiver, SLOT(slot));\n```\n这里，sender 和 receiver 都是 **QObject** 类型的，singal 和 slot 都是没有参数名称的函数签名。SINGAL()和SLOT()宏用于把参数转换成字符串。  \n一个信号可以和多个槽相连：\n```\nconnect(slider, SIGNAL(valueChanged(int)),\n              spinBox, SLOT(setValue(int))); \nconnect(slider, SIGNAL(valueChanged(int)),\n              this, SLOT(updateStatusBarIndicator(int)));\n```\n\n\n\n## Gui简单例子\n这个例子中，我们用了上面槽的知识，我们在界面上放了一个`button`，然后添加了**slot**获得了button的click事件发送者的`objectName`。  \n**界面**  \n\n![upload successful](/images/Qt-Gui-Example.png)  \n\n**mainwindow.h**\n```\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n\nQT_BEGIN_NAMESPACE\nnamespace Ui { class MainWindow; }\nQT_END_NAMESPACE\n\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\n\npublic:\n    MainWindow(QWidget *parent = nullptr);\n    ~MainWindow();\n\nprivate:\n    Ui::MainWindow *ui;\nprivate slots:\n    void handleButton();  // 处理函数\n};\n#endif // MAINWINDOW_H\n\n```\n\n**mainwindow.cpp**\n```\n#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n#include <QDebug>\n\n\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui->setupUi(this);\n    connect(ui->myPushButton, SIGNAL(clicked()), this, SLOT(handleButton()));\n}\n\nvoid MainWindow::handleButton()\n{\n    QObject *senderObj = sender(); // This will give Sender object\n    QString senderObjName = senderObj->objectName();\n    qDebug() << senderObjName;  // get myPushButton\n}\n\nMainWindow::~MainWindow()\n{\n    delete ui;\n}\n```\n\n\n\n\n\n\n\n\n## 参考\n\n* 油管上VoidRealms的[Qt视频](https://www.youtube.com/watch?v=Id-sPu_m_hE&list=PL2D1942A4688E9D63&index=2)\n* [Install Qt5 On Ubuntu](https://wiki.qt.io/Install_Qt_5_on_Ubuntu)\n* [Ubuntu 18.04安装QtCreator+配置qt环境+qtchooser\n](https://blog.csdn.net/AAMahone/article/details/86515536)","source":"_posts/Qt_begin.md","raw":"title: Qt之初步尝试\nauthor: Salamander\ntags:\n  - Qt\n  - Qt Creator\ncategories:\n  - C++\n  - Qt\ndate: 2020-01-18 10:00:00\n---\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Qt版本：5.14.1\n* Qt Creator版本：4.10.1\n\n## Qt安装\n首先，我们得明白一些概念。  \n**Qt**是一个C++库，或者说是开发框架，里面集成了一些库函数，提高开发效率。  \n**Qt Creator**是Qt集成开发环境，你可以在这里编写，编译，运行你的程序。所以最开始写Qt只安装**Qt Creator**这个是不行的，因为还没有相关的Qt库呢，但是新版的**Qt Creator**（5.9开始）已经集成了Qt了，所以入门就方便很多了。  \n关于Qt下载，大家可以打开这里的[链接](http://download.qt.io/archive/qt/)，里面有各版本Qt（**Qt**和**Qt Creator**的集成包），操作简单，最新版本是**5.14**。  \n\n<!-- more -->\n\nwindows版本只要双击exe就可以安装了，Linux版本需要先添加执行权限然后运行文件\n```\n$ chmod +x qt-opensource-linux-x64-5.13.2.run\n$ ./qt-opensource-linux-x64-5.13.2.run\n```\n对于Linux系统，需要安装C/C++编译器，以Ubuntu为例，需要执行：\n```\nsudo apt-get install -y gcc g++\n```\n在用到`WebEngine`组件的会遇到问题\n**error: GL/gl.h: No such file or directory**，需要\n```\nsudo apt-get install mesa-common-dev\n```\nNote: Just installing the above-mentioned mesa-common-dev kit is not sufficient for more recent Ubuntu versions. Based on a comment in the Qt forum an additional package needs installation. Execute following command:\n```\nsudo apt-get install libglu1-mesa-dev -y\n```\nTested with Qt5.3.1 and Ubuntu 14.04 and it solved the problem with missing **-lGL**.\n\n\n\n\n这一步需要注册一个账号，随便注册一个即可。  \n![install 1](https://s2.ax1x.com/2020/01/18/1p7NOs.png)  \n这一步选择你需要的组件（不清楚的话，就像我这样选择好了）  \n![install 2](https://s2.ax1x.com/2020/01/18/1p7IfO.png)  \n最后来到Qt Creator的启动界面  \n![](https://s2.ax1x.com/2020/01/18/1pqSyQ.png)\n\n\n## 配置环境变量\n这一步配置的环境变量在打包Qt程序的时候是需要的。  \n\n编辑`vim ~/.bashrc`，加入以下变量\n```\nexport QTDIR=/home/salamander/Qt5.14.1/5.14.1/gcc_64   #这个路径依据你安装的Qt路径定\nexport PATH=$QTDIR/bin:$PATH\nexport MANPATH=$QTDIR/man:$MANPATH\nexport LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH\n```\n但是在你执行`qmake`命令的时候，你会发现错误：\n```\nqmake: could not exec '/usr/lib/x86_64-linux-gnu/qt4/bin/qmake': no such file or directory\n```\n我们发现`qmake`默认指向了qt4（Ubuntu 18默认装了qt4），其实现在qt官方推荐使用**qtchooser**来管理多个qt版本。\n\n### 什么是qtchooser\nqtchooser其实和jdk版本管理软件一样,是一个qt版本管理软件.用于设置安装多个qt的系统中默认使用的qt版本.我们知道环境变量有一个缺陷:一次只支持一个版本的qt,有的应用可能只兼容低版本qt,这样又要配置环境变量非常麻烦.使用qtchooser方便快速切换qt版本而又不用每次重新配置环境变量\n\n\n首先，我们导入自己安装的qt\n```\nsudo qtchooser -install 5.14.1 /home/salamander/Qt5.14.1/5.14.1/gcc_64/bin/qmake\n```\n注意**目录**一定要精确到qmake这个程序,然后用`qtchooser -l`查看当前系统所有的qt版本,得到如下输出:\n```\n4\n5.14.1\n5\ndefault\nqt4-x86_64-linux-gnu\nqt4\nqt5-x86_64-linux-gnu\nqt5\n```\n可以看到我们自己新安装并命名的**5.14.1**已经导入了,接下来就是设定默认qt版本了,按照qtchooser使用提示,可以添加一个名为`QT_SELECT`的环境变量,来选择默认qt版本:\n```\nexport QT_SELECT=5.14.1\n```\n可以看出这个环境变量后面的值跟的是系统已安装的qt的名称,这些名称可以用`qtchooser -l`查看.\n执行`qmake -v`，发现版本已经是我们自己安装的了：\n```\n$ qmake -v\nQMake version 3.1\nUsing Qt version 5.14.1 in /home/salamander/Qt5.14.1/5.14.1/gcc_64/lib\n```\n每次export这个`QT_SELECT`变量有点麻烦，你可以编辑`.bashrc`来自动切换qt版本。\n\n\n\n\n\n## 写个hello world\n点击**文件**菜单，然后新建项目，选择`Qt Console Application`。  \n![](https://s2.ax1x.com/2020/01/18/19CDSA.png)  \n编辑`main.cpp`文件，代码为：  \n```\n#include <QCoreApplication>\n#include <QDebug>\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication a(argc, argv);\n\n    qDebug() << \"hello world\";\n    return a.exec();\n}\n```\n点击左下角的`Run`按钮，就可以启动程序。  \n![](https://s2.ax1x.com/2020/01/18/19PDNF.png)\n\n## 信号和槽\n信号和槽机制是 QT 的**核心机制**，要精通 QT 编程就必须对信号和槽有所了解。不同于传统的函数回调方式。信号和插槽是 Qt 中非常有特色的地方，可以说是Qt编程区别于其它编程的标志。信号和槽是一种高级接口，应用于对象之间的通信，它是 Qt 的核心特性。\n\n### 信号（signal）\n当一个对象中某些可能会有别的对象关心的状态被修改时，将会发出信号。只有定义了信号的类及其子类可以发出信号。\n\n当一个信号被发出时，连接到这个信号的槽立即被调用，就像一个普通的函数调用。当这种情况发生时，信号槽机制独立于任何 GUI 事件循环。emit 语句之后的代码将在所有的槽返回之后被执行。这种情况与使用连接队列略有不同：使用连接队列的时候，emit 语句之后的代码将立即被执行，而槽在之后执行。\n\n如果一个信号连接了多个槽，当信号发出时，这些槽将以连接的顺序一个接一个地被执行（顺序不确定）。\n\n\n### 槽（slot）\n当连接到的信号发出时，槽就会被调用。槽是**普通的 C++ 函数**，能够被正常的调用。它们的唯一特点是能够与信号连接。\n\n既然信号就是普通的成员函数，当它们像普通函数一样调用的时候，遵循标准 C++ 的规则。但是，作为槽，它们又能够通过信号槽的连接被任何组件调用，不论这个组件的访问级别。这意味着任意类的实例发出的信号，都可以使得不相关的类的私有槽被调用。  \n\n你也能把槽定义成虚的，这一点在实际应用中非常有用。\n\n### 信号与槽的关联\n通过调用 **QObject** 对象的 connect 函数来将某个对象的信号与另外一个对象的槽函数相关联，这样当发射者发射信号时，接收者的槽函数将被调用。  \n\nconnect()语句的原型类似于：\n```\nconnect(sender, SIGNAL(signal), receiver, SLOT(slot));\n```\n这里，sender 和 receiver 都是 **QObject** 类型的，singal 和 slot 都是没有参数名称的函数签名。SINGAL()和SLOT()宏用于把参数转换成字符串。  \n一个信号可以和多个槽相连：\n```\nconnect(slider, SIGNAL(valueChanged(int)),\n              spinBox, SLOT(setValue(int))); \nconnect(slider, SIGNAL(valueChanged(int)),\n              this, SLOT(updateStatusBarIndicator(int)));\n```\n\n\n\n## Gui简单例子\n这个例子中，我们用了上面槽的知识，我们在界面上放了一个`button`，然后添加了**slot**获得了button的click事件发送者的`objectName`。  \n**界面**  \n\n![upload successful](/images/Qt-Gui-Example.png)  \n\n**mainwindow.h**\n```\n#ifndef MAINWINDOW_H\n#define MAINWINDOW_H\n\n#include <QMainWindow>\n\nQT_BEGIN_NAMESPACE\nnamespace Ui { class MainWindow; }\nQT_END_NAMESPACE\n\nclass MainWindow : public QMainWindow\n{\n    Q_OBJECT\n\npublic:\n    MainWindow(QWidget *parent = nullptr);\n    ~MainWindow();\n\nprivate:\n    Ui::MainWindow *ui;\nprivate slots:\n    void handleButton();  // 处理函数\n};\n#endif // MAINWINDOW_H\n\n```\n\n**mainwindow.cpp**\n```\n#include \"mainwindow.h\"\n#include \"ui_mainwindow.h\"\n#include <QDebug>\n\n\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui->setupUi(this);\n    connect(ui->myPushButton, SIGNAL(clicked()), this, SLOT(handleButton()));\n}\n\nvoid MainWindow::handleButton()\n{\n    QObject *senderObj = sender(); // This will give Sender object\n    QString senderObjName = senderObj->objectName();\n    qDebug() << senderObjName;  // get myPushButton\n}\n\nMainWindow::~MainWindow()\n{\n    delete ui;\n}\n```\n\n\n\n\n\n\n\n\n## 参考\n\n* 油管上VoidRealms的[Qt视频](https://www.youtube.com/watch?v=Id-sPu_m_hE&list=PL2D1942A4688E9D63&index=2)\n* [Install Qt5 On Ubuntu](https://wiki.qt.io/Install_Qt_5_on_Ubuntu)\n* [Ubuntu 18.04安装QtCreator+配置qt环境+qtchooser\n](https://blog.csdn.net/AAMahone/article/details/86515536)","slug":"Qt_begin","published":1,"updated":"2023-03-21T02:48:19.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l400192o3mayykgemd","content":"<p>本文环境： * OS：Ubuntu 18.04.3 LTS * Qt版本：5.14.1 * Qt\r\nCreator版本：4.10.1</p>\r\n<h2 id=\"qt安装\">Qt安装</h2>\r\n<p>首先，我们得明白一些概念。<br />\r\n<strong>Qt</strong>是一个C++库，或者说是开发框架，里面集成了一些库函数，提高开发效率。<br />\r\n<strong>Qt\r\nCreator</strong>是Qt集成开发环境，你可以在这里编写，编译，运行你的程序。所以最开始写Qt只安装<strong>Qt\r\nCreator</strong>这个是不行的，因为还没有相关的Qt库呢，但是新版的<strong>Qt\r\nCreator</strong>（5.9开始）已经集成了Qt了，所以入门就方便很多了。<br />\r\n关于Qt下载，大家可以打开这里的<a\r\nhref=\"http://download.qt.io/archive/qt/\">链接</a>，里面有各版本Qt（<strong>Qt</strong>和<strong>Qt\r\nCreator</strong>的集成包），操作简单，最新版本是<strong>5.14</strong>。</p>\r\n<span id=\"more\"></span>\r\n<p>windows版本只要双击exe就可以安装了，Linux版本需要先添加执行权限然后运行文件\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x qt-opensource-linux-x64-5.13.2.run</span><br><span class=\"line\">$ ./qt-opensource-linux-x64-5.13.2.run</span><br></pre></td></tr></table></figure>\r\n对于Linux系统，需要安装C/C++编译器，以Ubuntu为例，需要执行：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y gcc g++</span><br></pre></td></tr></table></figure> 在用到<code>WebEngine</code>组件的会遇到问题\r\n<strong>error: GL/gl.h: No such file or directory</strong>，需要\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mesa-common-dev</span><br></pre></td></tr></table></figure> Note: Just installing the above-mentioned mesa-common-dev\r\nkit is not sufficient for more recent Ubuntu versions. Based on a\r\ncomment in the Qt forum an additional package needs installation.\r\nExecute following command: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libglu1-mesa-dev -y</span><br></pre></td></tr></table></figure> Tested with Qt5.3.1 and Ubuntu\r\n14.04 and it solved the problem with missing <strong>-lGL</strong>.</p>\r\n<p>这一步需要注册一个账号，随便注册一个即可。<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/18/1p7NOs.png\"\r\nalt=\"install 1\" /><br />\r\n这一步选择你需要的组件（不清楚的话，就像我这样选择好了）<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/18/1p7IfO.png\"\r\nalt=\"install 2\" /><br />\r\n最后来到Qt Creator的启动界面<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/18/1pqSyQ.png\" /></p>\r\n<h2 id=\"配置环境变量\">配置环境变量</h2>\r\n<p>这一步配置的环境变量在打包Qt程序的时候是需要的。</p>\r\n<p>编辑<code>vim ~/.bashrc</code>，加入以下变量 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export QTDIR=/home/salamander/Qt5.14.1/5.14.1/gcc_64   #这个路径依据你安装的Qt路径定</span><br><span class=\"line\">export PATH=$QTDIR/bin:$PATH</span><br><span class=\"line\">export MANPATH=$QTDIR/man:$MANPATH</span><br><span class=\"line\">export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure>\r\n但是在你执行<code>qmake</code>命令的时候，你会发现错误： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qmake: could not exec &#x27;/usr/lib/x86_64-linux-gnu/qt4/bin/qmake&#x27;: no such file or directory</span><br></pre></td></tr></table></figure>\r\n我们发现<code>qmake</code>默认指向了qt4（Ubuntu\r\n18默认装了qt4），其实现在qt官方推荐使用<strong>qtchooser</strong>来管理多个qt版本。</p>\r\n<h3 id=\"什么是qtchooser\">什么是qtchooser</h3>\r\n<p>qtchooser其实和jdk版本管理软件一样,是一个qt版本管理软件.用于设置安装多个qt的系统中默认使用的qt版本.我们知道环境变量有一个缺陷:一次只支持一个版本的qt,有的应用可能只兼容低版本qt,这样又要配置环境变量非常麻烦.使用qtchooser方便快速切换qt版本而又不用每次重新配置环境变量</p>\r\n<p>首先，我们导入自己安装的qt <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo qtchooser -install 5.14.1 /home/salamander/Qt5.14.1/5.14.1/gcc_64/bin/qmake</span><br></pre></td></tr></table></figure>\r\n注意<strong>目录</strong>一定要精确到qmake这个程序,然后用<code>qtchooser -l</code>查看当前系统所有的qt版本,得到如下输出:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">5.14.1</span><br><span class=\"line\">5</span><br><span class=\"line\">default</span><br><span class=\"line\">qt4-x86_64-linux-gnu</span><br><span class=\"line\">qt4</span><br><span class=\"line\">qt5-x86_64-linux-gnu</span><br><span class=\"line\">qt5</span><br></pre></td></tr></table></figure>\r\n可以看到我们自己新安装并命名的<strong>5.14.1</strong>已经导入了,接下来就是设定默认qt版本了,按照qtchooser使用提示,可以添加一个名为<code>QT_SELECT</code>的环境变量,来选择默认qt版本:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export QT_SELECT=5.14.1</span><br></pre></td></tr></table></figure>\r\n可以看出这个环境变量后面的值跟的是系统已安装的qt的名称,这些名称可以用<code>qtchooser -l</code>查看.\r\n执行<code>qmake -v</code>，发现版本已经是我们自己安装的了：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ qmake -v</span><br><span class=\"line\">QMake version 3.1</span><br><span class=\"line\">Using Qt version 5.14.1 in /home/salamander/Qt5.14.1/5.14.1/gcc_64/lib</span><br></pre></td></tr></table></figure>\r\n每次export这个<code>QT_SELECT</code>变量有点麻烦，你可以编辑<code>.bashrc</code>来自动切换qt版本。</p>\r\n<h2 id=\"写个hello-world\">写个hello world</h2>\r\n<p>点击<strong>文件</strong>菜单，然后新建项目，选择<code>Qt Console Application</code>。<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/18/19CDSA.png\" /><br />\r\n编辑<code>main.cpp</code>文件，代码为：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;QCoreApplication&gt;</span><br><span class=\"line\">#include &lt;QDebug&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    QCoreApplication a(argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">    qDebug() &lt;&lt; &quot;hello world&quot;;</span><br><span class=\"line\">    return a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 点击左下角的<code>Run</code>按钮，就可以启动程序。<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/18/19PDNF.png\" /></p>\r\n<h2 id=\"信号和槽\">信号和槽</h2>\r\n<p>信号和槽机制是 QT 的<strong>核心机制</strong>，要精通 QT\r\n编程就必须对信号和槽有所了解。不同于传统的函数回调方式。信号和插槽是 Qt\r\n中非常有特色的地方，可以说是Qt编程区别于其它编程的标志。信号和槽是一种高级接口，应用于对象之间的通信，它是\r\nQt 的核心特性。</p>\r\n<h3 id=\"信号signal\">信号（signal）</h3>\r\n<p>当一个对象中某些可能会有别的对象关心的状态被修改时，将会发出信号。只有定义了信号的类及其子类可以发出信号。</p>\r\n<p>当一个信号被发出时，连接到这个信号的槽立即被调用，就像一个普通的函数调用。当这种情况发生时，信号槽机制独立于任何\r\nGUI 事件循环。emit\r\n语句之后的代码将在所有的槽返回之后被执行。这种情况与使用连接队列略有不同：使用连接队列的时候，emit\r\n语句之后的代码将立即被执行，而槽在之后执行。</p>\r\n<p>如果一个信号连接了多个槽，当信号发出时，这些槽将以连接的顺序一个接一个地被执行（顺序不确定）。</p>\r\n<h3 id=\"槽slot\">槽（slot）</h3>\r\n<p>当连接到的信号发出时，槽就会被调用。槽是<strong>普通的 C++\r\n函数</strong>，能够被正常的调用。它们的唯一特点是能够与信号连接。</p>\r\n<p>既然信号就是普通的成员函数，当它们像普通函数一样调用的时候，遵循标准\r\nC++\r\n的规则。但是，作为槽，它们又能够通过信号槽的连接被任何组件调用，不论这个组件的访问级别。这意味着任意类的实例发出的信号，都可以使得不相关的类的私有槽被调用。</p>\r\n<p>你也能把槽定义成虚的，这一点在实际应用中非常有用。</p>\r\n<h3 id=\"信号与槽的关联\">信号与槽的关联</h3>\r\n<p>通过调用 <strong>QObject</strong> 对象的 connect\r\n函数来将某个对象的信号与另外一个对象的槽函数相关联，这样当发射者发射信号时，接收者的槽函数将被调用。</p>\r\n<p>connect()语句的原型类似于： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(sender, SIGNAL(signal), receiver, SLOT(slot));</span><br></pre></td></tr></table></figure> 这里，sender 和 receiver\r\n都是 <strong>QObject</strong> 类型的，singal 和 slot\r\n都是没有参数名称的函数签名。SINGAL()和SLOT()宏用于把参数转换成字符串。<br />\r\n一个信号可以和多个槽相连： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(slider, SIGNAL(valueChanged(int)),</span><br><span class=\"line\">              spinBox, SLOT(setValue(int))); </span><br><span class=\"line\">connect(slider, SIGNAL(valueChanged(int)),</span><br><span class=\"line\">              this, SLOT(updateStatusBarIndicator(int)));</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"gui简单例子\">Gui简单例子</h2>\r\n<p>这个例子中，我们用了上面槽的知识，我们在界面上放了一个<code>button</code>，然后添加了<strong>slot</strong>获得了button的click事件发送者的<code>objectName</code>。<br />\r\n<strong>界面</strong></p>\r\n<figure>\r\n<img src=\"/images/Qt-Gui-Example.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p><strong>mainwindow.h</strong> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef MAINWINDOW_H</span><br><span class=\"line\">#define MAINWINDOW_H</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;QMainWindow&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">QT_BEGIN_NAMESPACE</span><br><span class=\"line\">namespace Ui &#123; class MainWindow; &#125;</span><br><span class=\"line\">QT_END_NAMESPACE</span><br><span class=\"line\"></span><br><span class=\"line\">class MainWindow : public QMainWindow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    MainWindow(QWidget *parent = nullptr);</span><br><span class=\"line\">    ~MainWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    Ui::MainWindow *ui;</span><br><span class=\"line\">private slots:</span><br><span class=\"line\">    void handleButton();  // 处理函数</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">#endif // MAINWINDOW_H</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<p><strong>mainwindow.cpp</strong> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;mainwindow.h&quot;</span><br><span class=\"line\">#include &quot;ui_mainwindow.h&quot;</span><br><span class=\"line\">#include &lt;QDebug&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::MainWindow(QWidget *parent)</span><br><span class=\"line\">    : QMainWindow(parent)</span><br><span class=\"line\">    , ui(new Ui::MainWindow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui-&gt;setupUi(this);</span><br><span class=\"line\">    connect(ui-&gt;myPushButton, SIGNAL(clicked()), this, SLOT(handleButton()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void MainWindow::handleButton()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    QObject *senderObj = sender(); // This will give Sender object</span><br><span class=\"line\">    QString senderObjName = senderObj-&gt;objectName();</span><br><span class=\"line\">    qDebug() &lt;&lt; senderObjName;  // get myPushButton</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::~MainWindow()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    delete ui;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"参考\">参考</h2>\r\n<ul>\r\n<li>油管上VoidRealms的<a\r\nhref=\"https://www.youtube.com/watch?v=Id-sPu_m_hE&amp;list=PL2D1942A4688E9D63&amp;index=2\">Qt视频</a></li>\r\n<li><a href=\"https://wiki.qt.io/Install_Qt_5_on_Ubuntu\">Install Qt5 On\r\nUbuntu</a></li>\r\n<li><a\r\nhref=\"https://blog.csdn.net/AAMahone/article/details/86515536\">Ubuntu\r\n18.04安装QtCreator+配置qt环境+qtchooser</a></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>本文环境： * OS：Ubuntu 18.04.3 LTS * Qt版本：5.14.1 * Qt\r\nCreator版本：4.10.1</p>\r\n<h2 id=\"qt安装\">Qt安装</h2>\r\n<p>首先，我们得明白一些概念。<br />\r\n<strong>Qt</strong>是一个C++库，或者说是开发框架，里面集成了一些库函数，提高开发效率。<br />\r\n<strong>Qt\r\nCreator</strong>是Qt集成开发环境，你可以在这里编写，编译，运行你的程序。所以最开始写Qt只安装<strong>Qt\r\nCreator</strong>这个是不行的，因为还没有相关的Qt库呢，但是新版的<strong>Qt\r\nCreator</strong>（5.9开始）已经集成了Qt了，所以入门就方便很多了。<br />\r\n关于Qt下载，大家可以打开这里的<a\r\nhref=\"http://download.qt.io/archive/qt/\">链接</a>，里面有各版本Qt（<strong>Qt</strong>和<strong>Qt\r\nCreator</strong>的集成包），操作简单，最新版本是<strong>5.14</strong>。</p>","more":"<p>windows版本只要双击exe就可以安装了，Linux版本需要先添加执行权限然后运行文件\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x qt-opensource-linux-x64-5.13.2.run</span><br><span class=\"line\">$ ./qt-opensource-linux-x64-5.13.2.run</span><br></pre></td></tr></table></figure>\r\n对于Linux系统，需要安装C/C++编译器，以Ubuntu为例，需要执行：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y gcc g++</span><br></pre></td></tr></table></figure> 在用到<code>WebEngine</code>组件的会遇到问题\r\n<strong>error: GL/gl.h: No such file or directory</strong>，需要\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mesa-common-dev</span><br></pre></td></tr></table></figure> Note: Just installing the above-mentioned mesa-common-dev\r\nkit is not sufficient for more recent Ubuntu versions. Based on a\r\ncomment in the Qt forum an additional package needs installation.\r\nExecute following command: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libglu1-mesa-dev -y</span><br></pre></td></tr></table></figure> Tested with Qt5.3.1 and Ubuntu\r\n14.04 and it solved the problem with missing <strong>-lGL</strong>.</p>\r\n<p>这一步需要注册一个账号，随便注册一个即可。<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/18/1p7NOs.png\"\r\nalt=\"install 1\" /><br />\r\n这一步选择你需要的组件（不清楚的话，就像我这样选择好了）<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/18/1p7IfO.png\"\r\nalt=\"install 2\" /><br />\r\n最后来到Qt Creator的启动界面<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/18/1pqSyQ.png\" /></p>\r\n<h2 id=\"配置环境变量\">配置环境变量</h2>\r\n<p>这一步配置的环境变量在打包Qt程序的时候是需要的。</p>\r\n<p>编辑<code>vim ~/.bashrc</code>，加入以下变量 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export QTDIR=/home/salamander/Qt5.14.1/5.14.1/gcc_64   #这个路径依据你安装的Qt路径定</span><br><span class=\"line\">export PATH=$QTDIR/bin:$PATH</span><br><span class=\"line\">export MANPATH=$QTDIR/man:$MANPATH</span><br><span class=\"line\">export LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure>\r\n但是在你执行<code>qmake</code>命令的时候，你会发现错误： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qmake: could not exec &#x27;/usr/lib/x86_64-linux-gnu/qt4/bin/qmake&#x27;: no such file or directory</span><br></pre></td></tr></table></figure>\r\n我们发现<code>qmake</code>默认指向了qt4（Ubuntu\r\n18默认装了qt4），其实现在qt官方推荐使用<strong>qtchooser</strong>来管理多个qt版本。</p>\r\n<h3 id=\"什么是qtchooser\">什么是qtchooser</h3>\r\n<p>qtchooser其实和jdk版本管理软件一样,是一个qt版本管理软件.用于设置安装多个qt的系统中默认使用的qt版本.我们知道环境变量有一个缺陷:一次只支持一个版本的qt,有的应用可能只兼容低版本qt,这样又要配置环境变量非常麻烦.使用qtchooser方便快速切换qt版本而又不用每次重新配置环境变量</p>\r\n<p>首先，我们导入自己安装的qt <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo qtchooser -install 5.14.1 /home/salamander/Qt5.14.1/5.14.1/gcc_64/bin/qmake</span><br></pre></td></tr></table></figure>\r\n注意<strong>目录</strong>一定要精确到qmake这个程序,然后用<code>qtchooser -l</code>查看当前系统所有的qt版本,得到如下输出:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">5.14.1</span><br><span class=\"line\">5</span><br><span class=\"line\">default</span><br><span class=\"line\">qt4-x86_64-linux-gnu</span><br><span class=\"line\">qt4</span><br><span class=\"line\">qt5-x86_64-linux-gnu</span><br><span class=\"line\">qt5</span><br></pre></td></tr></table></figure>\r\n可以看到我们自己新安装并命名的<strong>5.14.1</strong>已经导入了,接下来就是设定默认qt版本了,按照qtchooser使用提示,可以添加一个名为<code>QT_SELECT</code>的环境变量,来选择默认qt版本:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export QT_SELECT=5.14.1</span><br></pre></td></tr></table></figure>\r\n可以看出这个环境变量后面的值跟的是系统已安装的qt的名称,这些名称可以用<code>qtchooser -l</code>查看.\r\n执行<code>qmake -v</code>，发现版本已经是我们自己安装的了：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ qmake -v</span><br><span class=\"line\">QMake version 3.1</span><br><span class=\"line\">Using Qt version 5.14.1 in /home/salamander/Qt5.14.1/5.14.1/gcc_64/lib</span><br></pre></td></tr></table></figure>\r\n每次export这个<code>QT_SELECT</code>变量有点麻烦，你可以编辑<code>.bashrc</code>来自动切换qt版本。</p>\r\n<h2 id=\"写个hello-world\">写个hello world</h2>\r\n<p>点击<strong>文件</strong>菜单，然后新建项目，选择<code>Qt Console Application</code>。<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/18/19CDSA.png\" /><br />\r\n编辑<code>main.cpp</code>文件，代码为：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;QCoreApplication&gt;</span><br><span class=\"line\">#include &lt;QDebug&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    QCoreApplication a(argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">    qDebug() &lt;&lt; &quot;hello world&quot;;</span><br><span class=\"line\">    return a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 点击左下角的<code>Run</code>按钮，就可以启动程序。<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/18/19PDNF.png\" /></p>\r\n<h2 id=\"信号和槽\">信号和槽</h2>\r\n<p>信号和槽机制是 QT 的<strong>核心机制</strong>，要精通 QT\r\n编程就必须对信号和槽有所了解。不同于传统的函数回调方式。信号和插槽是 Qt\r\n中非常有特色的地方，可以说是Qt编程区别于其它编程的标志。信号和槽是一种高级接口，应用于对象之间的通信，它是\r\nQt 的核心特性。</p>\r\n<h3 id=\"信号signal\">信号（signal）</h3>\r\n<p>当一个对象中某些可能会有别的对象关心的状态被修改时，将会发出信号。只有定义了信号的类及其子类可以发出信号。</p>\r\n<p>当一个信号被发出时，连接到这个信号的槽立即被调用，就像一个普通的函数调用。当这种情况发生时，信号槽机制独立于任何\r\nGUI 事件循环。emit\r\n语句之后的代码将在所有的槽返回之后被执行。这种情况与使用连接队列略有不同：使用连接队列的时候，emit\r\n语句之后的代码将立即被执行，而槽在之后执行。</p>\r\n<p>如果一个信号连接了多个槽，当信号发出时，这些槽将以连接的顺序一个接一个地被执行（顺序不确定）。</p>\r\n<h3 id=\"槽slot\">槽（slot）</h3>\r\n<p>当连接到的信号发出时，槽就会被调用。槽是<strong>普通的 C++\r\n函数</strong>，能够被正常的调用。它们的唯一特点是能够与信号连接。</p>\r\n<p>既然信号就是普通的成员函数，当它们像普通函数一样调用的时候，遵循标准\r\nC++\r\n的规则。但是，作为槽，它们又能够通过信号槽的连接被任何组件调用，不论这个组件的访问级别。这意味着任意类的实例发出的信号，都可以使得不相关的类的私有槽被调用。</p>\r\n<p>你也能把槽定义成虚的，这一点在实际应用中非常有用。</p>\r\n<h3 id=\"信号与槽的关联\">信号与槽的关联</h3>\r\n<p>通过调用 <strong>QObject</strong> 对象的 connect\r\n函数来将某个对象的信号与另外一个对象的槽函数相关联，这样当发射者发射信号时，接收者的槽函数将被调用。</p>\r\n<p>connect()语句的原型类似于： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(sender, SIGNAL(signal), receiver, SLOT(slot));</span><br></pre></td></tr></table></figure> 这里，sender 和 receiver\r\n都是 <strong>QObject</strong> 类型的，singal 和 slot\r\n都是没有参数名称的函数签名。SINGAL()和SLOT()宏用于把参数转换成字符串。<br />\r\n一个信号可以和多个槽相连： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connect(slider, SIGNAL(valueChanged(int)),</span><br><span class=\"line\">              spinBox, SLOT(setValue(int))); </span><br><span class=\"line\">connect(slider, SIGNAL(valueChanged(int)),</span><br><span class=\"line\">              this, SLOT(updateStatusBarIndicator(int)));</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"gui简单例子\">Gui简单例子</h2>\r\n<p>这个例子中，我们用了上面槽的知识，我们在界面上放了一个<code>button</code>，然后添加了<strong>slot</strong>获得了button的click事件发送者的<code>objectName</code>。<br />\r\n<strong>界面</strong></p>\r\n<figure>\r\n<img src=\"/images/Qt-Gui-Example.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p><strong>mainwindow.h</strong> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef MAINWINDOW_H</span><br><span class=\"line\">#define MAINWINDOW_H</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;QMainWindow&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">QT_BEGIN_NAMESPACE</span><br><span class=\"line\">namespace Ui &#123; class MainWindow; &#125;</span><br><span class=\"line\">QT_END_NAMESPACE</span><br><span class=\"line\"></span><br><span class=\"line\">class MainWindow : public QMainWindow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">    MainWindow(QWidget *parent = nullptr);</span><br><span class=\"line\">    ~MainWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">    Ui::MainWindow *ui;</span><br><span class=\"line\">private slots:</span><br><span class=\"line\">    void handleButton();  // 处理函数</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">#endif // MAINWINDOW_H</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<p><strong>mainwindow.cpp</strong> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;mainwindow.h&quot;</span><br><span class=\"line\">#include &quot;ui_mainwindow.h&quot;</span><br><span class=\"line\">#include &lt;QDebug&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::MainWindow(QWidget *parent)</span><br><span class=\"line\">    : QMainWindow(parent)</span><br><span class=\"line\">    , ui(new Ui::MainWindow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui-&gt;setupUi(this);</span><br><span class=\"line\">    connect(ui-&gt;myPushButton, SIGNAL(clicked()), this, SLOT(handleButton()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void MainWindow::handleButton()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    QObject *senderObj = sender(); // This will give Sender object</span><br><span class=\"line\">    QString senderObjName = senderObj-&gt;objectName();</span><br><span class=\"line\">    qDebug() &lt;&lt; senderObjName;  // get myPushButton</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::~MainWindow()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    delete ui;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"参考\">参考</h2>\r\n<ul>\r\n<li>油管上VoidRealms的<a\r\nhref=\"https://www.youtube.com/watch?v=Id-sPu_m_hE&amp;list=PL2D1942A4688E9D63&amp;index=2\">Qt视频</a></li>\r\n<li><a href=\"https://wiki.qt.io/Install_Qt_5_on_Ubuntu\">Install Qt5 On\r\nUbuntu</a></li>\r\n<li><a\r\nhref=\"https://blog.csdn.net/AAMahone/article/details/86515536\">Ubuntu\r\n18.04安装QtCreator+配置qt环境+qtchooser</a></li>\r\n</ul>"},{"title":"Qt之布局管理","author":"Salamander","date":"2020-02-12T13:00:00.000Z","_content":"本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Qt版本：5.14.1\n* Qt Creator版本：4.10.1\n\n\n## 布局器概览\n我们以下图的 Qt 设计师界面来说明布局功能，QtCreator 设计模式的布局功能与 Qt 设计师是一样的。\n\n![upload successful](/images/pasted-0.png)  \n\n<!-- more -->\n\n在设计师左边列表，可以看到 Layouts 栏目里有四个布局器：\n直布局器 QVBoxLayout：将内部的控件按照垂直方向排布，一行一个。  \n◆  水平布局器 QHBoxLayout：将内部的控件按照水平方向排布，一列一个。  \n◆  网格布局器 QGridLayout：按照多行、多列的网格排布内部控件，单个控件可以占一个格子或者占据连续多个格子。  \n◆  表单布局器 QFormLayout：Qt 设计师里把这个布局器称为窗体布局器，窗体布局器这个叫法不准。这个布局器就是对应网页设计的表单，通常用于接收用户输入。该布局器就如它的图标一样，就是固定的两列控 件，第一列通常是标签，第二列是输入控件或含有输入控件的布局器。  \n◆  Qt 另外还有一个堆栈布局器 **QStackedLayout**，通常用于容纳多个子窗口布局，每次只显示其中一个。这个布局器隐含在堆栈部件 QStackedWidget 内部，一般直接用 QStackedWidget 就行了，不需要专门设置堆栈布局器。    \n\n与布局紧密关联的是两个空白条（或叫弹簧条）：**Horizontal Spacer** 水平空白条和 **Vertical Spacer** 垂直空白条，空白条的作用就是填充无用的空隙，如果不希望看到控件拉伸后变丑，就可以塞一个空白条到布局器里面，布局器通常会优先拉伸空白条。两种空白条的类名都是 QSpacerItem，两种空白条只是默认的拉伸方向不一样。\n\n\n## QBoxLayout\n水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 的基类都是 QBoxLayout，只是二者排列方向不同。水平和垂直布局器的主要功能函数都位于基类 QBoxLayout 里面，我们这里专门介绍一下这个基类的功能。  \nQBoxLayout 构造函数和 setDirection() 都可以指定布局器的方向：\n```\nQBoxLayout(Direction dir, QWidget * parent = 0)\nvoid setDirection(Direction direction)\n```\nQBoxLayout 布局器的方向 QBoxLayout::​Direction 枚举不仅可以指定水平和垂直，还能指定反方向排列：  \n\n\n| 枚举常量                    | 数值  | 描述            |\n|-------------------------|-----|---------------|\n| QBoxLayout::LeftToRight |  0  |  水平布局，从左到右排列  |\n| QBoxLayout::RightToLeft |  1  |  水平布局，从右到左排列  |\n| QBoxLayout::TopToBottom |  2  |  垂直布局，从上到下排列  |\n| QBoxLayout::BottomToTop |  3  |  垂直布局，从下到上排列  |\n\n水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 默认是其中的两种：**QBoxLayout::LeftToRight** 和 **QBoxLayout::TopToBottom** 。  \n\n布局器是一定要往里面添加控件才有用，添加控件的函数如下：\n```\nvoid addWidget(QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)\nvoid insertWidget(int index, QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)\n```\nwidget 就是要添加的控件指针，**stretch** 是伸展因子，伸展因子越大，窗口变大时拉伸越 多，**alignment** 一般不需要指定，用默认的即可。  \n第一个 **addWidget()** 是将控件添加到布局里面的控件列表末尾，第二个 **insertWidget()** 是将控件插入到布局里控件列表序号为 index 的位置。\n\n下面看个例子，我在垂直布局器中添加了5个Label，它们高度按不同的比例分配  \n**mainwwindow.cpp**  \n```\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui->setupUi(this);\n\n    QLabel *label1 = new QLabel(\"One\");\n    QLabel *label2 = new QLabel(\"Two\");\n    QLabel *label3 = new QLabel(\"Three\");\n    QLabel *label4 = new QLabel(\"Four\");\n    QLabel *label5 = new QLabel(\"Five\");\n\n    label1->setStyleSheet(\"background-color: red\");\n    label2->setStyleSheet(\"background-color: yellow\");\n    label3->setStyleSheet(\"background-color: green\");\n    label4->setStyleSheet(\"background-color: black\");\n    label5->setStyleSheet(\"background-color: orange\");\n\n    QVBoxLayout *layout = new QVBoxLayout;\n    layout->addWidget(label1);\n    layout->addWidget(label2, 2);\n    layout->addWidget(label3, 3);\n    layout->addWidget(label4, 4);\n    layout->addWidget(label5, 5);\n\n    auto central = new QWidget;\n    central->setLayout(layout);\n\n    this->setCentralWidget(central);\n}\n```\n最终呈现的效果是：  \n![](https://s2.ax1x.com/2020/02/12/1b3US0.png)  \n然后，我再添加一个水品布局器，在里头放入3个label  \n```\nQHBoxLayout *layoutH = new QHBoxLayout;\nlayout->addLayout(layoutH, 4);  // stretch比例为4\nQLabel *label6 = new QLabel(\"Six\");\nQLabel *label7 = new QLabel(\"seven\");\nQLabel *label8 = new QLabel(\"eight\");\n\nlabel6->setStyleSheet(\"background-color: #7B72E9\");\nlabel7->setStyleSheet(\"background-color: #1B9AF7\");\nlabel8->setStyleSheet(\"background-color: #FF4351\");\n\nlayoutH->addWidget(label6);\nlayoutH->addWidget(label7);\nlayoutH->addWidget(label8);\n\n```\n最终效果为：  \n\n![upload successful](/images/pasted-1.png)\n\n\n参考：  \n* [6.2 水平和垂直布局器](https://qtguide.ustclug.org/ch06-02.htm)","source":"_posts/Qt之布局管理.md","raw":"title: Qt之布局管理\nauthor: Salamander\ntags:\n  - Qt\ncategories:\n  - C++\n  - Qt\ndate: 2020-02-12 21:00:00\n---\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Qt版本：5.14.1\n* Qt Creator版本：4.10.1\n\n\n## 布局器概览\n我们以下图的 Qt 设计师界面来说明布局功能，QtCreator 设计模式的布局功能与 Qt 设计师是一样的。\n\n![upload successful](/images/pasted-0.png)  \n\n<!-- more -->\n\n在设计师左边列表，可以看到 Layouts 栏目里有四个布局器：\n直布局器 QVBoxLayout：将内部的控件按照垂直方向排布，一行一个。  \n◆  水平布局器 QHBoxLayout：将内部的控件按照水平方向排布，一列一个。  \n◆  网格布局器 QGridLayout：按照多行、多列的网格排布内部控件，单个控件可以占一个格子或者占据连续多个格子。  \n◆  表单布局器 QFormLayout：Qt 设计师里把这个布局器称为窗体布局器，窗体布局器这个叫法不准。这个布局器就是对应网页设计的表单，通常用于接收用户输入。该布局器就如它的图标一样，就是固定的两列控 件，第一列通常是标签，第二列是输入控件或含有输入控件的布局器。  \n◆  Qt 另外还有一个堆栈布局器 **QStackedLayout**，通常用于容纳多个子窗口布局，每次只显示其中一个。这个布局器隐含在堆栈部件 QStackedWidget 内部，一般直接用 QStackedWidget 就行了，不需要专门设置堆栈布局器。    \n\n与布局紧密关联的是两个空白条（或叫弹簧条）：**Horizontal Spacer** 水平空白条和 **Vertical Spacer** 垂直空白条，空白条的作用就是填充无用的空隙，如果不希望看到控件拉伸后变丑，就可以塞一个空白条到布局器里面，布局器通常会优先拉伸空白条。两种空白条的类名都是 QSpacerItem，两种空白条只是默认的拉伸方向不一样。\n\n\n## QBoxLayout\n水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 的基类都是 QBoxLayout，只是二者排列方向不同。水平和垂直布局器的主要功能函数都位于基类 QBoxLayout 里面，我们这里专门介绍一下这个基类的功能。  \nQBoxLayout 构造函数和 setDirection() 都可以指定布局器的方向：\n```\nQBoxLayout(Direction dir, QWidget * parent = 0)\nvoid setDirection(Direction direction)\n```\nQBoxLayout 布局器的方向 QBoxLayout::​Direction 枚举不仅可以指定水平和垂直，还能指定反方向排列：  \n\n\n| 枚举常量                    | 数值  | 描述            |\n|-------------------------|-----|---------------|\n| QBoxLayout::LeftToRight |  0  |  水平布局，从左到右排列  |\n| QBoxLayout::RightToLeft |  1  |  水平布局，从右到左排列  |\n| QBoxLayout::TopToBottom |  2  |  垂直布局，从上到下排列  |\n| QBoxLayout::BottomToTop |  3  |  垂直布局，从下到上排列  |\n\n水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 默认是其中的两种：**QBoxLayout::LeftToRight** 和 **QBoxLayout::TopToBottom** 。  \n\n布局器是一定要往里面添加控件才有用，添加控件的函数如下：\n```\nvoid addWidget(QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)\nvoid insertWidget(int index, QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)\n```\nwidget 就是要添加的控件指针，**stretch** 是伸展因子，伸展因子越大，窗口变大时拉伸越 多，**alignment** 一般不需要指定，用默认的即可。  \n第一个 **addWidget()** 是将控件添加到布局里面的控件列表末尾，第二个 **insertWidget()** 是将控件插入到布局里控件列表序号为 index 的位置。\n\n下面看个例子，我在垂直布局器中添加了5个Label，它们高度按不同的比例分配  \n**mainwwindow.cpp**  \n```\nMainWindow::MainWindow(QWidget *parent)\n    : QMainWindow(parent)\n    , ui(new Ui::MainWindow)\n{\n    ui->setupUi(this);\n\n    QLabel *label1 = new QLabel(\"One\");\n    QLabel *label2 = new QLabel(\"Two\");\n    QLabel *label3 = new QLabel(\"Three\");\n    QLabel *label4 = new QLabel(\"Four\");\n    QLabel *label5 = new QLabel(\"Five\");\n\n    label1->setStyleSheet(\"background-color: red\");\n    label2->setStyleSheet(\"background-color: yellow\");\n    label3->setStyleSheet(\"background-color: green\");\n    label4->setStyleSheet(\"background-color: black\");\n    label5->setStyleSheet(\"background-color: orange\");\n\n    QVBoxLayout *layout = new QVBoxLayout;\n    layout->addWidget(label1);\n    layout->addWidget(label2, 2);\n    layout->addWidget(label3, 3);\n    layout->addWidget(label4, 4);\n    layout->addWidget(label5, 5);\n\n    auto central = new QWidget;\n    central->setLayout(layout);\n\n    this->setCentralWidget(central);\n}\n```\n最终呈现的效果是：  \n![](https://s2.ax1x.com/2020/02/12/1b3US0.png)  \n然后，我再添加一个水品布局器，在里头放入3个label  \n```\nQHBoxLayout *layoutH = new QHBoxLayout;\nlayout->addLayout(layoutH, 4);  // stretch比例为4\nQLabel *label6 = new QLabel(\"Six\");\nQLabel *label7 = new QLabel(\"seven\");\nQLabel *label8 = new QLabel(\"eight\");\n\nlabel6->setStyleSheet(\"background-color: #7B72E9\");\nlabel7->setStyleSheet(\"background-color: #1B9AF7\");\nlabel8->setStyleSheet(\"background-color: #FF4351\");\n\nlayoutH->addWidget(label6);\nlayoutH->addWidget(label7);\nlayoutH->addWidget(label8);\n\n```\n最终效果为：  \n\n![upload successful](/images/pasted-1.png)\n\n\n参考：  \n* [6.2 水平和垂直布局器](https://qtguide.ustclug.org/ch06-02.htm)","slug":"Qt之布局管理","published":1,"updated":"2023-03-21T02:48:19.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l5001e2o3m3gzda6sh","content":"<p>本文环境： * OS：Ubuntu 18.04.3 LTS * Qt版本：5.14.1 * Qt\r\nCreator版本：4.10.1</p>\r\n<h2 id=\"布局器概览\">布局器概览</h2>\r\n<p>我们以下图的 Qt 设计师界面来说明布局功能，QtCreator\r\n设计模式的布局功能与 Qt 设计师是一样的。</p>\r\n<figure>\r\n<img src=\"/images/pasted-0.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<span id=\"more\"></span>\r\n<p>在设计师左边列表，可以看到 Layouts 栏目里有四个布局器： 直布局器\r\nQVBoxLayout：将内部的控件按照垂直方向排布，一行一个。<br />\r\n◆ 水平布局器 QHBoxLayout：将内部的控件按照水平方向排布，一列一个。<br />\r\n◆ 网格布局器\r\nQGridLayout：按照多行、多列的网格排布内部控件，单个控件可以占一个格子或者占据连续多个格子。<br />\r\n◆ 表单布局器 QFormLayout：Qt\r\n设计师里把这个布局器称为窗体布局器，窗体布局器这个叫法不准。这个布局器就是对应网页设计的表单，通常用于接收用户输入。该布局器就如它的图标一样，就是固定的两列控\r\n件，第一列通常是标签，第二列是输入控件或含有输入控件的布局器。<br />\r\n◆ Qt 另外还有一个堆栈布局器\r\n<strong>QStackedLayout</strong>，通常用于容纳多个子窗口布局，每次只显示其中一个。这个布局器隐含在堆栈部件\r\nQStackedWidget 内部，一般直接用 QStackedWidget\r\n就行了，不需要专门设置堆栈布局器。</p>\r\n<p>与布局紧密关联的是两个空白条（或叫弹簧条）：<strong>Horizontal\r\nSpacer</strong> 水平空白条和 <strong>Vertical Spacer</strong>\r\n垂直空白条，空白条的作用就是填充无用的空隙，如果不希望看到控件拉伸后变丑，就可以塞一个空白条到布局器里面，布局器通常会优先拉伸空白条。两种空白条的类名都是\r\nQSpacerItem，两种空白条只是默认的拉伸方向不一样。</p>\r\n<h2 id=\"qboxlayout\">QBoxLayout</h2>\r\n<p>水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 的基类都是\r\nQBoxLayout，只是二者排列方向不同。水平和垂直布局器的主要功能函数都位于基类\r\nQBoxLayout 里面，我们这里专门介绍一下这个基类的功能。<br />\r\nQBoxLayout 构造函数和 setDirection() 都可以指定布局器的方向：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QBoxLayout(Direction dir, QWidget * parent = 0)</span><br><span class=\"line\">void setDirection(Direction direction)</span><br></pre></td></tr></table></figure> QBoxLayout 布局器的方向 QBoxLayout::​Direction\r\n枚举不仅可以指定水平和垂直，还能指定反方向排列：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>枚举常量</th>\r\n<th>数值</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>QBoxLayout::LeftToRight</td>\r\n<td>0</td>\r\n<td>水平布局，从左到右排列</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>QBoxLayout::RightToLeft</td>\r\n<td>1</td>\r\n<td>水平布局，从右到左排列</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>QBoxLayout::TopToBottom</td>\r\n<td>2</td>\r\n<td>垂直布局，从上到下排列</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>QBoxLayout::BottomToTop</td>\r\n<td>3</td>\r\n<td>垂直布局，从下到上排列</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout\r\n默认是其中的两种：<strong>QBoxLayout::LeftToRight</strong> 和\r\n<strong>QBoxLayout::TopToBottom</strong> 。</p>\r\n<p>布局器是一定要往里面添加控件才有用，添加控件的函数如下：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void addWidget(QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)</span><br><span class=\"line\">void insertWidget(int index, QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)</span><br></pre></td></tr></table></figure> widget 就是要添加的控件指针，<strong>stretch</strong>\r\n是伸展因子，伸展因子越大，窗口变大时拉伸越\r\n多，<strong>alignment</strong> 一般不需要指定，用默认的即可。<br />\r\n第一个 <strong>addWidget()</strong>\r\n是将控件添加到布局里面的控件列表末尾，第二个\r\n<strong>insertWidget()</strong> 是将控件插入到布局里控件列表序号为 index\r\n的位置。</p>\r\n<p>下面看个例子，我在垂直布局器中添加了5个Label，它们高度按不同的比例分配<br />\r\n<strong>mainwwindow.cpp</strong><br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainWindow::MainWindow(QWidget *parent)</span><br><span class=\"line\">    : QMainWindow(parent)</span><br><span class=\"line\">    , ui(new Ui::MainWindow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui-&gt;setupUi(this);</span><br><span class=\"line\"></span><br><span class=\"line\">    QLabel *label1 = new QLabel(&quot;One&quot;);</span><br><span class=\"line\">    QLabel *label2 = new QLabel(&quot;Two&quot;);</span><br><span class=\"line\">    QLabel *label3 = new QLabel(&quot;Three&quot;);</span><br><span class=\"line\">    QLabel *label4 = new QLabel(&quot;Four&quot;);</span><br><span class=\"line\">    QLabel *label5 = new QLabel(&quot;Five&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    label1-&gt;setStyleSheet(&quot;background-color: red&quot;);</span><br><span class=\"line\">    label2-&gt;setStyleSheet(&quot;background-color: yellow&quot;);</span><br><span class=\"line\">    label3-&gt;setStyleSheet(&quot;background-color: green&quot;);</span><br><span class=\"line\">    label4-&gt;setStyleSheet(&quot;background-color: black&quot;);</span><br><span class=\"line\">    label5-&gt;setStyleSheet(&quot;background-color: orange&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    QVBoxLayout *layout = new QVBoxLayout;</span><br><span class=\"line\">    layout-&gt;addWidget(label1);</span><br><span class=\"line\">    layout-&gt;addWidget(label2, 2);</span><br><span class=\"line\">    layout-&gt;addWidget(label3, 3);</span><br><span class=\"line\">    layout-&gt;addWidget(label4, 4);</span><br><span class=\"line\">    layout-&gt;addWidget(label5, 5);</span><br><span class=\"line\"></span><br><span class=\"line\">    auto central = new QWidget;</span><br><span class=\"line\">    central-&gt;setLayout(layout);</span><br><span class=\"line\"></span><br><span class=\"line\">    this-&gt;setCentralWidget(central);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 最终呈现的效果是：<br />\r\n<img src=\"https://s2.ax1x.com/2020/02/12/1b3US0.png\" /><br />\r\n然后，我再添加一个水品布局器，在里头放入3个label<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QHBoxLayout *layoutH = new QHBoxLayout;</span><br><span class=\"line\">layout-&gt;addLayout(layoutH, 4);  // stretch比例为4</span><br><span class=\"line\">QLabel *label6 = new QLabel(&quot;Six&quot;);</span><br><span class=\"line\">QLabel *label7 = new QLabel(&quot;seven&quot;);</span><br><span class=\"line\">QLabel *label8 = new QLabel(&quot;eight&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">label6-&gt;setStyleSheet(&quot;background-color: #7B72E9&quot;);</span><br><span class=\"line\">label7-&gt;setStyleSheet(&quot;background-color: #1B9AF7&quot;);</span><br><span class=\"line\">label8-&gt;setStyleSheet(&quot;background-color: #FF4351&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">layoutH-&gt;addWidget(label6);</span><br><span class=\"line\">layoutH-&gt;addWidget(label7);</span><br><span class=\"line\">layoutH-&gt;addWidget(label8);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure> 最终效果为：</p>\r\n<figure>\r\n<img src=\"/images/pasted-1.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>参考：<br />\r\n* <a href=\"https://qtguide.ustclug.org/ch06-02.htm\">6.2\r\n水平和垂直布局器</a></p>\r\n","site":{"data":{}},"excerpt":"<p>本文环境： * OS：Ubuntu 18.04.3 LTS * Qt版本：5.14.1 * Qt\r\nCreator版本：4.10.1</p>\r\n<h2 id=\"布局器概览\">布局器概览</h2>\r\n<p>我们以下图的 Qt 设计师界面来说明布局功能，QtCreator\r\n设计模式的布局功能与 Qt 设计师是一样的。</p>\r\n<figure>\r\n<img src=\"/images/pasted-0.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>","more":"<p>在设计师左边列表，可以看到 Layouts 栏目里有四个布局器： 直布局器\r\nQVBoxLayout：将内部的控件按照垂直方向排布，一行一个。<br />\r\n◆ 水平布局器 QHBoxLayout：将内部的控件按照水平方向排布，一列一个。<br />\r\n◆ 网格布局器\r\nQGridLayout：按照多行、多列的网格排布内部控件，单个控件可以占一个格子或者占据连续多个格子。<br />\r\n◆ 表单布局器 QFormLayout：Qt\r\n设计师里把这个布局器称为窗体布局器，窗体布局器这个叫法不准。这个布局器就是对应网页设计的表单，通常用于接收用户输入。该布局器就如它的图标一样，就是固定的两列控\r\n件，第一列通常是标签，第二列是输入控件或含有输入控件的布局器。<br />\r\n◆ Qt 另外还有一个堆栈布局器\r\n<strong>QStackedLayout</strong>，通常用于容纳多个子窗口布局，每次只显示其中一个。这个布局器隐含在堆栈部件\r\nQStackedWidget 内部，一般直接用 QStackedWidget\r\n就行了，不需要专门设置堆栈布局器。</p>\r\n<p>与布局紧密关联的是两个空白条（或叫弹簧条）：<strong>Horizontal\r\nSpacer</strong> 水平空白条和 <strong>Vertical Spacer</strong>\r\n垂直空白条，空白条的作用就是填充无用的空隙，如果不希望看到控件拉伸后变丑，就可以塞一个空白条到布局器里面，布局器通常会优先拉伸空白条。两种空白条的类名都是\r\nQSpacerItem，两种空白条只是默认的拉伸方向不一样。</p>\r\n<h2 id=\"qboxlayout\">QBoxLayout</h2>\r\n<p>水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout 的基类都是\r\nQBoxLayout，只是二者排列方向不同。水平和垂直布局器的主要功能函数都位于基类\r\nQBoxLayout 里面，我们这里专门介绍一下这个基类的功能。<br />\r\nQBoxLayout 构造函数和 setDirection() 都可以指定布局器的方向：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QBoxLayout(Direction dir, QWidget * parent = 0)</span><br><span class=\"line\">void setDirection(Direction direction)</span><br></pre></td></tr></table></figure> QBoxLayout 布局器的方向 QBoxLayout::​Direction\r\n枚举不仅可以指定水平和垂直，还能指定反方向排列：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>枚举常量</th>\r\n<th>数值</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>QBoxLayout::LeftToRight</td>\r\n<td>0</td>\r\n<td>水平布局，从左到右排列</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>QBoxLayout::RightToLeft</td>\r\n<td>1</td>\r\n<td>水平布局，从右到左排列</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>QBoxLayout::TopToBottom</td>\r\n<td>2</td>\r\n<td>垂直布局，从上到下排列</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>QBoxLayout::BottomToTop</td>\r\n<td>3</td>\r\n<td>垂直布局，从下到上排列</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>水平布局器 QHBoxLayout 和垂直布局器 QVBoxLayout\r\n默认是其中的两种：<strong>QBoxLayout::LeftToRight</strong> 和\r\n<strong>QBoxLayout::TopToBottom</strong> 。</p>\r\n<p>布局器是一定要往里面添加控件才有用，添加控件的函数如下：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void addWidget(QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)</span><br><span class=\"line\">void insertWidget(int index, QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0)</span><br></pre></td></tr></table></figure> widget 就是要添加的控件指针，<strong>stretch</strong>\r\n是伸展因子，伸展因子越大，窗口变大时拉伸越\r\n多，<strong>alignment</strong> 一般不需要指定，用默认的即可。<br />\r\n第一个 <strong>addWidget()</strong>\r\n是将控件添加到布局里面的控件列表末尾，第二个\r\n<strong>insertWidget()</strong> 是将控件插入到布局里控件列表序号为 index\r\n的位置。</p>\r\n<p>下面看个例子，我在垂直布局器中添加了5个Label，它们高度按不同的比例分配<br />\r\n<strong>mainwwindow.cpp</strong><br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainWindow::MainWindow(QWidget *parent)</span><br><span class=\"line\">    : QMainWindow(parent)</span><br><span class=\"line\">    , ui(new Ui::MainWindow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ui-&gt;setupUi(this);</span><br><span class=\"line\"></span><br><span class=\"line\">    QLabel *label1 = new QLabel(&quot;One&quot;);</span><br><span class=\"line\">    QLabel *label2 = new QLabel(&quot;Two&quot;);</span><br><span class=\"line\">    QLabel *label3 = new QLabel(&quot;Three&quot;);</span><br><span class=\"line\">    QLabel *label4 = new QLabel(&quot;Four&quot;);</span><br><span class=\"line\">    QLabel *label5 = new QLabel(&quot;Five&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    label1-&gt;setStyleSheet(&quot;background-color: red&quot;);</span><br><span class=\"line\">    label2-&gt;setStyleSheet(&quot;background-color: yellow&quot;);</span><br><span class=\"line\">    label3-&gt;setStyleSheet(&quot;background-color: green&quot;);</span><br><span class=\"line\">    label4-&gt;setStyleSheet(&quot;background-color: black&quot;);</span><br><span class=\"line\">    label5-&gt;setStyleSheet(&quot;background-color: orange&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    QVBoxLayout *layout = new QVBoxLayout;</span><br><span class=\"line\">    layout-&gt;addWidget(label1);</span><br><span class=\"line\">    layout-&gt;addWidget(label2, 2);</span><br><span class=\"line\">    layout-&gt;addWidget(label3, 3);</span><br><span class=\"line\">    layout-&gt;addWidget(label4, 4);</span><br><span class=\"line\">    layout-&gt;addWidget(label5, 5);</span><br><span class=\"line\"></span><br><span class=\"line\">    auto central = new QWidget;</span><br><span class=\"line\">    central-&gt;setLayout(layout);</span><br><span class=\"line\"></span><br><span class=\"line\">    this-&gt;setCentralWidget(central);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 最终呈现的效果是：<br />\r\n<img src=\"https://s2.ax1x.com/2020/02/12/1b3US0.png\" /><br />\r\n然后，我再添加一个水品布局器，在里头放入3个label<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QHBoxLayout *layoutH = new QHBoxLayout;</span><br><span class=\"line\">layout-&gt;addLayout(layoutH, 4);  // stretch比例为4</span><br><span class=\"line\">QLabel *label6 = new QLabel(&quot;Six&quot;);</span><br><span class=\"line\">QLabel *label7 = new QLabel(&quot;seven&quot;);</span><br><span class=\"line\">QLabel *label8 = new QLabel(&quot;eight&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">label6-&gt;setStyleSheet(&quot;background-color: #7B72E9&quot;);</span><br><span class=\"line\">label7-&gt;setStyleSheet(&quot;background-color: #1B9AF7&quot;);</span><br><span class=\"line\">label8-&gt;setStyleSheet(&quot;background-color: #FF4351&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">layoutH-&gt;addWidget(label6);</span><br><span class=\"line\">layoutH-&gt;addWidget(label7);</span><br><span class=\"line\">layoutH-&gt;addWidget(label8);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure> 最终效果为：</p>\r\n<figure>\r\n<img src=\"/images/pasted-1.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>参考：<br />\r\n* <a href=\"https://qtguide.ustclug.org/ch06-02.htm\">6.2\r\n水平和垂直布局器</a></p>"},{"title":"RabbitMQ四五事之死信队列","author":"Salamander","date":"2021-03-20T12:27:00.000Z","_content":"<img src=\"/images/RabbitMQ-Logo.png\" width=\"800px\">  \n\n\n## 业务需求\n有时候我们需要某些任务定时执行，譬如取消订单，5分钟没支付，这个订单就被取消。简单实现的话，我们可以使用`Redis`或Linux的**crontab**来实现，而对于RabbitMQ，我们则可以用它的`死信队列`来实现定时任务。\n\n<!-- more -->\n\n\n## DLX\nRabbitMQ 中有一种交换器叫 DLX，全称为 `Dead-Letter-Exchange`，可以称之为死信交换器。当消息在一个队列中变成死信（dead message）之后，它会被重新发送到另外一个交换器中，这个交换器就是 DLX，绑定在 DLX 上的队列就称之为死信队列。  \n消息变成死信一般是以下几种情况：\n\n* 消息被拒绝，并且设置 requeue 参数为 false\n* 消息过期\n* 队列达到最大长度\n\nDLX其实就是一个普通的交换器，要使用它也很简单，就是在声明某个队列的时候设置其 `deadLetterExchange` 和 `deadLetterRoutingKey` 参数，`deadLetterRoutingKey` 参数可选，表示为 DLX 指定的路由键，如果没有特殊指定，则使用原队列的路由键。这样设置后，这个队列的消息一过期，`RabbitMQ` 就会自动地将这个消息重新发布到设置的 DLX 上去，进而被路由到另一个队列，即死信队列。  \n\n## 简单例子\n用之前文章[RabbitMQ二三事](https://segmentfault.com/a/1190000018685360)快速启动RabbitMQ的服务，再把[RabbitMQ三四事](https://segmentfault.com/a/1190000019227064)的代码改造下。  \n**producer.js**  \n```JavaScript\nconst config = require(\"./config\");\nconst amqp = require('amqplib');\n\nasync function getMQConnection() {\n    return await amqp.connect({\n        protocol: 'amqp',\n        hostname: config.host,\n        port: config.port,\n        username: config.user,\n        password: config.pass,\n        locale: 'en_US',\n        frameMax: 0,\n        heartbeat: 5, // 心跳\n        vhost: config.vhost,\n    })\n}\n\nasync function run(rmqConn, msgObj) {\n    const noramlQueue = 'noramlQu';\n    const noramlExchange = 'noramlEx';\n    const exchangeDLX = 'testExDLX';\n    const queueDLX = 'testQueueDLX';\n    const routingKeyDLX = 'testRoutingKeyDLX';\n\n    try {\n        const channel = await rmqConn.createChannel();\n\n        // 声明死信交换器和队列，就跟普通的一样\n        await channel.assertExchange(exchangeDLX, 'direct', { durable: true, autoDelete: false });\n        await channel.assertQueue(queueDLX, {durable: true, autoDelete: false, });\n        await channel.bindQueue(queueDLX, exchangeDLX, routingKeyDLX);\n\n\n        // 普通交换器和队列\n        await channel.assertExchange(noramlExchange, 'direct', { durable: true, autoDelete: false })\n        await channel.assertQueue(noramlQueue, {durable: true, autoDelete: false,\n            deadLetterExchange: exchangeDLX,\n            deadLetterRoutingKey: routingKeyDLX,\n        });  // 队列设置DLX\n        await channel.bindQueue(noramlQueue, noramlExchange, noramlQueue);\n\n        // 发送消息\n        await channel.publish(noramlExchange, noramlQueue, Buffer.from(msgObj.content), {\n            expiration: msgObj.expiration, // 过期时间，ms\n            persistent: true, \n            mandatory: true,\n        });\n        console.log('send message successfully.')\n        await channel.close();\n    } catch(err) {\n        console.log('send message failed:' + err.message)\n    }\n}\n\nasync function testSend() {\n    const conn = await getMQConnection()\n    await run(conn, {\n        content: (new Date()).toLocaleString(),\n        expiration: '3000',\n    })\n    await conn.close()\n}\ntestSend();\n```\n**consumer.js**  \n```JavaScript\nconst config = require(\"./config\");\nconst amqp = require('amqplib');\n\nasync function getMQConnection() {\n    return await amqp.connect({\n        protocol: 'amqp',\n        hostname: config.host,\n        port: config.port,\n        username: config.user,\n        password: config.pass,\n        locale: 'en_US',\n        frameMax: 0,\n        heartbeat: 5, // 心跳\n        vhost: config.vhost,\n    })\n}\n\nasync function run(rmqConn) {\n    const noramlQueue = 'noramlQu';\n    const noramlExchange = 'noramlEx';\n    const exchangeDLX = 'testExDLX';\n    const queueDLX = 'testQueueDLX';\n    const routingKeyDLX = 'testRoutingKeyDLX';\n\n    try {\n        const channel = await rmqConn.createChannel();\n\n        // 声明死信交换器和队列，就跟普通的一样\n        await channel.assertExchange(exchangeDLX, 'direct', { durable: true, autoDelete: false });\n        await channel.assertQueue(queueDLX, {durable: true, autoDelete: false, });\n        await channel.bindQueue(queueDLX, exchangeDLX, routingKeyDLX);\n\n        // 处理死信队列消息\n        await channel.consume(queueDLX, msg => {\n            console.log(`[${(new Date()).toLocaleString()}] consumer msg：`, msg.content.toString());\n        }, { noAck: true });\n    } catch(err) {\n        console.log('consume message failed:' + err.message)\n    }\n}\n\nasync function testConsume() {\n    const conn = await getMQConnection();\n    console.log('begin consuming messages...');\n    await run(conn);\n\n    process.on('SIGINT', () => {\n        console.log('stop consumer.')\n        conn.close();\n    });\n}\ntestConsume();\n```\n**config.js**  \n```\nmodule.exports = {\n    host: '127.0.0.1',\n    port: 5672,\n    user: 'test',\n    pass: '************',\n    vhost: '/'\n}\n```\n\n上面的代码，我们让消息3s后过期，先启动**消费者**，再启动生产者，我们可以看到消息3s后过期:   \n\n\n```\n$ node consumer.js \nbegin consuming messages...\n[2021/3/20 下午3:22:29] consumer msg： 2021/3/20 下午3:22:26\n```\n\n## 死信队列问题\nRabbitMQ中，每个消息的过期不是独立的，一个队列里的某个消息即使比同队列中的其它消息提前过期，也不会优先进入到死信队列，**只有当过期的消息到了队列的顶端，才会被真正的丢弃或者进入死信队列**。  \n我们把**生产者**的代码调整下，先发一个20s过期的消息，再发一个3s过期的消息\n```\n....\nasync function testSend() {\n    const conn = await getMQConnection()\n    await run(conn, {\n        content: (new Date()).toLocaleString() + ' 20s过期 ',\n        expiration: '20000',\n    })\n    await run(conn, {\n        content: (new Date()).toLocaleString() + ' 3s过期 ',\n        expiration: '3000',\n    })\n    await conn.close()\n}\n```\n\n观察**消费者**输出： \n\n```\n$ node consumer.js \nbegin consuming messages...\n[2021/3/21 下午6:10:21] consumer msg： 2021/3/21 下午6:10:01 20s过期 \n[2021/3/21 下午6:10:21] consumer msg： 2021/3/21 下午6:10:01 3s过期\n```\n可以发现，3s过期的消息并没有先被消费，而是只能前面的20s过期的消息先过期，它才会被检查是否过期。  \n究其本质的话，RabbitMQ 的队列是一个 `FIFO` 的有序队列，投入的消息都顺序的压进 MQ 中。而 RabbitMQ 也只会对队列顶端的消息进行超时判定，所以就出现了上述的情况。  \n所以对于固定时间的延时任务的话，例如下单后半小时未支付则关闭订单这种场景，RabbitMQ无疑可以很好的承担起这个需求，但对于需要每条消息的死亡相互独立这种场景，RabbitMQ还是无法满足的。\n\n## 解决队列消息非异步\n\nRabbitMQ 本身没有这种功能，但是它有个插件可以解决这个问题：**rabbitmq_delayed_message_exchange**，[地址](https://github.com/rabbitmq/rabbitmq-delayed-message-exchange) 。  \n这个插件的介绍如下：\n> A user can declare an exchange with the type x-delayed-message and then publish messages with the custom header x-delay expressing in milliseconds a delay time for the message. The message will be delivered to the respective queues after x-delay milliseconds.  \n\n这个插件增加了一种新类型的`exchange`：**x-delayed-message**，然后只要发送消息时指定的是这个交换机，那么只需要在消息 header 中指定参数 x-delay [:毫秒值] 就能够实现每条消息的异步延时。  \n\n### 添加插件\n用了Docker之后，添加这个插件非常简单，添加`Dockerfile`：\n```\nFROM rabbitmq:3.8.12-management\nCOPY ./rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez /plugins\nRUN rabbitmq-plugins enable rabbitmq_delayed_message_exchange\n```\n插件可以在[Release页](https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases)下载。  \n**docker-compose.yml**改下：\n```\nversion: \"2\"\nservices:\n  mq:\n    build: .\n    restart: always\n    mem_limit: 2g\n    hostname: mq1\n    volumes:\n      - ./mnesia:/var/lib/rabbitmq/mnesia\n      - ./log:/var/log/rabbitmq\n      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf\n    ports:\n      - \"55672:15672\"\n      - \"5672:5672\"\n    environment:\n      - CONTAINER_NAME=rabbitMQ\n      - RABBITMQ_ERLANG_COOKIE=3t182q3wtj1p9z0kd3tb\n```\n这样插件就安装成功了。  \n\n### 修改代码\n**producer.js**\n```JavaScript\nconst config = require(\"./config\");\nconst amqp = require('amqplib');\n\nasync function getMQConnection() {\n    return await amqp.connect({\n        protocol: 'amqp',\n        hostname: config.host,\n        port: config.port,\n        username: config.user,\n        password: config.pass,\n        locale: 'en_US',\n        frameMax: 0,\n        heartbeat: 5, // 心跳\n        vhost: config.vhost,\n    })\n}\n\nasync function run(rmqConn, msgObj) {\n    const exchangeDelay = 'testExNewDelay';\n    const queueDLX = 'testQueueDLX';\n    const routingKeyDLX = 'testRoutingKeyDLX';\n\n    try {\n        const channel = await rmqConn.createChannel();\n\n        // x-delayed-message类型的exchange\n        await channel.assertExchange(exchangeDelay, 'x-delayed-message', { durable: true, autoDelete: false, arguments: {'x-delayed-type':  \"direct\"} });\n        await channel.assertQueue(queueDLX, {durable: true, autoDelete: false, });\n        await channel.bindQueue(queueDLX, exchangeDelay, routingKeyDLX);\n\n        // 发送消息\n        await channel.publish(exchangeDelay, routingKeyDLX, Buffer.from(msgObj.content), {\n            headers: {\"x-delay\": msgObj.expiration}, // ms\n            persistent: true,\n            mandatory: true,\n        });\n        console.log('send message successfully.')\n        await channel.close();\n    } catch(err) {\n        console.log('send message failed:' + err.message)\n    }\n}\n\nasync function testSend() {\n    const conn = await getMQConnection()\n    await run(conn, {\n        content: (new Date()).toLocaleString() + ' 20s过期 ',\n        expiration: '20000',\n    })\n    await run(conn, {\n        content: (new Date()).toLocaleString() + ' 3s过期 ',\n        expiration: '3000',\n    })\n    await conn.close()\n}\ntestSend();\n```\n\n`x-delayed-type`告诉插件在给定的延迟时间过去之后，exchange应该跟`direct`，`fanout`，`topic`中的exchange路由功能一样。  \n\n**consumer.js**  \n```JavaScript\nconst config = require(\"./config\");\nconst amqp = require('amqplib');\n\nasync function getMQConnection() {\n    return await amqp.connect({\n        protocol: 'amqp',\n        hostname: config.host,\n        port: config.port,\n        username: config.user,\n        password: config.pass,\n        locale: 'en_US',\n        frameMax: 0,\n        heartbeat: 5, // 心跳\n        vhost: config.vhost,\n    })\n}\n\nasync function run(rmqConn) {\n    const exchangeDelay = 'testExNewDelay';\n    const queueDLX = 'testQueueDLX';\n    const routingKeyDLX = 'testRoutingKeyDLX';\n\n    try {\n        const channel = await rmqConn.createChannel();\n\n        // x-delayed-message类型的exchange\n        await channel.assertExchange(exchangeDelay, 'x-delayed-message', { durable: true, autoDelete: false, arguments: {'x-delayed-type':  \"direct\"} });\n        await channel.assertQueue(queueDLX, {durable: true, autoDelete: false, });\n        await channel.bindQueue(queueDLX, exchangeDelay, routingKeyDLX);\n\n        // 处理死信队列消息\n        await channel.consume(queueDLX, msg => {\n            console.log(`[${(new Date()).toLocaleString()}] consumer msg：`, msg.content.toString());\n        }, { noAck: true });\n    } catch(err) {\n        console.log('consume message failed:' + err.message)\n    }\n}\n\nasync function testConsume() {\n    const conn = await getMQConnection();\n    console.log('begin consuming messages...');\n    await run(conn);\n\n    process.on('SIGINT', () => {\n        console.log('stop consumer.')\n        conn.close();\n    });\n}\n\ntestConsume();\n```\n\n### 测试效果\n执行**生产者**代码之后，我们可以看到**消费者**输出：\n```\n$ node consumer.js \nbegin consuming messages...\n[2021/3/22 下午2:16:37] consumer msg： 2021/3/22 下午2:16:34 3s过期 \n[2021/3/22 下午2:16:54] consumer msg： 2021/3/22 下午2:16:34 20s过期\n```\n可以发现，消息已经独立的过期了。\n\n### 局限性\n没有什么东西是完美的，这个插件也不例外。看下这个插件的`Performance Impact`部分：\n```\nFor each message that crosses an \"x-delayed-message\" exchange, \nthe plugin will try to determine if the message has to be expired by making sure the delay is within range, \nie: Delay > 0, Delay =< ?ERL_MAX_T (In Erlang a timer can be set up to (2^32)-1 milliseconds in the future).\n```\n延迟时间最大为 (2^32)-1 毫秒，大约 49 天。另外这个插件也不适合大量延迟消息（例如数十万或数百万）的场景，`Limitations`也写了：\n```\nCurrent design of this plugin doesn't really fit scenarios with a high number of delayed messages \n(e.g. 100s of thousands or millions). See #72 for details.\n```\n\n参考：\n* [RabbitMQ 死信机制真的可以作为延时任务这个场景的解决方案吗？](https://www.skypyb.com/2020/01/jishu/1206/)\n* [RabbitMQ 延迟队列插件 x-delay Bug](http://blog.lbanyan.com/rabbitmq_delay/)","source":"_posts/RabbitMQ_DLX.md","raw":"title: RabbitMQ四五事之死信队列\nauthor: Salamander\ntags:\n  - RabbitMQ\ncategories:\n  - RabbitMQ\ndate: 2021-03-20 20:27:00\n---\n<img src=\"/images/RabbitMQ-Logo.png\" width=\"800px\">  \n\n\n## 业务需求\n有时候我们需要某些任务定时执行，譬如取消订单，5分钟没支付，这个订单就被取消。简单实现的话，我们可以使用`Redis`或Linux的**crontab**来实现，而对于RabbitMQ，我们则可以用它的`死信队列`来实现定时任务。\n\n<!-- more -->\n\n\n## DLX\nRabbitMQ 中有一种交换器叫 DLX，全称为 `Dead-Letter-Exchange`，可以称之为死信交换器。当消息在一个队列中变成死信（dead message）之后，它会被重新发送到另外一个交换器中，这个交换器就是 DLX，绑定在 DLX 上的队列就称之为死信队列。  \n消息变成死信一般是以下几种情况：\n\n* 消息被拒绝，并且设置 requeue 参数为 false\n* 消息过期\n* 队列达到最大长度\n\nDLX其实就是一个普通的交换器，要使用它也很简单，就是在声明某个队列的时候设置其 `deadLetterExchange` 和 `deadLetterRoutingKey` 参数，`deadLetterRoutingKey` 参数可选，表示为 DLX 指定的路由键，如果没有特殊指定，则使用原队列的路由键。这样设置后，这个队列的消息一过期，`RabbitMQ` 就会自动地将这个消息重新发布到设置的 DLX 上去，进而被路由到另一个队列，即死信队列。  \n\n## 简单例子\n用之前文章[RabbitMQ二三事](https://segmentfault.com/a/1190000018685360)快速启动RabbitMQ的服务，再把[RabbitMQ三四事](https://segmentfault.com/a/1190000019227064)的代码改造下。  \n**producer.js**  \n```JavaScript\nconst config = require(\"./config\");\nconst amqp = require('amqplib');\n\nasync function getMQConnection() {\n    return await amqp.connect({\n        protocol: 'amqp',\n        hostname: config.host,\n        port: config.port,\n        username: config.user,\n        password: config.pass,\n        locale: 'en_US',\n        frameMax: 0,\n        heartbeat: 5, // 心跳\n        vhost: config.vhost,\n    })\n}\n\nasync function run(rmqConn, msgObj) {\n    const noramlQueue = 'noramlQu';\n    const noramlExchange = 'noramlEx';\n    const exchangeDLX = 'testExDLX';\n    const queueDLX = 'testQueueDLX';\n    const routingKeyDLX = 'testRoutingKeyDLX';\n\n    try {\n        const channel = await rmqConn.createChannel();\n\n        // 声明死信交换器和队列，就跟普通的一样\n        await channel.assertExchange(exchangeDLX, 'direct', { durable: true, autoDelete: false });\n        await channel.assertQueue(queueDLX, {durable: true, autoDelete: false, });\n        await channel.bindQueue(queueDLX, exchangeDLX, routingKeyDLX);\n\n\n        // 普通交换器和队列\n        await channel.assertExchange(noramlExchange, 'direct', { durable: true, autoDelete: false })\n        await channel.assertQueue(noramlQueue, {durable: true, autoDelete: false,\n            deadLetterExchange: exchangeDLX,\n            deadLetterRoutingKey: routingKeyDLX,\n        });  // 队列设置DLX\n        await channel.bindQueue(noramlQueue, noramlExchange, noramlQueue);\n\n        // 发送消息\n        await channel.publish(noramlExchange, noramlQueue, Buffer.from(msgObj.content), {\n            expiration: msgObj.expiration, // 过期时间，ms\n            persistent: true, \n            mandatory: true,\n        });\n        console.log('send message successfully.')\n        await channel.close();\n    } catch(err) {\n        console.log('send message failed:' + err.message)\n    }\n}\n\nasync function testSend() {\n    const conn = await getMQConnection()\n    await run(conn, {\n        content: (new Date()).toLocaleString(),\n        expiration: '3000',\n    })\n    await conn.close()\n}\ntestSend();\n```\n**consumer.js**  \n```JavaScript\nconst config = require(\"./config\");\nconst amqp = require('amqplib');\n\nasync function getMQConnection() {\n    return await amqp.connect({\n        protocol: 'amqp',\n        hostname: config.host,\n        port: config.port,\n        username: config.user,\n        password: config.pass,\n        locale: 'en_US',\n        frameMax: 0,\n        heartbeat: 5, // 心跳\n        vhost: config.vhost,\n    })\n}\n\nasync function run(rmqConn) {\n    const noramlQueue = 'noramlQu';\n    const noramlExchange = 'noramlEx';\n    const exchangeDLX = 'testExDLX';\n    const queueDLX = 'testQueueDLX';\n    const routingKeyDLX = 'testRoutingKeyDLX';\n\n    try {\n        const channel = await rmqConn.createChannel();\n\n        // 声明死信交换器和队列，就跟普通的一样\n        await channel.assertExchange(exchangeDLX, 'direct', { durable: true, autoDelete: false });\n        await channel.assertQueue(queueDLX, {durable: true, autoDelete: false, });\n        await channel.bindQueue(queueDLX, exchangeDLX, routingKeyDLX);\n\n        // 处理死信队列消息\n        await channel.consume(queueDLX, msg => {\n            console.log(`[${(new Date()).toLocaleString()}] consumer msg：`, msg.content.toString());\n        }, { noAck: true });\n    } catch(err) {\n        console.log('consume message failed:' + err.message)\n    }\n}\n\nasync function testConsume() {\n    const conn = await getMQConnection();\n    console.log('begin consuming messages...');\n    await run(conn);\n\n    process.on('SIGINT', () => {\n        console.log('stop consumer.')\n        conn.close();\n    });\n}\ntestConsume();\n```\n**config.js**  \n```\nmodule.exports = {\n    host: '127.0.0.1',\n    port: 5672,\n    user: 'test',\n    pass: '************',\n    vhost: '/'\n}\n```\n\n上面的代码，我们让消息3s后过期，先启动**消费者**，再启动生产者，我们可以看到消息3s后过期:   \n\n\n```\n$ node consumer.js \nbegin consuming messages...\n[2021/3/20 下午3:22:29] consumer msg： 2021/3/20 下午3:22:26\n```\n\n## 死信队列问题\nRabbitMQ中，每个消息的过期不是独立的，一个队列里的某个消息即使比同队列中的其它消息提前过期，也不会优先进入到死信队列，**只有当过期的消息到了队列的顶端，才会被真正的丢弃或者进入死信队列**。  \n我们把**生产者**的代码调整下，先发一个20s过期的消息，再发一个3s过期的消息\n```\n....\nasync function testSend() {\n    const conn = await getMQConnection()\n    await run(conn, {\n        content: (new Date()).toLocaleString() + ' 20s过期 ',\n        expiration: '20000',\n    })\n    await run(conn, {\n        content: (new Date()).toLocaleString() + ' 3s过期 ',\n        expiration: '3000',\n    })\n    await conn.close()\n}\n```\n\n观察**消费者**输出： \n\n```\n$ node consumer.js \nbegin consuming messages...\n[2021/3/21 下午6:10:21] consumer msg： 2021/3/21 下午6:10:01 20s过期 \n[2021/3/21 下午6:10:21] consumer msg： 2021/3/21 下午6:10:01 3s过期\n```\n可以发现，3s过期的消息并没有先被消费，而是只能前面的20s过期的消息先过期，它才会被检查是否过期。  \n究其本质的话，RabbitMQ 的队列是一个 `FIFO` 的有序队列，投入的消息都顺序的压进 MQ 中。而 RabbitMQ 也只会对队列顶端的消息进行超时判定，所以就出现了上述的情况。  \n所以对于固定时间的延时任务的话，例如下单后半小时未支付则关闭订单这种场景，RabbitMQ无疑可以很好的承担起这个需求，但对于需要每条消息的死亡相互独立这种场景，RabbitMQ还是无法满足的。\n\n## 解决队列消息非异步\n\nRabbitMQ 本身没有这种功能，但是它有个插件可以解决这个问题：**rabbitmq_delayed_message_exchange**，[地址](https://github.com/rabbitmq/rabbitmq-delayed-message-exchange) 。  \n这个插件的介绍如下：\n> A user can declare an exchange with the type x-delayed-message and then publish messages with the custom header x-delay expressing in milliseconds a delay time for the message. The message will be delivered to the respective queues after x-delay milliseconds.  \n\n这个插件增加了一种新类型的`exchange`：**x-delayed-message**，然后只要发送消息时指定的是这个交换机，那么只需要在消息 header 中指定参数 x-delay [:毫秒值] 就能够实现每条消息的异步延时。  \n\n### 添加插件\n用了Docker之后，添加这个插件非常简单，添加`Dockerfile`：\n```\nFROM rabbitmq:3.8.12-management\nCOPY ./rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez /plugins\nRUN rabbitmq-plugins enable rabbitmq_delayed_message_exchange\n```\n插件可以在[Release页](https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases)下载。  \n**docker-compose.yml**改下：\n```\nversion: \"2\"\nservices:\n  mq:\n    build: .\n    restart: always\n    mem_limit: 2g\n    hostname: mq1\n    volumes:\n      - ./mnesia:/var/lib/rabbitmq/mnesia\n      - ./log:/var/log/rabbitmq\n      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf\n    ports:\n      - \"55672:15672\"\n      - \"5672:5672\"\n    environment:\n      - CONTAINER_NAME=rabbitMQ\n      - RABBITMQ_ERLANG_COOKIE=3t182q3wtj1p9z0kd3tb\n```\n这样插件就安装成功了。  \n\n### 修改代码\n**producer.js**\n```JavaScript\nconst config = require(\"./config\");\nconst amqp = require('amqplib');\n\nasync function getMQConnection() {\n    return await amqp.connect({\n        protocol: 'amqp',\n        hostname: config.host,\n        port: config.port,\n        username: config.user,\n        password: config.pass,\n        locale: 'en_US',\n        frameMax: 0,\n        heartbeat: 5, // 心跳\n        vhost: config.vhost,\n    })\n}\n\nasync function run(rmqConn, msgObj) {\n    const exchangeDelay = 'testExNewDelay';\n    const queueDLX = 'testQueueDLX';\n    const routingKeyDLX = 'testRoutingKeyDLX';\n\n    try {\n        const channel = await rmqConn.createChannel();\n\n        // x-delayed-message类型的exchange\n        await channel.assertExchange(exchangeDelay, 'x-delayed-message', { durable: true, autoDelete: false, arguments: {'x-delayed-type':  \"direct\"} });\n        await channel.assertQueue(queueDLX, {durable: true, autoDelete: false, });\n        await channel.bindQueue(queueDLX, exchangeDelay, routingKeyDLX);\n\n        // 发送消息\n        await channel.publish(exchangeDelay, routingKeyDLX, Buffer.from(msgObj.content), {\n            headers: {\"x-delay\": msgObj.expiration}, // ms\n            persistent: true,\n            mandatory: true,\n        });\n        console.log('send message successfully.')\n        await channel.close();\n    } catch(err) {\n        console.log('send message failed:' + err.message)\n    }\n}\n\nasync function testSend() {\n    const conn = await getMQConnection()\n    await run(conn, {\n        content: (new Date()).toLocaleString() + ' 20s过期 ',\n        expiration: '20000',\n    })\n    await run(conn, {\n        content: (new Date()).toLocaleString() + ' 3s过期 ',\n        expiration: '3000',\n    })\n    await conn.close()\n}\ntestSend();\n```\n\n`x-delayed-type`告诉插件在给定的延迟时间过去之后，exchange应该跟`direct`，`fanout`，`topic`中的exchange路由功能一样。  \n\n**consumer.js**  \n```JavaScript\nconst config = require(\"./config\");\nconst amqp = require('amqplib');\n\nasync function getMQConnection() {\n    return await amqp.connect({\n        protocol: 'amqp',\n        hostname: config.host,\n        port: config.port,\n        username: config.user,\n        password: config.pass,\n        locale: 'en_US',\n        frameMax: 0,\n        heartbeat: 5, // 心跳\n        vhost: config.vhost,\n    })\n}\n\nasync function run(rmqConn) {\n    const exchangeDelay = 'testExNewDelay';\n    const queueDLX = 'testQueueDLX';\n    const routingKeyDLX = 'testRoutingKeyDLX';\n\n    try {\n        const channel = await rmqConn.createChannel();\n\n        // x-delayed-message类型的exchange\n        await channel.assertExchange(exchangeDelay, 'x-delayed-message', { durable: true, autoDelete: false, arguments: {'x-delayed-type':  \"direct\"} });\n        await channel.assertQueue(queueDLX, {durable: true, autoDelete: false, });\n        await channel.bindQueue(queueDLX, exchangeDelay, routingKeyDLX);\n\n        // 处理死信队列消息\n        await channel.consume(queueDLX, msg => {\n            console.log(`[${(new Date()).toLocaleString()}] consumer msg：`, msg.content.toString());\n        }, { noAck: true });\n    } catch(err) {\n        console.log('consume message failed:' + err.message)\n    }\n}\n\nasync function testConsume() {\n    const conn = await getMQConnection();\n    console.log('begin consuming messages...');\n    await run(conn);\n\n    process.on('SIGINT', () => {\n        console.log('stop consumer.')\n        conn.close();\n    });\n}\n\ntestConsume();\n```\n\n### 测试效果\n执行**生产者**代码之后，我们可以看到**消费者**输出：\n```\n$ node consumer.js \nbegin consuming messages...\n[2021/3/22 下午2:16:37] consumer msg： 2021/3/22 下午2:16:34 3s过期 \n[2021/3/22 下午2:16:54] consumer msg： 2021/3/22 下午2:16:34 20s过期\n```\n可以发现，消息已经独立的过期了。\n\n### 局限性\n没有什么东西是完美的，这个插件也不例外。看下这个插件的`Performance Impact`部分：\n```\nFor each message that crosses an \"x-delayed-message\" exchange, \nthe plugin will try to determine if the message has to be expired by making sure the delay is within range, \nie: Delay > 0, Delay =< ?ERL_MAX_T (In Erlang a timer can be set up to (2^32)-1 milliseconds in the future).\n```\n延迟时间最大为 (2^32)-1 毫秒，大约 49 天。另外这个插件也不适合大量延迟消息（例如数十万或数百万）的场景，`Limitations`也写了：\n```\nCurrent design of this plugin doesn't really fit scenarios with a high number of delayed messages \n(e.g. 100s of thousands or millions). See #72 for details.\n```\n\n参考：\n* [RabbitMQ 死信机制真的可以作为延时任务这个场景的解决方案吗？](https://www.skypyb.com/2020/01/jishu/1206/)\n* [RabbitMQ 延迟队列插件 x-delay Bug](http://blog.lbanyan.com/rabbitmq_delay/)","slug":"RabbitMQ_DLX","published":1,"updated":"2023-03-21T02:48:19.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l5001h2o3m5v2a2bq8","content":"<p><img src=\"/images/RabbitMQ-Logo.png\" width=\"800px\"></p>\r\n<h2 id=\"业务需求\">业务需求</h2>\r\n<p>有时候我们需要某些任务定时执行，譬如取消订单，5分钟没支付，这个订单就被取消。简单实现的话，我们可以使用<code>Redis</code>或Linux的<strong>crontab</strong>来实现，而对于RabbitMQ，我们则可以用它的<code>死信队列</code>来实现定时任务。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"dlx\">DLX</h2>\r\n<p>RabbitMQ 中有一种交换器叫 DLX，全称为\r\n<code>Dead-Letter-Exchange</code>，可以称之为死信交换器。当消息在一个队列中变成死信（dead\r\nmessage）之后，它会被重新发送到另外一个交换器中，这个交换器就是\r\nDLX，绑定在 DLX 上的队列就称之为死信队列。<br />\r\n消息变成死信一般是以下几种情况：</p>\r\n<ul>\r\n<li>消息被拒绝，并且设置 requeue 参数为 false</li>\r\n<li>消息过期</li>\r\n<li>队列达到最大长度</li>\r\n</ul>\r\n<p>DLX其实就是一个普通的交换器，要使用它也很简单，就是在声明某个队列的时候设置其\r\n<code>deadLetterExchange</code> 和 <code>deadLetterRoutingKey</code>\r\n参数，<code>deadLetterRoutingKey</code> 参数可选，表示为 DLX\r\n指定的路由键，如果没有特殊指定，则使用原队列的路由键。这样设置后，这个队列的消息一过期，<code>RabbitMQ</code>\r\n就会自动地将这个消息重新发布到设置的 DLX\r\n上去，进而被路由到另一个队列，即死信队列。</p>\r\n<h2 id=\"简单例子\">简单例子</h2>\r\n<p>用之前文章<a\r\nhref=\"https://segmentfault.com/a/1190000018685360\">RabbitMQ二三事</a>快速启动RabbitMQ的服务，再把<a\r\nhref=\"https://segmentfault.com/a/1190000019227064\">RabbitMQ三四事</a>的代码改造下。<br />\r\n<strong>producer.js</strong><br />\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./config&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> amqp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;amqplib&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMQConnection</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> amqp.<span class=\"title function_\">connect</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">protocol</span>: <span class=\"string\">&#x27;amqp&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hostname</span>: config.<span class=\"property\">host</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>: config.<span class=\"property\">port</span>,</span><br><span class=\"line\">        <span class=\"attr\">username</span>: config.<span class=\"property\">user</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: config.<span class=\"property\">pass</span>,</span><br><span class=\"line\">        <span class=\"attr\">locale</span>: <span class=\"string\">&#x27;en_US&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">frameMax</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">heartbeat</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 心跳</span></span><br><span class=\"line\">        <span class=\"attr\">vhost</span>: config.<span class=\"property\">vhost</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">rmqConn, msgObj</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> noramlQueue = <span class=\"string\">&#x27;noramlQu&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> noramlExchange = <span class=\"string\">&#x27;noramlEx&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exchangeDLX = <span class=\"string\">&#x27;testExDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queueDLX = <span class=\"string\">&#x27;testQueueDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> routingKeyDLX = <span class=\"string\">&#x27;testRoutingKeyDLX&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> channel = <span class=\"keyword\">await</span> rmqConn.<span class=\"title function_\">createChannel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明死信交换器和队列，就跟普通的一样</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertExchange</span>(exchangeDLX, <span class=\"string\">&#x27;direct&#x27;</span>, &#123; <span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertQueue</span>(queueDLX, &#123;<span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">bindQueue</span>(queueDLX, exchangeDLX, routingKeyDLX);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 普通交换器和队列</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertExchange</span>(noramlExchange, <span class=\"string\">&#x27;direct&#x27;</span>, &#123; <span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertQueue</span>(noramlQueue, &#123;<span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">deadLetterExchange</span>: exchangeDLX,</span><br><span class=\"line\">            <span class=\"attr\">deadLetterRoutingKey</span>: routingKeyDLX,</span><br><span class=\"line\">        &#125;);  <span class=\"comment\">// 队列设置DLX</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">bindQueue</span>(noramlQueue, noramlExchange, noramlQueue);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">publish</span>(noramlExchange, noramlQueue, <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(msgObj.<span class=\"property\">content</span>), &#123;</span><br><span class=\"line\">            <span class=\"attr\">expiration</span>: msgObj.<span class=\"property\">expiration</span>, <span class=\"comment\">// 过期时间，ms</span></span><br><span class=\"line\">            <span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\">            <span class=\"attr\">mandatory</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;send message successfully.&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;send message failed:&#x27;</span> + err.<span class=\"property\">message</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testSend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> conn = <span class=\"keyword\">await</span> <span class=\"title function_\">getMQConnection</span>()</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">run</span>(conn, &#123;</span><br><span class=\"line\">        <span class=\"attr\">content</span>: (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()).<span class=\"title function_\">toLocaleString</span>(),</span><br><span class=\"line\">        <span class=\"attr\">expiration</span>: <span class=\"string\">&#x27;3000&#x27;</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> conn.<span class=\"title function_\">close</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">testSend</span>();</span><br></pre></td></tr></table></figure> <strong>consumer.js</strong><br />\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./config&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> amqp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;amqplib&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMQConnection</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> amqp.<span class=\"title function_\">connect</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">protocol</span>: <span class=\"string\">&#x27;amqp&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hostname</span>: config.<span class=\"property\">host</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>: config.<span class=\"property\">port</span>,</span><br><span class=\"line\">        <span class=\"attr\">username</span>: config.<span class=\"property\">user</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: config.<span class=\"property\">pass</span>,</span><br><span class=\"line\">        <span class=\"attr\">locale</span>: <span class=\"string\">&#x27;en_US&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">frameMax</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">heartbeat</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 心跳</span></span><br><span class=\"line\">        <span class=\"attr\">vhost</span>: config.<span class=\"property\">vhost</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">rmqConn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> noramlQueue = <span class=\"string\">&#x27;noramlQu&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> noramlExchange = <span class=\"string\">&#x27;noramlEx&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exchangeDLX = <span class=\"string\">&#x27;testExDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queueDLX = <span class=\"string\">&#x27;testQueueDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> routingKeyDLX = <span class=\"string\">&#x27;testRoutingKeyDLX&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> channel = <span class=\"keyword\">await</span> rmqConn.<span class=\"title function_\">createChannel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明死信交换器和队列，就跟普通的一样</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertExchange</span>(exchangeDLX, <span class=\"string\">&#x27;direct&#x27;</span>, &#123; <span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertQueue</span>(queueDLX, &#123;<span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">bindQueue</span>(queueDLX, exchangeDLX, routingKeyDLX);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理死信队列消息</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">consume</span>(queueDLX, <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[<span class=\"subst\">$&#123;(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toLocaleString()&#125;</span>] consumer msg：`</span>, msg.<span class=\"property\">content</span>.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">        &#125;, &#123; <span class=\"attr\">noAck</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;consume message failed:&#x27;</span> + err.<span class=\"property\">message</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testConsume</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> conn = <span class=\"keyword\">await</span> <span class=\"title function_\">getMQConnection</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;begin consuming messages...&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">run</span>(conn);</span><br><span class=\"line\"></span><br><span class=\"line\">    process.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;SIGINT&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;stop consumer.&#x27;</span>)</span><br><span class=\"line\">        conn.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">testConsume</span>();</span><br></pre></td></tr></table></figure> <strong>config.js</strong><br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    host: &#x27;127.0.0.1&#x27;,</span><br><span class=\"line\">    port: 5672,</span><br><span class=\"line\">    user: &#x27;test&#x27;,</span><br><span class=\"line\">    pass: &#x27;************&#x27;,</span><br><span class=\"line\">    vhost: &#x27;/&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>上面的代码，我们让消息3s后过期，先启动<strong>消费者</strong>，再启动生产者，我们可以看到消息3s后过期:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node consumer.js </span><br><span class=\"line\">begin consuming messages...</span><br><span class=\"line\">[2021/3/20 下午3:22:29] consumer msg： 2021/3/20 下午3:22:26</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"死信队列问题\">死信队列问题</h2>\r\n<p>RabbitMQ中，每个消息的过期不是独立的，一个队列里的某个消息即使比同队列中的其它消息提前过期，也不会优先进入到死信队列，<strong>只有当过期的消息到了队列的顶端，才会被真正的丢弃或者进入死信队列</strong>。<br />\r\n我们把<strong>生产者</strong>的代码调整下，先发一个20s过期的消息，再发一个3s过期的消息\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">async function testSend() &#123;</span><br><span class=\"line\">    const conn = await getMQConnection()</span><br><span class=\"line\">    await run(conn, &#123;</span><br><span class=\"line\">        content: (new Date()).toLocaleString() + &#x27; 20s过期 &#x27;,</span><br><span class=\"line\">        expiration: &#x27;20000&#x27;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    await run(conn, &#123;</span><br><span class=\"line\">        content: (new Date()).toLocaleString() + &#x27; 3s过期 &#x27;,</span><br><span class=\"line\">        expiration: &#x27;3000&#x27;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    await conn.close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>观察<strong>消费者</strong>输出：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node consumer.js </span><br><span class=\"line\">begin consuming messages...</span><br><span class=\"line\">[2021/3/21 下午6:10:21] consumer msg： 2021/3/21 下午6:10:01 20s过期 </span><br><span class=\"line\">[2021/3/21 下午6:10:21] consumer msg： 2021/3/21 下午6:10:01 3s过期</span><br></pre></td></tr></table></figure>\r\n<p>可以发现，3s过期的消息并没有先被消费，而是只能前面的20s过期的消息先过期，它才会被检查是否过期。<br />\r\n究其本质的话，RabbitMQ 的队列是一个 <code>FIFO</code>\r\n的有序队列，投入的消息都顺序的压进 MQ 中。而 RabbitMQ\r\n也只会对队列顶端的消息进行超时判定，所以就出现了上述的情况。<br />\r\n所以对于固定时间的延时任务的话，例如下单后半小时未支付则关闭订单这种场景，RabbitMQ无疑可以很好的承担起这个需求，但对于需要每条消息的死亡相互独立这种场景，RabbitMQ还是无法满足的。</p>\r\n<h2 id=\"解决队列消息非异步\">解决队列消息非异步</h2>\r\n<p>RabbitMQ\r\n本身没有这种功能，但是它有个插件可以解决这个问题：<strong>rabbitmq_delayed_message_exchange</strong>，<a\r\nhref=\"https://github.com/rabbitmq/rabbitmq-delayed-message-exchange\">地址</a>\r\n。<br />\r\n这个插件的介绍如下： &gt; A user can declare an exchange with the type\r\nx-delayed-message and then publish messages with the custom header\r\nx-delay expressing in milliseconds a delay time for the message. The\r\nmessage will be delivered to the respective queues after x-delay\r\nmilliseconds.</p>\r\n<p>这个插件增加了一种新类型的<code>exchange</code>：<strong>x-delayed-message</strong>，然后只要发送消息时指定的是这个交换机，那么只需要在消息\r\nheader 中指定参数 x-delay [:毫秒值] 就能够实现每条消息的异步延时。</p>\r\n<h3 id=\"添加插件\">添加插件</h3>\r\n<p>用了Docker之后，添加这个插件非常简单，添加<code>Dockerfile</code>：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM rabbitmq:3.8.12-management</span><br><span class=\"line\">COPY ./rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez /plugins</span><br><span class=\"line\">RUN rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure> 插件可以在<a\r\nhref=\"https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases\">Release页</a>下载。<br />\r\n<strong>docker-compose.yml</strong>改下： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;2&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  mq:</span><br><span class=\"line\">    build: .</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    mem_limit: 2g</span><br><span class=\"line\">    hostname: mq1</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mnesia:/var/lib/rabbitmq/mnesia</span><br><span class=\"line\">      - ./log:/var/log/rabbitmq</span><br><span class=\"line\">      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;55672:15672&quot;</span><br><span class=\"line\">      - &quot;5672:5672&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - CONTAINER_NAME=rabbitMQ</span><br><span class=\"line\">      - RABBITMQ_ERLANG_COOKIE=3t182q3wtj1p9z0kd3tb</span><br></pre></td></tr></table></figure>\r\n这样插件就安装成功了。</p>\r\n<h3 id=\"修改代码\">修改代码</h3>\r\n<p><strong>producer.js</strong> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./config&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> amqp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;amqplib&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMQConnection</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> amqp.<span class=\"title function_\">connect</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">protocol</span>: <span class=\"string\">&#x27;amqp&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hostname</span>: config.<span class=\"property\">host</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>: config.<span class=\"property\">port</span>,</span><br><span class=\"line\">        <span class=\"attr\">username</span>: config.<span class=\"property\">user</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: config.<span class=\"property\">pass</span>,</span><br><span class=\"line\">        <span class=\"attr\">locale</span>: <span class=\"string\">&#x27;en_US&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">frameMax</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">heartbeat</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 心跳</span></span><br><span class=\"line\">        <span class=\"attr\">vhost</span>: config.<span class=\"property\">vhost</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">rmqConn, msgObj</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exchangeDelay = <span class=\"string\">&#x27;testExNewDelay&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queueDLX = <span class=\"string\">&#x27;testQueueDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> routingKeyDLX = <span class=\"string\">&#x27;testRoutingKeyDLX&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> channel = <span class=\"keyword\">await</span> rmqConn.<span class=\"title function_\">createChannel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// x-delayed-message类型的exchange</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertExchange</span>(exchangeDelay, <span class=\"string\">&#x27;x-delayed-message&#x27;</span>, &#123; <span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, <span class=\"attr\">arguments</span>: &#123;<span class=\"string\">&#x27;x-delayed-type&#x27;</span>:  <span class=\"string\">&quot;direct&quot;</span>&#125; &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertQueue</span>(queueDLX, &#123;<span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">bindQueue</span>(queueDLX, exchangeDelay, routingKeyDLX);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">publish</span>(exchangeDelay, routingKeyDLX, <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(msgObj.<span class=\"property\">content</span>), &#123;</span><br><span class=\"line\">            <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&quot;x-delay&quot;</span>: msgObj.<span class=\"property\">expiration</span>&#125;, <span class=\"comment\">// ms</span></span><br><span class=\"line\">            <span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">mandatory</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;send message successfully.&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;send message failed:&#x27;</span> + err.<span class=\"property\">message</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testSend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> conn = <span class=\"keyword\">await</span> <span class=\"title function_\">getMQConnection</span>()</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">run</span>(conn, &#123;</span><br><span class=\"line\">        <span class=\"attr\">content</span>: (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()).<span class=\"title function_\">toLocaleString</span>() + <span class=\"string\">&#x27; 20s过期 &#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">expiration</span>: <span class=\"string\">&#x27;20000&#x27;</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">run</span>(conn, &#123;</span><br><span class=\"line\">        <span class=\"attr\">content</span>: (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()).<span class=\"title function_\">toLocaleString</span>() + <span class=\"string\">&#x27; 3s过期 &#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">expiration</span>: <span class=\"string\">&#x27;3000&#x27;</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> conn.<span class=\"title function_\">close</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">testSend</span>();</span><br></pre></td></tr></table></figure></p>\r\n<p><code>x-delayed-type</code>告诉插件在给定的延迟时间过去之后，exchange应该跟<code>direct</code>，<code>fanout</code>，<code>topic</code>中的exchange路由功能一样。</p>\r\n<p><strong>consumer.js</strong><br />\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./config&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> amqp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;amqplib&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMQConnection</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> amqp.<span class=\"title function_\">connect</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">protocol</span>: <span class=\"string\">&#x27;amqp&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hostname</span>: config.<span class=\"property\">host</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>: config.<span class=\"property\">port</span>,</span><br><span class=\"line\">        <span class=\"attr\">username</span>: config.<span class=\"property\">user</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: config.<span class=\"property\">pass</span>,</span><br><span class=\"line\">        <span class=\"attr\">locale</span>: <span class=\"string\">&#x27;en_US&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">frameMax</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">heartbeat</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 心跳</span></span><br><span class=\"line\">        <span class=\"attr\">vhost</span>: config.<span class=\"property\">vhost</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">rmqConn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exchangeDelay = <span class=\"string\">&#x27;testExNewDelay&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queueDLX = <span class=\"string\">&#x27;testQueueDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> routingKeyDLX = <span class=\"string\">&#x27;testRoutingKeyDLX&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> channel = <span class=\"keyword\">await</span> rmqConn.<span class=\"title function_\">createChannel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// x-delayed-message类型的exchange</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertExchange</span>(exchangeDelay, <span class=\"string\">&#x27;x-delayed-message&#x27;</span>, &#123; <span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, <span class=\"attr\">arguments</span>: &#123;<span class=\"string\">&#x27;x-delayed-type&#x27;</span>:  <span class=\"string\">&quot;direct&quot;</span>&#125; &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertQueue</span>(queueDLX, &#123;<span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">bindQueue</span>(queueDLX, exchangeDelay, routingKeyDLX);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理死信队列消息</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">consume</span>(queueDLX, <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[<span class=\"subst\">$&#123;(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toLocaleString()&#125;</span>] consumer msg：`</span>, msg.<span class=\"property\">content</span>.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">        &#125;, &#123; <span class=\"attr\">noAck</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;consume message failed:&#x27;</span> + err.<span class=\"property\">message</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testConsume</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> conn = <span class=\"keyword\">await</span> <span class=\"title function_\">getMQConnection</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;begin consuming messages...&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">run</span>(conn);</span><br><span class=\"line\"></span><br><span class=\"line\">    process.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;SIGINT&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;stop consumer.&#x27;</span>)</span><br><span class=\"line\">        conn.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">testConsume</span>();</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"测试效果\">测试效果</h3>\r\n<p>执行<strong>生产者</strong>代码之后，我们可以看到<strong>消费者</strong>输出：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node consumer.js </span><br><span class=\"line\">begin consuming messages...</span><br><span class=\"line\">[2021/3/22 下午2:16:37] consumer msg： 2021/3/22 下午2:16:34 3s过期 </span><br><span class=\"line\">[2021/3/22 下午2:16:54] consumer msg： 2021/3/22 下午2:16:34 20s过期</span><br></pre></td></tr></table></figure> 可以发现，消息已经独立的过期了。</p>\r\n<h3 id=\"局限性\">局限性</h3>\r\n<p>没有什么东西是完美的，这个插件也不例外。看下这个插件的<code>Performance Impact</code>部分：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For each message that crosses an &quot;x-delayed-message&quot; exchange, </span><br><span class=\"line\">the plugin will try to determine if the message has to be expired by making sure the delay is within range, </span><br><span class=\"line\">ie: Delay &gt; 0, Delay =&lt; ?ERL_MAX_T (In Erlang a timer can be set up to (2^32)-1 milliseconds in the future).</span><br></pre></td></tr></table></figure> 延迟时间最大为 (2^32)-1 毫秒，大约 49\r\n天。另外这个插件也不适合大量延迟消息（例如数十万或数百万）的场景，<code>Limitations</code>也写了：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Current design of this plugin doesn&#x27;t really fit scenarios with a high number of delayed messages </span><br><span class=\"line\">(e.g. 100s of thousands or millions). See #72 for details.</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://www.skypyb.com/2020/01/jishu/1206/\">RabbitMQ\r\n死信机制真的可以作为延时任务这个场景的解决方案吗？</a> * <a\r\nhref=\"http://blog.lbanyan.com/rabbitmq_delay/\">RabbitMQ 延迟队列插件\r\nx-delay Bug</a></p>\r\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/RabbitMQ-Logo.png\" width=\"800px\"></p>\r\n<h2 id=\"业务需求\">业务需求</h2>\r\n<p>有时候我们需要某些任务定时执行，譬如取消订单，5分钟没支付，这个订单就被取消。简单实现的话，我们可以使用<code>Redis</code>或Linux的<strong>crontab</strong>来实现，而对于RabbitMQ，我们则可以用它的<code>死信队列</code>来实现定时任务。</p>","more":"<h2 id=\"dlx\">DLX</h2>\r\n<p>RabbitMQ 中有一种交换器叫 DLX，全称为\r\n<code>Dead-Letter-Exchange</code>，可以称之为死信交换器。当消息在一个队列中变成死信（dead\r\nmessage）之后，它会被重新发送到另外一个交换器中，这个交换器就是\r\nDLX，绑定在 DLX 上的队列就称之为死信队列。<br />\r\n消息变成死信一般是以下几种情况：</p>\r\n<ul>\r\n<li>消息被拒绝，并且设置 requeue 参数为 false</li>\r\n<li>消息过期</li>\r\n<li>队列达到最大长度</li>\r\n</ul>\r\n<p>DLX其实就是一个普通的交换器，要使用它也很简单，就是在声明某个队列的时候设置其\r\n<code>deadLetterExchange</code> 和 <code>deadLetterRoutingKey</code>\r\n参数，<code>deadLetterRoutingKey</code> 参数可选，表示为 DLX\r\n指定的路由键，如果没有特殊指定，则使用原队列的路由键。这样设置后，这个队列的消息一过期，<code>RabbitMQ</code>\r\n就会自动地将这个消息重新发布到设置的 DLX\r\n上去，进而被路由到另一个队列，即死信队列。</p>\r\n<h2 id=\"简单例子\">简单例子</h2>\r\n<p>用之前文章<a\r\nhref=\"https://segmentfault.com/a/1190000018685360\">RabbitMQ二三事</a>快速启动RabbitMQ的服务，再把<a\r\nhref=\"https://segmentfault.com/a/1190000019227064\">RabbitMQ三四事</a>的代码改造下。<br />\r\n<strong>producer.js</strong><br />\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./config&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> amqp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;amqplib&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMQConnection</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> amqp.<span class=\"title function_\">connect</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">protocol</span>: <span class=\"string\">&#x27;amqp&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hostname</span>: config.<span class=\"property\">host</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>: config.<span class=\"property\">port</span>,</span><br><span class=\"line\">        <span class=\"attr\">username</span>: config.<span class=\"property\">user</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: config.<span class=\"property\">pass</span>,</span><br><span class=\"line\">        <span class=\"attr\">locale</span>: <span class=\"string\">&#x27;en_US&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">frameMax</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">heartbeat</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 心跳</span></span><br><span class=\"line\">        <span class=\"attr\">vhost</span>: config.<span class=\"property\">vhost</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">rmqConn, msgObj</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> noramlQueue = <span class=\"string\">&#x27;noramlQu&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> noramlExchange = <span class=\"string\">&#x27;noramlEx&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exchangeDLX = <span class=\"string\">&#x27;testExDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queueDLX = <span class=\"string\">&#x27;testQueueDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> routingKeyDLX = <span class=\"string\">&#x27;testRoutingKeyDLX&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> channel = <span class=\"keyword\">await</span> rmqConn.<span class=\"title function_\">createChannel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明死信交换器和队列，就跟普通的一样</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertExchange</span>(exchangeDLX, <span class=\"string\">&#x27;direct&#x27;</span>, &#123; <span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertQueue</span>(queueDLX, &#123;<span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">bindQueue</span>(queueDLX, exchangeDLX, routingKeyDLX);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 普通交换器和队列</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertExchange</span>(noramlExchange, <span class=\"string\">&#x27;direct&#x27;</span>, &#123; <span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span> &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertQueue</span>(noramlQueue, &#123;<span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">deadLetterExchange</span>: exchangeDLX,</span><br><span class=\"line\">            <span class=\"attr\">deadLetterRoutingKey</span>: routingKeyDLX,</span><br><span class=\"line\">        &#125;);  <span class=\"comment\">// 队列设置DLX</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">bindQueue</span>(noramlQueue, noramlExchange, noramlQueue);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">publish</span>(noramlExchange, noramlQueue, <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(msgObj.<span class=\"property\">content</span>), &#123;</span><br><span class=\"line\">            <span class=\"attr\">expiration</span>: msgObj.<span class=\"property\">expiration</span>, <span class=\"comment\">// 过期时间，ms</span></span><br><span class=\"line\">            <span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>, </span><br><span class=\"line\">            <span class=\"attr\">mandatory</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;send message successfully.&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;send message failed:&#x27;</span> + err.<span class=\"property\">message</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testSend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> conn = <span class=\"keyword\">await</span> <span class=\"title function_\">getMQConnection</span>()</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">run</span>(conn, &#123;</span><br><span class=\"line\">        <span class=\"attr\">content</span>: (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()).<span class=\"title function_\">toLocaleString</span>(),</span><br><span class=\"line\">        <span class=\"attr\">expiration</span>: <span class=\"string\">&#x27;3000&#x27;</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> conn.<span class=\"title function_\">close</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">testSend</span>();</span><br></pre></td></tr></table></figure> <strong>consumer.js</strong><br />\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./config&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> amqp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;amqplib&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMQConnection</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> amqp.<span class=\"title function_\">connect</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">protocol</span>: <span class=\"string\">&#x27;amqp&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hostname</span>: config.<span class=\"property\">host</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>: config.<span class=\"property\">port</span>,</span><br><span class=\"line\">        <span class=\"attr\">username</span>: config.<span class=\"property\">user</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: config.<span class=\"property\">pass</span>,</span><br><span class=\"line\">        <span class=\"attr\">locale</span>: <span class=\"string\">&#x27;en_US&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">frameMax</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">heartbeat</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 心跳</span></span><br><span class=\"line\">        <span class=\"attr\">vhost</span>: config.<span class=\"property\">vhost</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">rmqConn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> noramlQueue = <span class=\"string\">&#x27;noramlQu&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> noramlExchange = <span class=\"string\">&#x27;noramlEx&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exchangeDLX = <span class=\"string\">&#x27;testExDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queueDLX = <span class=\"string\">&#x27;testQueueDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> routingKeyDLX = <span class=\"string\">&#x27;testRoutingKeyDLX&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> channel = <span class=\"keyword\">await</span> rmqConn.<span class=\"title function_\">createChannel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 声明死信交换器和队列，就跟普通的一样</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertExchange</span>(exchangeDLX, <span class=\"string\">&#x27;direct&#x27;</span>, &#123; <span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertQueue</span>(queueDLX, &#123;<span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">bindQueue</span>(queueDLX, exchangeDLX, routingKeyDLX);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理死信队列消息</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">consume</span>(queueDLX, <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[<span class=\"subst\">$&#123;(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toLocaleString()&#125;</span>] consumer msg：`</span>, msg.<span class=\"property\">content</span>.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">        &#125;, &#123; <span class=\"attr\">noAck</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;consume message failed:&#x27;</span> + err.<span class=\"property\">message</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testConsume</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> conn = <span class=\"keyword\">await</span> <span class=\"title function_\">getMQConnection</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;begin consuming messages...&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">run</span>(conn);</span><br><span class=\"line\"></span><br><span class=\"line\">    process.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;SIGINT&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;stop consumer.&#x27;</span>)</span><br><span class=\"line\">        conn.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">testConsume</span>();</span><br></pre></td></tr></table></figure> <strong>config.js</strong><br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    host: &#x27;127.0.0.1&#x27;,</span><br><span class=\"line\">    port: 5672,</span><br><span class=\"line\">    user: &#x27;test&#x27;,</span><br><span class=\"line\">    pass: &#x27;************&#x27;,</span><br><span class=\"line\">    vhost: &#x27;/&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>上面的代码，我们让消息3s后过期，先启动<strong>消费者</strong>，再启动生产者，我们可以看到消息3s后过期:</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node consumer.js </span><br><span class=\"line\">begin consuming messages...</span><br><span class=\"line\">[2021/3/20 下午3:22:29] consumer msg： 2021/3/20 下午3:22:26</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"死信队列问题\">死信队列问题</h2>\r\n<p>RabbitMQ中，每个消息的过期不是独立的，一个队列里的某个消息即使比同队列中的其它消息提前过期，也不会优先进入到死信队列，<strong>只有当过期的消息到了队列的顶端，才会被真正的丢弃或者进入死信队列</strong>。<br />\r\n我们把<strong>生产者</strong>的代码调整下，先发一个20s过期的消息，再发一个3s过期的消息\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">async function testSend() &#123;</span><br><span class=\"line\">    const conn = await getMQConnection()</span><br><span class=\"line\">    await run(conn, &#123;</span><br><span class=\"line\">        content: (new Date()).toLocaleString() + &#x27; 20s过期 &#x27;,</span><br><span class=\"line\">        expiration: &#x27;20000&#x27;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    await run(conn, &#123;</span><br><span class=\"line\">        content: (new Date()).toLocaleString() + &#x27; 3s过期 &#x27;,</span><br><span class=\"line\">        expiration: &#x27;3000&#x27;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    await conn.close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>观察<strong>消费者</strong>输出：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node consumer.js </span><br><span class=\"line\">begin consuming messages...</span><br><span class=\"line\">[2021/3/21 下午6:10:21] consumer msg： 2021/3/21 下午6:10:01 20s过期 </span><br><span class=\"line\">[2021/3/21 下午6:10:21] consumer msg： 2021/3/21 下午6:10:01 3s过期</span><br></pre></td></tr></table></figure>\r\n<p>可以发现，3s过期的消息并没有先被消费，而是只能前面的20s过期的消息先过期，它才会被检查是否过期。<br />\r\n究其本质的话，RabbitMQ 的队列是一个 <code>FIFO</code>\r\n的有序队列，投入的消息都顺序的压进 MQ 中。而 RabbitMQ\r\n也只会对队列顶端的消息进行超时判定，所以就出现了上述的情况。<br />\r\n所以对于固定时间的延时任务的话，例如下单后半小时未支付则关闭订单这种场景，RabbitMQ无疑可以很好的承担起这个需求，但对于需要每条消息的死亡相互独立这种场景，RabbitMQ还是无法满足的。</p>\r\n<h2 id=\"解决队列消息非异步\">解决队列消息非异步</h2>\r\n<p>RabbitMQ\r\n本身没有这种功能，但是它有个插件可以解决这个问题：<strong>rabbitmq_delayed_message_exchange</strong>，<a\r\nhref=\"https://github.com/rabbitmq/rabbitmq-delayed-message-exchange\">地址</a>\r\n。<br />\r\n这个插件的介绍如下： &gt; A user can declare an exchange with the type\r\nx-delayed-message and then publish messages with the custom header\r\nx-delay expressing in milliseconds a delay time for the message. The\r\nmessage will be delivered to the respective queues after x-delay\r\nmilliseconds.</p>\r\n<p>这个插件增加了一种新类型的<code>exchange</code>：<strong>x-delayed-message</strong>，然后只要发送消息时指定的是这个交换机，那么只需要在消息\r\nheader 中指定参数 x-delay [:毫秒值] 就能够实现每条消息的异步延时。</p>\r\n<h3 id=\"添加插件\">添加插件</h3>\r\n<p>用了Docker之后，添加这个插件非常简单，添加<code>Dockerfile</code>：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM rabbitmq:3.8.12-management</span><br><span class=\"line\">COPY ./rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez /plugins</span><br><span class=\"line\">RUN rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure> 插件可以在<a\r\nhref=\"https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases\">Release页</a>下载。<br />\r\n<strong>docker-compose.yml</strong>改下： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;2&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  mq:</span><br><span class=\"line\">    build: .</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    mem_limit: 2g</span><br><span class=\"line\">    hostname: mq1</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./mnesia:/var/lib/rabbitmq/mnesia</span><br><span class=\"line\">      - ./log:/var/log/rabbitmq</span><br><span class=\"line\">      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - &quot;55672:15672&quot;</span><br><span class=\"line\">      - &quot;5672:5672&quot;</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - CONTAINER_NAME=rabbitMQ</span><br><span class=\"line\">      - RABBITMQ_ERLANG_COOKIE=3t182q3wtj1p9z0kd3tb</span><br></pre></td></tr></table></figure>\r\n这样插件就安装成功了。</p>\r\n<h3 id=\"修改代码\">修改代码</h3>\r\n<p><strong>producer.js</strong> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./config&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> amqp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;amqplib&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMQConnection</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> amqp.<span class=\"title function_\">connect</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">protocol</span>: <span class=\"string\">&#x27;amqp&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hostname</span>: config.<span class=\"property\">host</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>: config.<span class=\"property\">port</span>,</span><br><span class=\"line\">        <span class=\"attr\">username</span>: config.<span class=\"property\">user</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: config.<span class=\"property\">pass</span>,</span><br><span class=\"line\">        <span class=\"attr\">locale</span>: <span class=\"string\">&#x27;en_US&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">frameMax</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">heartbeat</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 心跳</span></span><br><span class=\"line\">        <span class=\"attr\">vhost</span>: config.<span class=\"property\">vhost</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">rmqConn, msgObj</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exchangeDelay = <span class=\"string\">&#x27;testExNewDelay&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queueDLX = <span class=\"string\">&#x27;testQueueDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> routingKeyDLX = <span class=\"string\">&#x27;testRoutingKeyDLX&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> channel = <span class=\"keyword\">await</span> rmqConn.<span class=\"title function_\">createChannel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// x-delayed-message类型的exchange</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertExchange</span>(exchangeDelay, <span class=\"string\">&#x27;x-delayed-message&#x27;</span>, &#123; <span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, <span class=\"attr\">arguments</span>: &#123;<span class=\"string\">&#x27;x-delayed-type&#x27;</span>:  <span class=\"string\">&quot;direct&quot;</span>&#125; &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertQueue</span>(queueDLX, &#123;<span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">bindQueue</span>(queueDLX, exchangeDelay, routingKeyDLX);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 发送消息</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">publish</span>(exchangeDelay, routingKeyDLX, <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(msgObj.<span class=\"property\">content</span>), &#123;</span><br><span class=\"line\">            <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&quot;x-delay&quot;</span>: msgObj.<span class=\"property\">expiration</span>&#125;, <span class=\"comment\">// ms</span></span><br><span class=\"line\">            <span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">mandatory</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;send message successfully.&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;send message failed:&#x27;</span> + err.<span class=\"property\">message</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testSend</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> conn = <span class=\"keyword\">await</span> <span class=\"title function_\">getMQConnection</span>()</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">run</span>(conn, &#123;</span><br><span class=\"line\">        <span class=\"attr\">content</span>: (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()).<span class=\"title function_\">toLocaleString</span>() + <span class=\"string\">&#x27; 20s过期 &#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">expiration</span>: <span class=\"string\">&#x27;20000&#x27;</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">run</span>(conn, &#123;</span><br><span class=\"line\">        <span class=\"attr\">content</span>: (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>()).<span class=\"title function_\">toLocaleString</span>() + <span class=\"string\">&#x27; 3s过期 &#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">expiration</span>: <span class=\"string\">&#x27;3000&#x27;</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">await</span> conn.<span class=\"title function_\">close</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">testSend</span>();</span><br></pre></td></tr></table></figure></p>\r\n<p><code>x-delayed-type</code>告诉插件在给定的延迟时间过去之后，exchange应该跟<code>direct</code>，<code>fanout</code>，<code>topic</code>中的exchange路由功能一样。</p>\r\n<p><strong>consumer.js</strong><br />\r\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./config&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> amqp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;amqplib&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getMQConnection</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> amqp.<span class=\"title function_\">connect</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">protocol</span>: <span class=\"string\">&#x27;amqp&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hostname</span>: config.<span class=\"property\">host</span>,</span><br><span class=\"line\">        <span class=\"attr\">port</span>: config.<span class=\"property\">port</span>,</span><br><span class=\"line\">        <span class=\"attr\">username</span>: config.<span class=\"property\">user</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: config.<span class=\"property\">pass</span>,</span><br><span class=\"line\">        <span class=\"attr\">locale</span>: <span class=\"string\">&#x27;en_US&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">frameMax</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">heartbeat</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 心跳</span></span><br><span class=\"line\">        <span class=\"attr\">vhost</span>: config.<span class=\"property\">vhost</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">rmqConn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exchangeDelay = <span class=\"string\">&#x27;testExNewDelay&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queueDLX = <span class=\"string\">&#x27;testQueueDLX&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> routingKeyDLX = <span class=\"string\">&#x27;testRoutingKeyDLX&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> channel = <span class=\"keyword\">await</span> rmqConn.<span class=\"title function_\">createChannel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// x-delayed-message类型的exchange</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertExchange</span>(exchangeDelay, <span class=\"string\">&#x27;x-delayed-message&#x27;</span>, &#123; <span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, <span class=\"attr\">arguments</span>: &#123;<span class=\"string\">&#x27;x-delayed-type&#x27;</span>:  <span class=\"string\">&quot;direct&quot;</span>&#125; &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">assertQueue</span>(queueDLX, &#123;<span class=\"attr\">durable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">autoDelete</span>: <span class=\"literal\">false</span>, &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">bindQueue</span>(queueDLX, exchangeDelay, routingKeyDLX);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 处理死信队列消息</span></span><br><span class=\"line\">        <span class=\"keyword\">await</span> channel.<span class=\"title function_\">consume</span>(queueDLX, <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[<span class=\"subst\">$&#123;(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toLocaleString()&#125;</span>] consumer msg：`</span>, msg.<span class=\"property\">content</span>.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">        &#125;, &#123; <span class=\"attr\">noAck</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;consume message failed:&#x27;</span> + err.<span class=\"property\">message</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">testConsume</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> conn = <span class=\"keyword\">await</span> <span class=\"title function_\">getMQConnection</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;begin consuming messages...&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">run</span>(conn);</span><br><span class=\"line\"></span><br><span class=\"line\">    process.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;SIGINT&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;stop consumer.&#x27;</span>)</span><br><span class=\"line\">        conn.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">testConsume</span>();</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"测试效果\">测试效果</h3>\r\n<p>执行<strong>生产者</strong>代码之后，我们可以看到<strong>消费者</strong>输出：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node consumer.js </span><br><span class=\"line\">begin consuming messages...</span><br><span class=\"line\">[2021/3/22 下午2:16:37] consumer msg： 2021/3/22 下午2:16:34 3s过期 </span><br><span class=\"line\">[2021/3/22 下午2:16:54] consumer msg： 2021/3/22 下午2:16:34 20s过期</span><br></pre></td></tr></table></figure> 可以发现，消息已经独立的过期了。</p>\r\n<h3 id=\"局限性\">局限性</h3>\r\n<p>没有什么东西是完美的，这个插件也不例外。看下这个插件的<code>Performance Impact</code>部分：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For each message that crosses an &quot;x-delayed-message&quot; exchange, </span><br><span class=\"line\">the plugin will try to determine if the message has to be expired by making sure the delay is within range, </span><br><span class=\"line\">ie: Delay &gt; 0, Delay =&lt; ?ERL_MAX_T (In Erlang a timer can be set up to (2^32)-1 milliseconds in the future).</span><br></pre></td></tr></table></figure> 延迟时间最大为 (2^32)-1 毫秒，大约 49\r\n天。另外这个插件也不适合大量延迟消息（例如数十万或数百万）的场景，<code>Limitations</code>也写了：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Current design of this plugin doesn&#x27;t really fit scenarios with a high number of delayed messages </span><br><span class=\"line\">(e.g. 100s of thousands or millions). See #72 for details.</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://www.skypyb.com/2020/01/jishu/1206/\">RabbitMQ\r\n死信机制真的可以作为延时任务这个场景的解决方案吗？</a> * <a\r\nhref=\"http://blog.lbanyan.com/rabbitmq_delay/\">RabbitMQ 延迟队列插件\r\nx-delay Bug</a></p>"},{"title":"Spring Boot集成MyBatis操作MySQL","author":"Salamander","date":"2019-10-27T11:05:00.000Z","_content":"最近学习了一下Spring Boot，它确实做到了简单快速创建Java Web应用。这是一篇简单的笔记，记录了Spring Boot集成MyBatis，实现基本的CURD。\n\n## MyBatis集成方式\n* 注解版集成\n* XML版本集成\n\nXML版本为老式的配置集成方式，重度集成XML文件，SQL语句也是全部写在XML中的，我以前配SSM（Spring+SpringMVC+MyBatis）用的就是这种方式；注解版版本，相对来说比较简约，不需要XML配置，只需要使用注解和代码来操作数据，本文这里不作介绍（其实挺好学的，^_^）。 \n\n\n\n<!-- more -->\n\n## 准备\n启动MySQL服务  \n创建数据库`spring_db`\n```\nCREATE DATABASE spring_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n```\n\n创建`user`表\n```\ncreate table user\n(\n\tuid int(11) unsigned auto_increment comment '主键Id'\n\t\tprimary key,\n\tname varchar(255) null comment '名称',\n\tage int null comment '年龄',\n\taddress varchar(255) null comment '地址',\n\tcreated_time datetime null comment '创建时间',\n\tupdated_time datetime null comment '更新时间'\n)\ncomment '用户表' collate=utf8_general_ci;\n```\n\n\n## 添加依赖\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.41</version>\n</dependency>\n\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.25</version>\n</dependency>\n```\n\n## 配置数据库连接\n设置application.properties文件，添加如下配置\n```\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/spring_db?useUnicode=true&characterEncoding=UTF-8\nspring.datasource.username=root\nspring.datasource.password=2LCqvSOJ6m0Ut6ui\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n* spring.datasource.url 数据库连接字符串\n* spring.datasource.username 数据库用户名\n* spring.datasource.password 数据库密码\n* spring.datasource.driver-class-name 驱动类型（注意MySQL 8.0的值是com.mysql.cj.jdbc.Driver和之前不同）\n\n## 设置 MapperScan 包路径\n直接在启动文件SpringbootApplication.java的类上配置@MapperScan，这样就可以省去，单独给每个Mapper（就是我们这里的dao层）上标识@Mapper的麻烦。\n```\n@SpringBootApplication\n@MapperScan(\"com.salamander.springbootdemo.dao\")\npublic class SpringbootdemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootdemoApplication.class, args);\n    }\n}\n```\n\n## 添加Entity和Dao层类\n`com.salamander.springbootdemo.entity`下`User`类（使用了lombok的@Data注解）：\n```\n@Data\npublic class User implements Serializable {\n    private Long id;\n\n    private String name;\n\n    private String address;\n\n    private int age;\n\n    private Date createdDatetime;\n}\n```\n`com.salamander.springbootdemo.dao`下`UserDao`接口：\n```\npublic interface UserDao {\n    User findByName(String name);\n    \n    int insertUser(User user);\n}\n```\n\n### XML方式MyBatis 集成\n修改application.properties，添加配置\n```\nmybatis.config-locations=classpath:mybatis/mybatis-config.xml\nmybatis.mapper-locations=classpath:mybatis/mapper/*.xml\n```\n* mybatis.config-locations 配置MyBatis基础属性\n* mybatis.mapper-locations 配置Mapper XML文件\n\n## 配置XML文件\n本例创建两个xml文件，在resource/mybatis下的mybatis-config.xml（配置MyBatis基础属性）和在resource/mybatis/mapper下的UserMapper.xml（用户和数据交互的SQL语句）。\n`mybatis-config.xml`\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\n<configuration>\n    <typeAliases>\n        <typeAlias alias=\"Integer\" type=\"java.lang.Integer\"/>\n        <typeAlias alias=\"Long\" type=\"java.lang.Long\"/>\n        <typeAlias alias=\"HashMap\" type=\"java.util.HashMap\"/>\n        <typeAlias alias=\"LinkedHashMap\" type=\"java.util.LinkedHashMap\"/>\n        <typeAlias alias=\"ArrayList\" type=\"java.util.ArrayList\"/>\n        <typeAlias alias=\"LinkedList\" type=\"java.util.LinkedList\"/>\n    </typeAliases>\n</configuration>\n```\n\n`UserMapper.xml`\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace是命名空间，是dao接口的全路径-->\n<mapper namespace=\"com.salamander.springbootdemo.dao.UserDao\">\n    <resultMap id=\"userResultMap\" type=\"com.salamander.springbootdemo.entity.User\">\n        <id property=\"id\" column=\"uid\"></id>\n        <result column=\"name\" property=\"name\" />\n        <result column=\"age\" property=\"age\" />\n        <result column=\"address\" property=\"address\" />\n        <result column=\"created_time\" property=\"createdDatetime\" />\n    </resultMap>\n\n\n    <select id=\"findByName\" parameterType=\"java.lang.String\"  resultMap=\"userResultMap\">\n        select  uid, name, age, address, created_time\n        from  user\n        where name = #{name}\n    </select>\n    \n    <insert id=\"insertUser\" parameterType=\"com.salamander.springbootdemo.entity.User\">\n        insert into user(name, age, address, created_time) VALUES (\n        #{name}, #{age}, #{address}, #{createdDatetime}\n        )\n    </insert>\n</mapper>\n```\n\n## 调用Dao类\n`HomeController.java`类\n```\n@RestController\npublic class HomeController {\n    @Resource\n    private UserDao userDao;\n\n\n    @RequestMapping(\"/\")\n    public String index() {\n        return \"Hello World!\";\n    }\n\n\n    @RequestMapping(\"/user/{username}\")\n    @ResponseBody\n    public User getUser(@PathVariable(name = \"username\") String name) {\n        return userDao.findByName(name);\n    }\n    \n    @RequestMapping(\"/user/add/{username}\")\n    @ResponseBody\n    public String addUser(@PathVariable(name = \"username\") String name) {\n        User user = new User();\n        user.setName(name);\n        user.setAge(20);\n        user.setCreatedDatetime(new Date());\n        userDao.insertUser(user);\n        return \"insert succesfully\";\n    }\n}\n```\n好了，访问链接`http://localhost:8080/user/wang`，就会输出`wang`这个用户的数据，而访问`http://localhost:8080/user/add/zhao`,会添加一条name为`zhao`的数据到数据库。\n\n\n## 事务支持\n\n在SpringBoot中开启事务非常简单，只需在业务层添加事务注解(`@Transactional`)即可快速开启事务。好的，让我们来尝试一下。   \n在上面的使用中，我们是直接把`Dao`类在控制层中使用的，但一般情况下，我们是在业务层中使用`Dao`类的。  \n在`com.salamander.springbootdemo`下新建`Service`的package，之后创建`接口`UserService：\n```\npackage com.salamander.springbootdemo.service;\n\npublic interface UserService {\n    void addUsers(String name) throws Exception;\n}\n```\n之后在`impl`的子package中添加实现类`UserServiceImpl`：\n```\n\npackage com.salamander.springbootdemo.service.impl;\n\nimport com.salamander.springbootdemo.dao.UserDao;\nimport com.salamander.springbootdemo.entity.User;\nimport com.salamander.springbootdemo.service.UserService;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.util.Date;\n\n@Service\npublic class UserServiceImpl implements UserService {\n    @Resource\n    private UserDao userDao;\n\n\n    @Transactional\n    @Override\n    public void addUsers(String name) throws Exception {\n        int num = 5;\n        for (int i = 0; i < num; i++) {\n            User user = getNewUser(name + (i + 1));\n            userDao.insertUser(user);\n            if (i == 3) {\n                throw new Exception(\"发生内部错误了\");\n            }\n        }\n    }\n\n    private User getNewUser(String name) {\n        User user = new User();\n        user.setName(name);\n        user.setAge(20);\n        user.setCreatedDatetime(new Date());\n        return user;\n    }\n}\n```\n然后我们在`HomeController`中注入`UserService`，并添加路由\n```\n@Resource\nprivate UserService userService;\n\n@RequestMapping(\"/users/add/{username}\")\n@ResponseBody\npublic String addUsers(@PathVariable(name = \"username\") String name) {\n    try {\n        userService.addUsers(name);\n        return \"batch insert succesfully\";\n    } catch (Exception e) {\n        return e.getMessage();\n    }\n}\n\n```\n\n可以看到，我们在`addUsers`方法上添加了`@Transactional`注解开启了事务，并在插入第4条数据后抛出了异常。好了，让我们访问链接`http://localhost:8080/users/add/sun`，我们发现数据库多出了四条`name`为`sun`的数据，**回滚并没有起效果**  \n![](https://s2.ax1x.com/2019/11/03/KXiGOe.png)\n\n这是一个常见的坑点，因为`Spring`的默认的事务规则是遇到**运行异常**（`RuntimeException`及其子类）和程序错误（Error）才会进行事务回滚，而`Exception`是基类就不行了，让我们看下Java的异常类层次图  \n![](https://s2.ax1x.com/2019/11/03/KXkgGq.jpg)\n如果想针对检测异常进行事务回滚，可以在`@Transactional`注解里使用\n`rollbackFor`属性明确指定异常（或者你可以自己定义一个继承`RuntimeException`的类，然后抛出这个类）。  \n现在`addUsers`改成这样，就可以正常回滚了：\n```\n@Transactional(rollbackFor = Exception.class)\n@Override\npublic void addUsers(String name) throws Exception {\n    int num = 5;\n    for (int i = 0; i < num; i++) {\n        User user = getNewUser(name + (i + 1));\n        userDao.insertUser(user);\n        if (i == 3) {\n            throw new Exception(\"发生内部错误了\");\n        }\n    }\n}\n```\n\n\n项目代码[下载](http://file.51lucy.com/SpringBootDemo.zip)","source":"_posts/Spring-Boot集成MyBatis操作MySQL.md","raw":"title: Spring Boot集成MyBatis操作MySQL\nauthor: Salamander\ntags:\n  - Spring\n  - Spring Boot\n  - MyBatis\ncategories:\n  - Java\n  - MyBatis\ndate: 2019-10-27 19:05:00\n---\n最近学习了一下Spring Boot，它确实做到了简单快速创建Java Web应用。这是一篇简单的笔记，记录了Spring Boot集成MyBatis，实现基本的CURD。\n\n## MyBatis集成方式\n* 注解版集成\n* XML版本集成\n\nXML版本为老式的配置集成方式，重度集成XML文件，SQL语句也是全部写在XML中的，我以前配SSM（Spring+SpringMVC+MyBatis）用的就是这种方式；注解版版本，相对来说比较简约，不需要XML配置，只需要使用注解和代码来操作数据，本文这里不作介绍（其实挺好学的，^_^）。 \n\n\n\n<!-- more -->\n\n## 准备\n启动MySQL服务  \n创建数据库`spring_db`\n```\nCREATE DATABASE spring_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n```\n\n创建`user`表\n```\ncreate table user\n(\n\tuid int(11) unsigned auto_increment comment '主键Id'\n\t\tprimary key,\n\tname varchar(255) null comment '名称',\n\tage int null comment '年龄',\n\taddress varchar(255) null comment '地址',\n\tcreated_time datetime null comment '创建时间',\n\tupdated_time datetime null comment '更新时间'\n)\ncomment '用户表' collate=utf8_general_ci;\n```\n\n\n## 添加依赖\n```\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.41</version>\n</dependency>\n\n<dependency>\n    <groupId>org.mybatis.spring.boot</groupId>\n    <artifactId>mybatis-spring-boot-starter</artifactId>\n    <version>1.3.25</version>\n</dependency>\n```\n\n## 配置数据库连接\n设置application.properties文件，添加如下配置\n```\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/spring_db?useUnicode=true&characterEncoding=UTF-8\nspring.datasource.username=root\nspring.datasource.password=2LCqvSOJ6m0Ut6ui\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n* spring.datasource.url 数据库连接字符串\n* spring.datasource.username 数据库用户名\n* spring.datasource.password 数据库密码\n* spring.datasource.driver-class-name 驱动类型（注意MySQL 8.0的值是com.mysql.cj.jdbc.Driver和之前不同）\n\n## 设置 MapperScan 包路径\n直接在启动文件SpringbootApplication.java的类上配置@MapperScan，这样就可以省去，单独给每个Mapper（就是我们这里的dao层）上标识@Mapper的麻烦。\n```\n@SpringBootApplication\n@MapperScan(\"com.salamander.springbootdemo.dao\")\npublic class SpringbootdemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootdemoApplication.class, args);\n    }\n}\n```\n\n## 添加Entity和Dao层类\n`com.salamander.springbootdemo.entity`下`User`类（使用了lombok的@Data注解）：\n```\n@Data\npublic class User implements Serializable {\n    private Long id;\n\n    private String name;\n\n    private String address;\n\n    private int age;\n\n    private Date createdDatetime;\n}\n```\n`com.salamander.springbootdemo.dao`下`UserDao`接口：\n```\npublic interface UserDao {\n    User findByName(String name);\n    \n    int insertUser(User user);\n}\n```\n\n### XML方式MyBatis 集成\n修改application.properties，添加配置\n```\nmybatis.config-locations=classpath:mybatis/mybatis-config.xml\nmybatis.mapper-locations=classpath:mybatis/mapper/*.xml\n```\n* mybatis.config-locations 配置MyBatis基础属性\n* mybatis.mapper-locations 配置Mapper XML文件\n\n## 配置XML文件\n本例创建两个xml文件，在resource/mybatis下的mybatis-config.xml（配置MyBatis基础属性）和在resource/mybatis/mapper下的UserMapper.xml（用户和数据交互的SQL语句）。\n`mybatis-config.xml`\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\n<configuration>\n    <typeAliases>\n        <typeAlias alias=\"Integer\" type=\"java.lang.Integer\"/>\n        <typeAlias alias=\"Long\" type=\"java.lang.Long\"/>\n        <typeAlias alias=\"HashMap\" type=\"java.util.HashMap\"/>\n        <typeAlias alias=\"LinkedHashMap\" type=\"java.util.LinkedHashMap\"/>\n        <typeAlias alias=\"ArrayList\" type=\"java.util.ArrayList\"/>\n        <typeAlias alias=\"LinkedList\" type=\"java.util.LinkedList\"/>\n    </typeAliases>\n</configuration>\n```\n\n`UserMapper.xml`\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!--namespace是命名空间，是dao接口的全路径-->\n<mapper namespace=\"com.salamander.springbootdemo.dao.UserDao\">\n    <resultMap id=\"userResultMap\" type=\"com.salamander.springbootdemo.entity.User\">\n        <id property=\"id\" column=\"uid\"></id>\n        <result column=\"name\" property=\"name\" />\n        <result column=\"age\" property=\"age\" />\n        <result column=\"address\" property=\"address\" />\n        <result column=\"created_time\" property=\"createdDatetime\" />\n    </resultMap>\n\n\n    <select id=\"findByName\" parameterType=\"java.lang.String\"  resultMap=\"userResultMap\">\n        select  uid, name, age, address, created_time\n        from  user\n        where name = #{name}\n    </select>\n    \n    <insert id=\"insertUser\" parameterType=\"com.salamander.springbootdemo.entity.User\">\n        insert into user(name, age, address, created_time) VALUES (\n        #{name}, #{age}, #{address}, #{createdDatetime}\n        )\n    </insert>\n</mapper>\n```\n\n## 调用Dao类\n`HomeController.java`类\n```\n@RestController\npublic class HomeController {\n    @Resource\n    private UserDao userDao;\n\n\n    @RequestMapping(\"/\")\n    public String index() {\n        return \"Hello World!\";\n    }\n\n\n    @RequestMapping(\"/user/{username}\")\n    @ResponseBody\n    public User getUser(@PathVariable(name = \"username\") String name) {\n        return userDao.findByName(name);\n    }\n    \n    @RequestMapping(\"/user/add/{username}\")\n    @ResponseBody\n    public String addUser(@PathVariable(name = \"username\") String name) {\n        User user = new User();\n        user.setName(name);\n        user.setAge(20);\n        user.setCreatedDatetime(new Date());\n        userDao.insertUser(user);\n        return \"insert succesfully\";\n    }\n}\n```\n好了，访问链接`http://localhost:8080/user/wang`，就会输出`wang`这个用户的数据，而访问`http://localhost:8080/user/add/zhao`,会添加一条name为`zhao`的数据到数据库。\n\n\n## 事务支持\n\n在SpringBoot中开启事务非常简单，只需在业务层添加事务注解(`@Transactional`)即可快速开启事务。好的，让我们来尝试一下。   \n在上面的使用中，我们是直接把`Dao`类在控制层中使用的，但一般情况下，我们是在业务层中使用`Dao`类的。  \n在`com.salamander.springbootdemo`下新建`Service`的package，之后创建`接口`UserService：\n```\npackage com.salamander.springbootdemo.service;\n\npublic interface UserService {\n    void addUsers(String name) throws Exception;\n}\n```\n之后在`impl`的子package中添加实现类`UserServiceImpl`：\n```\n\npackage com.salamander.springbootdemo.service.impl;\n\nimport com.salamander.springbootdemo.dao.UserDao;\nimport com.salamander.springbootdemo.entity.User;\nimport com.salamander.springbootdemo.service.UserService;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.util.Date;\n\n@Service\npublic class UserServiceImpl implements UserService {\n    @Resource\n    private UserDao userDao;\n\n\n    @Transactional\n    @Override\n    public void addUsers(String name) throws Exception {\n        int num = 5;\n        for (int i = 0; i < num; i++) {\n            User user = getNewUser(name + (i + 1));\n            userDao.insertUser(user);\n            if (i == 3) {\n                throw new Exception(\"发生内部错误了\");\n            }\n        }\n    }\n\n    private User getNewUser(String name) {\n        User user = new User();\n        user.setName(name);\n        user.setAge(20);\n        user.setCreatedDatetime(new Date());\n        return user;\n    }\n}\n```\n然后我们在`HomeController`中注入`UserService`，并添加路由\n```\n@Resource\nprivate UserService userService;\n\n@RequestMapping(\"/users/add/{username}\")\n@ResponseBody\npublic String addUsers(@PathVariable(name = \"username\") String name) {\n    try {\n        userService.addUsers(name);\n        return \"batch insert succesfully\";\n    } catch (Exception e) {\n        return e.getMessage();\n    }\n}\n\n```\n\n可以看到，我们在`addUsers`方法上添加了`@Transactional`注解开启了事务，并在插入第4条数据后抛出了异常。好了，让我们访问链接`http://localhost:8080/users/add/sun`，我们发现数据库多出了四条`name`为`sun`的数据，**回滚并没有起效果**  \n![](https://s2.ax1x.com/2019/11/03/KXiGOe.png)\n\n这是一个常见的坑点，因为`Spring`的默认的事务规则是遇到**运行异常**（`RuntimeException`及其子类）和程序错误（Error）才会进行事务回滚，而`Exception`是基类就不行了，让我们看下Java的异常类层次图  \n![](https://s2.ax1x.com/2019/11/03/KXkgGq.jpg)\n如果想针对检测异常进行事务回滚，可以在`@Transactional`注解里使用\n`rollbackFor`属性明确指定异常（或者你可以自己定义一个继承`RuntimeException`的类，然后抛出这个类）。  \n现在`addUsers`改成这样，就可以正常回滚了：\n```\n@Transactional(rollbackFor = Exception.class)\n@Override\npublic void addUsers(String name) throws Exception {\n    int num = 5;\n    for (int i = 0; i < num; i++) {\n        User user = getNewUser(name + (i + 1));\n        userDao.insertUser(user);\n        if (i == 3) {\n            throw new Exception(\"发生内部错误了\");\n        }\n    }\n}\n```\n\n\n项目代码[下载](http://file.51lucy.com/SpringBootDemo.zip)","slug":"Spring-Boot集成MyBatis操作MySQL","published":1,"updated":"2023-03-21T02:48:19.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l6001l2o3m8xoga4xu","content":"<p>最近学习了一下Spring Boot，它确实做到了简单快速创建Java\r\nWeb应用。这是一篇简单的笔记，记录了Spring\r\nBoot集成MyBatis，实现基本的CURD。</p>\r\n<h2 id=\"mybatis集成方式\">MyBatis集成方式</h2>\r\n<ul>\r\n<li>注解版集成</li>\r\n<li>XML版本集成</li>\r\n</ul>\r\n<p>XML版本为老式的配置集成方式，重度集成XML文件，SQL语句也是全部写在XML中的，我以前配SSM（Spring+SpringMVC+MyBatis）用的就是这种方式；注解版版本，相对来说比较简约，不需要XML配置，只需要使用注解和代码来操作数据，本文这里不作介绍（其实挺好学的，^_^）。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"准备\">准备</h2>\r\n<p>启动MySQL服务<br />\r\n创建数据库<code>spring_db</code> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE spring_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure></p>\r\n<p>创建<code>user</code>表 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table user</span><br><span class=\"line\">(</span><br><span class=\"line\">\tuid int(11) unsigned auto_increment comment &#x27;主键Id&#x27;</span><br><span class=\"line\">\t\tprimary key,</span><br><span class=\"line\">\tname varchar(255) null comment &#x27;名称&#x27;,</span><br><span class=\"line\">\tage int null comment &#x27;年龄&#x27;,</span><br><span class=\"line\">\taddress varchar(255) null comment &#x27;地址&#x27;,</span><br><span class=\"line\">\tcreated_time datetime null comment &#x27;创建时间&#x27;,</span><br><span class=\"line\">\tupdated_time datetime null comment &#x27;更新时间&#x27;</span><br><span class=\"line\">)</span><br><span class=\"line\">comment &#x27;用户表&#x27; collate=utf8_general_ci;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"添加依赖\">添加依赖</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.1.41&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.25&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"配置数据库连接\">配置数据库连接</h2>\r\n<p>设置application.properties文件，添加如下配置 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/spring_db?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">spring.datasource.username=root</span><br><span class=\"line\">spring.datasource.password=2LCqvSOJ6m0Ut6ui</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure> *\r\nspring.datasource.url 数据库连接字符串 * spring.datasource.username\r\n数据库用户名 * spring.datasource.password 数据库密码 *\r\nspring.datasource.driver-class-name 驱动类型（注意MySQL\r\n8.0的值是com.mysql.cj.jdbc.Driver和之前不同）</p>\r\n<h2 id=\"设置-mapperscan-包路径\">设置 MapperScan 包路径</h2>\r\n<p>直接在启动文件SpringbootApplication.java的类上配置@MapperScan，这样就可以省去，单独给每个Mapper（就是我们这里的dao层）上标识@Mapper的麻烦。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@MapperScan(&quot;com.salamander.springbootdemo.dao&quot;)</span><br><span class=\"line\">public class SpringbootdemoApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringbootdemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"添加entity和dao层类\">添加Entity和Dao层类</h2>\r\n<p><code>com.salamander.springbootdemo.entity</code>下<code>User</code>类（使用了lombok的@Data注解）：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Data</span><br><span class=\"line\">public class User implements Serializable &#123;</span><br><span class=\"line\">    private Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Date createdDatetime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<code>com.salamander.springbootdemo.dao</code>下<code>UserDao</code>接口：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface UserDao &#123;</span><br><span class=\"line\">    User findByName(String name);</span><br><span class=\"line\">    </span><br><span class=\"line\">    int insertUser(User user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"xml方式mybatis-集成\">XML方式MyBatis 集成</h3>\r\n<p>修改application.properties，添加配置 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybatis.config-locations=classpath:mybatis/mybatis-config.xml</span><br><span class=\"line\">mybatis.mapper-locations=classpath:mybatis/mapper/*.xml</span><br></pre></td></tr></table></figure> *\r\nmybatis.config-locations 配置MyBatis基础属性 * mybatis.mapper-locations\r\n配置Mapper XML文件</p>\r\n<h2 id=\"配置xml文件\">配置XML文件</h2>\r\n<p>本例创建两个xml文件，在resource/mybatis下的mybatis-config.xml（配置MyBatis基础属性）和在resource/mybatis/mapper下的UserMapper.xml（用户和数据交互的SQL语句）。\r\n<code>mybatis-config.xml</code> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;typeAliases&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;Integer&quot; type=&quot;java.lang.Integer&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;Long&quot; type=&quot;java.lang.Long&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;HashMap&quot; type=&quot;java.util.HashMap&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;LinkedHashMap&quot; type=&quot;java.util.LinkedHashMap&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;ArrayList&quot; type=&quot;java.util.ArrayList&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;LinkedList&quot; type=&quot;java.util.LinkedList&quot;/&gt;</span><br><span class=\"line\">    &lt;/typeAliases&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\r\n<p><code>UserMapper.xml</code> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--namespace是命名空间，是dao接口的全路径--&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;com.salamander.springbootdemo.dao.UserDao&quot;&gt;</span><br><span class=\"line\">    &lt;resultMap id=&quot;userResultMap&quot; type=&quot;com.salamander.springbootdemo.entity.User&quot;&gt;</span><br><span class=\"line\">        &lt;id property=&quot;id&quot; column=&quot;uid&quot;&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result column=&quot;name&quot; property=&quot;name&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;age&quot; property=&quot;age&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;created_time&quot; property=&quot;createdDatetime&quot; /&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;select id=&quot;findByName&quot; parameterType=&quot;java.lang.String&quot;  resultMap=&quot;userResultMap&quot;&gt;</span><br><span class=\"line\">        select  uid, name, age, address, created_time</span><br><span class=\"line\">        from  user</span><br><span class=\"line\">        where name = #&#123;name&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.salamander.springbootdemo.entity.User&quot;&gt;</span><br><span class=\"line\">        insert into user(name, age, address, created_time) VALUES (</span><br><span class=\"line\">        #&#123;name&#125;, #&#123;age&#125;, #&#123;address&#125;, #&#123;createdDatetime&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &lt;/insert&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"调用dao类\">调用Dao类</h2>\r\n<p><code>HomeController.java</code>类 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HomeController &#123;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    public String index() &#123;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/user/&#123;username&#125;&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public User getUser(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">        return userDao.findByName(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/user/add/&#123;username&#125;&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String addUser(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">        User user = new User();</span><br><span class=\"line\">        user.setName(name);</span><br><span class=\"line\">        user.setAge(20);</span><br><span class=\"line\">        user.setCreatedDatetime(new Date());</span><br><span class=\"line\">        userDao.insertUser(user);</span><br><span class=\"line\">        return &quot;insert succesfully&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n好了，访问链接<code>http://localhost:8080/user/wang</code>，就会输出<code>wang</code>这个用户的数据，而访问<code>http://localhost:8080/user/add/zhao</code>,会添加一条name为<code>zhao</code>的数据到数据库。</p>\r\n<h2 id=\"事务支持\">事务支持</h2>\r\n<p>在SpringBoot中开启事务非常简单，只需在业务层添加事务注解(<code>@Transactional</code>)即可快速开启事务。好的，让我们来尝试一下。<br />\r\n在上面的使用中，我们是直接把<code>Dao</code>类在控制层中使用的，但一般情况下，我们是在业务层中使用<code>Dao</code>类的。<br />\r\n在<code>com.salamander.springbootdemo</code>下新建<code>Service</code>的package，之后创建<code>接口</code>UserService：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.salamander.springbootdemo.service;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserService &#123;</span><br><span class=\"line\">    void addUsers(String name) throws Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n之后在<code>impl</code>的子package中添加实现类<code>UserServiceImpl</code>：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.salamander.springbootdemo.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.salamander.springbootdemo.dao.UserDao;</span><br><span class=\"line\">import com.salamander.springbootdemo.entity.User;</span><br><span class=\"line\">import com.salamander.springbootdemo.service.UserService;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.annotation.Resource;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Transactional</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addUsers(String name) throws Exception &#123;</span><br><span class=\"line\">        int num = 5;</span><br><span class=\"line\">        for (int i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">            User user = getNewUser(name + (i + 1));</span><br><span class=\"line\">            userDao.insertUser(user);</span><br><span class=\"line\">            if (i == 3) &#123;</span><br><span class=\"line\">                throw new Exception(&quot;发生内部错误了&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private User getNewUser(String name) &#123;</span><br><span class=\"line\">        User user = new User();</span><br><span class=\"line\">        user.setName(name);</span><br><span class=\"line\">        user.setAge(20);</span><br><span class=\"line\">        user.setCreatedDatetime(new Date());</span><br><span class=\"line\">        return user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n然后我们在<code>HomeController</code>中注入<code>UserService</code>，并添加路由\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Resource</span><br><span class=\"line\">private UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">@RequestMapping(&quot;/users/add/&#123;username&#125;&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public String addUsers(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        userService.addUsers(name);</span><br><span class=\"line\">        return &quot;batch insert succesfully&quot;;</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        return e.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<p>可以看到，我们在<code>addUsers</code>方法上添加了<code>@Transactional</code>注解开启了事务，并在插入第4条数据后抛出了异常。好了，让我们访问链接<code>http://localhost:8080/users/add/sun</code>，我们发现数据库多出了四条<code>name</code>为<code>sun</code>的数据，<strong>回滚并没有起效果</strong><br />\r\n<img src=\"https://s2.ax1x.com/2019/11/03/KXiGOe.png\" /></p>\r\n<p>这是一个常见的坑点，因为<code>Spring</code>的默认的事务规则是遇到<strong>运行异常</strong>（<code>RuntimeException</code>及其子类）和程序错误（Error）才会进行事务回滚，而<code>Exception</code>是基类就不行了，让我们看下Java的异常类层次图<br />\r\n<img src=\"https://s2.ax1x.com/2019/11/03/KXkgGq.jpg\" />\r\n如果想针对检测异常进行事务回滚，可以在<code>@Transactional</code>注解里使用\r\n<code>rollbackFor</code>属性明确指定异常（或者你可以自己定义一个继承<code>RuntimeException</code>的类，然后抛出这个类）。<br />\r\n现在<code>addUsers</code>改成这样，就可以正常回滚了： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(rollbackFor = Exception.class)</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void addUsers(String name) throws Exception &#123;</span><br><span class=\"line\">    int num = 5;</span><br><span class=\"line\">    for (int i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">        User user = getNewUser(name + (i + 1));</span><br><span class=\"line\">        userDao.insertUser(user);</span><br><span class=\"line\">        if (i == 3) &#123;</span><br><span class=\"line\">            throw new Exception(&quot;发生内部错误了&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>项目代码<a\r\nhref=\"http://file.51lucy.com/SpringBootDemo.zip\">下载</a></p>\r\n","site":{"data":{}},"excerpt":"<p>最近学习了一下Spring Boot，它确实做到了简单快速创建Java\r\nWeb应用。这是一篇简单的笔记，记录了Spring\r\nBoot集成MyBatis，实现基本的CURD。</p>\r\n<h2 id=\"mybatis集成方式\">MyBatis集成方式</h2>\r\n<ul>\r\n<li>注解版集成</li>\r\n<li>XML版本集成</li>\r\n</ul>\r\n<p>XML版本为老式的配置集成方式，重度集成XML文件，SQL语句也是全部写在XML中的，我以前配SSM（Spring+SpringMVC+MyBatis）用的就是这种方式；注解版版本，相对来说比较简约，不需要XML配置，只需要使用注解和代码来操作数据，本文这里不作介绍（其实挺好学的，^_^）。</p>","more":"<h2 id=\"准备\">准备</h2>\r\n<p>启动MySQL服务<br />\r\n创建数据库<code>spring_db</code> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE spring_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure></p>\r\n<p>创建<code>user</code>表 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table user</span><br><span class=\"line\">(</span><br><span class=\"line\">\tuid int(11) unsigned auto_increment comment &#x27;主键Id&#x27;</span><br><span class=\"line\">\t\tprimary key,</span><br><span class=\"line\">\tname varchar(255) null comment &#x27;名称&#x27;,</span><br><span class=\"line\">\tage int null comment &#x27;年龄&#x27;,</span><br><span class=\"line\">\taddress varchar(255) null comment &#x27;地址&#x27;,</span><br><span class=\"line\">\tcreated_time datetime null comment &#x27;创建时间&#x27;,</span><br><span class=\"line\">\tupdated_time datetime null comment &#x27;更新时间&#x27;</span><br><span class=\"line\">)</span><br><span class=\"line\">comment &#x27;用户表&#x27; collate=utf8_general_ci;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"添加依赖\">添加依赖</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;5.1.41&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.3.25&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"配置数据库连接\">配置数据库连接</h2>\r\n<p>设置application.properties文件，添加如下配置 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/spring_db?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class=\"line\">spring.datasource.username=root</span><br><span class=\"line\">spring.datasource.password=2LCqvSOJ6m0Ut6ui</span><br><span class=\"line\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure> *\r\nspring.datasource.url 数据库连接字符串 * spring.datasource.username\r\n数据库用户名 * spring.datasource.password 数据库密码 *\r\nspring.datasource.driver-class-name 驱动类型（注意MySQL\r\n8.0的值是com.mysql.cj.jdbc.Driver和之前不同）</p>\r\n<h2 id=\"设置-mapperscan-包路径\">设置 MapperScan 包路径</h2>\r\n<p>直接在启动文件SpringbootApplication.java的类上配置@MapperScan，这样就可以省去，单独给每个Mapper（就是我们这里的dao层）上标识@Mapper的麻烦。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication</span><br><span class=\"line\">@MapperScan(&quot;com.salamander.springbootdemo.dao&quot;)</span><br><span class=\"line\">public class SpringbootdemoApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringbootdemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"添加entity和dao层类\">添加Entity和Dao层类</h2>\r\n<p><code>com.salamander.springbootdemo.entity</code>下<code>User</code>类（使用了lombok的@Data注解）：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Data</span><br><span class=\"line\">public class User implements Serializable &#123;</span><br><span class=\"line\">    private Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    private String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int age;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Date createdDatetime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<code>com.salamander.springbootdemo.dao</code>下<code>UserDao</code>接口：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface UserDao &#123;</span><br><span class=\"line\">    User findByName(String name);</span><br><span class=\"line\">    </span><br><span class=\"line\">    int insertUser(User user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"xml方式mybatis-集成\">XML方式MyBatis 集成</h3>\r\n<p>修改application.properties，添加配置 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mybatis.config-locations=classpath:mybatis/mybatis-config.xml</span><br><span class=\"line\">mybatis.mapper-locations=classpath:mybatis/mapper/*.xml</span><br></pre></td></tr></table></figure> *\r\nmybatis.config-locations 配置MyBatis基础属性 * mybatis.mapper-locations\r\n配置Mapper XML文件</p>\r\n<h2 id=\"配置xml文件\">配置XML文件</h2>\r\n<p>本例创建两个xml文件，在resource/mybatis下的mybatis-config.xml（配置MyBatis基础属性）和在resource/mybatis/mapper下的UserMapper.xml（用户和数据交互的SQL语句）。\r\n<code>mybatis-config.xml</code> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;typeAliases&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;Integer&quot; type=&quot;java.lang.Integer&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;Long&quot; type=&quot;java.lang.Long&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;HashMap&quot; type=&quot;java.util.HashMap&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;LinkedHashMap&quot; type=&quot;java.util.LinkedHashMap&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;ArrayList&quot; type=&quot;java.util.ArrayList&quot;/&gt;</span><br><span class=\"line\">        &lt;typeAlias alias=&quot;LinkedList&quot; type=&quot;java.util.LinkedList&quot;/&gt;</span><br><span class=\"line\">    &lt;/typeAliases&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\r\n<p><code>UserMapper.xml</code> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--namespace是命名空间，是dao接口的全路径--&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;com.salamander.springbootdemo.dao.UserDao&quot;&gt;</span><br><span class=\"line\">    &lt;resultMap id=&quot;userResultMap&quot; type=&quot;com.salamander.springbootdemo.entity.User&quot;&gt;</span><br><span class=\"line\">        &lt;id property=&quot;id&quot; column=&quot;uid&quot;&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result column=&quot;name&quot; property=&quot;name&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;age&quot; property=&quot;age&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt;</span><br><span class=\"line\">        &lt;result column=&quot;created_time&quot; property=&quot;createdDatetime&quot; /&gt;</span><br><span class=\"line\">    &lt;/resultMap&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;select id=&quot;findByName&quot; parameterType=&quot;java.lang.String&quot;  resultMap=&quot;userResultMap&quot;&gt;</span><br><span class=\"line\">        select  uid, name, age, address, created_time</span><br><span class=\"line\">        from  user</span><br><span class=\"line\">        where name = #&#123;name&#125;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;com.salamander.springbootdemo.entity.User&quot;&gt;</span><br><span class=\"line\">        insert into user(name, age, address, created_time) VALUES (</span><br><span class=\"line\">        #&#123;name&#125;, #&#123;age&#125;, #&#123;address&#125;, #&#123;createdDatetime&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &lt;/insert&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"调用dao类\">调用Dao类</h2>\r\n<p><code>HomeController.java</code>类 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RestController</span><br><span class=\"line\">public class HomeController &#123;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">    public String index() &#123;</span><br><span class=\"line\">        return &quot;Hello World!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @RequestMapping(&quot;/user/&#123;username&#125;&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public User getUser(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">        return userDao.findByName(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @RequestMapping(&quot;/user/add/&#123;username&#125;&quot;)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public String addUser(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">        User user = new User();</span><br><span class=\"line\">        user.setName(name);</span><br><span class=\"line\">        user.setAge(20);</span><br><span class=\"line\">        user.setCreatedDatetime(new Date());</span><br><span class=\"line\">        userDao.insertUser(user);</span><br><span class=\"line\">        return &quot;insert succesfully&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n好了，访问链接<code>http://localhost:8080/user/wang</code>，就会输出<code>wang</code>这个用户的数据，而访问<code>http://localhost:8080/user/add/zhao</code>,会添加一条name为<code>zhao</code>的数据到数据库。</p>\r\n<h2 id=\"事务支持\">事务支持</h2>\r\n<p>在SpringBoot中开启事务非常简单，只需在业务层添加事务注解(<code>@Transactional</code>)即可快速开启事务。好的，让我们来尝试一下。<br />\r\n在上面的使用中，我们是直接把<code>Dao</code>类在控制层中使用的，但一般情况下，我们是在业务层中使用<code>Dao</code>类的。<br />\r\n在<code>com.salamander.springbootdemo</code>下新建<code>Service</code>的package，之后创建<code>接口</code>UserService：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.salamander.springbootdemo.service;</span><br><span class=\"line\"></span><br><span class=\"line\">public interface UserService &#123;</span><br><span class=\"line\">    void addUsers(String name) throws Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n之后在<code>impl</code>的子package中添加实现类<code>UserServiceImpl</code>：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.salamander.springbootdemo.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\">import com.salamander.springbootdemo.dao.UserDao;</span><br><span class=\"line\">import com.salamander.springbootdemo.entity.User;</span><br><span class=\"line\">import com.salamander.springbootdemo.service.UserService;</span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\">import org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.annotation.Resource;</span><br><span class=\"line\">import java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class UserServiceImpl implements UserService &#123;</span><br><span class=\"line\">    @Resource</span><br><span class=\"line\">    private UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    @Transactional</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void addUsers(String name) throws Exception &#123;</span><br><span class=\"line\">        int num = 5;</span><br><span class=\"line\">        for (int i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">            User user = getNewUser(name + (i + 1));</span><br><span class=\"line\">            userDao.insertUser(user);</span><br><span class=\"line\">            if (i == 3) &#123;</span><br><span class=\"line\">                throw new Exception(&quot;发生内部错误了&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private User getNewUser(String name) &#123;</span><br><span class=\"line\">        User user = new User();</span><br><span class=\"line\">        user.setName(name);</span><br><span class=\"line\">        user.setAge(20);</span><br><span class=\"line\">        user.setCreatedDatetime(new Date());</span><br><span class=\"line\">        return user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n然后我们在<code>HomeController</code>中注入<code>UserService</code>，并添加路由\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Resource</span><br><span class=\"line\">private UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">@RequestMapping(&quot;/users/add/&#123;username&#125;&quot;)</span><br><span class=\"line\">@ResponseBody</span><br><span class=\"line\">public String addUsers(@PathVariable(name = &quot;username&quot;) String name) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        userService.addUsers(name);</span><br><span class=\"line\">        return &quot;batch insert succesfully&quot;;</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        return e.getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<p>可以看到，我们在<code>addUsers</code>方法上添加了<code>@Transactional</code>注解开启了事务，并在插入第4条数据后抛出了异常。好了，让我们访问链接<code>http://localhost:8080/users/add/sun</code>，我们发现数据库多出了四条<code>name</code>为<code>sun</code>的数据，<strong>回滚并没有起效果</strong><br />\r\n<img src=\"https://s2.ax1x.com/2019/11/03/KXiGOe.png\" /></p>\r\n<p>这是一个常见的坑点，因为<code>Spring</code>的默认的事务规则是遇到<strong>运行异常</strong>（<code>RuntimeException</code>及其子类）和程序错误（Error）才会进行事务回滚，而<code>Exception</code>是基类就不行了，让我们看下Java的异常类层次图<br />\r\n<img src=\"https://s2.ax1x.com/2019/11/03/KXkgGq.jpg\" />\r\n如果想针对检测异常进行事务回滚，可以在<code>@Transactional</code>注解里使用\r\n<code>rollbackFor</code>属性明确指定异常（或者你可以自己定义一个继承<code>RuntimeException</code>的类，然后抛出这个类）。<br />\r\n现在<code>addUsers</code>改成这样，就可以正常回滚了： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Transactional(rollbackFor = Exception.class)</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void addUsers(String name) throws Exception &#123;</span><br><span class=\"line\">    int num = 5;</span><br><span class=\"line\">    for (int i = 0; i &lt; num; i++) &#123;</span><br><span class=\"line\">        User user = getNewUser(name + (i + 1));</span><br><span class=\"line\">        userDao.insertUser(user);</span><br><span class=\"line\">        if (i == 3) &#123;</span><br><span class=\"line\">            throw new Exception(&quot;发生内部错误了&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>项目代码<a\r\nhref=\"http://file.51lucy.com/SpringBootDemo.zip\">下载</a></p>"},{"title":"Ubuntu上安装NVIDIA显卡驱动和CUDA和cuDNN库","author":"Salamander","date":"2019-09-18T08:00:00.000Z","_content":"\n![upload successful](/images/cuda.png)\n\n最近需要在用[Pytorch](https://pytorch.org/)做深度学习，为了加快训练速度，需要用到GPU运算，故在此记录一下安装过程。  \n我的本机环境：\n* Ubuntu 18.04.3 LTS\n* GeForce RTX 2080s\n\n### 检查BIOS启动项\n* 在开机启动项的Security选项中检查UEFI是否开启，如果开启的话请立马关掉它（重要）  \n* 在开机启动项的Boot选项中检查Secure Boot是否开启，如果开启的话请立马关掉它（重要），对于有的BIOS，只要删除**Secure Boot Key**就好了。\n\n<!-- more -->\n\n### 禁用 nouveau\n运行命令\n```\n sudo gedit /etc/modprobe.d/blacklist.conf\n```\n将下列代码增加到blacklist.conf文件的末尾：\n```\nblacklist vga16fb\n\nblacklist nouveau\n\nblacklist rivafb\n\nblacklist rivatv\n\nblacklist nvidiafb\n```\n保存，然后在命令行中更新initramfs，运行：\n```\n sudo update-initramfs -u\n```\n之后，重启主机\n```\nreboot\n```\n在终端运行，运行以下命令，查看是否禁用nouveau成功（无输出则表示禁用成功）：\n```\nlsmod | grep nouveau\n```\n\n\n### 安装显卡驱动\n在NVIDIA官方选择对应驱动，然后[下载](https://www.geforce.com/drivers)：\n\n![图片](https://s2.ax1x.com/2019/09/18/n7DK2Q.png)\n\n在安装驱动之前，应该卸载原有的NVIDIA驱动程序\n```\nsudo apt-get remove --purge nvidia*\n```\n把下载的驱动放到用户目录下，我这里下载文件为`NVIDIA-Linux-x86_64-430.50.run`  \n为了安装新的NVIDIA驱动程序，我们需要停止当前的显示服务器。最简单的方法是使用telinit命令更改为运行级别3。执行以下linux命令后，显示服务器将停止，因此请确保在继续之前保存所有当前工作（如果有）：\n```\nsudo telinit 3\n```\n之后会进入一个新的命令行会话，使用当前的用户名密码登录，然后授予驱动文件可执行权限\n```\nchmod a+x NVIDIA-Linux-x86_64-430.50.run\n```\n然后执行安装：\n```\nsudo ./NVIDIA-Linux-x86_64-430.50.run --no-opengl-files\n```\n注意，**--no-opengl-files**参数必须加否则会循环登录，也就是loop login  \n参数介绍：\n* --no-opengl-files 只安装驱动文件，不安装OpenGL文件。这个参数最重要\n* --no-x-check 安装驱动时不检查X服务\n* --no-nouveau-check 安装驱动时不检查nouveau\n\n后面两个参数可不加。  \n\n\n安装驱动中注意，**pre-install script failed**这个提示没什么关系，之后的warning提示**unable to find a suitable destination to install 32-bit compatibility libraries**也没关系，都选ok，在询问是否修改x-configuration，请选择默认的**no**，选择yes会导致重启后无法进入系统。\n\n\n### 使用nvidia-smi命令测试\n英伟达系统管理接口（NVIDIA System Management Interface, 简称 nvidia-smi）是基于NVIDIA Management Library (NVML) 的命令行管理组件,旨在(intened to )帮助管理和监控NVIDIA GPU设备。\n\n驱动安装完成后，启动电脑，之后就能用nvidia-smi命令判断驱动是否安装成功\n```\nnvidia-smi\n```\n执行这条命令将会打印出当前系统安装的NVIDIA驱动信息，如下：\n\n![image](https://s2.ax1x.com/2019/09/18/n7y6I0.png)\n\n若出现上图中的结果则说明英伟达驱动安装成功。\n\n\n\n### 安装CUDA10.1\nCUDA是什么？  \n>> CUDA，Compute Unified Device Architecture的简称，是由NVIDIA公司创立的基于他们公司生产的图形处理器GPUs（Graphics Processing Units,可以通俗的理解为显卡）的一个并行计算平台和编程模型。\n        通过CUDA，GPUs可以很方便地被用来进行通用计算（有点像在CPU中进行的数值计算等等）。在没有CUDA之前，GPUs一般只用来进行图形渲染（如通过OpenGL，DirectX）。\n        \n   \n\n下载[地址](https://developer.nvidia.com/cuda-downloads)，选择对应版本的cuda安装包，我这里选择的是`runfile`类型的，不要选择使用`deb`版本，**安装CUDA时一定使用runfile文件，这样可以进行选择不再安装驱动**。\n\n![img](https://s2.ax1x.com/2019/09/18/n76jhV.png)\n\n在安装界面，**注意选择不安装显卡驱动**（按enter键取消选择）\n\n![img](https://s2.ax1x.com/2019/09/18/n7gC28.png)\n\n。之后，打开/usr/local文件夹，我们会发现多了cuda和cuda10.1这两个文件夹，如下所示：\n\n![img](https://s2.ax1x.com/2019/09/18/n7goZj.png)\n\n\n### 添加环境变量\n运行`sudo vim /etc/profile`，末尾加上：\n```\nexport CUDA_HOME=/usr/local/cuda \nexport PATH=$PATH:$CUDA_HOME/bin \nexport LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n之后运行`source /etc/profile`使变量起效。\n\n### 判断CUDA安装成功\n运行一下代码\n```\ncd /usr/local/cuda/samples/1_Utilities/deviceQuery \nsudo make\n./deviceQuery\n```\n如果输出如下类似信息，说明CUDA安装成功：\n\n![img](https://s2.ax1x.com/2019/09/18/n72x9P.png)\n\n在CUDA安装之后，我们其实已经可以用PyTorch判断是否支持GPU了，进入python控制台：\n```\nimport torch\nprint(torch.cuda.is_available())\n```\n\n### CUDA与cuDNN的关系\ncuDNN是GPU加速计算深层神经网络的库。把CUDA看作是一个工作台，上面配有很多工具，如锤子、螺丝刀等。cuDNN是基于CUDA的深度学习GPU加速库，有了它才能在GPU上完成深度学习的计算。它就相当于工作的工具，比如它就是个扳手。但是CUDA这个工作台买来的时候，并没有送扳手。想要在CUDA上运行深度神经网络，就要安装cuDNN，就像你想要拧个螺帽就要把扳手买回来。这样才能使GPU进行深度神经网络的工作，工作速度相较CPU快很多。\n\n\n\n### 安装cuDNN\n[官方安装cuDNN指南](https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#install-linux)  \n从官方安装指南可以看出，只要把**cuDNN文件复制到CUDA的对应文件夹**里就可以，即是所谓插入式设计，把cuDNN数据库添加CUDA里，cuDNN是CUDA的扩展计算库，不会对CUDA造成其他影响。\n![官方安装cuDNN指南](https://s2.ax1x.com/2019/09/20/njMwDK.png)\n\n首先去[官网](https://developer.nvidia.com/rdp/cudnn-archive)下载cuDNN，需要注册一个账号才能下载。注意要选择对应版本的**cuDNN Library for Linux**（与CUDA 10.1对应）： \n\n![img](https://s2.ax1x.com/2019/09/18/n7W98x.png)\n下载后进行解压：\n```\ntar -zxvf cudnn-10.1-linux-x64-v7.6.2.24.tgz\n```\n进入cudnn 10.1解压之后的include目录，在命令行进行如下操作：\n```\ncd cuda/include\nsudo cp cudnn.h /usr/local/cuda/include  #复制头文件\n```\n再将进入lib64目录下的动态文件进行复制和链接：\n```\ncd ..\ncd lib64\nsudo cp libcudnn* /usr/local/cuda/lib64/    #复制动态链接库\ncd /usr/local/cuda/lib64/\nsudo chmod +r libcudnn.so.7.6.2\nsudo ln -sf libcudnn.so.7.6.2 libcudnn.so.7\nsudo ln -sf libcudnn.so.7 libcudnn.so\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\nsudo ldconfig\n```\n\n\n参考文章：\n* https://blog.csdn.net/oTengYue/article/details/79506758\n* https://shomy.top/2016/12/29/gpu-tensorflow-install\n* [简书——CUDA与cuDNN](https://www.jianshu.com/p/622f47f94784)","source":"_posts/Ubuntu_CUDA_cuDNN.md","raw":"title: Ubuntu上安装NVIDIA显卡驱动和CUDA和cuDNN库\nauthor: Salamander\ntags:\n  - NVI\n  - CUDA\n  - cuDNN\ncategories:\n  - 机器学习\ndate: 2019-09-18 16:00:00\n---\n\n![upload successful](/images/cuda.png)\n\n最近需要在用[Pytorch](https://pytorch.org/)做深度学习，为了加快训练速度，需要用到GPU运算，故在此记录一下安装过程。  \n我的本机环境：\n* Ubuntu 18.04.3 LTS\n* GeForce RTX 2080s\n\n### 检查BIOS启动项\n* 在开机启动项的Security选项中检查UEFI是否开启，如果开启的话请立马关掉它（重要）  \n* 在开机启动项的Boot选项中检查Secure Boot是否开启，如果开启的话请立马关掉它（重要），对于有的BIOS，只要删除**Secure Boot Key**就好了。\n\n<!-- more -->\n\n### 禁用 nouveau\n运行命令\n```\n sudo gedit /etc/modprobe.d/blacklist.conf\n```\n将下列代码增加到blacklist.conf文件的末尾：\n```\nblacklist vga16fb\n\nblacklist nouveau\n\nblacklist rivafb\n\nblacklist rivatv\n\nblacklist nvidiafb\n```\n保存，然后在命令行中更新initramfs，运行：\n```\n sudo update-initramfs -u\n```\n之后，重启主机\n```\nreboot\n```\n在终端运行，运行以下命令，查看是否禁用nouveau成功（无输出则表示禁用成功）：\n```\nlsmod | grep nouveau\n```\n\n\n### 安装显卡驱动\n在NVIDIA官方选择对应驱动，然后[下载](https://www.geforce.com/drivers)：\n\n![图片](https://s2.ax1x.com/2019/09/18/n7DK2Q.png)\n\n在安装驱动之前，应该卸载原有的NVIDIA驱动程序\n```\nsudo apt-get remove --purge nvidia*\n```\n把下载的驱动放到用户目录下，我这里下载文件为`NVIDIA-Linux-x86_64-430.50.run`  \n为了安装新的NVIDIA驱动程序，我们需要停止当前的显示服务器。最简单的方法是使用telinit命令更改为运行级别3。执行以下linux命令后，显示服务器将停止，因此请确保在继续之前保存所有当前工作（如果有）：\n```\nsudo telinit 3\n```\n之后会进入一个新的命令行会话，使用当前的用户名密码登录，然后授予驱动文件可执行权限\n```\nchmod a+x NVIDIA-Linux-x86_64-430.50.run\n```\n然后执行安装：\n```\nsudo ./NVIDIA-Linux-x86_64-430.50.run --no-opengl-files\n```\n注意，**--no-opengl-files**参数必须加否则会循环登录，也就是loop login  \n参数介绍：\n* --no-opengl-files 只安装驱动文件，不安装OpenGL文件。这个参数最重要\n* --no-x-check 安装驱动时不检查X服务\n* --no-nouveau-check 安装驱动时不检查nouveau\n\n后面两个参数可不加。  \n\n\n安装驱动中注意，**pre-install script failed**这个提示没什么关系，之后的warning提示**unable to find a suitable destination to install 32-bit compatibility libraries**也没关系，都选ok，在询问是否修改x-configuration，请选择默认的**no**，选择yes会导致重启后无法进入系统。\n\n\n### 使用nvidia-smi命令测试\n英伟达系统管理接口（NVIDIA System Management Interface, 简称 nvidia-smi）是基于NVIDIA Management Library (NVML) 的命令行管理组件,旨在(intened to )帮助管理和监控NVIDIA GPU设备。\n\n驱动安装完成后，启动电脑，之后就能用nvidia-smi命令判断驱动是否安装成功\n```\nnvidia-smi\n```\n执行这条命令将会打印出当前系统安装的NVIDIA驱动信息，如下：\n\n![image](https://s2.ax1x.com/2019/09/18/n7y6I0.png)\n\n若出现上图中的结果则说明英伟达驱动安装成功。\n\n\n\n### 安装CUDA10.1\nCUDA是什么？  \n>> CUDA，Compute Unified Device Architecture的简称，是由NVIDIA公司创立的基于他们公司生产的图形处理器GPUs（Graphics Processing Units,可以通俗的理解为显卡）的一个并行计算平台和编程模型。\n        通过CUDA，GPUs可以很方便地被用来进行通用计算（有点像在CPU中进行的数值计算等等）。在没有CUDA之前，GPUs一般只用来进行图形渲染（如通过OpenGL，DirectX）。\n        \n   \n\n下载[地址](https://developer.nvidia.com/cuda-downloads)，选择对应版本的cuda安装包，我这里选择的是`runfile`类型的，不要选择使用`deb`版本，**安装CUDA时一定使用runfile文件，这样可以进行选择不再安装驱动**。\n\n![img](https://s2.ax1x.com/2019/09/18/n76jhV.png)\n\n在安装界面，**注意选择不安装显卡驱动**（按enter键取消选择）\n\n![img](https://s2.ax1x.com/2019/09/18/n7gC28.png)\n\n。之后，打开/usr/local文件夹，我们会发现多了cuda和cuda10.1这两个文件夹，如下所示：\n\n![img](https://s2.ax1x.com/2019/09/18/n7goZj.png)\n\n\n### 添加环境变量\n运行`sudo vim /etc/profile`，末尾加上：\n```\nexport CUDA_HOME=/usr/local/cuda \nexport PATH=$PATH:$CUDA_HOME/bin \nexport LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n之后运行`source /etc/profile`使变量起效。\n\n### 判断CUDA安装成功\n运行一下代码\n```\ncd /usr/local/cuda/samples/1_Utilities/deviceQuery \nsudo make\n./deviceQuery\n```\n如果输出如下类似信息，说明CUDA安装成功：\n\n![img](https://s2.ax1x.com/2019/09/18/n72x9P.png)\n\n在CUDA安装之后，我们其实已经可以用PyTorch判断是否支持GPU了，进入python控制台：\n```\nimport torch\nprint(torch.cuda.is_available())\n```\n\n### CUDA与cuDNN的关系\ncuDNN是GPU加速计算深层神经网络的库。把CUDA看作是一个工作台，上面配有很多工具，如锤子、螺丝刀等。cuDNN是基于CUDA的深度学习GPU加速库，有了它才能在GPU上完成深度学习的计算。它就相当于工作的工具，比如它就是个扳手。但是CUDA这个工作台买来的时候，并没有送扳手。想要在CUDA上运行深度神经网络，就要安装cuDNN，就像你想要拧个螺帽就要把扳手买回来。这样才能使GPU进行深度神经网络的工作，工作速度相较CPU快很多。\n\n\n\n### 安装cuDNN\n[官方安装cuDNN指南](https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#install-linux)  \n从官方安装指南可以看出，只要把**cuDNN文件复制到CUDA的对应文件夹**里就可以，即是所谓插入式设计，把cuDNN数据库添加CUDA里，cuDNN是CUDA的扩展计算库，不会对CUDA造成其他影响。\n![官方安装cuDNN指南](https://s2.ax1x.com/2019/09/20/njMwDK.png)\n\n首先去[官网](https://developer.nvidia.com/rdp/cudnn-archive)下载cuDNN，需要注册一个账号才能下载。注意要选择对应版本的**cuDNN Library for Linux**（与CUDA 10.1对应）： \n\n![img](https://s2.ax1x.com/2019/09/18/n7W98x.png)\n下载后进行解压：\n```\ntar -zxvf cudnn-10.1-linux-x64-v7.6.2.24.tgz\n```\n进入cudnn 10.1解压之后的include目录，在命令行进行如下操作：\n```\ncd cuda/include\nsudo cp cudnn.h /usr/local/cuda/include  #复制头文件\n```\n再将进入lib64目录下的动态文件进行复制和链接：\n```\ncd ..\ncd lib64\nsudo cp libcudnn* /usr/local/cuda/lib64/    #复制动态链接库\ncd /usr/local/cuda/lib64/\nsudo chmod +r libcudnn.so.7.6.2\nsudo ln -sf libcudnn.so.7.6.2 libcudnn.so.7\nsudo ln -sf libcudnn.so.7 libcudnn.so\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*\nsudo ldconfig\n```\n\n\n参考文章：\n* https://blog.csdn.net/oTengYue/article/details/79506758\n* https://shomy.top/2016/12/29/gpu-tensorflow-install\n* [简书——CUDA与cuDNN](https://www.jianshu.com/p/622f47f94784)","slug":"Ubuntu_CUDA_cuDNN","published":1,"updated":"2023-03-21T02:48:19.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l7001n2o3m0h6cctl7","content":"<figure>\r\n<img src=\"/images/cuda.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>最近需要在用<a\r\nhref=\"https://pytorch.org/\">Pytorch</a>做深度学习，为了加快训练速度，需要用到GPU运算，故在此记录一下安装过程。<br />\r\n我的本机环境： * Ubuntu 18.04.3 LTS * GeForce RTX 2080s</p>\r\n<h3 id=\"检查bios启动项\">检查BIOS启动项</h3>\r\n<ul>\r\n<li>在开机启动项的Security选项中检查UEFI是否开启，如果开启的话请立马关掉它（重要）<br />\r\n</li>\r\n<li>在开机启动项的Boot选项中检查Secure\r\nBoot是否开启，如果开启的话请立马关掉它（重要），对于有的BIOS，只要删除<strong>Secure\r\nBoot Key</strong>就好了。</li>\r\n</ul>\r\n<span id=\"more\"></span>\r\n<h3 id=\"禁用-nouveau\">禁用 nouveau</h3>\r\n<p>运行命令 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure> 将下列代码增加到blacklist.conf文件的末尾：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist vga16fb</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist nouveau</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist rivafb</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist rivatv</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist nvidiafb</span><br></pre></td></tr></table></figure> 保存，然后在命令行中更新initramfs，运行： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\r\n之后，重启主机 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\r\n在终端运行，运行以下命令，查看是否禁用nouveau成功（无输出则表示禁用成功）：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nouveau</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"安装显卡驱动\">安装显卡驱动</h3>\r\n<p>在NVIDIA官方选择对应驱动，然后<a\r\nhref=\"https://www.geforce.com/drivers\">下载</a>：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n7DK2Q.png\" alt=\"图片\" />\r\n<figcaption aria-hidden=\"true\">图片</figcaption>\r\n</figure>\r\n<p>在安装驱动之前，应该卸载原有的NVIDIA驱动程序 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove --purge nvidia*</span><br></pre></td></tr></table></figure>\r\n把下载的驱动放到用户目录下，我这里下载文件为<code>NVIDIA-Linux-x86_64-430.50.run</code><br />\r\n为了安装新的NVIDIA驱动程序，我们需要停止当前的显示服务器。最简单的方法是使用telinit命令更改为运行级别3。执行以下linux命令后，显示服务器将停止，因此请确保在继续之前保存所有当前工作（如果有）：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo telinit 3</span><br></pre></td></tr></table></figure>\r\n之后会进入一个新的命令行会话，使用当前的用户名密码登录，然后授予驱动文件可执行权限\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x NVIDIA-Linux-x86_64-430.50.run</span><br></pre></td></tr></table></figure> 然后执行安装： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./NVIDIA-Linux-x86_64-430.50.run --no-opengl-files</span><br></pre></td></tr></table></figure>\r\n注意，<strong>--no-opengl-files</strong>参数必须加否则会循环登录，也就是loop\r\nlogin<br />\r\n参数介绍： * --no-opengl-files\r\n只安装驱动文件，不安装OpenGL文件。这个参数最重要 * --no-x-check\r\n安装驱动时不检查X服务 * --no-nouveau-check 安装驱动时不检查nouveau</p>\r\n<p>后面两个参数可不加。</p>\r\n<p>安装驱动中注意，<strong>pre-install script\r\nfailed</strong>这个提示没什么关系，之后的warning提示<strong>unable to\r\nfind a suitable destination to install 32-bit compatibility\r\nlibraries</strong>也没关系，都选ok，在询问是否修改x-configuration，请选择默认的<strong>no</strong>，选择yes会导致重启后无法进入系统。</p>\r\n<h3 id=\"使用nvidia-smi命令测试\">使用nvidia-smi命令测试</h3>\r\n<p>英伟达系统管理接口（NVIDIA System Management Interface, 简称\r\nnvidia-smi）是基于NVIDIA Management Library (NVML)\r\n的命令行管理组件,旨在(intened to )帮助管理和监控NVIDIA GPU设备。</p>\r\n<p>驱动安装完成后，启动电脑，之后就能用nvidia-smi命令判断驱动是否安装成功\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\r\n执行这条命令将会打印出当前系统安装的NVIDIA驱动信息，如下：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n7y6I0.png\" alt=\"image\" />\r\n<figcaption aria-hidden=\"true\">image</figcaption>\r\n</figure>\r\n<p>若出现上图中的结果则说明英伟达驱动安装成功。</p>\r\n<h3 id=\"安装cuda10.1\">安装CUDA10.1</h3>\r\n<p>CUDA是什么？<br />\r\n&gt;&gt; CUDA，Compute Unified Device\r\nArchitecture的简称，是由NVIDIA公司创立的基于他们公司生产的图形处理器GPUs（Graphics\r\nProcessing Units,可以通俗的理解为显卡）的一个并行计算平台和编程模型。\r\n通过CUDA，GPUs可以很方便地被用来进行通用计算（有点像在CPU中进行的数值计算等等）。在没有CUDA之前，GPUs一般只用来进行图形渲染（如通过OpenGL，DirectX）。</p>\r\n<p>下载<a\r\nhref=\"https://developer.nvidia.com/cuda-downloads\">地址</a>，选择对应版本的cuda安装包，我这里选择的是<code>runfile</code>类型的，不要选择使用<code>deb</code>版本，<strong>安装CUDA时一定使用runfile文件，这样可以进行选择不再安装驱动</strong>。</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n76jhV.png\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>在安装界面，<strong>注意选择不安装显卡驱动</strong>（按enter键取消选择）</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n7gC28.png\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>。之后，打开/usr/local文件夹，我们会发现多了cuda和cuda10.1这两个文件夹，如下所示：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n7goZj.png\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<h3 id=\"添加环境变量\">添加环境变量</h3>\r\n<p>运行<code>sudo vim /etc/profile</code>，末尾加上： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CUDA_HOME=/usr/local/cuda </span><br><span class=\"line\">export PATH=$PATH:$CUDA_HOME/bin </span><br><span class=\"line\">export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br></pre></td></tr></table></figure>\r\n之后运行<code>source /etc/profile</code>使变量起效。</p>\r\n<h3 id=\"判断cuda安装成功\">判断CUDA安装成功</h3>\r\n<p>运行一下代码 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/cuda/samples/1_Utilities/deviceQuery </span><br><span class=\"line\">sudo make</span><br><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\r\n如果输出如下类似信息，说明CUDA安装成功：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n72x9P.png\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>在CUDA安装之后，我们其实已经可以用PyTorch判断是否支持GPU了，进入python控制台：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import torch</span><br><span class=\"line\">print(torch.cuda.is_available())</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"cuda与cudnn的关系\">CUDA与cuDNN的关系</h3>\r\n<p>cuDNN是GPU加速计算深层神经网络的库。把CUDA看作是一个工作台，上面配有很多工具，如锤子、螺丝刀等。cuDNN是基于CUDA的深度学习GPU加速库，有了它才能在GPU上完成深度学习的计算。它就相当于工作的工具，比如它就是个扳手。但是CUDA这个工作台买来的时候，并没有送扳手。想要在CUDA上运行深度神经网络，就要安装cuDNN，就像你想要拧个螺帽就要把扳手买回来。这样才能使GPU进行深度神经网络的工作，工作速度相较CPU快很多。</p>\r\n<h3 id=\"安装cudnn\">安装cuDNN</h3>\r\n<p><a\r\nhref=\"https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#install-linux\">官方安装cuDNN指南</a><br />\r\n从官方安装指南可以看出，只要把<strong>cuDNN文件复制到CUDA的对应文件夹</strong>里就可以，即是所谓插入式设计，把cuDNN数据库添加CUDA里，cuDNN是CUDA的扩展计算库，不会对CUDA造成其他影响。\r\n<img src=\"https://s2.ax1x.com/2019/09/20/njMwDK.png\"\r\nalt=\"官方安装cuDNN指南\" /></p>\r\n<p>首先去<a\r\nhref=\"https://developer.nvidia.com/rdp/cudnn-archive\">官网</a>下载cuDNN，需要注册一个账号才能下载。注意要选择对应版本的<strong>cuDNN\r\nLibrary for Linux</strong>（与CUDA 10.1对应）：</p>\r\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7W98x.png\" alt=\"img\" />\r\n下载后进行解压： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf cudnn-10.1-linux-x64-v7.6.2.24.tgz</span><br></pre></td></tr></table></figure> 进入cudnn\r\n10.1解压之后的include目录，在命令行进行如下操作： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd cuda/include</span><br><span class=\"line\">sudo cp cudnn.h /usr/local/cuda/include  #复制头文件</span><br></pre></td></tr></table></figure>\r\n再将进入lib64目录下的动态文件进行复制和链接： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">cd lib64</span><br><span class=\"line\">sudo cp libcudnn* /usr/local/cuda/lib64/    #复制动态链接库</span><br><span class=\"line\">cd /usr/local/cuda/lib64/</span><br><span class=\"line\">sudo chmod +r libcudnn.so.7.6.2</span><br><span class=\"line\">sudo ln -sf libcudnn.so.7.6.2 libcudnn.so.7</span><br><span class=\"line\">sudo ln -sf libcudnn.so.7 libcudnn.so</span><br><span class=\"line\">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span><br><span class=\"line\">sudo ldconfig</span><br></pre></td></tr></table></figure></p>\r\n<p>参考文章： * https://blog.csdn.net/oTengYue/article/details/79506758\r\n* https://shomy.top/2016/12/29/gpu-tensorflow-install * <a\r\nhref=\"https://www.jianshu.com/p/622f47f94784\">简书——CUDA与cuDNN</a></p>\r\n","site":{"data":{}},"excerpt":"<figure>\r\n<img src=\"/images/cuda.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>最近需要在用<a\r\nhref=\"https://pytorch.org/\">Pytorch</a>做深度学习，为了加快训练速度，需要用到GPU运算，故在此记录一下安装过程。<br />\r\n我的本机环境： * Ubuntu 18.04.3 LTS * GeForce RTX 2080s</p>\r\n<h3 id=\"检查bios启动项\">检查BIOS启动项</h3>\r\n<ul>\r\n<li>在开机启动项的Security选项中检查UEFI是否开启，如果开启的话请立马关掉它（重要）<br />\r\n</li>\r\n<li>在开机启动项的Boot选项中检查Secure\r\nBoot是否开启，如果开启的话请立马关掉它（重要），对于有的BIOS，只要删除<strong>Secure\r\nBoot Key</strong>就好了。</li>\r\n</ul>","more":"<h3 id=\"禁用-nouveau\">禁用 nouveau</h3>\r\n<p>运行命令 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure> 将下列代码增加到blacklist.conf文件的末尾：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist vga16fb</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist nouveau</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist rivafb</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist rivatv</span><br><span class=\"line\"></span><br><span class=\"line\">blacklist nvidiafb</span><br></pre></td></tr></table></figure> 保存，然后在命令行中更新initramfs，运行： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>\r\n之后，重启主机 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\r\n在终端运行，运行以下命令，查看是否禁用nouveau成功（无输出则表示禁用成功）：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep nouveau</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"安装显卡驱动\">安装显卡驱动</h3>\r\n<p>在NVIDIA官方选择对应驱动，然后<a\r\nhref=\"https://www.geforce.com/drivers\">下载</a>：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n7DK2Q.png\" alt=\"图片\" />\r\n<figcaption aria-hidden=\"true\">图片</figcaption>\r\n</figure>\r\n<p>在安装驱动之前，应该卸载原有的NVIDIA驱动程序 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove --purge nvidia*</span><br></pre></td></tr></table></figure>\r\n把下载的驱动放到用户目录下，我这里下载文件为<code>NVIDIA-Linux-x86_64-430.50.run</code><br />\r\n为了安装新的NVIDIA驱动程序，我们需要停止当前的显示服务器。最简单的方法是使用telinit命令更改为运行级别3。执行以下linux命令后，显示服务器将停止，因此请确保在继续之前保存所有当前工作（如果有）：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo telinit 3</span><br></pre></td></tr></table></figure>\r\n之后会进入一个新的命令行会话，使用当前的用户名密码登录，然后授予驱动文件可执行权限\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x NVIDIA-Linux-x86_64-430.50.run</span><br></pre></td></tr></table></figure> 然后执行安装： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./NVIDIA-Linux-x86_64-430.50.run --no-opengl-files</span><br></pre></td></tr></table></figure>\r\n注意，<strong>--no-opengl-files</strong>参数必须加否则会循环登录，也就是loop\r\nlogin<br />\r\n参数介绍： * --no-opengl-files\r\n只安装驱动文件，不安装OpenGL文件。这个参数最重要 * --no-x-check\r\n安装驱动时不检查X服务 * --no-nouveau-check 安装驱动时不检查nouveau</p>\r\n<p>后面两个参数可不加。</p>\r\n<p>安装驱动中注意，<strong>pre-install script\r\nfailed</strong>这个提示没什么关系，之后的warning提示<strong>unable to\r\nfind a suitable destination to install 32-bit compatibility\r\nlibraries</strong>也没关系，都选ok，在询问是否修改x-configuration，请选择默认的<strong>no</strong>，选择yes会导致重启后无法进入系统。</p>\r\n<h3 id=\"使用nvidia-smi命令测试\">使用nvidia-smi命令测试</h3>\r\n<p>英伟达系统管理接口（NVIDIA System Management Interface, 简称\r\nnvidia-smi）是基于NVIDIA Management Library (NVML)\r\n的命令行管理组件,旨在(intened to )帮助管理和监控NVIDIA GPU设备。</p>\r\n<p>驱动安装完成后，启动电脑，之后就能用nvidia-smi命令判断驱动是否安装成功\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\r\n执行这条命令将会打印出当前系统安装的NVIDIA驱动信息，如下：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n7y6I0.png\" alt=\"image\" />\r\n<figcaption aria-hidden=\"true\">image</figcaption>\r\n</figure>\r\n<p>若出现上图中的结果则说明英伟达驱动安装成功。</p>\r\n<h3 id=\"安装cuda10.1\">安装CUDA10.1</h3>\r\n<p>CUDA是什么？<br />\r\n&gt;&gt; CUDA，Compute Unified Device\r\nArchitecture的简称，是由NVIDIA公司创立的基于他们公司生产的图形处理器GPUs（Graphics\r\nProcessing Units,可以通俗的理解为显卡）的一个并行计算平台和编程模型。\r\n通过CUDA，GPUs可以很方便地被用来进行通用计算（有点像在CPU中进行的数值计算等等）。在没有CUDA之前，GPUs一般只用来进行图形渲染（如通过OpenGL，DirectX）。</p>\r\n<p>下载<a\r\nhref=\"https://developer.nvidia.com/cuda-downloads\">地址</a>，选择对应版本的cuda安装包，我这里选择的是<code>runfile</code>类型的，不要选择使用<code>deb</code>版本，<strong>安装CUDA时一定使用runfile文件，这样可以进行选择不再安装驱动</strong>。</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n76jhV.png\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>在安装界面，<strong>注意选择不安装显卡驱动</strong>（按enter键取消选择）</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n7gC28.png\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>。之后，打开/usr/local文件夹，我们会发现多了cuda和cuda10.1这两个文件夹，如下所示：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n7goZj.png\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<h3 id=\"添加环境变量\">添加环境变量</h3>\r\n<p>运行<code>sudo vim /etc/profile</code>，末尾加上： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CUDA_HOME=/usr/local/cuda </span><br><span class=\"line\">export PATH=$PATH:$CUDA_HOME/bin </span><br><span class=\"line\">export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br></pre></td></tr></table></figure>\r\n之后运行<code>source /etc/profile</code>使变量起效。</p>\r\n<h3 id=\"判断cuda安装成功\">判断CUDA安装成功</h3>\r\n<p>运行一下代码 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/cuda/samples/1_Utilities/deviceQuery </span><br><span class=\"line\">sudo make</span><br><span class=\"line\">./deviceQuery</span><br></pre></td></tr></table></figure>\r\n如果输出如下类似信息，说明CUDA安装成功：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/18/n72x9P.png\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>在CUDA安装之后，我们其实已经可以用PyTorch判断是否支持GPU了，进入python控制台：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import torch</span><br><span class=\"line\">print(torch.cuda.is_available())</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"cuda与cudnn的关系\">CUDA与cuDNN的关系</h3>\r\n<p>cuDNN是GPU加速计算深层神经网络的库。把CUDA看作是一个工作台，上面配有很多工具，如锤子、螺丝刀等。cuDNN是基于CUDA的深度学习GPU加速库，有了它才能在GPU上完成深度学习的计算。它就相当于工作的工具，比如它就是个扳手。但是CUDA这个工作台买来的时候，并没有送扳手。想要在CUDA上运行深度神经网络，就要安装cuDNN，就像你想要拧个螺帽就要把扳手买回来。这样才能使GPU进行深度神经网络的工作，工作速度相较CPU快很多。</p>\r\n<h3 id=\"安装cudnn\">安装cuDNN</h3>\r\n<p><a\r\nhref=\"https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#install-linux\">官方安装cuDNN指南</a><br />\r\n从官方安装指南可以看出，只要把<strong>cuDNN文件复制到CUDA的对应文件夹</strong>里就可以，即是所谓插入式设计，把cuDNN数据库添加CUDA里，cuDNN是CUDA的扩展计算库，不会对CUDA造成其他影响。\r\n<img src=\"https://s2.ax1x.com/2019/09/20/njMwDK.png\"\r\nalt=\"官方安装cuDNN指南\" /></p>\r\n<p>首先去<a\r\nhref=\"https://developer.nvidia.com/rdp/cudnn-archive\">官网</a>下载cuDNN，需要注册一个账号才能下载。注意要选择对应版本的<strong>cuDNN\r\nLibrary for Linux</strong>（与CUDA 10.1对应）：</p>\r\n<p><img src=\"https://s2.ax1x.com/2019/09/18/n7W98x.png\" alt=\"img\" />\r\n下载后进行解压： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf cudnn-10.1-linux-x64-v7.6.2.24.tgz</span><br></pre></td></tr></table></figure> 进入cudnn\r\n10.1解压之后的include目录，在命令行进行如下操作： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd cuda/include</span><br><span class=\"line\">sudo cp cudnn.h /usr/local/cuda/include  #复制头文件</span><br></pre></td></tr></table></figure>\r\n再将进入lib64目录下的动态文件进行复制和链接： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">cd lib64</span><br><span class=\"line\">sudo cp libcudnn* /usr/local/cuda/lib64/    #复制动态链接库</span><br><span class=\"line\">cd /usr/local/cuda/lib64/</span><br><span class=\"line\">sudo chmod +r libcudnn.so.7.6.2</span><br><span class=\"line\">sudo ln -sf libcudnn.so.7.6.2 libcudnn.so.7</span><br><span class=\"line\">sudo ln -sf libcudnn.so.7 libcudnn.so</span><br><span class=\"line\">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span><br><span class=\"line\">sudo ldconfig</span><br></pre></td></tr></table></figure></p>\r\n<p>参考文章： * https://blog.csdn.net/oTengYue/article/details/79506758\r\n* https://shomy.top/2016/12/29/gpu-tensorflow-install * <a\r\nhref=\"https://www.jianshu.com/p/622f47f94784\">简书——CUDA与cuDNN</a></p>"},{"title":"Typescript学习","author":"Salamander","date":"2021-06-05T08:00:00.000Z","_content":"## 安装\n安装TypeScript还是很简单的：\n```\nnpm install -g typescript\n```\n写个hello.ts\n```\nfunction sayHello(person: string) {\n    return 'Hello, ' + person;\n}\n\nlet user = 'Tom';\nconsole.log(sayHello(user));\n```\n\n<!-- more -->\n\n然后执行\n```\ntsc hello.ts\n```\n这时候会生成一个编译好的文件 `hello.js`：\n```\nfunction sayHello(person) {\n    return 'Hello, ' + person;\n}\nvar user = 'Tom';\nconsole.log(sayHello(user));\n```\n可以看到，编译好后的就是平常的js代码，TS的一个优点在于类型的声明，这样在编译期bug就能及早发现（当然还有其他好处，例如**泛型**，**Enum**，**装饰器**）。  \n注意： **TypeScript** 只会在编译时对类型进行静态检查，如果发现有错误，编译的时候就会报错。而在运行时，与普通的 JavaScript 文件一样，不会对类型进行检查。\n\n## 复杂点\n构建一个TypeScript的项目就需要`tsconfig.json`文件了。如果一个目录下存在一个`tsconfig.json`文件，那么它意味着这个目录是TypeScript项目的根目录。  \n\n创建一个简单的项目，目录结构如下：\n```\nMyProj\n├── src\n│   ├── index.ts\n│   ├── person.ts\n│   ├── animal.js\n├── package.json\n├── tsconfig.json\n├── .eslintrc.js  \n```\ntsconfig.json文件  \n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2018\", // 指定ECMAScript目标版本\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"experimentalDecorators\": true, // 开启装饰器\n    \"strict\": true, // 启用所有严格类型检查选项\n    \"noImplicitAny\": false,\n    \"removeComments\": true, // 移除注释\n    \"sourceMap\": false,\n    \"rootDir\": \"src\", // Default: The longest common path of all non-declaration input files.\n    \"outDir\": \"dist\", // 编译输出目录\n    \"allowJs\": true // 允许JS文件混合\n  },\n  \"include\": [\"src/**/*\"], // 指定要编译文件\n  \"exclude\": [\"node_modules\"] // 指定要排除的编译文件\n}\n```\n**person.ts**\n```\nexport class Person {\n  private name: string;\n\n  private age: number;\n\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nexport interface Payload {\n  title: string;\n  description: string;\n}\n\n```\n**index.ts**\n```\nimport { Person, Payload } from './person';\nimport { Animal } from './animal';\n\nconst p = new Person('sala', 12);\n\nconst data: Payload = { title: 'One', description: 'happy...' };\n\ntype StringOrNumber = string | number;\n\nfunction getString(n: StringOrNumber): string {\n  if (typeof n === 'string') {\n    return n;\n  } else {\n    return n.toString();\n  }\n}\n\nconst animal = new Animal('Kitty');\n```\n**animal.js**\n```\nexport class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayHi() {\n    return 'hello!';\n  }\n}\n```\n\n**package.json**\n```\n{\n  \"name\": \"ts_learn_project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"@typescript-eslint/eslint-plugin\": \"^4.22.0\",\n    \"@typescript-eslint/parser\": \"^4.22.0\",\n    \"eslint\": \"^7.24.0\",\n    \"typescript\": \"^4.2.4\",\n    \"mwts\": \"^1.0.5\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"eslint\": \"eslint src --ext .ts\",\n    \"build\": \"tsc\"\n  },\n  \"keywords\": [\n    \"typescript\"\n  ],\n  \"author\": \"salamander\",\n  \"license\": \"ISC\"\n}\n\n```\n**.eslintrc.js**  \n```\nmodule.exports = {\n  parser: \"@typescript-eslint/parser\",\n  plugins: [\"@typescript-eslint\"],\n  rules: {\n    // 禁止使用 var\n    \"no-var\": \"error\",\n    // 优先使用 interface 而不是 type\n    \"@typescript-eslint/consistent-type-definitions\": [\"error\", \"interface\"],\n  },\n};\n\n```\n2019 年 1 月，TypeScirpt 官方决定全面采用 ESLint 作为代码检查的工具，并创建了一个新项目 [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/parser)，提供了 TypeScript 文件的解析器 @typescript-eslint/parser 和相关的配置选项 @typescript-eslint/eslint-plugin 等。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考：\n* [TypeScript 中文手册](https://typescript.bootcss.com/tutorials/typescript-in-5-minutes.html)\n* [tsconfig](https://www.typescriptlang.org/tsconfig)","source":"_posts/Typescript_learn.md","raw":"title: Typescript学习\nauthor: Salamander\ntags:\n  - Typescript\ncategories:\n  - Javascript\ndate: 2021-06-05 16:00:00\n---\n## 安装\n安装TypeScript还是很简单的：\n```\nnpm install -g typescript\n```\n写个hello.ts\n```\nfunction sayHello(person: string) {\n    return 'Hello, ' + person;\n}\n\nlet user = 'Tom';\nconsole.log(sayHello(user));\n```\n\n<!-- more -->\n\n然后执行\n```\ntsc hello.ts\n```\n这时候会生成一个编译好的文件 `hello.js`：\n```\nfunction sayHello(person) {\n    return 'Hello, ' + person;\n}\nvar user = 'Tom';\nconsole.log(sayHello(user));\n```\n可以看到，编译好后的就是平常的js代码，TS的一个优点在于类型的声明，这样在编译期bug就能及早发现（当然还有其他好处，例如**泛型**，**Enum**，**装饰器**）。  \n注意： **TypeScript** 只会在编译时对类型进行静态检查，如果发现有错误，编译的时候就会报错。而在运行时，与普通的 JavaScript 文件一样，不会对类型进行检查。\n\n## 复杂点\n构建一个TypeScript的项目就需要`tsconfig.json`文件了。如果一个目录下存在一个`tsconfig.json`文件，那么它意味着这个目录是TypeScript项目的根目录。  \n\n创建一个简单的项目，目录结构如下：\n```\nMyProj\n├── src\n│   ├── index.ts\n│   ├── person.ts\n│   ├── animal.js\n├── package.json\n├── tsconfig.json\n├── .eslintrc.js  \n```\ntsconfig.json文件  \n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2018\", // 指定ECMAScript目标版本\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"experimentalDecorators\": true, // 开启装饰器\n    \"strict\": true, // 启用所有严格类型检查选项\n    \"noImplicitAny\": false,\n    \"removeComments\": true, // 移除注释\n    \"sourceMap\": false,\n    \"rootDir\": \"src\", // Default: The longest common path of all non-declaration input files.\n    \"outDir\": \"dist\", // 编译输出目录\n    \"allowJs\": true // 允许JS文件混合\n  },\n  \"include\": [\"src/**/*\"], // 指定要编译文件\n  \"exclude\": [\"node_modules\"] // 指定要排除的编译文件\n}\n```\n**person.ts**\n```\nexport class Person {\n  private name: string;\n\n  private age: number;\n\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n\n  getName() {\n    return this.name;\n  }\n}\n\nexport interface Payload {\n  title: string;\n  description: string;\n}\n\n```\n**index.ts**\n```\nimport { Person, Payload } from './person';\nimport { Animal } from './animal';\n\nconst p = new Person('sala', 12);\n\nconst data: Payload = { title: 'One', description: 'happy...' };\n\ntype StringOrNumber = string | number;\n\nfunction getString(n: StringOrNumber): string {\n  if (typeof n === 'string') {\n    return n;\n  } else {\n    return n.toString();\n  }\n}\n\nconst animal = new Animal('Kitty');\n```\n**animal.js**\n```\nexport class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sayHi() {\n    return 'hello!';\n  }\n}\n```\n\n**package.json**\n```\n{\n  \"name\": \"ts_learn_project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"@typescript-eslint/eslint-plugin\": \"^4.22.0\",\n    \"@typescript-eslint/parser\": \"^4.22.0\",\n    \"eslint\": \"^7.24.0\",\n    \"typescript\": \"^4.2.4\",\n    \"mwts\": \"^1.0.5\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"eslint\": \"eslint src --ext .ts\",\n    \"build\": \"tsc\"\n  },\n  \"keywords\": [\n    \"typescript\"\n  ],\n  \"author\": \"salamander\",\n  \"license\": \"ISC\"\n}\n\n```\n**.eslintrc.js**  \n```\nmodule.exports = {\n  parser: \"@typescript-eslint/parser\",\n  plugins: [\"@typescript-eslint\"],\n  rules: {\n    // 禁止使用 var\n    \"no-var\": \"error\",\n    // 优先使用 interface 而不是 type\n    \"@typescript-eslint/consistent-type-definitions\": [\"error\", \"interface\"],\n  },\n};\n\n```\n2019 年 1 月，TypeScirpt 官方决定全面采用 ESLint 作为代码检查的工具，并创建了一个新项目 [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/parser)，提供了 TypeScript 文件的解析器 @typescript-eslint/parser 和相关的配置选项 @typescript-eslint/eslint-plugin 等。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n参考：\n* [TypeScript 中文手册](https://typescript.bootcss.com/tutorials/typescript-in-5-minutes.html)\n* [tsconfig](https://www.typescriptlang.org/tsconfig)","slug":"Typescript_learn","published":1,"updated":"2023-03-21T02:48:19.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l8001r2o3m3in7axd3","content":"<h2 id=\"安装\">安装</h2>\r\n<p>安装TypeScript还是很简单的： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br></pre></td></tr></table></figure> 写个hello.ts\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(person: string) &#123;</span><br><span class=\"line\">    return &#x27;Hello, &#x27; + person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let user = &#x27;Tom&#x27;;</span><br><span class=\"line\">console.log(sayHello(user));</span><br></pre></td></tr></table></figure></p>\r\n<span id=\"more\"></span>\r\n<p>然后执行 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc hello.ts</span><br></pre></td></tr></table></figure> 这时候会生成一个编译好的文件\r\n<code>hello.js</code>： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(person) &#123;</span><br><span class=\"line\">    return &#x27;Hello, &#x27; + person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var user = &#x27;Tom&#x27;;</span><br><span class=\"line\">console.log(sayHello(user));</span><br></pre></td></tr></table></figure>\r\n可以看到，编译好后的就是平常的js代码，TS的一个优点在于类型的声明，这样在编译期bug就能及早发现（当然还有其他好处，例如<strong>泛型</strong>，<strong>Enum</strong>，<strong>装饰器</strong>）。<br />\r\n注意： <strong>TypeScript</strong>\r\n只会在编译时对类型进行静态检查，如果发现有错误，编译的时候就会报错。而在运行时，与普通的\r\nJavaScript 文件一样，不会对类型进行检查。</p>\r\n<h2 id=\"复杂点\">复杂点</h2>\r\n<p>构建一个TypeScript的项目就需要<code>tsconfig.json</code>文件了。如果一个目录下存在一个<code>tsconfig.json</code>文件，那么它意味着这个目录是TypeScript项目的根目录。</p>\r\n<p>创建一个简单的项目，目录结构如下： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyProj</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── index.ts</span><br><span class=\"line\">│   ├── person.ts</span><br><span class=\"line\">│   ├── animal.js</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── tsconfig.json</span><br><span class=\"line\">├── .eslintrc.js  </span><br></pre></td></tr></table></figure>\r\ntsconfig.json文件<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;target&quot;: &quot;ES2018&quot;, // 指定ECMAScript目标版本</span><br><span class=\"line\">    &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">    &quot;moduleResolution&quot;: &quot;node&quot;,</span><br><span class=\"line\">    &quot;experimentalDecorators&quot;: true, // 开启装饰器</span><br><span class=\"line\">    &quot;strict&quot;: true, // 启用所有严格类型检查选项</span><br><span class=\"line\">    &quot;noImplicitAny&quot;: false,</span><br><span class=\"line\">    &quot;removeComments&quot;: true, // 移除注释</span><br><span class=\"line\">    &quot;sourceMap&quot;: false,</span><br><span class=\"line\">    &quot;rootDir&quot;: &quot;src&quot;, // Default: The longest common path of all non-declaration input files.</span><br><span class=\"line\">    &quot;outDir&quot;: &quot;dist&quot;, // 编译输出目录</span><br><span class=\"line\">    &quot;allowJs&quot;: true // 允许JS文件混合</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;include&quot;: [&quot;src/**/*&quot;], // 指定要编译文件</span><br><span class=\"line\">  &quot;exclude&quot;: [&quot;node_modules&quot;] // 指定要排除的编译文件</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> <strong>person.ts</strong> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class Person &#123;</span><br><span class=\"line\">  private name: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  private age: number;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name: string, age: number) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getName() &#123;</span><br><span class=\"line\">    return this.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export interface Payload &#123;</span><br><span class=\"line\">  title: string;</span><br><span class=\"line\">  description: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<strong>index.ts</strong> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Person, Payload &#125; from &#x27;./person&#x27;;</span><br><span class=\"line\">import &#123; Animal &#125; from &#x27;./animal&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const p = new Person(&#x27;sala&#x27;, 12);</span><br><span class=\"line\"></span><br><span class=\"line\">const data: Payload = &#123; title: &#x27;One&#x27;, description: &#x27;happy...&#x27; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">type StringOrNumber = string | number;</span><br><span class=\"line\"></span><br><span class=\"line\">function getString(n: StringOrNumber): string &#123;</span><br><span class=\"line\">  if (typeof n === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">    return n;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return n.toString();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const animal = new Animal(&#x27;Kitty&#x27;);</span><br></pre></td></tr></table></figure> <strong>animal.js</strong>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class Animal &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sayHi() &#123;</span><br><span class=\"line\">    return &#x27;hello!&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p><strong>package.json</strong> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;ts_learn_project&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;&#125;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^4.22.0&quot;,</span><br><span class=\"line\">    &quot;@typescript-eslint/parser&quot;: &quot;^4.22.0&quot;,</span><br><span class=\"line\">    &quot;eslint&quot;: &quot;^7.24.0&quot;,</span><br><span class=\"line\">    &quot;typescript&quot;: &quot;^4.2.4&quot;,</span><br><span class=\"line\">    &quot;mwts&quot;: &quot;^1.0.5&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;eslint&quot;: &quot;eslint src --ext .ts&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;tsc&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;keywords&quot;: [</span><br><span class=\"line\">    &quot;typescript&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;author&quot;: &quot;salamander&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<strong>.eslintrc.js</strong><br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  parser: &quot;@typescript-eslint/parser&quot;,</span><br><span class=\"line\">  plugins: [&quot;@typescript-eslint&quot;],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    // 禁止使用 var</span><br><span class=\"line\">    &quot;no-var&quot;: &quot;error&quot;,</span><br><span class=\"line\">    // 优先使用 interface 而不是 type</span><br><span class=\"line\">    &quot;@typescript-eslint/consistent-type-definitions&quot;: [&quot;error&quot;, &quot;interface&quot;],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure> 2019 年 1 月，TypeScirpt 官方决定全面采用 ESLint\r\n作为代码检查的工具，并创建了一个新项目 <a\r\nhref=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/parser\">typescript-eslint</a>，提供了\r\nTypeScript 文件的解析器 <span class=\"citation\"\r\ndata-cites=\"typescript-eslint/parser\">@typescript-eslint/parser</span>\r\n和相关的配置选项 <span class=\"citation\"\r\ndata-cites=\"typescript-eslint/eslint-plugin\">@typescript-eslint/eslint-plugin</span>\r\n等。</p>\r\n<p>参考： * <a\r\nhref=\"https://typescript.bootcss.com/tutorials/typescript-in-5-minutes.html\">TypeScript\r\n中文手册</a> * <a\r\nhref=\"https://www.typescriptlang.org/tsconfig\">tsconfig</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"安装\">安装</h2>\r\n<p>安装TypeScript还是很简单的： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br></pre></td></tr></table></figure> 写个hello.ts\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(person: string) &#123;</span><br><span class=\"line\">    return &#x27;Hello, &#x27; + person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let user = &#x27;Tom&#x27;;</span><br><span class=\"line\">console.log(sayHello(user));</span><br></pre></td></tr></table></figure></p>","more":"<p>然后执行 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc hello.ts</span><br></pre></td></tr></table></figure> 这时候会生成一个编译好的文件\r\n<code>hello.js</code>： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(person) &#123;</span><br><span class=\"line\">    return &#x27;Hello, &#x27; + person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var user = &#x27;Tom&#x27;;</span><br><span class=\"line\">console.log(sayHello(user));</span><br></pre></td></tr></table></figure>\r\n可以看到，编译好后的就是平常的js代码，TS的一个优点在于类型的声明，这样在编译期bug就能及早发现（当然还有其他好处，例如<strong>泛型</strong>，<strong>Enum</strong>，<strong>装饰器</strong>）。<br />\r\n注意： <strong>TypeScript</strong>\r\n只会在编译时对类型进行静态检查，如果发现有错误，编译的时候就会报错。而在运行时，与普通的\r\nJavaScript 文件一样，不会对类型进行检查。</p>\r\n<h2 id=\"复杂点\">复杂点</h2>\r\n<p>构建一个TypeScript的项目就需要<code>tsconfig.json</code>文件了。如果一个目录下存在一个<code>tsconfig.json</code>文件，那么它意味着这个目录是TypeScript项目的根目录。</p>\r\n<p>创建一个简单的项目，目录结构如下： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyProj</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── index.ts</span><br><span class=\"line\">│   ├── person.ts</span><br><span class=\"line\">│   ├── animal.js</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── tsconfig.json</span><br><span class=\"line\">├── .eslintrc.js  </span><br></pre></td></tr></table></figure>\r\ntsconfig.json文件<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;target&quot;: &quot;ES2018&quot;, // 指定ECMAScript目标版本</span><br><span class=\"line\">    &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">    &quot;moduleResolution&quot;: &quot;node&quot;,</span><br><span class=\"line\">    &quot;experimentalDecorators&quot;: true, // 开启装饰器</span><br><span class=\"line\">    &quot;strict&quot;: true, // 启用所有严格类型检查选项</span><br><span class=\"line\">    &quot;noImplicitAny&quot;: false,</span><br><span class=\"line\">    &quot;removeComments&quot;: true, // 移除注释</span><br><span class=\"line\">    &quot;sourceMap&quot;: false,</span><br><span class=\"line\">    &quot;rootDir&quot;: &quot;src&quot;, // Default: The longest common path of all non-declaration input files.</span><br><span class=\"line\">    &quot;outDir&quot;: &quot;dist&quot;, // 编译输出目录</span><br><span class=\"line\">    &quot;allowJs&quot;: true // 允许JS文件混合</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;include&quot;: [&quot;src/**/*&quot;], // 指定要编译文件</span><br><span class=\"line\">  &quot;exclude&quot;: [&quot;node_modules&quot;] // 指定要排除的编译文件</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> <strong>person.ts</strong> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class Person &#123;</span><br><span class=\"line\">  private name: string;</span><br><span class=\"line\"></span><br><span class=\"line\">  private age: number;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(name: string, age: number) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getName() &#123;</span><br><span class=\"line\">    return this.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export interface Payload &#123;</span><br><span class=\"line\">  title: string;</span><br><span class=\"line\">  description: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<strong>index.ts</strong> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Person, Payload &#125; from &#x27;./person&#x27;;</span><br><span class=\"line\">import &#123; Animal &#125; from &#x27;./animal&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">const p = new Person(&#x27;sala&#x27;, 12);</span><br><span class=\"line\"></span><br><span class=\"line\">const data: Payload = &#123; title: &#x27;One&#x27;, description: &#x27;happy...&#x27; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">type StringOrNumber = string | number;</span><br><span class=\"line\"></span><br><span class=\"line\">function getString(n: StringOrNumber): string &#123;</span><br><span class=\"line\">  if (typeof n === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">    return n;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return n.toString();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const animal = new Animal(&#x27;Kitty&#x27;);</span><br></pre></td></tr></table></figure> <strong>animal.js</strong>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class Animal &#123;</span><br><span class=\"line\">  constructor(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sayHi() &#123;</span><br><span class=\"line\">    return &#x27;hello!&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p><strong>package.json</strong> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;ts_learn_project&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;&#125;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;@typescript-eslint/eslint-plugin&quot;: &quot;^4.22.0&quot;,</span><br><span class=\"line\">    &quot;@typescript-eslint/parser&quot;: &quot;^4.22.0&quot;,</span><br><span class=\"line\">    &quot;eslint&quot;: &quot;^7.24.0&quot;,</span><br><span class=\"line\">    &quot;typescript&quot;: &quot;^4.2.4&quot;,</span><br><span class=\"line\">    &quot;mwts&quot;: &quot;^1.0.5&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;eslint&quot;: &quot;eslint src --ext .ts&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;tsc&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;keywords&quot;: [</span><br><span class=\"line\">    &quot;typescript&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;author&quot;: &quot;salamander&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<strong>.eslintrc.js</strong><br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  parser: &quot;@typescript-eslint/parser&quot;,</span><br><span class=\"line\">  plugins: [&quot;@typescript-eslint&quot;],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    // 禁止使用 var</span><br><span class=\"line\">    &quot;no-var&quot;: &quot;error&quot;,</span><br><span class=\"line\">    // 优先使用 interface 而不是 type</span><br><span class=\"line\">    &quot;@typescript-eslint/consistent-type-definitions&quot;: [&quot;error&quot;, &quot;interface&quot;],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure> 2019 年 1 月，TypeScirpt 官方决定全面采用 ESLint\r\n作为代码检查的工具，并创建了一个新项目 <a\r\nhref=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/parser\">typescript-eslint</a>，提供了\r\nTypeScript 文件的解析器 <span class=\"citation\"\r\ndata-cites=\"typescript-eslint/parser\">@typescript-eslint/parser</span>\r\n和相关的配置选项 <span class=\"citation\"\r\ndata-cites=\"typescript-eslint/eslint-plugin\">@typescript-eslint/eslint-plugin</span>\r\n等。</p>\r\n<p>参考： * <a\r\nhref=\"https://typescript.bootcss.com/tutorials/typescript-in-5-minutes.html\">TypeScript\r\n中文手册</a> * <a\r\nhref=\"https://www.typescriptlang.org/tsconfig\">tsconfig</a></p>"},{"title":"Vagrant本地快速启动Kubernetes集群","author":"Salamander","date":"2019-12-16T05:00:00.000Z","_content":"![k8s logo](https://image-static.segmentfault.com/311/703/311703680-5b80e2877f8c8_articlex)\n\nKubernetes，简称 **k8s**（k，8 个字符，s——明白了？）或者 “kube”，是一个开源的 Linux 容器自动化运维平台，它消除了容器化应用程序在部署、伸缩时涉及到的许多手动操作。换句话说，你可以将多台主机组合成集群来运行 Linux 容器，而 Kubernetes 可以帮助你简单高效地管理那些集群。构成这些集群的主机还可以跨越公有云、私有云以及混合云。\n\n\n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Vagrant版本：2.2.6\n* VirtualBox版本：6.0.14 r133895 (Qt5.9.5)\n* Kubernetes版本：1.16.3\n\n<!-- more -->\n\n## 安装Vagrant\nVagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源**VirtualBox**（其实也可以用别的）虚拟化系统，使用Chef创建自动化虚拟环境。\n首先到[官网](https://www.vagrantup.com/downloads.html)下载最新的`Vagrant`，现在最新的版本是**2.2.6**，当然你也可以通过命令行下载：\n```\nwget https://releases.hashicorp.com/vagrant/2.2.6/vagrant_2.2.6_x86_64.deb\n```\n验证`Vagrant`安装成功\n```\n$ vagrant --version\nVagrant 2.2.6\n```\n\n## 安装VirtualBox\nVagrant是基于虚拟机（`VirtualBox`，`VMware`这些）的，所以我们还需要安装`VirtualBox`。在Vagrant官网可以它适配的`VirtualBox`版本\n> Vagrant comes with support out of the box for VirtualBox, a free, cross-platform consumer virtualization product.\n> The VirtualBox provider is compatible with VirtualBox versions 4.0.x, 4.1.x, 4.2.x, 4.3.x, 5.0.x, 5.1.x, 5.2.x, and 6.0.x.\n\n这里我下载6.0版本的`VirtualBox`，[下载地址](https://www.virtualbox.org/wiki/Download_Old_Builds_6_0)\n```\nwget https://download.virtualbox.org/virtualbox/6.0.14/virtualbox-6.0_6.0.14-133895~Ubuntu~bionic_amd64.deb\n```\n**注意：不要通过apt-get安装VirtualBox**，因为5.1.0版本开始，VirtualBox已经不需要**DKMS**，apt官方源中VirtualBox比较老，是会带上`DKMS`的：\n```\nDKMS isn't required by VirtualBox since 5.1.0. Which means that you downloaded VirtualBox from your Debian \"store\". That's a fork, not supported. You can either ask in their forums for help, or completely remove/uninstall/delete/purge their version and install the official version from the Downloads section of VirtualBox (https://www.virtualbox.org/wiki/Downloads).\n```\n\n\n## 启动虚拟机\n`Vagrant`跟docker类似，可以提供一致性环境的，它可以编写`Vagrantfile`（类似`docker-compose.yml`）来定义虚拟机中安装什么软件，环境和配置，它使用ruby语法。`Vagrant`也做了[box源](https://app.vagrantup.com/boxes/search)，类似docker image。  \n下面给出一个小栗子感受下，这里使用`ubuntu/xenial64`（Ubuntu 16.06 64位）这个box\n```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# All Vagrant configuration is done below. The \"2\" in Vagrant.configure\n# configures the configuration version (we support older styles for\n# backwards compatibility). Please don't change it unless you know what\n# you're doing.\nVagrant.configure(\"2\") do |config|\n  ##### DEFINE VM #####\n  # The most common configuration options are documented and commented below.\n  # For a complete reference, please see the online documentation at\n  # https://docs.vagrantup.com.\n\n  # Every Vagrant development environment requires a box. You can search for\n  # boxes at https://app.vagrantup.com/boxes/search.\n  config.vm.box = \"ubuntu/xenial64\"\n\n  config.vm.hostname = \"ubuntu-01\"\n  config.vm.box_check_update = false\n\n  # Create a private network, which allows host-only access to the machine\n  # using a specific IP.\n  config.vm.network \"private_network\", ip: \"192.168.10.50\"\n\n  # Create a public network, which generally matched to bridged network.\n  # Bridged networks make the machine appear as another physical device on\n  # your network.\n  # config.vm.network \"public_network\"\n\n  # Share an additional folder to the guest VM. The first argument is\n  # the path on the host to the actual folder. The second argument is\n  # the path on the guest to mount the folder. And the optional third\n  # argument is a set of non-required options.\n  # config.vm.synced_folder \"../data\", \"/vagrant_data\"\n\n\n  # Provider-specific configuration so you can fine-tune various\n  # backing providers for Vagrant. These expose provider-specific options.\n  # Example for VirtualBox:\n  #\n  # config.vm.provider \"virtualbox\" do |vb|\n  #   # Display the VirtualBox GUI when booting the machine\n  #   vb.gui = true\n  #\n  #   # Customize the amount of memory on the VM:\n  #   vb.memory = \"1024\"\n  # end\n  #\n  # View the documentation for the provider you are using for more\n  # information on available options.\n  \n  config.vm.provider \"virtualbox\" do |v|\n    v.name = \"ubuntu-for-fun\"\n    v.customize [\"modifyvm\", :id, \"--memory\", \"2048\"]\n    v.customize [\"modifyvm\", :id, \"--cpus\", \"2\"]\n  end\n\n  # Create a forwarded port mapping which allows access to a specific port\n  # within the machine from a port on the host machine. In the example below,\n  # accessing \"localhost:8080\" will access port 80 on the guest machine.\n  # config.vm.network \"forwarded_port\", guest: 80, host: 8080\nend\n```\n更多虚拟机的配置可以查看[官方文档](https://www.vagrantup.com/docs/vagrantfile/machine_settings.html)  \n在Vagrantfile对应的目录下终端键入：`vagrant up`，然后`Vagrant`会帮我们下载`ubuntu/xenial64`这个box，不过在中国下载速度非常慢，在运行`vagrant up`时我们可以看到这个box的下载url，你可以用**迅雷**这些工具直接下载，然后在本地手动添加box\n```\n$ vagrant up\nBringing machine 'default' up with 'virtualbox' provider...\n==> default: Box 'ubuntu/xenial64' could not be found. Attempting to find and install...\n    default: Box Provider: virtualbox\n    default: Box Version: >= 0\n==> default: Loading metadata for box 'ubuntu/xenial64'\n    default: URL: https://vagrantcloud.com/ubuntu/xenial64\n==> default: Adding box 'ubuntu/xenial64' (v20191217.0.0) for provider: virtualbox\n    default: Downloading: https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box\n==> default: Box download is resuming from prior download progress\n    default: Download redirected to host: cloud-images.ubuntu.com\n    .........\n\n$ cd ~/box-add\n$ ls\nmetadata.json  virtualbox.box\n$ vagrant box add metadata.json\n==> box: Loading metadata for box 'metadata.json'\n    box: URL: file:///home/lucy/vm-add/metadata.json\n==> box: Adding box 'ubuntu/xenial64' (v20191217.0.0) for provider: virtualbox\n    box: Downloading: ./virtualbox.box\n==> box: Successfully added box 'ubuntu/xenial64' (v20191217.0.0) for 'virtualbox'!\n$ vagrant box list\nubuntu/xenial64 (virtualbox, 20191217.0.0)\n```\n下载box的URL是`https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box`，可以看到下载的版本是**20191217.0.0**，另外注意一下这里添加box的是使用一个`metadata.json`文件，使用这样的方式可以定义box版本号，它的内容是：\n```\n{\n    \"name\": \"ubuntu/xenial64\",\n    \"versions\": [{\n        \"version\": \"20191217.0.0\",\n        \"providers\": [{\n            \"name\": \"virtualbox\",\n            \"url\": \"./virtualbox.box\"\n        }]\n    }]\n}\n```\n\n启动虚拟机你可能会遇到下面的错误：\n\n![upload successful](/images/virtualbox-error.png)\n\n解决方法是在**BIOS**中将**Intel Virtualization Technology**改为Enable。  \n启动虚拟机后，你可以通过`vagrant ssh`进入虚拟机。\n\n## 启动Kubernetes集群\n这里我编写了一个`Vagrantfile`，一键启动集群：\n```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nk8sVersion = '1.16.3'\nservers = [\n    {\n        :name => \"k8s-head\",\n        :type => \"master\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.10\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    },\n    {\n        :name => \"k8s-node-1\",\n        :type => \"node\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.11\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    },\n    {\n        :name => \"k8s-node-2\",\n        :type => \"node\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.12\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    }\n]\n\n# This script to install k8s using kubeadm will get executed after a box is provisioned\n$configureBox = <<-SCRIPT\n    cp /etc/apt/sources.list /etc/apt/sources.list.bak\n    # use Aliyun apt source\n    cat > /etc/apt/sources.list<<EOF\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\nEOF\n\n    export DEBIAN_FRONTEND=noninteractive\n\n    # install docker v17.03\n    # reason for not using docker provision is that it always installs latest version of the docker, but kubeadm requires 17.03 or older\n    apt-get update\n    # step 1: 安装必要的一些系统工具\n    apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n    # step 2: 安装GPG证书\n    curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n    add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/$(. /etc/os-release; echo \"$ID\") $(lsb_release -cs) stable\"\n    apt-get update && apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk '{print $3}')\n    # run docker commands as vagrant user (sudo not required)\n    usermod -aG docker vagrant\n    # 修改docker配置\n    sudo bash -c 'cat > /etc/docker/daemon.json <<EOF\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF'\n    sudo systemctl daemon-reload\n    sudo systemctl restart docker\n\n    # install kubeadm\n    apt-get install -y apt-transport-https curl\n    curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -  # aliyun GPG\n    cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\n    deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\nEOF\n    apt-get update\n    apt-get install -y kubelet=#{k8sVersion}-00 kubeadm=#{k8sVersion}-00 kubectl=#{k8sVersion}-00\n    apt-mark hold kubelet kubeadm kubectl\n    # kubelet requires swap off\n    swapoff -a\n    # keep swap off after reboot\n    sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n    # ip of this box\n    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`\n    # set node-ip\n    sudo sh -c 'echo KUBELET_EXTRA_ARGS= >> /etc/default/kubelet'\n    sudo sed -i \"/^[^#]*KUBELET_EXTRA_ARGS=/c\\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR\" /etc/default/kubelet\n    sudo systemctl restart kubelet\nSCRIPT\n\n$configureMaster = <<-SCRIPT\n    export DEBIAN_FRONTEND=noninteractive\n    echo \"This is master\"\n    # ip of this box\n    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`\n    # install k8s master\n    HOST_NAME=$(hostname -s)\n    kubeadm init --image-repository registry.aliyuncs.com/google_containers  --kubernetes-version v#{k8sVersion} \\\n    --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR  --node-name $HOST_NAME --pod-network-cidr=172.16.0.0/16\n    #copying credentials to regular user - vagrant\n    sudo --user=vagrant mkdir -p /home/vagrant/.kube\n    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config\n    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config\n\n    # install Calico pod network addon\n    export KUBECONFIG=/etc/kubernetes/admin.conf\n    wget https://docs.projectcalico.org/v3.10/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml\n    # Pod的ip范围\n    sed -i 's/192.168.0.0/172.16.0.0/g' calico.yaml\n    kubectl apply -f calico.yaml\n    kubeadm token create --print-join-command >> /etc/kubeadm_join_cmd.sh\n    chmod +x /etc/kubeadm_join_cmd.sh\n    # required for setting up password less ssh between guest VMs\n    sudo sed -i \"/^[^#]*PasswordAuthentication[[:space:]]no/c\\PasswordAuthentication yes\" /etc/ssh/sshd_config\n    sudo service sshd restart\nSCRIPT\n\n$configureNode = <<-SCRIPT\n    export DEBIAN_FRONTEND=noninteractive\n    echo \"This is worker\"\n    apt-get install -y sshpass\n    sshpass -p \"vagrant\" scp -o StrictHostKeyChecking=no vagrant@192.168.205.10:/etc/kubeadm_join_cmd.sh .\n    sh ./kubeadm_join_cmd.sh\nSCRIPT\n\nVagrant.configure(\"2\") do |config|\n    \n    servers.each do |opts|\n        config.vm.define opts[:name] do |config|\n\n            config.vm.box = opts[:box]\n            config.vm.box_version = opts[:box_version]\n            config.vm.hostname = opts[:name]\n            config.vm.network :private_network, ip: opts[:eth1]\n\n            config.vm.provider \"virtualbox\" do |v|\n\n                v.name = opts[:name]\n            \tv.customize [\"modifyvm\", :id, \"--groups\", \"/Salamander Development\"]\n                v.customize [\"modifyvm\", :id, \"--memory\", opts[:mem]]\n                v.customize [\"modifyvm\", :id, \"--cpus\", opts[:cpu]]\n                v.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n                v.customize [\"modifyvm\", :id, \"--natdnsproxy1\", \"on\"]\n            end\n\n            # we cannot use this because we can't install the docker version we want - https://github.com/hashicorp/vagrant/issues/4871\n            #config.vm.provision \"docker\"\n\n            config.vm.provision \"shell\", inline: $configureBox\n\n            if opts[:type] == \"master\"\n                config.vm.provision \"shell\", inline: $configureMaster\n            else\n                config.vm.provision \"shell\", inline: $configureNode\n            end\n\n        end\n\n    end\nend\n```\n启动集群`vagrant up`，这里需要耐心等待几分钟，因为要启动三个虚拟机、安装一些软件和设置环境。  \n启动集群后，进入**Master节点**`vagrant ssh k8s-head`查看集群状态：\n```\n$ kubectl get nodes\nNAME         STATUS   ROLES    AGE    VERSION\nk8s-head     Ready    master   5h7m   v1.15.7\nk8s-node-1   Ready    <none>   5h5m   v1.15.7\nk8s-node-2   Ready    <none>   5h2m   v1.15.7\n\n\n$ kubectl get pods --all-namespaces\nNAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE\nkube-system            calico-node-j5kw8                            2/2     Running   4          5h7m\nkube-system            calico-node-kq89s                            2/2     Running   0          5h6m\nkube-system            calico-node-twvdl                            2/2     Running   0          5h2m\nkube-system            coredns-94d74667-jhjl8                       1/1     Running   2          5h7m\nkube-system            coredns-94d74667-qd9qv                       1/1     Running   2          5h7m\nkube-system            etcd-k8s-head                                1/1     Running   2          5h6m\nkube-system            kube-apiserver-k8s-head                      1/1     Running   2          5h6m\nkube-system            kube-controller-manager-k8s-head             1/1     Running   2          5h6m\nkube-system            kube-proxy-7d8wj                             1/1     Running   0          5h2m\nkube-system            kube-proxy-hn89g                             1/1     Running   0          5h6m\nkube-system            kube-proxy-t8qf9                             1/1     Running   2          5h7m\nkube-system            kube-scheduler-k8s-head                      1/1     Running   2          5h6m\n\n$ kubectl cluster-info\nKubernetes master is running at https://192.168.205.10:6443\nKubeDNS is running at https://192.168.205.10:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\n$ kubectl get componentstatuses\nNAME                 STATUS    MESSAGE             ERROR\nscheduler            Healthy   ok                  \ncontroller-manager   Healthy   ok                  \netcd-0               Healthy   {\"health\":\"true\"}\n```\n节点都是**Ready**和pods都是**Running**说明集群成功启动了，`kubectl cluster-info`可以查看集群信息，`kubectl get componentstatuses`可以查看各组件信息。\n\n\n\n\n## 安装官方Dashboard\n[Dashboard](https://github.com/kubernetes/dashboard)是Kubernetes的一个插件，代码单独放在Github的一个仓库里。  \n按照[官方文档](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/)，步骤也蛮简单的，首先执行命令：\n```\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml\n```\n\n查看一下Dashboard的服务：\n```\n\n$ kubectl  get pod,deploy,svc -n kubernetes-dashboard\nNAME                                             READY   STATUS    RESTARTS   AGE\npod/dashboard-metrics-scraper-6c554969c6-jqhjx   1/1     Running   0          5h5m\npod/kubernetes-dashboard-56c5f95c6b-jrj58        1/1     Running   5          5h5m\n\nNAME                                              READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.extensions/dashboard-metrics-scraper   1/1     1            1           5h5m\ndeployment.extensions/kubernetes-dashboard        1/1     1            1           5h5m\n\nNAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nservice/dashboard-metrics-scraper   ClusterIP   10.106.117.224   <none>        8000/TCP   5h5m\nservice/kubernetes-dashboard        ClusterIP   10.98.23.78      <none>        443/TCP    5h5m\n\n\n# 我们可以看到官方的dashboard帮我们启动了web-ui，并且帮我们启动了一个Metric服务\n# 但是dashboard默认使用的https的443端口\n\n# 测试下Dashboard是否正常\n$ curl https://10.98.23.78:443 -k -I\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nCache-Control: no-store\nContent-Length: 1262\nContent-Type: text/html; charset=utf-8\nLast-Modified: Fri, 06 Dec 2019 15:14:02 GMT\nDate: Tue, 31 Dec 2019 06:35:55 GMT\n```\n\n### 访问Dashboard\n访问Dashboard有好几种方式\n* 将kubernetes-dashboard Service暴露 NodePort，使用 http://NodeIP:nodePort 地址访问 dashboard\n* 使用Ingress之类的入口服务进行代理访问\n* 通过 API server 访问 dashboard（https 6443端口和http 8080端口方式）\n* 通过 kubectl proxy 访问 dashboard\n\n\n#### kubectl proxy\n首先这里我们通过`kubectl proxy`，在**k8s-head**节点执行：\n```\n$ kubectl proxy --address='0.0.0.0' --accept-hosts='^*$'\n```\n在访问之前，我们需要先创建一个**User**（一个**ServiceAccount**，k8s内概念），创建dashboard-adminuser.yaml文件，写入\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\n\n```\n执行`kubectl apply -f dashboard-adminuser.yaml`。  \n查看用户token（之后在浏览器中输入）\n```\n$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')\nName:         admin-user-token-mxmtr\nNamespace:    kubernetes-dashboard\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: admin-user\n              kubernetes.io/service-account.uid: 54ddc041-f3af-41fa-a824-6a3e29f0ffa3\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  20 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLW14bXRyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI1NGRkYzA0MS1mM2FmLTQxZmEtYTgyNC02YTNlMjlmMGZmYTMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.osyqbUwS4pLDEhZ0iL0aAu2f5me82bGTEfXEW8ycS5-JRar4iYcWkqhJZ9FhZV47P0WKLT9UWiLcDw1rVPZbMSHrRnFZcRHmLO35tVBaijjvgsgm2X5856G-HS1VNMgQBSZXiQXr1Lt3Dj9JHHksbiLGg-3wRy7HqD-I8JcR1pHZ_ViOqQ1j6WIbvhfEE3FpTuuSPAcjwVNutXAfur6oJktjYAcwMjWTQ4-yMQ2NRSWM7AcJtjp_7p3WwnHmO6fH6LtrGQzmXwHh5ICmei2LrAE2cxwN251aMVnrPGt00Ff4ij2-yLyI4VZOgAsNuPegctm-GuCOTGNX9Ew-o1si_Q\n```\n\n\n为了在宿主机上能访问，我们需要用VirutalBox管理界面添加一个端口映射：  \n\n![upload successful](https://s2.ax1x.com/2019/12/31/l1FsQP.png)\n\n好了，现在我们可以访问Dashboard了，浏览内输入`http://localhost:31694/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.`，可以看到\n![](/images/k8s-dashboard.png)\n\n#### NodePort\n这个过程比`kubectl proxy`简单，再安装Dashboard之前，把`Service`类型改成`NodePort`即可：\n```\n$ wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml  #下载yaml\n$ vim recommended.yaml\n```\n找到Service部分，改成NodePort\n````\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  type: NodePort  # 这个是新增部分\n  ports:\n    - port: 443\n      targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n```\n查看，Service的随机端口：\n```\n$ kubectl get pods,svc --all-namespaces\n\nNAMESPACE              NAME                                             READY   STATUS    RESTARTS   AGE\nkube-system            pod/calico-node-ffn9k                            2/2     Running   10         32d\nkube-system            pod/calico-node-fz8v6                            2/2     Running   12         32d\nkube-system            pod/calico-node-gvjft                            2/2     Running   8          32d\nkube-system            pod/coredns-94d74667-8jp5k                       1/1     Running   4          32d\nkube-system            pod/coredns-94d74667-tlph7                       1/1     Running   4          32d\nkube-system            pod/etcd-k8s-head                                1/1     Running   4          32d\nkube-system            pod/kube-apiserver-k8s-head                      1/1     Running   4          32d\nkube-system            pod/kube-controller-manager-k8s-head             1/1     Running   4          32d\nkube-system            pod/kube-proxy-4rsp4                             1/1     Running   5          32d\nkube-system            pod/kube-proxy-dccdc                             1/1     Running   5          32d\nkube-system            pod/kube-proxy-x82tl                             1/1     Running   4          32d\nkube-system            pod/kube-scheduler-k8s-head                      1/1     Running   4          32d\nkubernetes-dashboard   pod/dashboard-metrics-scraper-6c554969c6-wmwpt   1/1     Running   0          18m\nkubernetes-dashboard   pod/kubernetes-dashboard-56c5f95c6b-s66g8        1/1     Running   0          18m\n\nNAMESPACE              NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE\ndefault                service/kubernetes                  ClusterIP   10.96.0.1        <none>        443/TCP                  32d\nkube-system            service/calico-typha                ClusterIP   10.104.182.223   <none>        5473/TCP                 32d\nkube-system            service/kube-dns                    ClusterIP   10.96.0.10       <none>        53/UDP,53/TCP,9153/TCP   32d\nkubernetes-dashboard   service/dashboard-metrics-scraper   ClusterIP   10.99.243.131    <none>        8000/TCP                 18m\nkubernetes-dashboard   service/kubernetes-dashboard        NodePort    10.96.23.239     <none>        443:30646/TCP            18m\n```\n可以看到暴露端口是**30646**，访问Master节点上的30646端口`https://192.168.205.10:30646`，需要填写的**token**和上面`kubectl proxy`遇到的问题一样，先创建**ServiceAccount**和**ClusterRoleBinding**，然后查看这个账号的token。\n\n\n#### API Server\n首先，我们需要导出p12证书：\n```\n# 生成 client-certificate-data\ngrep 'client-certificate-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.crt\n\n# 生成 client-key-data\ngrep 'client-key-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.key\n\n# 生成 p12\nopenssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name \"kubernetes-client\"\n```\n然后，在在 chrome 导入了 p12 证书（点击“设置”，“管理证书”那里导入）。  \n访问链接：`https://192.168.205.10:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy`，就可以看到**登录界面**了（注意：**新版的Dashboard，命名空间移动到了kubernetes-dashboard中**）  \n![](https://s2.ax1x.com/2020/01/26/1mG9UJ.png)\n**token**的填写跟上面`kubectl proxy`一样，当然你也可以直接用master节点中`$HOME/.kube/config`文件来登录。\n\n\n\n\n## kubernetes常用命令\n```\n## 查看\nkubectl cluster-info    ----查看集群信息\nkubectl get pods --all-namespaces ------查看所有pod信息\nkubectl get cs    ----查看各组件（componentstatuses）信息，可以简写为rc\nkubectl get pods -n default   ----列出default命名空间所有的pods\nkubectl get pods -o wide    ----查看pods所在的运行节点\nkubectl get pods -o yaml    ----查看pods定义的详细信息\nkubectl get rc    ----查看Replication Controller信息\nkubectl get service    ----查看service的信息\nkubectl get nodes    ----查看节点信息\nkubectl get pod --selector name=redis    ----按selector名来查找pod\nkubectl exec pod名字 env    ----查看运行的pod的环境变量\nkubectl  get pod,deploy,svc -n kubernetes-dashboard ---一起查看pod，service，deployment信息\n\n## 创建\nkubectl create -f 文件名    ----创建\nkubectl replace -f 文件名  [--force]    ----重建\n\n## 删除\nkubectl delete -f 文件名\nkubectl delete pod pod名\nkubectl delete rc rc名\nkubectl delete service service名\nkubectl delete pod --all\nkubectl run mybusybox --image=busybox    ----启动一个pod\nkubectl run mybusybox --image=busybox --replicas=5    ----启动多个pod\nkubectl delete deployments mybusybox    ----删除创建的pod\nkubectl get pods    ----列出当前所有的pod\nkubectl describe pod [PODNAME]    ----查看pod的状态\nkubectl run mynginx --image=nginx --port=80 --hostport=8000    ----创建带有端口映射的pod\nkubectl run -i --tty busybox --image=busybox    ----创建带有终端的pod\n```\n\n参考\n* [Github——kubernetes-cluster-via-vagrant](https://github.com/ecomm-integration-ballerina/kubernetes-cluster)\n* [Kubernetes – unable to login to the Dashboard\n](https://www.australtech.net/kubernetes-unable-to-login-to-the-dashboard/)\n* [kubernetes-dashboard(1.8.3)部署与踩坑](https://www.cnblogs.com/rainingnight/p/deploying-k8s-dashboard-ui.html#api-server)","source":"_posts/Vagrant_Kubernetes_cluster.md","raw":"title: Vagrant本地快速启动Kubernetes集群\nauthor: Salamander\ntags:\n  - kubernetes\n  - vagrant\n  - virtualbox\ncategories:\n  - kubernetes\ndate: 2019-12-16 13:00:00\n---\n![k8s logo](https://image-static.segmentfault.com/311/703/311703680-5b80e2877f8c8_articlex)\n\nKubernetes，简称 **k8s**（k，8 个字符，s——明白了？）或者 “kube”，是一个开源的 Linux 容器自动化运维平台，它消除了容器化应用程序在部署、伸缩时涉及到的许多手动操作。换句话说，你可以将多台主机组合成集群来运行 Linux 容器，而 Kubernetes 可以帮助你简单高效地管理那些集群。构成这些集群的主机还可以跨越公有云、私有云以及混合云。\n\n\n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* Vagrant版本：2.2.6\n* VirtualBox版本：6.0.14 r133895 (Qt5.9.5)\n* Kubernetes版本：1.16.3\n\n<!-- more -->\n\n## 安装Vagrant\nVagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源**VirtualBox**（其实也可以用别的）虚拟化系统，使用Chef创建自动化虚拟环境。\n首先到[官网](https://www.vagrantup.com/downloads.html)下载最新的`Vagrant`，现在最新的版本是**2.2.6**，当然你也可以通过命令行下载：\n```\nwget https://releases.hashicorp.com/vagrant/2.2.6/vagrant_2.2.6_x86_64.deb\n```\n验证`Vagrant`安装成功\n```\n$ vagrant --version\nVagrant 2.2.6\n```\n\n## 安装VirtualBox\nVagrant是基于虚拟机（`VirtualBox`，`VMware`这些）的，所以我们还需要安装`VirtualBox`。在Vagrant官网可以它适配的`VirtualBox`版本\n> Vagrant comes with support out of the box for VirtualBox, a free, cross-platform consumer virtualization product.\n> The VirtualBox provider is compatible with VirtualBox versions 4.0.x, 4.1.x, 4.2.x, 4.3.x, 5.0.x, 5.1.x, 5.2.x, and 6.0.x.\n\n这里我下载6.0版本的`VirtualBox`，[下载地址](https://www.virtualbox.org/wiki/Download_Old_Builds_6_0)\n```\nwget https://download.virtualbox.org/virtualbox/6.0.14/virtualbox-6.0_6.0.14-133895~Ubuntu~bionic_amd64.deb\n```\n**注意：不要通过apt-get安装VirtualBox**，因为5.1.0版本开始，VirtualBox已经不需要**DKMS**，apt官方源中VirtualBox比较老，是会带上`DKMS`的：\n```\nDKMS isn't required by VirtualBox since 5.1.0. Which means that you downloaded VirtualBox from your Debian \"store\". That's a fork, not supported. You can either ask in their forums for help, or completely remove/uninstall/delete/purge their version and install the official version from the Downloads section of VirtualBox (https://www.virtualbox.org/wiki/Downloads).\n```\n\n\n## 启动虚拟机\n`Vagrant`跟docker类似，可以提供一致性环境的，它可以编写`Vagrantfile`（类似`docker-compose.yml`）来定义虚拟机中安装什么软件，环境和配置，它使用ruby语法。`Vagrant`也做了[box源](https://app.vagrantup.com/boxes/search)，类似docker image。  \n下面给出一个小栗子感受下，这里使用`ubuntu/xenial64`（Ubuntu 16.06 64位）这个box\n```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# All Vagrant configuration is done below. The \"2\" in Vagrant.configure\n# configures the configuration version (we support older styles for\n# backwards compatibility). Please don't change it unless you know what\n# you're doing.\nVagrant.configure(\"2\") do |config|\n  ##### DEFINE VM #####\n  # The most common configuration options are documented and commented below.\n  # For a complete reference, please see the online documentation at\n  # https://docs.vagrantup.com.\n\n  # Every Vagrant development environment requires a box. You can search for\n  # boxes at https://app.vagrantup.com/boxes/search.\n  config.vm.box = \"ubuntu/xenial64\"\n\n  config.vm.hostname = \"ubuntu-01\"\n  config.vm.box_check_update = false\n\n  # Create a private network, which allows host-only access to the machine\n  # using a specific IP.\n  config.vm.network \"private_network\", ip: \"192.168.10.50\"\n\n  # Create a public network, which generally matched to bridged network.\n  # Bridged networks make the machine appear as another physical device on\n  # your network.\n  # config.vm.network \"public_network\"\n\n  # Share an additional folder to the guest VM. The first argument is\n  # the path on the host to the actual folder. The second argument is\n  # the path on the guest to mount the folder. And the optional third\n  # argument is a set of non-required options.\n  # config.vm.synced_folder \"../data\", \"/vagrant_data\"\n\n\n  # Provider-specific configuration so you can fine-tune various\n  # backing providers for Vagrant. These expose provider-specific options.\n  # Example for VirtualBox:\n  #\n  # config.vm.provider \"virtualbox\" do |vb|\n  #   # Display the VirtualBox GUI when booting the machine\n  #   vb.gui = true\n  #\n  #   # Customize the amount of memory on the VM:\n  #   vb.memory = \"1024\"\n  # end\n  #\n  # View the documentation for the provider you are using for more\n  # information on available options.\n  \n  config.vm.provider \"virtualbox\" do |v|\n    v.name = \"ubuntu-for-fun\"\n    v.customize [\"modifyvm\", :id, \"--memory\", \"2048\"]\n    v.customize [\"modifyvm\", :id, \"--cpus\", \"2\"]\n  end\n\n  # Create a forwarded port mapping which allows access to a specific port\n  # within the machine from a port on the host machine. In the example below,\n  # accessing \"localhost:8080\" will access port 80 on the guest machine.\n  # config.vm.network \"forwarded_port\", guest: 80, host: 8080\nend\n```\n更多虚拟机的配置可以查看[官方文档](https://www.vagrantup.com/docs/vagrantfile/machine_settings.html)  \n在Vagrantfile对应的目录下终端键入：`vagrant up`，然后`Vagrant`会帮我们下载`ubuntu/xenial64`这个box，不过在中国下载速度非常慢，在运行`vagrant up`时我们可以看到这个box的下载url，你可以用**迅雷**这些工具直接下载，然后在本地手动添加box\n```\n$ vagrant up\nBringing machine 'default' up with 'virtualbox' provider...\n==> default: Box 'ubuntu/xenial64' could not be found. Attempting to find and install...\n    default: Box Provider: virtualbox\n    default: Box Version: >= 0\n==> default: Loading metadata for box 'ubuntu/xenial64'\n    default: URL: https://vagrantcloud.com/ubuntu/xenial64\n==> default: Adding box 'ubuntu/xenial64' (v20191217.0.0) for provider: virtualbox\n    default: Downloading: https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box\n==> default: Box download is resuming from prior download progress\n    default: Download redirected to host: cloud-images.ubuntu.com\n    .........\n\n$ cd ~/box-add\n$ ls\nmetadata.json  virtualbox.box\n$ vagrant box add metadata.json\n==> box: Loading metadata for box 'metadata.json'\n    box: URL: file:///home/lucy/vm-add/metadata.json\n==> box: Adding box 'ubuntu/xenial64' (v20191217.0.0) for provider: virtualbox\n    box: Downloading: ./virtualbox.box\n==> box: Successfully added box 'ubuntu/xenial64' (v20191217.0.0) for 'virtualbox'!\n$ vagrant box list\nubuntu/xenial64 (virtualbox, 20191217.0.0)\n```\n下载box的URL是`https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box`，可以看到下载的版本是**20191217.0.0**，另外注意一下这里添加box的是使用一个`metadata.json`文件，使用这样的方式可以定义box版本号，它的内容是：\n```\n{\n    \"name\": \"ubuntu/xenial64\",\n    \"versions\": [{\n        \"version\": \"20191217.0.0\",\n        \"providers\": [{\n            \"name\": \"virtualbox\",\n            \"url\": \"./virtualbox.box\"\n        }]\n    }]\n}\n```\n\n启动虚拟机你可能会遇到下面的错误：\n\n![upload successful](/images/virtualbox-error.png)\n\n解决方法是在**BIOS**中将**Intel Virtualization Technology**改为Enable。  \n启动虚拟机后，你可以通过`vagrant ssh`进入虚拟机。\n\n## 启动Kubernetes集群\n这里我编写了一个`Vagrantfile`，一键启动集群：\n```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nk8sVersion = '1.16.3'\nservers = [\n    {\n        :name => \"k8s-head\",\n        :type => \"master\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.10\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    },\n    {\n        :name => \"k8s-node-1\",\n        :type => \"node\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.11\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    },\n    {\n        :name => \"k8s-node-2\",\n        :type => \"node\",\n        :box => \"ubuntu/xenial64\",\n        :box_version => \"20191217.0.0\",\n        :eth1 => \"192.168.205.12\",\n        :mem => \"2048\",\n        :cpu => \"2\"\n    }\n]\n\n# This script to install k8s using kubeadm will get executed after a box is provisioned\n$configureBox = <<-SCRIPT\n    cp /etc/apt/sources.list /etc/apt/sources.list.bak\n    # use Aliyun apt source\n    cat > /etc/apt/sources.list<<EOF\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse\nEOF\n\n    export DEBIAN_FRONTEND=noninteractive\n\n    # install docker v17.03\n    # reason for not using docker provision is that it always installs latest version of the docker, but kubeadm requires 17.03 or older\n    apt-get update\n    # step 1: 安装必要的一些系统工具\n    apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n    # step 2: 安装GPG证书\n    curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n    add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/$(. /etc/os-release; echo \"$ID\") $(lsb_release -cs) stable\"\n    apt-get update && apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk '{print $3}')\n    # run docker commands as vagrant user (sudo not required)\n    usermod -aG docker vagrant\n    # 修改docker配置\n    sudo bash -c 'cat > /etc/docker/daemon.json <<EOF\n{\n  \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"100m\"\n  },\n  \"storage-driver\": \"overlay2\"\n}\nEOF'\n    sudo systemctl daemon-reload\n    sudo systemctl restart docker\n\n    # install kubeadm\n    apt-get install -y apt-transport-https curl\n    curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -  # aliyun GPG\n    cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\n    deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\nEOF\n    apt-get update\n    apt-get install -y kubelet=#{k8sVersion}-00 kubeadm=#{k8sVersion}-00 kubectl=#{k8sVersion}-00\n    apt-mark hold kubelet kubeadm kubectl\n    # kubelet requires swap off\n    swapoff -a\n    # keep swap off after reboot\n    sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n    # ip of this box\n    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`\n    # set node-ip\n    sudo sh -c 'echo KUBELET_EXTRA_ARGS= >> /etc/default/kubelet'\n    sudo sed -i \"/^[^#]*KUBELET_EXTRA_ARGS=/c\\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR\" /etc/default/kubelet\n    sudo systemctl restart kubelet\nSCRIPT\n\n$configureMaster = <<-SCRIPT\n    export DEBIAN_FRONTEND=noninteractive\n    echo \"This is master\"\n    # ip of this box\n    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk '{print $2}'| cut -f2 -d:`\n    # install k8s master\n    HOST_NAME=$(hostname -s)\n    kubeadm init --image-repository registry.aliyuncs.com/google_containers  --kubernetes-version v#{k8sVersion} \\\n    --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR  --node-name $HOST_NAME --pod-network-cidr=172.16.0.0/16\n    #copying credentials to regular user - vagrant\n    sudo --user=vagrant mkdir -p /home/vagrant/.kube\n    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config\n    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config\n\n    # install Calico pod network addon\n    export KUBECONFIG=/etc/kubernetes/admin.conf\n    wget https://docs.projectcalico.org/v3.10/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml\n    # Pod的ip范围\n    sed -i 's/192.168.0.0/172.16.0.0/g' calico.yaml\n    kubectl apply -f calico.yaml\n    kubeadm token create --print-join-command >> /etc/kubeadm_join_cmd.sh\n    chmod +x /etc/kubeadm_join_cmd.sh\n    # required for setting up password less ssh between guest VMs\n    sudo sed -i \"/^[^#]*PasswordAuthentication[[:space:]]no/c\\PasswordAuthentication yes\" /etc/ssh/sshd_config\n    sudo service sshd restart\nSCRIPT\n\n$configureNode = <<-SCRIPT\n    export DEBIAN_FRONTEND=noninteractive\n    echo \"This is worker\"\n    apt-get install -y sshpass\n    sshpass -p \"vagrant\" scp -o StrictHostKeyChecking=no vagrant@192.168.205.10:/etc/kubeadm_join_cmd.sh .\n    sh ./kubeadm_join_cmd.sh\nSCRIPT\n\nVagrant.configure(\"2\") do |config|\n    \n    servers.each do |opts|\n        config.vm.define opts[:name] do |config|\n\n            config.vm.box = opts[:box]\n            config.vm.box_version = opts[:box_version]\n            config.vm.hostname = opts[:name]\n            config.vm.network :private_network, ip: opts[:eth1]\n\n            config.vm.provider \"virtualbox\" do |v|\n\n                v.name = opts[:name]\n            \tv.customize [\"modifyvm\", :id, \"--groups\", \"/Salamander Development\"]\n                v.customize [\"modifyvm\", :id, \"--memory\", opts[:mem]]\n                v.customize [\"modifyvm\", :id, \"--cpus\", opts[:cpu]]\n                v.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"on\"]\n                v.customize [\"modifyvm\", :id, \"--natdnsproxy1\", \"on\"]\n            end\n\n            # we cannot use this because we can't install the docker version we want - https://github.com/hashicorp/vagrant/issues/4871\n            #config.vm.provision \"docker\"\n\n            config.vm.provision \"shell\", inline: $configureBox\n\n            if opts[:type] == \"master\"\n                config.vm.provision \"shell\", inline: $configureMaster\n            else\n                config.vm.provision \"shell\", inline: $configureNode\n            end\n\n        end\n\n    end\nend\n```\n启动集群`vagrant up`，这里需要耐心等待几分钟，因为要启动三个虚拟机、安装一些软件和设置环境。  \n启动集群后，进入**Master节点**`vagrant ssh k8s-head`查看集群状态：\n```\n$ kubectl get nodes\nNAME         STATUS   ROLES    AGE    VERSION\nk8s-head     Ready    master   5h7m   v1.15.7\nk8s-node-1   Ready    <none>   5h5m   v1.15.7\nk8s-node-2   Ready    <none>   5h2m   v1.15.7\n\n\n$ kubectl get pods --all-namespaces\nNAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE\nkube-system            calico-node-j5kw8                            2/2     Running   4          5h7m\nkube-system            calico-node-kq89s                            2/2     Running   0          5h6m\nkube-system            calico-node-twvdl                            2/2     Running   0          5h2m\nkube-system            coredns-94d74667-jhjl8                       1/1     Running   2          5h7m\nkube-system            coredns-94d74667-qd9qv                       1/1     Running   2          5h7m\nkube-system            etcd-k8s-head                                1/1     Running   2          5h6m\nkube-system            kube-apiserver-k8s-head                      1/1     Running   2          5h6m\nkube-system            kube-controller-manager-k8s-head             1/1     Running   2          5h6m\nkube-system            kube-proxy-7d8wj                             1/1     Running   0          5h2m\nkube-system            kube-proxy-hn89g                             1/1     Running   0          5h6m\nkube-system            kube-proxy-t8qf9                             1/1     Running   2          5h7m\nkube-system            kube-scheduler-k8s-head                      1/1     Running   2          5h6m\n\n$ kubectl cluster-info\nKubernetes master is running at https://192.168.205.10:6443\nKubeDNS is running at https://192.168.205.10:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\n$ kubectl get componentstatuses\nNAME                 STATUS    MESSAGE             ERROR\nscheduler            Healthy   ok                  \ncontroller-manager   Healthy   ok                  \netcd-0               Healthy   {\"health\":\"true\"}\n```\n节点都是**Ready**和pods都是**Running**说明集群成功启动了，`kubectl cluster-info`可以查看集群信息，`kubectl get componentstatuses`可以查看各组件信息。\n\n\n\n\n## 安装官方Dashboard\n[Dashboard](https://github.com/kubernetes/dashboard)是Kubernetes的一个插件，代码单独放在Github的一个仓库里。  \n按照[官方文档](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/)，步骤也蛮简单的，首先执行命令：\n```\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml\n```\n\n查看一下Dashboard的服务：\n```\n\n$ kubectl  get pod,deploy,svc -n kubernetes-dashboard\nNAME                                             READY   STATUS    RESTARTS   AGE\npod/dashboard-metrics-scraper-6c554969c6-jqhjx   1/1     Running   0          5h5m\npod/kubernetes-dashboard-56c5f95c6b-jrj58        1/1     Running   5          5h5m\n\nNAME                                              READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.extensions/dashboard-metrics-scraper   1/1     1            1           5h5m\ndeployment.extensions/kubernetes-dashboard        1/1     1            1           5h5m\n\nNAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nservice/dashboard-metrics-scraper   ClusterIP   10.106.117.224   <none>        8000/TCP   5h5m\nservice/kubernetes-dashboard        ClusterIP   10.98.23.78      <none>        443/TCP    5h5m\n\n\n# 我们可以看到官方的dashboard帮我们启动了web-ui，并且帮我们启动了一个Metric服务\n# 但是dashboard默认使用的https的443端口\n\n# 测试下Dashboard是否正常\n$ curl https://10.98.23.78:443 -k -I\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nCache-Control: no-store\nContent-Length: 1262\nContent-Type: text/html; charset=utf-8\nLast-Modified: Fri, 06 Dec 2019 15:14:02 GMT\nDate: Tue, 31 Dec 2019 06:35:55 GMT\n```\n\n### 访问Dashboard\n访问Dashboard有好几种方式\n* 将kubernetes-dashboard Service暴露 NodePort，使用 http://NodeIP:nodePort 地址访问 dashboard\n* 使用Ingress之类的入口服务进行代理访问\n* 通过 API server 访问 dashboard（https 6443端口和http 8080端口方式）\n* 通过 kubectl proxy 访问 dashboard\n\n\n#### kubectl proxy\n首先这里我们通过`kubectl proxy`，在**k8s-head**节点执行：\n```\n$ kubectl proxy --address='0.0.0.0' --accept-hosts='^*$'\n```\n在访问之前，我们需要先创建一个**User**（一个**ServiceAccount**，k8s内概念），创建dashboard-adminuser.yaml文件，写入\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\n\n```\n执行`kubectl apply -f dashboard-adminuser.yaml`。  \n查看用户token（之后在浏览器中输入）\n```\n$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')\nName:         admin-user-token-mxmtr\nNamespace:    kubernetes-dashboard\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: admin-user\n              kubernetes.io/service-account.uid: 54ddc041-f3af-41fa-a824-6a3e29f0ffa3\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1025 bytes\nnamespace:  20 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLW14bXRyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI1NGRkYzA0MS1mM2FmLTQxZmEtYTgyNC02YTNlMjlmMGZmYTMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.osyqbUwS4pLDEhZ0iL0aAu2f5me82bGTEfXEW8ycS5-JRar4iYcWkqhJZ9FhZV47P0WKLT9UWiLcDw1rVPZbMSHrRnFZcRHmLO35tVBaijjvgsgm2X5856G-HS1VNMgQBSZXiQXr1Lt3Dj9JHHksbiLGg-3wRy7HqD-I8JcR1pHZ_ViOqQ1j6WIbvhfEE3FpTuuSPAcjwVNutXAfur6oJktjYAcwMjWTQ4-yMQ2NRSWM7AcJtjp_7p3WwnHmO6fH6LtrGQzmXwHh5ICmei2LrAE2cxwN251aMVnrPGt00Ff4ij2-yLyI4VZOgAsNuPegctm-GuCOTGNX9Ew-o1si_Q\n```\n\n\n为了在宿主机上能访问，我们需要用VirutalBox管理界面添加一个端口映射：  \n\n![upload successful](https://s2.ax1x.com/2019/12/31/l1FsQP.png)\n\n好了，现在我们可以访问Dashboard了，浏览内输入`http://localhost:31694/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.`，可以看到\n![](/images/k8s-dashboard.png)\n\n#### NodePort\n这个过程比`kubectl proxy`简单，再安装Dashboard之前，把`Service`类型改成`NodePort`即可：\n```\n$ wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml  #下载yaml\n$ vim recommended.yaml\n```\n找到Service部分，改成NodePort\n````\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  type: NodePort  # 这个是新增部分\n  ports:\n    - port: 443\n      targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n```\n查看，Service的随机端口：\n```\n$ kubectl get pods,svc --all-namespaces\n\nNAMESPACE              NAME                                             READY   STATUS    RESTARTS   AGE\nkube-system            pod/calico-node-ffn9k                            2/2     Running   10         32d\nkube-system            pod/calico-node-fz8v6                            2/2     Running   12         32d\nkube-system            pod/calico-node-gvjft                            2/2     Running   8          32d\nkube-system            pod/coredns-94d74667-8jp5k                       1/1     Running   4          32d\nkube-system            pod/coredns-94d74667-tlph7                       1/1     Running   4          32d\nkube-system            pod/etcd-k8s-head                                1/1     Running   4          32d\nkube-system            pod/kube-apiserver-k8s-head                      1/1     Running   4          32d\nkube-system            pod/kube-controller-manager-k8s-head             1/1     Running   4          32d\nkube-system            pod/kube-proxy-4rsp4                             1/1     Running   5          32d\nkube-system            pod/kube-proxy-dccdc                             1/1     Running   5          32d\nkube-system            pod/kube-proxy-x82tl                             1/1     Running   4          32d\nkube-system            pod/kube-scheduler-k8s-head                      1/1     Running   4          32d\nkubernetes-dashboard   pod/dashboard-metrics-scraper-6c554969c6-wmwpt   1/1     Running   0          18m\nkubernetes-dashboard   pod/kubernetes-dashboard-56c5f95c6b-s66g8        1/1     Running   0          18m\n\nNAMESPACE              NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                  AGE\ndefault                service/kubernetes                  ClusterIP   10.96.0.1        <none>        443/TCP                  32d\nkube-system            service/calico-typha                ClusterIP   10.104.182.223   <none>        5473/TCP                 32d\nkube-system            service/kube-dns                    ClusterIP   10.96.0.10       <none>        53/UDP,53/TCP,9153/TCP   32d\nkubernetes-dashboard   service/dashboard-metrics-scraper   ClusterIP   10.99.243.131    <none>        8000/TCP                 18m\nkubernetes-dashboard   service/kubernetes-dashboard        NodePort    10.96.23.239     <none>        443:30646/TCP            18m\n```\n可以看到暴露端口是**30646**，访问Master节点上的30646端口`https://192.168.205.10:30646`，需要填写的**token**和上面`kubectl proxy`遇到的问题一样，先创建**ServiceAccount**和**ClusterRoleBinding**，然后查看这个账号的token。\n\n\n#### API Server\n首先，我们需要导出p12证书：\n```\n# 生成 client-certificate-data\ngrep 'client-certificate-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.crt\n\n# 生成 client-key-data\ngrep 'client-key-data' ~/.kube/config | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.key\n\n# 生成 p12\nopenssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name \"kubernetes-client\"\n```\n然后，在在 chrome 导入了 p12 证书（点击“设置”，“管理证书”那里导入）。  \n访问链接：`https://192.168.205.10:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy`，就可以看到**登录界面**了（注意：**新版的Dashboard，命名空间移动到了kubernetes-dashboard中**）  \n![](https://s2.ax1x.com/2020/01/26/1mG9UJ.png)\n**token**的填写跟上面`kubectl proxy`一样，当然你也可以直接用master节点中`$HOME/.kube/config`文件来登录。\n\n\n\n\n## kubernetes常用命令\n```\n## 查看\nkubectl cluster-info    ----查看集群信息\nkubectl get pods --all-namespaces ------查看所有pod信息\nkubectl get cs    ----查看各组件（componentstatuses）信息，可以简写为rc\nkubectl get pods -n default   ----列出default命名空间所有的pods\nkubectl get pods -o wide    ----查看pods所在的运行节点\nkubectl get pods -o yaml    ----查看pods定义的详细信息\nkubectl get rc    ----查看Replication Controller信息\nkubectl get service    ----查看service的信息\nkubectl get nodes    ----查看节点信息\nkubectl get pod --selector name=redis    ----按selector名来查找pod\nkubectl exec pod名字 env    ----查看运行的pod的环境变量\nkubectl  get pod,deploy,svc -n kubernetes-dashboard ---一起查看pod，service，deployment信息\n\n## 创建\nkubectl create -f 文件名    ----创建\nkubectl replace -f 文件名  [--force]    ----重建\n\n## 删除\nkubectl delete -f 文件名\nkubectl delete pod pod名\nkubectl delete rc rc名\nkubectl delete service service名\nkubectl delete pod --all\nkubectl run mybusybox --image=busybox    ----启动一个pod\nkubectl run mybusybox --image=busybox --replicas=5    ----启动多个pod\nkubectl delete deployments mybusybox    ----删除创建的pod\nkubectl get pods    ----列出当前所有的pod\nkubectl describe pod [PODNAME]    ----查看pod的状态\nkubectl run mynginx --image=nginx --port=80 --hostport=8000    ----创建带有端口映射的pod\nkubectl run -i --tty busybox --image=busybox    ----创建带有终端的pod\n```\n\n参考\n* [Github——kubernetes-cluster-via-vagrant](https://github.com/ecomm-integration-ballerina/kubernetes-cluster)\n* [Kubernetes – unable to login to the Dashboard\n](https://www.australtech.net/kubernetes-unable-to-login-to-the-dashboard/)\n* [kubernetes-dashboard(1.8.3)部署与踩坑](https://www.cnblogs.com/rainingnight/p/deploying-k8s-dashboard-ui.html#api-server)","slug":"Vagrant_Kubernetes_cluster","published":1,"updated":"2023-03-21T02:48:19.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l8001u2o3m7a5we2cm","content":"<figure>\r\n<img\r\nsrc=\"https://image-static.segmentfault.com/311/703/311703680-5b80e2877f8c8_articlex\"\r\nalt=\"k8s logo\" />\r\n<figcaption aria-hidden=\"true\">k8s logo</figcaption>\r\n</figure>\r\n<p>Kubernetes，简称 <strong>k8s</strong>（k，8 个字符，s——明白了？）或者\r\n“kube”，是一个开源的 Linux\r\n容器自动化运维平台，它消除了容器化应用程序在部署、伸缩时涉及到的许多手动操作。换句话说，你可以将多台主机组合成集群来运行\r\nLinux 容器，而 Kubernetes\r\n可以帮助你简单高效地管理那些集群。构成这些集群的主机还可以跨越公有云、私有云以及混合云。</p>\r\n<p>本文环境： * OS：Ubuntu 18.04.3 LTS * Vagrant版本：2.2.6 *\r\nVirtualBox版本：6.0.14 r133895 (Qt5.9.5) * Kubernetes版本：1.16.3</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"安装vagrant\">安装Vagrant</h2>\r\n<p>Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源<strong>VirtualBox</strong>（其实也可以用别的）虚拟化系统，使用Chef创建自动化虚拟环境。\r\n首先到<a\r\nhref=\"https://www.vagrantup.com/downloads.html\">官网</a>下载最新的<code>Vagrant</code>，现在最新的版本是<strong>2.2.6</strong>，当然你也可以通过命令行下载：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://releases.hashicorp.com/vagrant/2.2.6/vagrant_2.2.6_x86_64.deb</span><br></pre></td></tr></table></figure> 验证<code>Vagrant</code>安装成功 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant --version</span><br><span class=\"line\">Vagrant 2.2.6</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"安装virtualbox\">安装VirtualBox</h2>\r\n<p>Vagrant是基于虚拟机（<code>VirtualBox</code>，<code>VMware</code>这些）的，所以我们还需要安装<code>VirtualBox</code>。在Vagrant官网可以它适配的<code>VirtualBox</code>版本\r\n&gt; Vagrant comes with support out of the box for VirtualBox, a free,\r\ncross-platform consumer virtualization product. &gt; The VirtualBox\r\nprovider is compatible with VirtualBox versions 4.0.x, 4.1.x, 4.2.x,\r\n4.3.x, 5.0.x, 5.1.x, 5.2.x, and 6.0.x.</p>\r\n<p>这里我下载6.0版本的<code>VirtualBox</code>，<a\r\nhref=\"https://www.virtualbox.org/wiki/Download_Old_Builds_6_0\">下载地址</a>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://download.virtualbox.org/virtualbox/6.0.14/virtualbox-6.0_6.0.14-133895~Ubuntu~bionic_amd64.deb</span><br></pre></td></tr></table></figure>\r\n<strong>注意：不要通过apt-get安装VirtualBox</strong>，因为5.1.0版本开始，VirtualBox已经不需要<strong>DKMS</strong>，apt官方源中VirtualBox比较老，是会带上<code>DKMS</code>的：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DKMS isn&#x27;t required by VirtualBox since 5.1.0. Which means that you downloaded VirtualBox from your Debian &quot;store&quot;. That&#x27;s a fork, not supported. You can either ask in their forums for help, or completely remove/uninstall/delete/purge their version and install the official version from the Downloads section of VirtualBox (https://www.virtualbox.org/wiki/Downloads).</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"启动虚拟机\">启动虚拟机</h2>\r\n<p><code>Vagrant</code>跟docker类似，可以提供一致性环境的，它可以编写<code>Vagrantfile</code>（类似<code>docker-compose.yml</code>）来定义虚拟机中安装什么软件，环境和配置，它使用ruby语法。<code>Vagrant</code>也做了<a\r\nhref=\"https://app.vagrantup.com/boxes/search\">box源</a>，类似docker\r\nimage。<br />\r\n下面给出一个小栗子感受下，这里使用<code>ubuntu/xenial64</code>（Ubuntu\r\n16.06 64位）这个box <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- mode: ruby -*-</span><br><span class=\"line\"># vi: set ft=ruby :</span><br><span class=\"line\"></span><br><span class=\"line\"># All Vagrant configuration is done below. The &quot;2&quot; in Vagrant.configure</span><br><span class=\"line\"># configures the configuration version (we support older styles for</span><br><span class=\"line\"># backwards compatibility). Please don&#x27;t change it unless you know what</span><br><span class=\"line\"># you&#x27;re doing.</span><br><span class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class=\"line\">  ##### DEFINE VM #####</span><br><span class=\"line\">  # The most common configuration options are documented and commented below.</span><br><span class=\"line\">  # For a complete reference, please see the online documentation at</span><br><span class=\"line\">  # https://docs.vagrantup.com.</span><br><span class=\"line\"></span><br><span class=\"line\">  # Every Vagrant development environment requires a box. You can search for</span><br><span class=\"line\">  # boxes at https://app.vagrantup.com/boxes/search.</span><br><span class=\"line\">  config.vm.box = &quot;ubuntu/xenial64&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.hostname = &quot;ubuntu-01&quot;</span><br><span class=\"line\">  config.vm.box_check_update = false</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a private network, which allows host-only access to the machine</span><br><span class=\"line\">  # using a specific IP.</span><br><span class=\"line\">  config.vm.network &quot;private_network&quot;, ip: &quot;192.168.10.50&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a public network, which generally matched to bridged network.</span><br><span class=\"line\">  # Bridged networks make the machine appear as another physical device on</span><br><span class=\"line\">  # your network.</span><br><span class=\"line\">  # config.vm.network &quot;public_network&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Share an additional folder to the guest VM. The first argument is</span><br><span class=\"line\">  # the path on the host to the actual folder. The second argument is</span><br><span class=\"line\">  # the path on the guest to mount the folder. And the optional third</span><br><span class=\"line\">  # argument is a set of non-required options.</span><br><span class=\"line\">  # config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  # Provider-specific configuration so you can fine-tune various</span><br><span class=\"line\">  # backing providers for Vagrant. These expose provider-specific options.</span><br><span class=\"line\">  # Example for VirtualBox:</span><br><span class=\"line\">  #</span><br><span class=\"line\">  # config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class=\"line\">  #   # Display the VirtualBox GUI when booting the machine</span><br><span class=\"line\">  #   vb.gui = true</span><br><span class=\"line\">  #</span><br><span class=\"line\">  #   # Customize the amount of memory on the VM:</span><br><span class=\"line\">  #   vb.memory = &quot;1024&quot;</span><br><span class=\"line\">  # end</span><br><span class=\"line\">  #</span><br><span class=\"line\">  # View the documentation for the provider you are using for more</span><br><span class=\"line\">  # information on available options.</span><br><span class=\"line\">  </span><br><span class=\"line\">  config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class=\"line\">    v.name = &quot;ubuntu-for-fun&quot;</span><br><span class=\"line\">    v.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;2048&quot;]</span><br><span class=\"line\">    v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, &quot;2&quot;]</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a forwarded port mapping which allows access to a specific port</span><br><span class=\"line\">  # within the machine from a port on the host machine. In the example below,</span><br><span class=\"line\">  # accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span><br><span class=\"line\">  # config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure> 更多虚拟机的配置可以查看<a\r\nhref=\"https://www.vagrantup.com/docs/vagrantfile/machine_settings.html\">官方文档</a><br />\r\n在Vagrantfile对应的目录下终端键入：<code>vagrant up</code>，然后<code>Vagrant</code>会帮我们下载<code>ubuntu/xenial64</code>这个box，不过在中国下载速度非常慢，在运行<code>vagrant up</code>时我们可以看到这个box的下载url，你可以用<strong>迅雷</strong>这些工具直接下载，然后在本地手动添加box\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant up</span><br><span class=\"line\">Bringing machine &#x27;default&#x27; up with &#x27;virtualbox&#x27; provider...</span><br><span class=\"line\">==&gt; default: Box &#x27;ubuntu/xenial64&#x27; could not be found. Attempting to find and install...</span><br><span class=\"line\">    default: Box Provider: virtualbox</span><br><span class=\"line\">    default: Box Version: &gt;= 0</span><br><span class=\"line\">==&gt; default: Loading metadata for box &#x27;ubuntu/xenial64&#x27;</span><br><span class=\"line\">    default: URL: https://vagrantcloud.com/ubuntu/xenial64</span><br><span class=\"line\">==&gt; default: Adding box &#x27;ubuntu/xenial64&#x27; (v20191217.0.0) for provider: virtualbox</span><br><span class=\"line\">    default: Downloading: https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box</span><br><span class=\"line\">==&gt; default: Box download is resuming from prior download progress</span><br><span class=\"line\">    default: Download redirected to host: cloud-images.ubuntu.com</span><br><span class=\"line\">    .........</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd ~/box-add</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">metadata.json  virtualbox.box</span><br><span class=\"line\">$ vagrant box add metadata.json</span><br><span class=\"line\">==&gt; box: Loading metadata for box &#x27;metadata.json&#x27;</span><br><span class=\"line\">    box: URL: file:///home/lucy/vm-add/metadata.json</span><br><span class=\"line\">==&gt; box: Adding box &#x27;ubuntu/xenial64&#x27; (v20191217.0.0) for provider: virtualbox</span><br><span class=\"line\">    box: Downloading: ./virtualbox.box</span><br><span class=\"line\">==&gt; box: Successfully added box &#x27;ubuntu/xenial64&#x27; (v20191217.0.0) for &#x27;virtualbox&#x27;!</span><br><span class=\"line\">$ vagrant box list</span><br><span class=\"line\">ubuntu/xenial64 (virtualbox, 20191217.0.0)</span><br></pre></td></tr></table></figure>\r\n下载box的URL是<code>https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box</code>，可以看到下载的版本是<strong>20191217.0.0</strong>，另外注意一下这里添加box的是使用一个<code>metadata.json</code>文件，使用这样的方式可以定义box版本号，它的内容是：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">    &quot;versions&quot;: [&#123;</span><br><span class=\"line\">        &quot;version&quot;: &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        &quot;providers&quot;: [&#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;virtualbox&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;./virtualbox.box&quot;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>启动虚拟机你可能会遇到下面的错误：</p>\r\n<figure>\r\n<img src=\"/images/virtualbox-error.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>解决方法是在<strong>BIOS</strong>中将<strong>Intel Virtualization\r\nTechnology</strong>改为Enable。<br />\r\n启动虚拟机后，你可以通过<code>vagrant ssh</code>进入虚拟机。</p>\r\n<h2 id=\"启动kubernetes集群\">启动Kubernetes集群</h2>\r\n<p>这里我编写了一个<code>Vagrantfile</code>，一键启动集群：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- mode: ruby -*-</span><br><span class=\"line\"># vi: set ft=ruby :</span><br><span class=\"line\"></span><br><span class=\"line\">k8sVersion = &#x27;1.16.3&#x27;</span><br><span class=\"line\">servers = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-head&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;master&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.10&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-node-1&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;node&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.11&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-node-2&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;node&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.12&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># This script to install k8s using kubeadm will get executed after a box is provisioned</span><br><span class=\"line\">$configureBox = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">    # use Aliyun apt source</span><br><span class=\"line\">    cat &gt; /etc/apt/sources.list&lt;&lt;EOF</span><br><span class=\"line\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\"></span><br><span class=\"line\">    # install docker v17.03</span><br><span class=\"line\">    # reason for not using docker provision is that it always installs latest version of the docker, but kubeadm requires 17.03 or older</span><br><span class=\"line\">    apt-get update</span><br><span class=\"line\">    # step 1: 安装必要的一些系统工具</span><br><span class=\"line\">    apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class=\"line\">    # step 2: 安装GPG证书</span><br><span class=\"line\">    curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\">    add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/$(. /etc/os-release; echo &quot;$ID&quot;) $(lsb_release -cs) stable&quot;</span><br><span class=\"line\">    apt-get update &amp;&amp; apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk &#x27;&#123;print $3&#125;&#x27;)</span><br><span class=\"line\">    # run docker commands as vagrant user (sudo not required)</span><br><span class=\"line\">    usermod -aG docker vagrant</span><br><span class=\"line\">    # 修改docker配置</span><br><span class=\"line\">    sudo bash -c &#x27;cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">  &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF&#x27;</span><br><span class=\"line\">    sudo systemctl daemon-reload</span><br><span class=\"line\">    sudo systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\">    # install kubeadm</span><br><span class=\"line\">    apt-get install -y apt-transport-https curl</span><br><span class=\"line\">    curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -  # aliyun GPG</span><br><span class=\"line\">    cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class=\"line\">    deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\">    apt-get update</span><br><span class=\"line\">    apt-get install -y kubelet=#&#123;k8sVersion&#125;-00 kubeadm=#&#123;k8sVersion&#125;-00 kubectl=#&#123;k8sVersion&#125;-00</span><br><span class=\"line\">    apt-mark hold kubelet kubeadm kubectl</span><br><span class=\"line\">    # kubelet requires swap off</span><br><span class=\"line\">    swapoff -a</span><br><span class=\"line\">    # keep swap off after reboot</span><br><span class=\"line\">    sudo sed -i &#x27;/ swap / s/^\\(.*\\)$/#\\1/g&#x27; /etc/fstab</span><br><span class=\"line\">    # ip of this box</span><br><span class=\"line\">    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk &#x27;&#123;print $2&#125;&#x27;| cut -f2 -d:`</span><br><span class=\"line\">    # set node-ip</span><br><span class=\"line\">    sudo sh -c &#x27;echo KUBELET_EXTRA_ARGS= &gt;&gt; /etc/default/kubelet&#x27;</span><br><span class=\"line\">    sudo sed -i &quot;/^[^#]*KUBELET_EXTRA_ARGS=/c\\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR&quot; /etc/default/kubelet</span><br><span class=\"line\">    sudo systemctl restart kubelet</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">$configureMaster = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\">    echo &quot;This is master&quot;</span><br><span class=\"line\">    # ip of this box</span><br><span class=\"line\">    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk &#x27;&#123;print $2&#125;&#x27;| cut -f2 -d:`</span><br><span class=\"line\">    # install k8s master</span><br><span class=\"line\">    HOST_NAME=$(hostname -s)</span><br><span class=\"line\">    kubeadm init --image-repository registry.aliyuncs.com/google_containers  --kubernetes-version v#&#123;k8sVersion&#125; \\</span><br><span class=\"line\">    --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR  --node-name $HOST_NAME --pod-network-cidr=172.16.0.0/16</span><br><span class=\"line\">    #copying credentials to regular user - vagrant</span><br><span class=\"line\">    sudo --user=vagrant mkdir -p /home/vagrant/.kube</span><br><span class=\"line\">    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config</span><br><span class=\"line\">    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">    # install Calico pod network addon</span><br><span class=\"line\">    export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\">    wget https://docs.projectcalico.org/v3.10/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml</span><br><span class=\"line\">    # Pod的ip范围</span><br><span class=\"line\">    sed -i &#x27;s/192.168.0.0/172.16.0.0/g&#x27; calico.yaml</span><br><span class=\"line\">    kubectl apply -f calico.yaml</span><br><span class=\"line\">    kubeadm token create --print-join-command &gt;&gt; /etc/kubeadm_join_cmd.sh</span><br><span class=\"line\">    chmod +x /etc/kubeadm_join_cmd.sh</span><br><span class=\"line\">    # required for setting up password less ssh between guest VMs</span><br><span class=\"line\">    sudo sed -i &quot;/^[^#]*PasswordAuthentication[[:space:]]no/c\\PasswordAuthentication yes&quot; /etc/ssh/sshd_config</span><br><span class=\"line\">    sudo service sshd restart</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">$configureNode = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\">    echo &quot;This is worker&quot;</span><br><span class=\"line\">    apt-get install -y sshpass</span><br><span class=\"line\">    sshpass -p &quot;vagrant&quot; scp -o StrictHostKeyChecking=no vagrant@192.168.205.10:/etc/kubeadm_join_cmd.sh .</span><br><span class=\"line\">    sh ./kubeadm_join_cmd.sh</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class=\"line\">    </span><br><span class=\"line\">    servers.each do |opts|</span><br><span class=\"line\">        config.vm.define opts[:name] do |config|</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.box = opts[:box]</span><br><span class=\"line\">            config.vm.box_version = opts[:box_version]</span><br><span class=\"line\">            config.vm.hostname = opts[:name]</span><br><span class=\"line\">            config.vm.network :private_network, ip: opts[:eth1]</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class=\"line\"></span><br><span class=\"line\">                v.name = opts[:name]</span><br><span class=\"line\">            \tv.customize [&quot;modifyvm&quot;, :id, &quot;--groups&quot;, &quot;/Salamander Development&quot;]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, opts[:mem]]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, opts[:cpu]]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--natdnshostresolver1&quot;, &quot;on&quot;]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--natdnsproxy1&quot;, &quot;on&quot;]</span><br><span class=\"line\">            end</span><br><span class=\"line\"></span><br><span class=\"line\">            # we cannot use this because we can&#x27;t install the docker version we want - https://github.com/hashicorp/vagrant/issues/4871</span><br><span class=\"line\">            #config.vm.provision &quot;docker&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.provision &quot;shell&quot;, inline: $configureBox</span><br><span class=\"line\"></span><br><span class=\"line\">            if opts[:type] == &quot;master&quot;</span><br><span class=\"line\">                config.vm.provision &quot;shell&quot;, inline: $configureMaster</span><br><span class=\"line\">            else</span><br><span class=\"line\">                config.vm.provision &quot;shell&quot;, inline: $configureNode</span><br><span class=\"line\">            end</span><br><span class=\"line\"></span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\r\n启动集群<code>vagrant up</code>，这里需要耐心等待几分钟，因为要启动三个虚拟机、安装一些软件和设置环境。<br />\r\n启动集群后，进入<strong>Master节点</strong><code>vagrant ssh k8s-head</code>查看集群状态：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME         STATUS   ROLES    AGE    VERSION</span><br><span class=\"line\">k8s-head     Ready    master   5h7m   v1.15.7</span><br><span class=\"line\">k8s-node-1   Ready    &lt;none&gt;   5h5m   v1.15.7</span><br><span class=\"line\">k8s-node-2   Ready    &lt;none&gt;   5h2m   v1.15.7</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pods --all-namespaces</span><br><span class=\"line\">NAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system            calico-node-j5kw8                            2/2     Running   4          5h7m</span><br><span class=\"line\">kube-system            calico-node-kq89s                            2/2     Running   0          5h6m</span><br><span class=\"line\">kube-system            calico-node-twvdl                            2/2     Running   0          5h2m</span><br><span class=\"line\">kube-system            coredns-94d74667-jhjl8                       1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            coredns-94d74667-qd9qv                       1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            etcd-k8s-head                                1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-apiserver-k8s-head                      1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-controller-manager-k8s-head             1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-proxy-7d8wj                             1/1     Running   0          5h2m</span><br><span class=\"line\">kube-system            kube-proxy-hn89g                             1/1     Running   0          5h6m</span><br><span class=\"line\">kube-system            kube-proxy-t8qf9                             1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            kube-scheduler-k8s-head                      1/1     Running   2          5h6m</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl cluster-info</span><br><span class=\"line\">Kubernetes master is running at https://192.168.205.10:6443</span><br><span class=\"line\">KubeDNS is running at https://192.168.205.10:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get componentstatuses</span><br><span class=\"line\">NAME                 STATUS    MESSAGE             ERROR</span><br><span class=\"line\">scheduler            Healthy   ok                  </span><br><span class=\"line\">controller-manager   Healthy   ok                  </span><br><span class=\"line\">etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;</span><br></pre></td></tr></table></figure>\r\n节点都是<strong>Ready</strong>和pods都是<strong>Running</strong>说明集群成功启动了，<code>kubectl cluster-info</code>可以查看集群信息，<code>kubectl get componentstatuses</code>可以查看各组件信息。</p>\r\n<h2 id=\"安装官方dashboard\">安装官方Dashboard</h2>\r\n<p><a\r\nhref=\"https://github.com/kubernetes/dashboard\">Dashboard</a>是Kubernetes的一个插件，代码单独放在Github的一个仓库里。<br />\r\n按照<a\r\nhref=\"https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/\">官方文档</a>，步骤也蛮简单的，首先执行命令：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure></p>\r\n<p>查看一下Dashboard的服务： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ kubectl  get pod,deploy,svc -n kubernetes-dashboard</span><br><span class=\"line\">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/dashboard-metrics-scraper-6c554969c6-jqhjx   1/1     Running   0          5h5m</span><br><span class=\"line\">pod/kubernetes-dashboard-56c5f95c6b-jrj58        1/1     Running   5          5h5m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.extensions/dashboard-metrics-scraper   1/1     1            1           5h5m</span><br><span class=\"line\">deployment.extensions/kubernetes-dashboard        1/1     1            1           5h5m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">service/dashboard-metrics-scraper   ClusterIP   10.106.117.224   &lt;none&gt;        8000/TCP   5h5m</span><br><span class=\"line\">service/kubernetes-dashboard        ClusterIP   10.98.23.78      &lt;none&gt;        443/TCP    5h5m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 我们可以看到官方的dashboard帮我们启动了web-ui，并且帮我们启动了一个Metric服务</span><br><span class=\"line\"># 但是dashboard默认使用的https的443端口</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试下Dashboard是否正常</span><br><span class=\"line\">$ curl https://10.98.23.78:443 -k -I</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Cache-Control: no-store</span><br><span class=\"line\">Content-Length: 1262</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">Last-Modified: Fri, 06 Dec 2019 15:14:02 GMT</span><br><span class=\"line\">Date: Tue, 31 Dec 2019 06:35:55 GMT</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"访问dashboard\">访问Dashboard</h3>\r\n<p>访问Dashboard有好几种方式 * 将kubernetes-dashboard Service暴露\r\nNodePort，使用 http://NodeIP:nodePort 地址访问 dashboard *\r\n使用Ingress之类的入口服务进行代理访问 * 通过 API server 访问\r\ndashboard（https 6443端口和http 8080端口方式） * 通过 kubectl proxy 访问\r\ndashboard</p>\r\n<h4 id=\"kubectl-proxy\">kubectl proxy</h4>\r\n<p>首先这里我们通过<code>kubectl proxy</code>，在<strong>k8s-head</strong>节点执行：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl proxy --address=&#x27;0.0.0.0&#x27; --accept-hosts=&#x27;^*$&#x27;</span><br></pre></td></tr></table></figure>\r\n在访问之前，我们需要先创建一个<strong>User</strong>（一个<strong>ServiceAccount</strong>，k8s内概念），创建dashboard-adminuser.yaml文件，写入\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: cluster-admin</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n执行<code>kubectl apply -f dashboard-adminuser.yaml</code>。<br />\r\n查看用户token（之后在浏览器中输入） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\">Name:         admin-user-token-mxmtr</span><br><span class=\"line\">Namespace:    kubernetes-dashboard</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class=\"line\">              kubernetes.io/service-account.uid: 54ddc041-f3af-41fa-a824-6a3e29f0ffa3</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1025 bytes</span><br><span class=\"line\">namespace:  20 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLW14bXRyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI1NGRkYzA0MS1mM2FmLTQxZmEtYTgyNC02YTNlMjlmMGZmYTMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.osyqbUwS4pLDEhZ0iL0aAu2f5me82bGTEfXEW8ycS5-JRar4iYcWkqhJZ9FhZV47P0WKLT9UWiLcDw1rVPZbMSHrRnFZcRHmLO35tVBaijjvgsgm2X5856G-HS1VNMgQBSZXiQXr1Lt3Dj9JHHksbiLGg-3wRy7HqD-I8JcR1pHZ_ViOqQ1j6WIbvhfEE3FpTuuSPAcjwVNutXAfur6oJktjYAcwMjWTQ4-yMQ2NRSWM7AcJtjp_7p3WwnHmO6fH6LtrGQzmXwHh5ICmei2LrAE2cxwN251aMVnrPGt00Ff4ij2-yLyI4VZOgAsNuPegctm-GuCOTGNX9Ew-o1si_Q</span><br></pre></td></tr></table></figure></p>\r\n<p>为了在宿主机上能访问，我们需要用VirutalBox管理界面添加一个端口映射：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/12/31/l1FsQP.png\"\r\nalt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>好了，现在我们可以访问Dashboard了，浏览内输入<code>http://localhost:31694/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.</code>，可以看到\r\n<img src=\"/images/k8s-dashboard.png\" /></p>\r\n<h4 id=\"nodeport\">NodePort</h4>\r\n<p>这个过程比<code>kubectl proxy</code>简单，再安装Dashboard之前，把<code>Service</code>类型改成<code>NodePort</code>即可：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml  #下载yaml</span><br><span class=\"line\">$ vim recommended.yaml</span><br></pre></td></tr></table></figure> 找到Service部分，改成NodePort ```` kind: Service\r\napiVersion: v1 metadata: labels: k8s-app: kubernetes-dashboard name:\r\nkubernetes-dashboard namespace: kubernetes-dashboard spec: type:\r\nNodePort # 这个是新增部分 ports: - port: 443 targetPort: 8443 selector:\r\nk8s-app: kubernetes-dashboard <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看，Service的随机端口：</span><br></pre></td></tr></table></figure> $ kubectl get pods,svc\r\n--all-namespaces</p>\r\n<p>NAMESPACE NAME READY STATUS RESTARTS AGE kube-system\r\npod/calico-node-ffn9k 2/2 Running 10 32d kube-system\r\npod/calico-node-fz8v6 2/2 Running 12 32d kube-system\r\npod/calico-node-gvjft 2/2 Running 8 32d kube-system\r\npod/coredns-94d74667-8jp5k 1/1 Running 4 32d kube-system\r\npod/coredns-94d74667-tlph7 1/1 Running 4 32d kube-system\r\npod/etcd-k8s-head 1/1 Running 4 32d kube-system\r\npod/kube-apiserver-k8s-head 1/1 Running 4 32d kube-system\r\npod/kube-controller-manager-k8s-head 1/1 Running 4 32d kube-system\r\npod/kube-proxy-4rsp4 1/1 Running 5 32d kube-system pod/kube-proxy-dccdc\r\n1/1 Running 5 32d kube-system pod/kube-proxy-x82tl 1/1 Running 4 32d\r\nkube-system pod/kube-scheduler-k8s-head 1/1 Running 4 32d\r\nkubernetes-dashboard pod/dashboard-metrics-scraper-6c554969c6-wmwpt 1/1\r\nRunning 0 18m kubernetes-dashboard\r\npod/kubernetes-dashboard-56c5f95c6b-s66g8 1/1 Running 0 18m</p>\r\n<p>NAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE default\r\nservice/kubernetes ClusterIP 10.96.0.1 <none> 443/TCP 32d kube-system\r\nservice/calico-typha ClusterIP 10.104.182.223 <none> 5473/TCP 32d\r\nkube-system service/kube-dns ClusterIP 10.96.0.10 <none>\r\n53/UDP,53/TCP,9153/TCP 32d kubernetes-dashboard\r\nservice/dashboard-metrics-scraper ClusterIP 10.99.243.131 <none>\r\n8000/TCP 18m kubernetes-dashboard service/kubernetes-dashboard NodePort\r\n10.96.23.239 <none> 443:30646/TCP 18m <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以看到暴露端口是**30646**，访问Master节点上的30646端口`https://192.168.205.10:30646`，需要填写的**token**和上面`kubectl proxy`遇到的问题一样，先创建**ServiceAccount**和**ClusterRoleBinding**，然后查看这个账号的token。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### API Server</span><br><span class=\"line\">首先，我们需要导出p12证书：</span><br></pre></td></tr></table></figure> # 生成\r\nclient-certificate-data grep 'client-certificate-data' ~/.kube/config |\r\nhead -n 1 | awk '{print $2}' | base64 -d &gt;&gt; kubecfg.crt</p>\r\n<h1 id=\"生成-client-key-data\">生成 client-key-data</h1>\r\n<p>grep 'client-key-data' ~/.kube/config | head -n 1 | awk '{print $2}'\r\n| base64 -d &gt;&gt; kubecfg.key</p>\r\n<h1 id=\"生成-p12\">生成 p12</h1>\r\n<p>openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt\r\n-out kubecfg.p12 -name \"kubernetes-client\" <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">然后，在在 chrome 导入了 p12 证书（点击“设置”，“管理证书”那里导入）。  </span><br><span class=\"line\">访问链接：`https://192.168.205.10:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy`，就可以看到**登录界面**了（注意：**新版的Dashboard，命名空间移动到了kubernetes-dashboard中**）  </span><br><span class=\"line\">![](https://s2.ax1x.com/2020/01/26/1mG9UJ.png)</span><br><span class=\"line\">**token**的填写跟上面`kubectl proxy`一样，当然你也可以直接用master节点中`$HOME/.kube/config`文件来登录。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## kubernetes常用命令</span><br></pre></td></tr></table></figure> ## 查看\r\nkubectl cluster-info ----查看集群信息 kubectl get pods --all-namespaces\r\n------查看所有pod信息 kubectl get cs\r\n----查看各组件（componentstatuses）信息，可以简写为rc kubectl get pods\r\n-n default ----列出default命名空间所有的pods kubectl get pods -o wide\r\n----查看pods所在的运行节点 kubectl get pods -o yaml\r\n----查看pods定义的详细信息 kubectl get rc ----查看Replication\r\nController信息 kubectl get service ----查看service的信息 kubectl get\r\nnodes ----查看节点信息 kubectl get pod --selector name=redis\r\n----按selector名来查找pod kubectl exec pod名字 env\r\n----查看运行的pod的环境变量 kubectl get pod,deploy,svc -n\r\nkubernetes-dashboard ---一起查看pod，service，deployment信息</p>\r\n<h2 id=\"创建\">创建</h2>\r\n<p>kubectl create -f 文件名 ----创建 kubectl replace -f 文件名 [--force]\r\n----重建</p>\r\n<h2 id=\"删除\">删除</h2>\r\n<p>kubectl delete -f 文件名 kubectl delete pod pod名 kubectl delete rc\r\nrc名 kubectl delete service service名 kubectl delete pod --all kubectl\r\nrun mybusybox --image=busybox ----启动一个pod kubectl run mybusybox\r\n--image=busybox --replicas=5 ----启动多个pod kubectl delete deployments\r\nmybusybox ----删除创建的pod kubectl get pods ----列出当前所有的pod\r\nkubectl describe pod [PODNAME] ----查看pod的状态 kubectl run mynginx\r\n--image=nginx --port=80 --hostport=8000 ----创建带有端口映射的pod\r\nkubectl run -i --tty busybox --image=busybox ----创建带有终端的pod\r\n```</p>\r\n<p>参考 * <a\r\nhref=\"https://github.com/ecomm-integration-ballerina/kubernetes-cluster\">Github——kubernetes-cluster-via-vagrant</a>\r\n* <a\r\nhref=\"https://www.australtech.net/kubernetes-unable-to-login-to-the-dashboard/\">Kubernetes\r\n– unable to login to the Dashboard</a> * <a\r\nhref=\"https://www.cnblogs.com/rainingnight/p/deploying-k8s-dashboard-ui.html#api-server\">kubernetes-dashboard(1.8.3)部署与踩坑</a></p>\r\n","site":{"data":{}},"excerpt":"<figure>\r\n<img\r\nsrc=\"https://image-static.segmentfault.com/311/703/311703680-5b80e2877f8c8_articlex\"\r\nalt=\"k8s logo\" />\r\n<figcaption aria-hidden=\"true\">k8s logo</figcaption>\r\n</figure>\r\n<p>Kubernetes，简称 <strong>k8s</strong>（k，8 个字符，s——明白了？）或者\r\n“kube”，是一个开源的 Linux\r\n容器自动化运维平台，它消除了容器化应用程序在部署、伸缩时涉及到的许多手动操作。换句话说，你可以将多台主机组合成集群来运行\r\nLinux 容器，而 Kubernetes\r\n可以帮助你简单高效地管理那些集群。构成这些集群的主机还可以跨越公有云、私有云以及混合云。</p>\r\n<p>本文环境： * OS：Ubuntu 18.04.3 LTS * Vagrant版本：2.2.6 *\r\nVirtualBox版本：6.0.14 r133895 (Qt5.9.5) * Kubernetes版本：1.16.3</p>","more":"<h2 id=\"安装vagrant\">安装Vagrant</h2>\r\n<p>Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源<strong>VirtualBox</strong>（其实也可以用别的）虚拟化系统，使用Chef创建自动化虚拟环境。\r\n首先到<a\r\nhref=\"https://www.vagrantup.com/downloads.html\">官网</a>下载最新的<code>Vagrant</code>，现在最新的版本是<strong>2.2.6</strong>，当然你也可以通过命令行下载：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://releases.hashicorp.com/vagrant/2.2.6/vagrant_2.2.6_x86_64.deb</span><br></pre></td></tr></table></figure> 验证<code>Vagrant</code>安装成功 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant --version</span><br><span class=\"line\">Vagrant 2.2.6</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"安装virtualbox\">安装VirtualBox</h2>\r\n<p>Vagrant是基于虚拟机（<code>VirtualBox</code>，<code>VMware</code>这些）的，所以我们还需要安装<code>VirtualBox</code>。在Vagrant官网可以它适配的<code>VirtualBox</code>版本\r\n&gt; Vagrant comes with support out of the box for VirtualBox, a free,\r\ncross-platform consumer virtualization product. &gt; The VirtualBox\r\nprovider is compatible with VirtualBox versions 4.0.x, 4.1.x, 4.2.x,\r\n4.3.x, 5.0.x, 5.1.x, 5.2.x, and 6.0.x.</p>\r\n<p>这里我下载6.0版本的<code>VirtualBox</code>，<a\r\nhref=\"https://www.virtualbox.org/wiki/Download_Old_Builds_6_0\">下载地址</a>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://download.virtualbox.org/virtualbox/6.0.14/virtualbox-6.0_6.0.14-133895~Ubuntu~bionic_amd64.deb</span><br></pre></td></tr></table></figure>\r\n<strong>注意：不要通过apt-get安装VirtualBox</strong>，因为5.1.0版本开始，VirtualBox已经不需要<strong>DKMS</strong>，apt官方源中VirtualBox比较老，是会带上<code>DKMS</code>的：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DKMS isn&#x27;t required by VirtualBox since 5.1.0. Which means that you downloaded VirtualBox from your Debian &quot;store&quot;. That&#x27;s a fork, not supported. You can either ask in their forums for help, or completely remove/uninstall/delete/purge their version and install the official version from the Downloads section of VirtualBox (https://www.virtualbox.org/wiki/Downloads).</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"启动虚拟机\">启动虚拟机</h2>\r\n<p><code>Vagrant</code>跟docker类似，可以提供一致性环境的，它可以编写<code>Vagrantfile</code>（类似<code>docker-compose.yml</code>）来定义虚拟机中安装什么软件，环境和配置，它使用ruby语法。<code>Vagrant</code>也做了<a\r\nhref=\"https://app.vagrantup.com/boxes/search\">box源</a>，类似docker\r\nimage。<br />\r\n下面给出一个小栗子感受下，这里使用<code>ubuntu/xenial64</code>（Ubuntu\r\n16.06 64位）这个box <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- mode: ruby -*-</span><br><span class=\"line\"># vi: set ft=ruby :</span><br><span class=\"line\"></span><br><span class=\"line\"># All Vagrant configuration is done below. The &quot;2&quot; in Vagrant.configure</span><br><span class=\"line\"># configures the configuration version (we support older styles for</span><br><span class=\"line\"># backwards compatibility). Please don&#x27;t change it unless you know what</span><br><span class=\"line\"># you&#x27;re doing.</span><br><span class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class=\"line\">  ##### DEFINE VM #####</span><br><span class=\"line\">  # The most common configuration options are documented and commented below.</span><br><span class=\"line\">  # For a complete reference, please see the online documentation at</span><br><span class=\"line\">  # https://docs.vagrantup.com.</span><br><span class=\"line\"></span><br><span class=\"line\">  # Every Vagrant development environment requires a box. You can search for</span><br><span class=\"line\">  # boxes at https://app.vagrantup.com/boxes/search.</span><br><span class=\"line\">  config.vm.box = &quot;ubuntu/xenial64&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  config.vm.hostname = &quot;ubuntu-01&quot;</span><br><span class=\"line\">  config.vm.box_check_update = false</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a private network, which allows host-only access to the machine</span><br><span class=\"line\">  # using a specific IP.</span><br><span class=\"line\">  config.vm.network &quot;private_network&quot;, ip: &quot;192.168.10.50&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a public network, which generally matched to bridged network.</span><br><span class=\"line\">  # Bridged networks make the machine appear as another physical device on</span><br><span class=\"line\">  # your network.</span><br><span class=\"line\">  # config.vm.network &quot;public_network&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # Share an additional folder to the guest VM. The first argument is</span><br><span class=\"line\">  # the path on the host to the actual folder. The second argument is</span><br><span class=\"line\">  # the path on the guest to mount the folder. And the optional third</span><br><span class=\"line\">  # argument is a set of non-required options.</span><br><span class=\"line\">  # config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  # Provider-specific configuration so you can fine-tune various</span><br><span class=\"line\">  # backing providers for Vagrant. These expose provider-specific options.</span><br><span class=\"line\">  # Example for VirtualBox:</span><br><span class=\"line\">  #</span><br><span class=\"line\">  # config.vm.provider &quot;virtualbox&quot; do |vb|</span><br><span class=\"line\">  #   # Display the VirtualBox GUI when booting the machine</span><br><span class=\"line\">  #   vb.gui = true</span><br><span class=\"line\">  #</span><br><span class=\"line\">  #   # Customize the amount of memory on the VM:</span><br><span class=\"line\">  #   vb.memory = &quot;1024&quot;</span><br><span class=\"line\">  # end</span><br><span class=\"line\">  #</span><br><span class=\"line\">  # View the documentation for the provider you are using for more</span><br><span class=\"line\">  # information on available options.</span><br><span class=\"line\">  </span><br><span class=\"line\">  config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class=\"line\">    v.name = &quot;ubuntu-for-fun&quot;</span><br><span class=\"line\">    v.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, &quot;2048&quot;]</span><br><span class=\"line\">    v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, &quot;2&quot;]</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  # Create a forwarded port mapping which allows access to a specific port</span><br><span class=\"line\">  # within the machine from a port on the host machine. In the example below,</span><br><span class=\"line\">  # accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span><br><span class=\"line\">  # config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure> 更多虚拟机的配置可以查看<a\r\nhref=\"https://www.vagrantup.com/docs/vagrantfile/machine_settings.html\">官方文档</a><br />\r\n在Vagrantfile对应的目录下终端键入：<code>vagrant up</code>，然后<code>Vagrant</code>会帮我们下载<code>ubuntu/xenial64</code>这个box，不过在中国下载速度非常慢，在运行<code>vagrant up</code>时我们可以看到这个box的下载url，你可以用<strong>迅雷</strong>这些工具直接下载，然后在本地手动添加box\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vagrant up</span><br><span class=\"line\">Bringing machine &#x27;default&#x27; up with &#x27;virtualbox&#x27; provider...</span><br><span class=\"line\">==&gt; default: Box &#x27;ubuntu/xenial64&#x27; could not be found. Attempting to find and install...</span><br><span class=\"line\">    default: Box Provider: virtualbox</span><br><span class=\"line\">    default: Box Version: &gt;= 0</span><br><span class=\"line\">==&gt; default: Loading metadata for box &#x27;ubuntu/xenial64&#x27;</span><br><span class=\"line\">    default: URL: https://vagrantcloud.com/ubuntu/xenial64</span><br><span class=\"line\">==&gt; default: Adding box &#x27;ubuntu/xenial64&#x27; (v20191217.0.0) for provider: virtualbox</span><br><span class=\"line\">    default: Downloading: https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box</span><br><span class=\"line\">==&gt; default: Box download is resuming from prior download progress</span><br><span class=\"line\">    default: Download redirected to host: cloud-images.ubuntu.com</span><br><span class=\"line\">    .........</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd ~/box-add</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">metadata.json  virtualbox.box</span><br><span class=\"line\">$ vagrant box add metadata.json</span><br><span class=\"line\">==&gt; box: Loading metadata for box &#x27;metadata.json&#x27;</span><br><span class=\"line\">    box: URL: file:///home/lucy/vm-add/metadata.json</span><br><span class=\"line\">==&gt; box: Adding box &#x27;ubuntu/xenial64&#x27; (v20191217.0.0) for provider: virtualbox</span><br><span class=\"line\">    box: Downloading: ./virtualbox.box</span><br><span class=\"line\">==&gt; box: Successfully added box &#x27;ubuntu/xenial64&#x27; (v20191217.0.0) for &#x27;virtualbox&#x27;!</span><br><span class=\"line\">$ vagrant box list</span><br><span class=\"line\">ubuntu/xenial64 (virtualbox, 20191217.0.0)</span><br></pre></td></tr></table></figure>\r\n下载box的URL是<code>https://vagrantcloud.com/ubuntu/boxes/xenial64/versions/20191217.0.0/providers/virtualbox.box</code>，可以看到下载的版本是<strong>20191217.0.0</strong>，另外注意一下这里添加box的是使用一个<code>metadata.json</code>文件，使用这样的方式可以定义box版本号，它的内容是：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">    &quot;versions&quot;: [&#123;</span><br><span class=\"line\">        &quot;version&quot;: &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        &quot;providers&quot;: [&#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;virtualbox&quot;,</span><br><span class=\"line\">            &quot;url&quot;: &quot;./virtualbox.box&quot;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>启动虚拟机你可能会遇到下面的错误：</p>\r\n<figure>\r\n<img src=\"/images/virtualbox-error.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>解决方法是在<strong>BIOS</strong>中将<strong>Intel Virtualization\r\nTechnology</strong>改为Enable。<br />\r\n启动虚拟机后，你可以通过<code>vagrant ssh</code>进入虚拟机。</p>\r\n<h2 id=\"启动kubernetes集群\">启动Kubernetes集群</h2>\r\n<p>这里我编写了一个<code>Vagrantfile</code>，一键启动集群：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- mode: ruby -*-</span><br><span class=\"line\"># vi: set ft=ruby :</span><br><span class=\"line\"></span><br><span class=\"line\">k8sVersion = &#x27;1.16.3&#x27;</span><br><span class=\"line\">servers = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-head&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;master&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.10&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-node-1&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;node&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.11&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        :name =&gt; &quot;k8s-node-2&quot;,</span><br><span class=\"line\">        :type =&gt; &quot;node&quot;,</span><br><span class=\"line\">        :box =&gt; &quot;ubuntu/xenial64&quot;,</span><br><span class=\"line\">        :box_version =&gt; &quot;20191217.0.0&quot;,</span><br><span class=\"line\">        :eth1 =&gt; &quot;192.168.205.12&quot;,</span><br><span class=\"line\">        :mem =&gt; &quot;2048&quot;,</span><br><span class=\"line\">        :cpu =&gt; &quot;2&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"># This script to install k8s using kubeadm will get executed after a box is provisioned</span><br><span class=\"line\">$configureBox = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">    # use Aliyun apt source</span><br><span class=\"line\">    cat &gt; /etc/apt/sources.list&lt;&lt;EOF</span><br><span class=\"line\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\"></span><br><span class=\"line\">    # install docker v17.03</span><br><span class=\"line\">    # reason for not using docker provision is that it always installs latest version of the docker, but kubeadm requires 17.03 or older</span><br><span class=\"line\">    apt-get update</span><br><span class=\"line\">    # step 1: 安装必要的一些系统工具</span><br><span class=\"line\">    apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class=\"line\">    # step 2: 安装GPG证书</span><br><span class=\"line\">    curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\">    add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/$(. /etc/os-release; echo &quot;$ID&quot;) $(lsb_release -cs) stable&quot;</span><br><span class=\"line\">    apt-get update &amp;&amp; apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk &#x27;&#123;print $3&#125;&#x27;)</span><br><span class=\"line\">    # run docker commands as vagrant user (sudo not required)</span><br><span class=\"line\">    usermod -aG docker vagrant</span><br><span class=\"line\">    # 修改docker配置</span><br><span class=\"line\">    sudo bash -c &#x27;cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">  &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF&#x27;</span><br><span class=\"line\">    sudo systemctl daemon-reload</span><br><span class=\"line\">    sudo systemctl restart docker</span><br><span class=\"line\"></span><br><span class=\"line\">    # install kubeadm</span><br><span class=\"line\">    apt-get install -y apt-transport-https curl</span><br><span class=\"line\">    curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -  # aliyun GPG</span><br><span class=\"line\">    cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class=\"line\">    deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\">    apt-get update</span><br><span class=\"line\">    apt-get install -y kubelet=#&#123;k8sVersion&#125;-00 kubeadm=#&#123;k8sVersion&#125;-00 kubectl=#&#123;k8sVersion&#125;-00</span><br><span class=\"line\">    apt-mark hold kubelet kubeadm kubectl</span><br><span class=\"line\">    # kubelet requires swap off</span><br><span class=\"line\">    swapoff -a</span><br><span class=\"line\">    # keep swap off after reboot</span><br><span class=\"line\">    sudo sed -i &#x27;/ swap / s/^\\(.*\\)$/#\\1/g&#x27; /etc/fstab</span><br><span class=\"line\">    # ip of this box</span><br><span class=\"line\">    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk &#x27;&#123;print $2&#125;&#x27;| cut -f2 -d:`</span><br><span class=\"line\">    # set node-ip</span><br><span class=\"line\">    sudo sh -c &#x27;echo KUBELET_EXTRA_ARGS= &gt;&gt; /etc/default/kubelet&#x27;</span><br><span class=\"line\">    sudo sed -i &quot;/^[^#]*KUBELET_EXTRA_ARGS=/c\\KUBELET_EXTRA_ARGS=--node-ip=$IP_ADDR&quot; /etc/default/kubelet</span><br><span class=\"line\">    sudo systemctl restart kubelet</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">$configureMaster = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\">    echo &quot;This is master&quot;</span><br><span class=\"line\">    # ip of this box</span><br><span class=\"line\">    IP_ADDR=`ifconfig enp0s8 | grep Mask | awk &#x27;&#123;print $2&#125;&#x27;| cut -f2 -d:`</span><br><span class=\"line\">    # install k8s master</span><br><span class=\"line\">    HOST_NAME=$(hostname -s)</span><br><span class=\"line\">    kubeadm init --image-repository registry.aliyuncs.com/google_containers  --kubernetes-version v#&#123;k8sVersion&#125; \\</span><br><span class=\"line\">    --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR  --node-name $HOST_NAME --pod-network-cidr=172.16.0.0/16</span><br><span class=\"line\">    #copying credentials to regular user - vagrant</span><br><span class=\"line\">    sudo --user=vagrant mkdir -p /home/vagrant/.kube</span><br><span class=\"line\">    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config</span><br><span class=\"line\">    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">    # install Calico pod network addon</span><br><span class=\"line\">    export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\">    wget https://docs.projectcalico.org/v3.10/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml</span><br><span class=\"line\">    # Pod的ip范围</span><br><span class=\"line\">    sed -i &#x27;s/192.168.0.0/172.16.0.0/g&#x27; calico.yaml</span><br><span class=\"line\">    kubectl apply -f calico.yaml</span><br><span class=\"line\">    kubeadm token create --print-join-command &gt;&gt; /etc/kubeadm_join_cmd.sh</span><br><span class=\"line\">    chmod +x /etc/kubeadm_join_cmd.sh</span><br><span class=\"line\">    # required for setting up password less ssh between guest VMs</span><br><span class=\"line\">    sudo sed -i &quot;/^[^#]*PasswordAuthentication[[:space:]]no/c\\PasswordAuthentication yes&quot; /etc/ssh/sshd_config</span><br><span class=\"line\">    sudo service sshd restart</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">$configureNode = &lt;&lt;-SCRIPT</span><br><span class=\"line\">    export DEBIAN_FRONTEND=noninteractive</span><br><span class=\"line\">    echo &quot;This is worker&quot;</span><br><span class=\"line\">    apt-get install -y sshpass</span><br><span class=\"line\">    sshpass -p &quot;vagrant&quot; scp -o StrictHostKeyChecking=no vagrant@192.168.205.10:/etc/kubeadm_join_cmd.sh .</span><br><span class=\"line\">    sh ./kubeadm_join_cmd.sh</span><br><span class=\"line\">SCRIPT</span><br><span class=\"line\"></span><br><span class=\"line\">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class=\"line\">    </span><br><span class=\"line\">    servers.each do |opts|</span><br><span class=\"line\">        config.vm.define opts[:name] do |config|</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.box = opts[:box]</span><br><span class=\"line\">            config.vm.box_version = opts[:box_version]</span><br><span class=\"line\">            config.vm.hostname = opts[:name]</span><br><span class=\"line\">            config.vm.network :private_network, ip: opts[:eth1]</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.provider &quot;virtualbox&quot; do |v|</span><br><span class=\"line\"></span><br><span class=\"line\">                v.name = opts[:name]</span><br><span class=\"line\">            \tv.customize [&quot;modifyvm&quot;, :id, &quot;--groups&quot;, &quot;/Salamander Development&quot;]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, opts[:mem]]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, opts[:cpu]]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--natdnshostresolver1&quot;, &quot;on&quot;]</span><br><span class=\"line\">                v.customize [&quot;modifyvm&quot;, :id, &quot;--natdnsproxy1&quot;, &quot;on&quot;]</span><br><span class=\"line\">            end</span><br><span class=\"line\"></span><br><span class=\"line\">            # we cannot use this because we can&#x27;t install the docker version we want - https://github.com/hashicorp/vagrant/issues/4871</span><br><span class=\"line\">            #config.vm.provision &quot;docker&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">            config.vm.provision &quot;shell&quot;, inline: $configureBox</span><br><span class=\"line\"></span><br><span class=\"line\">            if opts[:type] == &quot;master&quot;</span><br><span class=\"line\">                config.vm.provision &quot;shell&quot;, inline: $configureMaster</span><br><span class=\"line\">            else</span><br><span class=\"line\">                config.vm.provision &quot;shell&quot;, inline: $configureNode</span><br><span class=\"line\">            end</span><br><span class=\"line\"></span><br><span class=\"line\">        end</span><br><span class=\"line\"></span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\r\n启动集群<code>vagrant up</code>，这里需要耐心等待几分钟，因为要启动三个虚拟机、安装一些软件和设置环境。<br />\r\n启动集群后，进入<strong>Master节点</strong><code>vagrant ssh k8s-head</code>查看集群状态：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get nodes</span><br><span class=\"line\">NAME         STATUS   ROLES    AGE    VERSION</span><br><span class=\"line\">k8s-head     Ready    master   5h7m   v1.15.7</span><br><span class=\"line\">k8s-node-1   Ready    &lt;none&gt;   5h5m   v1.15.7</span><br><span class=\"line\">k8s-node-2   Ready    &lt;none&gt;   5h2m   v1.15.7</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get pods --all-namespaces</span><br><span class=\"line\">NAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">kube-system            calico-node-j5kw8                            2/2     Running   4          5h7m</span><br><span class=\"line\">kube-system            calico-node-kq89s                            2/2     Running   0          5h6m</span><br><span class=\"line\">kube-system            calico-node-twvdl                            2/2     Running   0          5h2m</span><br><span class=\"line\">kube-system            coredns-94d74667-jhjl8                       1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            coredns-94d74667-qd9qv                       1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            etcd-k8s-head                                1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-apiserver-k8s-head                      1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-controller-manager-k8s-head             1/1     Running   2          5h6m</span><br><span class=\"line\">kube-system            kube-proxy-7d8wj                             1/1     Running   0          5h2m</span><br><span class=\"line\">kube-system            kube-proxy-hn89g                             1/1     Running   0          5h6m</span><br><span class=\"line\">kube-system            kube-proxy-t8qf9                             1/1     Running   2          5h7m</span><br><span class=\"line\">kube-system            kube-scheduler-k8s-head                      1/1     Running   2          5h6m</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl cluster-info</span><br><span class=\"line\">Kubernetes master is running at https://192.168.205.10:6443</span><br><span class=\"line\">KubeDNS is running at https://192.168.205.10:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class=\"line\"></span><br><span class=\"line\">$ kubectl get componentstatuses</span><br><span class=\"line\">NAME                 STATUS    MESSAGE             ERROR</span><br><span class=\"line\">scheduler            Healthy   ok                  </span><br><span class=\"line\">controller-manager   Healthy   ok                  </span><br><span class=\"line\">etcd-0               Healthy   &#123;&quot;health&quot;:&quot;true&quot;&#125;</span><br></pre></td></tr></table></figure>\r\n节点都是<strong>Ready</strong>和pods都是<strong>Running</strong>说明集群成功启动了，<code>kubectl cluster-info</code>可以查看集群信息，<code>kubectl get componentstatuses</code>可以查看各组件信息。</p>\r\n<h2 id=\"安装官方dashboard\">安装官方Dashboard</h2>\r\n<p><a\r\nhref=\"https://github.com/kubernetes/dashboard\">Dashboard</a>是Kubernetes的一个插件，代码单独放在Github的一个仓库里。<br />\r\n按照<a\r\nhref=\"https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/\">官方文档</a>，步骤也蛮简单的，首先执行命令：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure></p>\r\n<p>查看一下Dashboard的服务： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ kubectl  get pod,deploy,svc -n kubernetes-dashboard</span><br><span class=\"line\">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">pod/dashboard-metrics-scraper-6c554969c6-jqhjx   1/1     Running   0          5h5m</span><br><span class=\"line\">pod/kubernetes-dashboard-56c5f95c6b-jrj58        1/1     Running   5          5h5m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">deployment.extensions/dashboard-metrics-scraper   1/1     1            1           5h5m</span><br><span class=\"line\">deployment.extensions/kubernetes-dashboard        1/1     1            1           5h5m</span><br><span class=\"line\"></span><br><span class=\"line\">NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class=\"line\">service/dashboard-metrics-scraper   ClusterIP   10.106.117.224   &lt;none&gt;        8000/TCP   5h5m</span><br><span class=\"line\">service/kubernetes-dashboard        ClusterIP   10.98.23.78      &lt;none&gt;        443/TCP    5h5m</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 我们可以看到官方的dashboard帮我们启动了web-ui，并且帮我们启动了一个Metric服务</span><br><span class=\"line\"># 但是dashboard默认使用的https的443端口</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试下Dashboard是否正常</span><br><span class=\"line\">$ curl https://10.98.23.78:443 -k -I</span><br><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Cache-Control: no-store</span><br><span class=\"line\">Content-Length: 1262</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br><span class=\"line\">Last-Modified: Fri, 06 Dec 2019 15:14:02 GMT</span><br><span class=\"line\">Date: Tue, 31 Dec 2019 06:35:55 GMT</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"访问dashboard\">访问Dashboard</h3>\r\n<p>访问Dashboard有好几种方式 * 将kubernetes-dashboard Service暴露\r\nNodePort，使用 http://NodeIP:nodePort 地址访问 dashboard *\r\n使用Ingress之类的入口服务进行代理访问 * 通过 API server 访问\r\ndashboard（https 6443端口和http 8080端口方式） * 通过 kubectl proxy 访问\r\ndashboard</p>\r\n<h4 id=\"kubectl-proxy\">kubectl proxy</h4>\r\n<p>首先这里我们通过<code>kubectl proxy</code>，在<strong>k8s-head</strong>节点执行：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl proxy --address=&#x27;0.0.0.0&#x27; --accept-hosts=&#x27;^*$&#x27;</span><br></pre></td></tr></table></figure>\r\n在访问之前，我们需要先创建一个<strong>User</strong>（一个<strong>ServiceAccount</strong>，k8s内概念），创建dashboard-adminuser.yaml文件，写入\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: ServiceAccount</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class=\"line\">kind: ClusterRoleBinding</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">roleRef:</span><br><span class=\"line\">  apiGroup: rbac.authorization.k8s.io</span><br><span class=\"line\">  kind: ClusterRole</span><br><span class=\"line\">  name: cluster-admin</span><br><span class=\"line\">subjects:</span><br><span class=\"line\">- kind: ServiceAccount</span><br><span class=\"line\">  name: admin-user</span><br><span class=\"line\">  namespace: kubernetes-dashboard</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n执行<code>kubectl apply -f dashboard-adminuser.yaml</code>。<br />\r\n查看用户token（之后在浏览器中输入） <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class=\"line\">Name:         admin-user-token-mxmtr</span><br><span class=\"line\">Namespace:    kubernetes-dashboard</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class=\"line\">              kubernetes.io/service-account.uid: 54ddc041-f3af-41fa-a824-6a3e29f0ffa3</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1025 bytes</span><br><span class=\"line\">namespace:  20 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLW14bXRyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI1NGRkYzA0MS1mM2FmLTQxZmEtYTgyNC02YTNlMjlmMGZmYTMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.osyqbUwS4pLDEhZ0iL0aAu2f5me82bGTEfXEW8ycS5-JRar4iYcWkqhJZ9FhZV47P0WKLT9UWiLcDw1rVPZbMSHrRnFZcRHmLO35tVBaijjvgsgm2X5856G-HS1VNMgQBSZXiQXr1Lt3Dj9JHHksbiLGg-3wRy7HqD-I8JcR1pHZ_ViOqQ1j6WIbvhfEE3FpTuuSPAcjwVNutXAfur6oJktjYAcwMjWTQ4-yMQ2NRSWM7AcJtjp_7p3WwnHmO6fH6LtrGQzmXwHh5ICmei2LrAE2cxwN251aMVnrPGt00Ff4ij2-yLyI4VZOgAsNuPegctm-GuCOTGNX9Ew-o1si_Q</span><br></pre></td></tr></table></figure></p>\r\n<p>为了在宿主机上能访问，我们需要用VirutalBox管理界面添加一个端口映射：</p>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/12/31/l1FsQP.png\"\r\nalt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>好了，现在我们可以访问Dashboard了，浏览内输入<code>http://localhost:31694/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.</code>，可以看到\r\n<img src=\"/images/k8s-dashboard.png\" /></p>\r\n<h4 id=\"nodeport\">NodePort</h4>\r\n<p>这个过程比<code>kubectl proxy</code>简单，再安装Dashboard之前，把<code>Service</code>类型改成<code>NodePort</code>即可：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml  #下载yaml</span><br><span class=\"line\">$ vim recommended.yaml</span><br></pre></td></tr></table></figure> 找到Service部分，改成NodePort ```` kind: Service\r\napiVersion: v1 metadata: labels: k8s-app: kubernetes-dashboard name:\r\nkubernetes-dashboard namespace: kubernetes-dashboard spec: type:\r\nNodePort # 这个是新增部分 ports: - port: 443 targetPort: 8443 selector:\r\nk8s-app: kubernetes-dashboard <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看，Service的随机端口：</span><br></pre></td></tr></table></figure> $ kubectl get pods,svc\r\n--all-namespaces</p>\r\n<p>NAMESPACE NAME READY STATUS RESTARTS AGE kube-system\r\npod/calico-node-ffn9k 2/2 Running 10 32d kube-system\r\npod/calico-node-fz8v6 2/2 Running 12 32d kube-system\r\npod/calico-node-gvjft 2/2 Running 8 32d kube-system\r\npod/coredns-94d74667-8jp5k 1/1 Running 4 32d kube-system\r\npod/coredns-94d74667-tlph7 1/1 Running 4 32d kube-system\r\npod/etcd-k8s-head 1/1 Running 4 32d kube-system\r\npod/kube-apiserver-k8s-head 1/1 Running 4 32d kube-system\r\npod/kube-controller-manager-k8s-head 1/1 Running 4 32d kube-system\r\npod/kube-proxy-4rsp4 1/1 Running 5 32d kube-system pod/kube-proxy-dccdc\r\n1/1 Running 5 32d kube-system pod/kube-proxy-x82tl 1/1 Running 4 32d\r\nkube-system pod/kube-scheduler-k8s-head 1/1 Running 4 32d\r\nkubernetes-dashboard pod/dashboard-metrics-scraper-6c554969c6-wmwpt 1/1\r\nRunning 0 18m kubernetes-dashboard\r\npod/kubernetes-dashboard-56c5f95c6b-s66g8 1/1 Running 0 18m</p>\r\n<p>NAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE default\r\nservice/kubernetes ClusterIP 10.96.0.1 <none> 443/TCP 32d kube-system\r\nservice/calico-typha ClusterIP 10.104.182.223 <none> 5473/TCP 32d\r\nkube-system service/kube-dns ClusterIP 10.96.0.10 <none>\r\n53/UDP,53/TCP,9153/TCP 32d kubernetes-dashboard\r\nservice/dashboard-metrics-scraper ClusterIP 10.99.243.131 <none>\r\n8000/TCP 18m kubernetes-dashboard service/kubernetes-dashboard NodePort\r\n10.96.23.239 <none> 443:30646/TCP 18m <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以看到暴露端口是**30646**，访问Master节点上的30646端口`https://192.168.205.10:30646`，需要填写的**token**和上面`kubectl proxy`遇到的问题一样，先创建**ServiceAccount**和**ClusterRoleBinding**，然后查看这个账号的token。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### API Server</span><br><span class=\"line\">首先，我们需要导出p12证书：</span><br></pre></td></tr></table></figure> # 生成\r\nclient-certificate-data grep 'client-certificate-data' ~/.kube/config |\r\nhead -n 1 | awk '{print $2}' | base64 -d &gt;&gt; kubecfg.crt</p>\r\n<h1 id=\"生成-client-key-data\">生成 client-key-data</h1>\r\n<p>grep 'client-key-data' ~/.kube/config | head -n 1 | awk '{print $2}'\r\n| base64 -d &gt;&gt; kubecfg.key</p>\r\n<h1 id=\"生成-p12\">生成 p12</h1>\r\n<p>openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt\r\n-out kubecfg.p12 -name \"kubernetes-client\" <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">然后，在在 chrome 导入了 p12 证书（点击“设置”，“管理证书”那里导入）。  </span><br><span class=\"line\">访问链接：`https://192.168.205.10:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy`，就可以看到**登录界面**了（注意：**新版的Dashboard，命名空间移动到了kubernetes-dashboard中**）  </span><br><span class=\"line\">![](https://s2.ax1x.com/2020/01/26/1mG9UJ.png)</span><br><span class=\"line\">**token**的填写跟上面`kubectl proxy`一样，当然你也可以直接用master节点中`$HOME/.kube/config`文件来登录。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## kubernetes常用命令</span><br></pre></td></tr></table></figure> ## 查看\r\nkubectl cluster-info ----查看集群信息 kubectl get pods --all-namespaces\r\n------查看所有pod信息 kubectl get cs\r\n----查看各组件（componentstatuses）信息，可以简写为rc kubectl get pods\r\n-n default ----列出default命名空间所有的pods kubectl get pods -o wide\r\n----查看pods所在的运行节点 kubectl get pods -o yaml\r\n----查看pods定义的详细信息 kubectl get rc ----查看Replication\r\nController信息 kubectl get service ----查看service的信息 kubectl get\r\nnodes ----查看节点信息 kubectl get pod --selector name=redis\r\n----按selector名来查找pod kubectl exec pod名字 env\r\n----查看运行的pod的环境变量 kubectl get pod,deploy,svc -n\r\nkubernetes-dashboard ---一起查看pod，service，deployment信息</p>\r\n<h2 id=\"创建\">创建</h2>\r\n<p>kubectl create -f 文件名 ----创建 kubectl replace -f 文件名 [--force]\r\n----重建</p>\r\n<h2 id=\"删除\">删除</h2>\r\n<p>kubectl delete -f 文件名 kubectl delete pod pod名 kubectl delete rc\r\nrc名 kubectl delete service service名 kubectl delete pod --all kubectl\r\nrun mybusybox --image=busybox ----启动一个pod kubectl run mybusybox\r\n--image=busybox --replicas=5 ----启动多个pod kubectl delete deployments\r\nmybusybox ----删除创建的pod kubectl get pods ----列出当前所有的pod\r\nkubectl describe pod [PODNAME] ----查看pod的状态 kubectl run mynginx\r\n--image=nginx --port=80 --hostport=8000 ----创建带有端口映射的pod\r\nkubectl run -i --tty busybox --image=busybox ----创建带有终端的pod\r\n```</p>\r\n<p>参考 * <a\r\nhref=\"https://github.com/ecomm-integration-ballerina/kubernetes-cluster\">Github——kubernetes-cluster-via-vagrant</a>\r\n* <a\r\nhref=\"https://www.australtech.net/kubernetes-unable-to-login-to-the-dashboard/\">Kubernetes\r\n– unable to login to the Dashboard</a> * <a\r\nhref=\"https://www.cnblogs.com/rainingnight/p/deploying-k8s-dashboard-ui.html#api-server\">kubernetes-dashboard(1.8.3)部署与踩坑</a></p>"},{"title":"x86汇编","author":"pigLoveRabbit","date":"2022-04-08T13:09:38.000Z","_content":"## x86汇编\n8086的指令在32/64位的x86 CPU上都是能用的，所以汇编代码是类似的，80836之后的CPU **保护模式**下段寄存器就不重要了，平常用的多的就是那8个通用寄存器（为啥用不到CS, DS, ES等寄存器了，请看[这里](https://en.wikipedia.org/wiki/X86_memory_segmentation)）：   \n\n| 通用寄存器  | 含义 | 低8位 | 功能 |\n| --- | --- | --- | --- |\n| EAX     | 累加(Accumulator)寄存器                                                                                       | AX(AH、AL)                     | 常用于乘、除法和函数返回值                                                     |\n| EBX     | 基址(Base)寄存器                                                                                              | BX(BH、BL)                     | 常做内存数据的指针, 或者说常以它为基址来访问内存.                                        |\n| ECX     | 计数器(Counter)寄存器                                                                                          | CX(CH、CL)                     | 常做字符串和循环操作中的计数器                                                   |\n| EDX     | 数据(Data)寄存器                                                                                              | DX(DH、DL)                     | 常用于乘、除法和 I/O 指针                                                   |\n| ESI     | 来源索引(Source Index)寄存器                                                                                    | SI                            | 常做内存数据指针和源字符串指针                                                   |\n| EDI     | 目的索引(Destination Index)寄存器                                                                               | DI                            | 常做内存数据指针和目的字符串指针                                                  |\n| ESP     | 堆栈指针(Stack Point)寄存器                                                                                     | SP                            | 只做堆栈的栈顶指针; 不能用于算术运算与数据传送                                          |\n| EBP     | 基址指针(Base Point)寄存器                                                                                      | BP                            | 只做堆栈指针, 可以访问堆栈内任意地址, 经常用于中转 ESP 中的数据, 也常以它为基址来访问堆栈; 不能用于算术运算与数据传送 |\n\n\n64位CPU兼容32位的程序，所有下面的程序都是32位的，汇编器用的是[NASM](https://www.nasm.us/)。\n\n\n<!-- more -->\n\n\n\n## 调用MessageBox\n```Assembly\n; Message Box, 32 bit. V1.01\nNULL          EQU 0                             ; Constants\nMB_DEFBUTTON1 EQU 0\nMB_DEFBUTTON2 EQU 100h\nIDNO          EQU 7\nMB_YESNO      EQU 4\n\nextern _MessageBoxA@16                          ; Import external symbols，在“@”之后的数字表示了该函数所有参数的尺寸（字节为单位）\nextern _ExitProcess@4                           ; Windows API functions, decorated\n\nglobal Start                                    ; Export symbols. The entry point\n\nsection .data                                   ; Initialized data segment\n MessageBoxText    db \"Do you want to exit?\", 0\n MessageBoxCaption db \"MessageBox 32\", 0\n\nsection .text                                   ; Code segment\nStart:\n push  MB_YESNO | MB_DEFBUTTON2                 ; 4th parameter. 2 constants ORed together\n push  MessageBoxCaption                        ; 3rd parameter\n push  MessageBoxText                           ; 2nd parameter\n push  NULL                                     ; 1st parameter\n call  _MessageBoxA@16\n\n cmp   EAX, IDNO                                ; Check the return value for \"No\"\n je    Start\n\n push  NULL\n call  _ExitProcess@4\n\n```\n用nasm编译`nasm -f win32 fun.asm -o fun.obj`  \n用golink链接`golink /entry:Start kernel32.dll user32.dll fun.obj`\n\n\n\n\n\n参考：\n* [nasm-messagebox32](https://www.davidgrantham.com/nasm-messagebox32/)","source":"_posts/Win32_assembly.md","raw":"title: x86汇编\nauthor: pigLoveRabbit\ndate: 2022-04-08 21:09:38\ntags:\n---\n## x86汇编\n8086的指令在32/64位的x86 CPU上都是能用的，所以汇编代码是类似的，80836之后的CPU **保护模式**下段寄存器就不重要了，平常用的多的就是那8个通用寄存器（为啥用不到CS, DS, ES等寄存器了，请看[这里](https://en.wikipedia.org/wiki/X86_memory_segmentation)）：   \n\n| 通用寄存器  | 含义 | 低8位 | 功能 |\n| --- | --- | --- | --- |\n| EAX     | 累加(Accumulator)寄存器                                                                                       | AX(AH、AL)                     | 常用于乘、除法和函数返回值                                                     |\n| EBX     | 基址(Base)寄存器                                                                                              | BX(BH、BL)                     | 常做内存数据的指针, 或者说常以它为基址来访问内存.                                        |\n| ECX     | 计数器(Counter)寄存器                                                                                          | CX(CH、CL)                     | 常做字符串和循环操作中的计数器                                                   |\n| EDX     | 数据(Data)寄存器                                                                                              | DX(DH、DL)                     | 常用于乘、除法和 I/O 指针                                                   |\n| ESI     | 来源索引(Source Index)寄存器                                                                                    | SI                            | 常做内存数据指针和源字符串指针                                                   |\n| EDI     | 目的索引(Destination Index)寄存器                                                                               | DI                            | 常做内存数据指针和目的字符串指针                                                  |\n| ESP     | 堆栈指针(Stack Point)寄存器                                                                                     | SP                            | 只做堆栈的栈顶指针; 不能用于算术运算与数据传送                                          |\n| EBP     | 基址指针(Base Point)寄存器                                                                                      | BP                            | 只做堆栈指针, 可以访问堆栈内任意地址, 经常用于中转 ESP 中的数据, 也常以它为基址来访问堆栈; 不能用于算术运算与数据传送 |\n\n\n64位CPU兼容32位的程序，所有下面的程序都是32位的，汇编器用的是[NASM](https://www.nasm.us/)。\n\n\n<!-- more -->\n\n\n\n## 调用MessageBox\n```Assembly\n; Message Box, 32 bit. V1.01\nNULL          EQU 0                             ; Constants\nMB_DEFBUTTON1 EQU 0\nMB_DEFBUTTON2 EQU 100h\nIDNO          EQU 7\nMB_YESNO      EQU 4\n\nextern _MessageBoxA@16                          ; Import external symbols，在“@”之后的数字表示了该函数所有参数的尺寸（字节为单位）\nextern _ExitProcess@4                           ; Windows API functions, decorated\n\nglobal Start                                    ; Export symbols. The entry point\n\nsection .data                                   ; Initialized data segment\n MessageBoxText    db \"Do you want to exit?\", 0\n MessageBoxCaption db \"MessageBox 32\", 0\n\nsection .text                                   ; Code segment\nStart:\n push  MB_YESNO | MB_DEFBUTTON2                 ; 4th parameter. 2 constants ORed together\n push  MessageBoxCaption                        ; 3rd parameter\n push  MessageBoxText                           ; 2nd parameter\n push  NULL                                     ; 1st parameter\n call  _MessageBoxA@16\n\n cmp   EAX, IDNO                                ; Check the return value for \"No\"\n je    Start\n\n push  NULL\n call  _ExitProcess@4\n\n```\n用nasm编译`nasm -f win32 fun.asm -o fun.obj`  \n用golink链接`golink /entry:Start kernel32.dll user32.dll fun.obj`\n\n\n\n\n\n参考：\n* [nasm-messagebox32](https://www.davidgrantham.com/nasm-messagebox32/)","slug":"Win32_assembly","published":1,"updated":"2023-03-21T02:48:19.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40l9001y2o3m72zqh4ay","content":"<h2 id=\"x86汇编\">x86汇编</h2>\r\n<p>8086的指令在32/64位的x86\r\nCPU上都是能用的，所以汇编代码是类似的，80836之后的CPU\r\n<strong>保护模式</strong>下段寄存器就不重要了，平常用的多的就是那8个通用寄存器（为啥用不到CS,\r\nDS, ES等寄存器了，请看<a\r\nhref=\"https://en.wikipedia.org/wiki/X86_memory_segmentation\">这里</a>）：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>通用寄存器</th>\r\n<th>含义</th>\r\n<th>低8位</th>\r\n<th>功能</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>EAX</td>\r\n<td>累加(Accumulator)寄存器</td>\r\n<td>AX(AH、AL)</td>\r\n<td>常用于乘、除法和函数返回值</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>EBX</td>\r\n<td>基址(Base)寄存器</td>\r\n<td>BX(BH、BL)</td>\r\n<td>常做内存数据的指针, 或者说常以它为基址来访问内存.</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>ECX</td>\r\n<td>计数器(Counter)寄存器</td>\r\n<td>CX(CH、CL)</td>\r\n<td>常做字符串和循环操作中的计数器</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>EDX</td>\r\n<td>数据(Data)寄存器</td>\r\n<td>DX(DH、DL)</td>\r\n<td>常用于乘、除法和 I/O 指针</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>ESI</td>\r\n<td>来源索引(Source Index)寄存器</td>\r\n<td>SI</td>\r\n<td>常做内存数据指针和源字符串指针</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>EDI</td>\r\n<td>目的索引(Destination Index)寄存器</td>\r\n<td>DI</td>\r\n<td>常做内存数据指针和目的字符串指针</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>ESP</td>\r\n<td>堆栈指针(Stack Point)寄存器</td>\r\n<td>SP</td>\r\n<td>只做堆栈的栈顶指针; 不能用于算术运算与数据传送</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>EBP</td>\r\n<td>基址指针(Base Point)寄存器</td>\r\n<td>BP</td>\r\n<td>只做堆栈指针, 可以访问堆栈内任意地址, 经常用于中转 ESP 中的数据,\r\n也常以它为基址来访问堆栈; 不能用于算术运算与数据传送</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>64位CPU兼容32位的程序，所有下面的程序都是32位的，汇编器用的是<a\r\nhref=\"https://www.nasm.us/\">NASM</a>。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"调用messagebox\">调用MessageBox</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; Message Box, 32 bit. V1.01</span><br><span class=\"line\">NULL          EQU 0                             ; Constants</span><br><span class=\"line\">MB_DEFBUTTON1 EQU 0</span><br><span class=\"line\">MB_DEFBUTTON2 EQU 100h</span><br><span class=\"line\">IDNO          EQU 7</span><br><span class=\"line\">MB_YESNO      EQU 4</span><br><span class=\"line\"></span><br><span class=\"line\">extern _MessageBoxA@16                          ; Import external symbols，在“@”之后的数字表示了该函数所有参数的尺寸（字节为单位）</span><br><span class=\"line\">extern _ExitProcess@4                           ; Windows API functions, decorated</span><br><span class=\"line\"></span><br><span class=\"line\">global Start                                    ; Export symbols. The entry point</span><br><span class=\"line\"></span><br><span class=\"line\">section .data                                   ; Initialized data segment</span><br><span class=\"line\"> MessageBoxText    db &quot;Do you want to exit?&quot;, 0</span><br><span class=\"line\"> MessageBoxCaption db &quot;MessageBox 32&quot;, 0</span><br><span class=\"line\"></span><br><span class=\"line\">section .text                                   ; Code segment</span><br><span class=\"line\">Start:</span><br><span class=\"line\"> push  MB_YESNO | MB_DEFBUTTON2                 ; 4th parameter. 2 constants ORed together</span><br><span class=\"line\"> push  MessageBoxCaption                        ; 3rd parameter</span><br><span class=\"line\"> push  MessageBoxText                           ; 2nd parameter</span><br><span class=\"line\"> push  NULL                                     ; 1st parameter</span><br><span class=\"line\"> call  _MessageBoxA@16</span><br><span class=\"line\"></span><br><span class=\"line\"> cmp   EAX, IDNO                                ; Check the return value for &quot;No&quot;</span><br><span class=\"line\"> je    Start</span><br><span class=\"line\"></span><br><span class=\"line\"> push  NULL</span><br><span class=\"line\"> call  _ExitProcess@4</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>用nasm编译<code>nasm -f win32 fun.asm -o fun.obj</code><br />\r\n用golink链接<code>golink /entry:Start kernel32.dll user32.dll fun.obj</code></p>\r\n<p>参考： * <a\r\nhref=\"https://www.davidgrantham.com/nasm-messagebox32/\">nasm-messagebox32</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"x86汇编\">x86汇编</h2>\r\n<p>8086的指令在32/64位的x86\r\nCPU上都是能用的，所以汇编代码是类似的，80836之后的CPU\r\n<strong>保护模式</strong>下段寄存器就不重要了，平常用的多的就是那8个通用寄存器（为啥用不到CS,\r\nDS, ES等寄存器了，请看<a\r\nhref=\"https://en.wikipedia.org/wiki/X86_memory_segmentation\">这里</a>）：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 25%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>通用寄存器</th>\r\n<th>含义</th>\r\n<th>低8位</th>\r\n<th>功能</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>EAX</td>\r\n<td>累加(Accumulator)寄存器</td>\r\n<td>AX(AH、AL)</td>\r\n<td>常用于乘、除法和函数返回值</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>EBX</td>\r\n<td>基址(Base)寄存器</td>\r\n<td>BX(BH、BL)</td>\r\n<td>常做内存数据的指针, 或者说常以它为基址来访问内存.</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>ECX</td>\r\n<td>计数器(Counter)寄存器</td>\r\n<td>CX(CH、CL)</td>\r\n<td>常做字符串和循环操作中的计数器</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>EDX</td>\r\n<td>数据(Data)寄存器</td>\r\n<td>DX(DH、DL)</td>\r\n<td>常用于乘、除法和 I/O 指针</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>ESI</td>\r\n<td>来源索引(Source Index)寄存器</td>\r\n<td>SI</td>\r\n<td>常做内存数据指针和源字符串指针</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>EDI</td>\r\n<td>目的索引(Destination Index)寄存器</td>\r\n<td>DI</td>\r\n<td>常做内存数据指针和目的字符串指针</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>ESP</td>\r\n<td>堆栈指针(Stack Point)寄存器</td>\r\n<td>SP</td>\r\n<td>只做堆栈的栈顶指针; 不能用于算术运算与数据传送</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>EBP</td>\r\n<td>基址指针(Base Point)寄存器</td>\r\n<td>BP</td>\r\n<td>只做堆栈指针, 可以访问堆栈内任意地址, 经常用于中转 ESP 中的数据,\r\n也常以它为基址来访问堆栈; 不能用于算术运算与数据传送</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>64位CPU兼容32位的程序，所有下面的程序都是32位的，汇编器用的是<a\r\nhref=\"https://www.nasm.us/\">NASM</a>。</p>","more":"<h2 id=\"调用messagebox\">调用MessageBox</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; Message Box, 32 bit. V1.01</span><br><span class=\"line\">NULL          EQU 0                             ; Constants</span><br><span class=\"line\">MB_DEFBUTTON1 EQU 0</span><br><span class=\"line\">MB_DEFBUTTON2 EQU 100h</span><br><span class=\"line\">IDNO          EQU 7</span><br><span class=\"line\">MB_YESNO      EQU 4</span><br><span class=\"line\"></span><br><span class=\"line\">extern _MessageBoxA@16                          ; Import external symbols，在“@”之后的数字表示了该函数所有参数的尺寸（字节为单位）</span><br><span class=\"line\">extern _ExitProcess@4                           ; Windows API functions, decorated</span><br><span class=\"line\"></span><br><span class=\"line\">global Start                                    ; Export symbols. The entry point</span><br><span class=\"line\"></span><br><span class=\"line\">section .data                                   ; Initialized data segment</span><br><span class=\"line\"> MessageBoxText    db &quot;Do you want to exit?&quot;, 0</span><br><span class=\"line\"> MessageBoxCaption db &quot;MessageBox 32&quot;, 0</span><br><span class=\"line\"></span><br><span class=\"line\">section .text                                   ; Code segment</span><br><span class=\"line\">Start:</span><br><span class=\"line\"> push  MB_YESNO | MB_DEFBUTTON2                 ; 4th parameter. 2 constants ORed together</span><br><span class=\"line\"> push  MessageBoxCaption                        ; 3rd parameter</span><br><span class=\"line\"> push  MessageBoxText                           ; 2nd parameter</span><br><span class=\"line\"> push  NULL                                     ; 1st parameter</span><br><span class=\"line\"> call  _MessageBoxA@16</span><br><span class=\"line\"></span><br><span class=\"line\"> cmp   EAX, IDNO                                ; Check the return value for &quot;No&quot;</span><br><span class=\"line\"> je    Start</span><br><span class=\"line\"></span><br><span class=\"line\"> push  NULL</span><br><span class=\"line\"> call  _ExitProcess@4</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>用nasm编译<code>nasm -f win32 fun.asm -o fun.obj</code><br />\r\n用golink链接<code>golink /entry:Start kernel32.dll user32.dll fun.obj</code></p>\r\n<p>参考： * <a\r\nhref=\"https://www.davidgrantham.com/nasm-messagebox32/\">nasm-messagebox32</a></p>"},{"title":"Arduino使用DHT11测量温湿度","author":"Salamander","date":"2019-08-30T02:37:00.000Z","_content":"## 概览\n这篇文章很简单（就是一点电工知识），就是利用[DHT11](https://baike.baidu.com/item/DHT11/1206271)温湿度传感器测量温湿度值，并把结果显示在[LCD1602](https://baike.baidu.com/item/LCD1602/6014393)显示器上。\n\n<!-- more -->\n\n## 实验元器件列表\n| 元器件    | 型号          | 数量 | 备注 |\n|--------|-------------|----|----|\n| 主控板    | arduino Uno   | 1     |    |\n| 温湿度传感器 | DHT11      | 1   |     |\n| 液晶屏    | 1602 LCD      | 1     |    |\n| 电阻     | 1K电阻         | 4   |    |\n| 面包板    |               | 1     |    |\n| 面包板条线    |               | 若个   |    |\n| 数据线    | Uno数据线      | 1   |    |\n\n## 工具和元器件介绍\n### DHT11温湿度传感器\n![](https://s2.ax1x.com/2019/08/29/mLoDuF.png)\nDHT11 传感器接线方法并不复杂，DHT11封装有4个引脚，各个引脚说明如下：\n\n| Pin | 名称   | 注释             |\n|-----|------|----------------|\n| 1   | VDD  | 供电 3\\-5\\.5 VDC |\n| 2   | DATA | 串行数据，单总线       |\n| 3   | NC   | 空脚             |\n| 4   | GND  | 接地，电源负极        |\n\n### LCD1602\n![1602图片](https://s2.ax1x.com/2019/09/04/nE8k7R.jpg)\n\n1602字符型液晶，是一种专门用来显示字母、数字、符号等的点阵型液晶模块，能够同时显示16x02即32个字符。\n\nLCD1602分为两种：带背光和不带背光，带背光的要后一些，引脚多2个，为16个引脚，如下：\n\n![](https://s2.ax1x.com/2019/08/29/mLTcqg.png)\n\n##### 引脚说明\nLCD1602 通常有14条引脚或16条引脚，14与16引脚的差别在于16条引脚多了背光电源线VCC(15脚)和地线GND(16脚)，其它引脚与14脚的LCD完全一样，如下：\n\n| 引脚 | 符号  | 功能说明                                                                   |\n|----|-----|------------------------------------------------------------------------|\n| 1  | VSS | 一般接地                                                                   |\n| 2  | VDD | 接电源（\\+5V）                                                              |\n| 3  | V0  | 液晶显示器对比度调整端，接正电源时对比度最弱，接地电源时对比度最高（对比度过高时会产生“鬼影”，使用时可以通过一个10K的电位器调整对比度） |\n| 4  | RS  | RS为寄存器选择，高电平1时选择数据寄存器、低电平0时选择指令寄存器                                     |\n| 5  | R/W | R/W为读写信号线，高电平\\(1\\)时进行读操作，低电平\\(0\\)时进行写操作                                |\n| 6  | E   | E\\(或EN\\)端为使能\\(enable\\)端，写操作时，下降沿使能；读操作时，E高电平有效                         |\n| 7  | DB0 | 低4位三态、 双向数据总线 0位（最低位）                                                  |\n| 8  | DB1 | 高4位三态、 双向数据总线 1位                                                       |\n| 9  | DB2 | 高4位三态、 双向数据总线 2位                                                       |\n| 10 | DB3 | 高4位三态、 双向数据总线 3位                                                       |\n| 11 | DB4 | 高4位三态、 双向数据总线 4位                                                       |\n| 12 | DB5 | 高4位三态、 双向数据总线 5位                                                       |\n| 13 | DB6 | 高4位三态、 双向数据总线 6位                                                       |\n| 14 | DB7 | 高4位三态、 双向数据总线 7位（busy flag）                                            |\n| 15 | BLA | 背光电源正极                                                                 |\n| 16 | BLK | 背光电源负极                                                                 | \n\n\n## 驱动LCD1602\n### 驱动方式\nArduino驱动LCD1602可以选择直接驱动，可以有4线和8线的驱动方式，不过这样还是挺占IO口的，要接的东西多了，就不够用了。所以在这里，我们介绍IIC驱动方式，在LCD1602上得焊接一块IIC转接板（如PCF8574T），只占用2个IO口就能驱动LCD1602。  \n`IIC`「Inter-Integrated Circuit 集成电路总线」是一种串行通信总线，应用于板载低速设备间的通讯。由飞利浦公司开发的这一通讯协议，其目的就是为了简化系统硬件设计，减少设备间的连线。  \nIIC串行总线有两根信号线，一根是双向的数字线SDA，另一根是时钟线SCL，每个IIC设备都有自己的地址，IIC总线上多个设备间通过设备地址进行区别。\n\n![upload successful](/images/lcd_iic.png)  \n上图为本篇使用的IIC转接板，直接焊接于LCD1602。可通过跳线帽设置是否开启背光，通过蓝色电位器调节对比度。IIC设备地址可通过短路A0/A1/A2修改，默认地址用下文的方法查看。  \n### 接线\n| PCF8574T |    | Arduino |\n|----------|----|---------|\n| GND      | -> | GND     |\n| VCC      | -> | 5V      |\n| SDA      | -> | A4      |\n| SCL      | -> | A5      |\n\n### 扫描I2C地址\n将以下代码拷贝到Arduino IDE，并执行。然后选择工具->串口监视器，把右下角的波特率改为115200，即可读出I2C地址:   \n\n\n```C++\n// I2C Scanner\n// Written by Nick Gammon\n// Date: 20th April 2011\n#include <Wire.h>\nvoid setup() { \n    Serial.begin (115200); // Leonardo: wait for serial port to connect \n    while (!Serial) { } \n    Serial.println (); \n    Serial.println (\"I2C scanner. Scanning ...\"); \n    byte count = 0; \n    Wire.begin(); \n    for (byte i = 8; i < 120; i++) { \n        Wire.beginTransmission (i); \n        if (Wire.endTransmission () == 0) { \n          Serial.print (\"Found address: \"); \n          Serial.print (i, DEC); \n          Serial.print (\" (0x\"); \n          Serial.print (i, HEX); \n          Serial.println (\")\"); \n          count++; \n          delay (1); // maybe unneeded? \n        } // end of good response \n    } // end of for loop \n    Serial.println (\"Done.\"); \n    Serial.print (\"Found \"); \n    Serial.print (count, DEC); \n    Serial.println (\" device(s).\");\n} // end of setup\nvoid loop() {}\n```\n\n\n\n\n![upload successful](/images/iic_address.png)  \n可以看到默认地址是**0x27**（所以不能轻易相信淘宝客服的话。。。）。 \n\n\n\n### 安装驱动库\nLCD1602的驱动库都是要额外装的。  \n在Arduino IDE中点击「项目」—「加载库」—「管理库」，查找「LiquidCrystal_I2C」，选择最新版本进行安装。  \n![upload successful](/images/arduino_library.png)\n\n\n### 显示字符\n代码挺简单的：  \n```C++\n// meng\n#include <Wire.h> \n#include <LiquidCrystal_I2C.h> //引用I2C库\n \n//设置LCD1602设备地址，这里的地址是0x3F，一般是0x20，或者0x27，具体看模块手册\nLiquidCrystal_I2C lcd(0x27, 16, 2);  \n\nvoid setup()\n{\n  lcd.init();                  // 初始化LCD\n  lcd.backlight();             //设置LCD背景等亮\n}\n \nvoid loop()\n{\n  lcd.setCursor(0,0);                // 设置显示指针\n  lcd.print(\"Pig Love Rabbit\");     // 输出字符到LCD1602上\n  lcd.setCursor(0,1);\n  lcd.print(\"       by MH.\");\n  delay(1000);\n  lcd.setBacklight(LOW); // 关掉背光 delay(1000);\n  delay(1000);  \n  lcd.setBacklight(HIGH);\n}\n```\n\n最终显示效果：![](https://z3.ax1x.com/2021/10/08/5PI7e1.jpg)\n\n\n\n## 显示温湿度\n\n### 加载DHT的库\n为了能读取DHT11的数据，我们需要引入新的库，这里我们用了这个库：[DHTlib](https://github.com/RobTillaart/DHTlib)，用Arduino也可以直接搜到  \n\n![upload successful](/images/DHTlib.png)  \n\n### 接线\n\n![upload successful](/images/dht_lcd_final.png)  \n接线蛮简单的，DHT就用到了3个脚，需要注意的是**在VCC和DHT11的DATA脚之间放置一个10KΩ的上拉电阻**，以使其保持高电平，以实现传感器和MCU之间的正确通信。\n\n\n\n代码：  \n```C++\n// meng\n#include <Wire.h> \n#include <LiquidCrystal_I2C.h> //引用I2C库\n#include <dht.h>\n\n \n//设置LCD1602设备地址，这里的地址是0x3F，一般是0x20，或者0x27，具体看模块手册\nLiquidCrystal_I2C lcd(0x27, 16, 2);\n\n#define dataPin 2\ndht DHT; // Creats a DHT object\n\nvoid setup()\n{\n  lcd.init();                  // 初始化LCD\n  lcd.backlight();             //设置LCD背景等亮\n}\n \nvoid loop()\n{\n  int readData = DHT.read11(dataPin); // 读取数据\n  // int readData =  DHT.read22(dataPin); // DHT22/AM2302\n  float t = DHT.temperature; // 温度\n  float h = DHT.humidity;    // 湿度\n\n  lcd.setCursor(0,0);                // 设置显示指针\n\n  // 显示温度\n  lcd.print(\"Temp: \");\n  lcd.print(t); // Prints the temperature value from the sensor\n  lcd.print(\" \");\n  lcd.print((char)223);//shows degrees character\n  lcd.print(\"C\");\n  \n  lcd.setCursor(0,1);\n  lcd.print(\"Humi: \");\n  lcd.print(h);\n  lcd.print(\" %\");\n  delay(3000);\n}\n```\n\n最终，我们实现了把DHT11的温湿度显示到LCD上的效果了：  \n![](https://z3.ax1x.com/2021/10/10/5kxeUS.jpg)  \n\n\n\n\n\n\n\n\n\n\n参考文章：\n* [LCD 1602显示屏](https://www.jianshu.com/p/eee98fb5e68f)","source":"_posts/arduino_DTH11.md","raw":"title: Arduino使用DHT11测量温湿度\nauthor: Salamander\ntags:\n  - arduino\n  - 传感器\ncategories:\n  - 单片机\ndate: 2019-08-30 10:37:00\n---\n## 概览\n这篇文章很简单（就是一点电工知识），就是利用[DHT11](https://baike.baidu.com/item/DHT11/1206271)温湿度传感器测量温湿度值，并把结果显示在[LCD1602](https://baike.baidu.com/item/LCD1602/6014393)显示器上。\n\n<!-- more -->\n\n## 实验元器件列表\n| 元器件    | 型号          | 数量 | 备注 |\n|--------|-------------|----|----|\n| 主控板    | arduino Uno   | 1     |    |\n| 温湿度传感器 | DHT11      | 1   |     |\n| 液晶屏    | 1602 LCD      | 1     |    |\n| 电阻     | 1K电阻         | 4   |    |\n| 面包板    |               | 1     |    |\n| 面包板条线    |               | 若个   |    |\n| 数据线    | Uno数据线      | 1   |    |\n\n## 工具和元器件介绍\n### DHT11温湿度传感器\n![](https://s2.ax1x.com/2019/08/29/mLoDuF.png)\nDHT11 传感器接线方法并不复杂，DHT11封装有4个引脚，各个引脚说明如下：\n\n| Pin | 名称   | 注释             |\n|-----|------|----------------|\n| 1   | VDD  | 供电 3\\-5\\.5 VDC |\n| 2   | DATA | 串行数据，单总线       |\n| 3   | NC   | 空脚             |\n| 4   | GND  | 接地，电源负极        |\n\n### LCD1602\n![1602图片](https://s2.ax1x.com/2019/09/04/nE8k7R.jpg)\n\n1602字符型液晶，是一种专门用来显示字母、数字、符号等的点阵型液晶模块，能够同时显示16x02即32个字符。\n\nLCD1602分为两种：带背光和不带背光，带背光的要后一些，引脚多2个，为16个引脚，如下：\n\n![](https://s2.ax1x.com/2019/08/29/mLTcqg.png)\n\n##### 引脚说明\nLCD1602 通常有14条引脚或16条引脚，14与16引脚的差别在于16条引脚多了背光电源线VCC(15脚)和地线GND(16脚)，其它引脚与14脚的LCD完全一样，如下：\n\n| 引脚 | 符号  | 功能说明                                                                   |\n|----|-----|------------------------------------------------------------------------|\n| 1  | VSS | 一般接地                                                                   |\n| 2  | VDD | 接电源（\\+5V）                                                              |\n| 3  | V0  | 液晶显示器对比度调整端，接正电源时对比度最弱，接地电源时对比度最高（对比度过高时会产生“鬼影”，使用时可以通过一个10K的电位器调整对比度） |\n| 4  | RS  | RS为寄存器选择，高电平1时选择数据寄存器、低电平0时选择指令寄存器                                     |\n| 5  | R/W | R/W为读写信号线，高电平\\(1\\)时进行读操作，低电平\\(0\\)时进行写操作                                |\n| 6  | E   | E\\(或EN\\)端为使能\\(enable\\)端，写操作时，下降沿使能；读操作时，E高电平有效                         |\n| 7  | DB0 | 低4位三态、 双向数据总线 0位（最低位）                                                  |\n| 8  | DB1 | 高4位三态、 双向数据总线 1位                                                       |\n| 9  | DB2 | 高4位三态、 双向数据总线 2位                                                       |\n| 10 | DB3 | 高4位三态、 双向数据总线 3位                                                       |\n| 11 | DB4 | 高4位三态、 双向数据总线 4位                                                       |\n| 12 | DB5 | 高4位三态、 双向数据总线 5位                                                       |\n| 13 | DB6 | 高4位三态、 双向数据总线 6位                                                       |\n| 14 | DB7 | 高4位三态、 双向数据总线 7位（busy flag）                                            |\n| 15 | BLA | 背光电源正极                                                                 |\n| 16 | BLK | 背光电源负极                                                                 | \n\n\n## 驱动LCD1602\n### 驱动方式\nArduino驱动LCD1602可以选择直接驱动，可以有4线和8线的驱动方式，不过这样还是挺占IO口的，要接的东西多了，就不够用了。所以在这里，我们介绍IIC驱动方式，在LCD1602上得焊接一块IIC转接板（如PCF8574T），只占用2个IO口就能驱动LCD1602。  \n`IIC`「Inter-Integrated Circuit 集成电路总线」是一种串行通信总线，应用于板载低速设备间的通讯。由飞利浦公司开发的这一通讯协议，其目的就是为了简化系统硬件设计，减少设备间的连线。  \nIIC串行总线有两根信号线，一根是双向的数字线SDA，另一根是时钟线SCL，每个IIC设备都有自己的地址，IIC总线上多个设备间通过设备地址进行区别。\n\n![upload successful](/images/lcd_iic.png)  \n上图为本篇使用的IIC转接板，直接焊接于LCD1602。可通过跳线帽设置是否开启背光，通过蓝色电位器调节对比度。IIC设备地址可通过短路A0/A1/A2修改，默认地址用下文的方法查看。  \n### 接线\n| PCF8574T |    | Arduino |\n|----------|----|---------|\n| GND      | -> | GND     |\n| VCC      | -> | 5V      |\n| SDA      | -> | A4      |\n| SCL      | -> | A5      |\n\n### 扫描I2C地址\n将以下代码拷贝到Arduino IDE，并执行。然后选择工具->串口监视器，把右下角的波特率改为115200，即可读出I2C地址:   \n\n\n```C++\n// I2C Scanner\n// Written by Nick Gammon\n// Date: 20th April 2011\n#include <Wire.h>\nvoid setup() { \n    Serial.begin (115200); // Leonardo: wait for serial port to connect \n    while (!Serial) { } \n    Serial.println (); \n    Serial.println (\"I2C scanner. Scanning ...\"); \n    byte count = 0; \n    Wire.begin(); \n    for (byte i = 8; i < 120; i++) { \n        Wire.beginTransmission (i); \n        if (Wire.endTransmission () == 0) { \n          Serial.print (\"Found address: \"); \n          Serial.print (i, DEC); \n          Serial.print (\" (0x\"); \n          Serial.print (i, HEX); \n          Serial.println (\")\"); \n          count++; \n          delay (1); // maybe unneeded? \n        } // end of good response \n    } // end of for loop \n    Serial.println (\"Done.\"); \n    Serial.print (\"Found \"); \n    Serial.print (count, DEC); \n    Serial.println (\" device(s).\");\n} // end of setup\nvoid loop() {}\n```\n\n\n\n\n![upload successful](/images/iic_address.png)  \n可以看到默认地址是**0x27**（所以不能轻易相信淘宝客服的话。。。）。 \n\n\n\n### 安装驱动库\nLCD1602的驱动库都是要额外装的。  \n在Arduino IDE中点击「项目」—「加载库」—「管理库」，查找「LiquidCrystal_I2C」，选择最新版本进行安装。  \n![upload successful](/images/arduino_library.png)\n\n\n### 显示字符\n代码挺简单的：  \n```C++\n// meng\n#include <Wire.h> \n#include <LiquidCrystal_I2C.h> //引用I2C库\n \n//设置LCD1602设备地址，这里的地址是0x3F，一般是0x20，或者0x27，具体看模块手册\nLiquidCrystal_I2C lcd(0x27, 16, 2);  \n\nvoid setup()\n{\n  lcd.init();                  // 初始化LCD\n  lcd.backlight();             //设置LCD背景等亮\n}\n \nvoid loop()\n{\n  lcd.setCursor(0,0);                // 设置显示指针\n  lcd.print(\"Pig Love Rabbit\");     // 输出字符到LCD1602上\n  lcd.setCursor(0,1);\n  lcd.print(\"       by MH.\");\n  delay(1000);\n  lcd.setBacklight(LOW); // 关掉背光 delay(1000);\n  delay(1000);  \n  lcd.setBacklight(HIGH);\n}\n```\n\n最终显示效果：![](https://z3.ax1x.com/2021/10/08/5PI7e1.jpg)\n\n\n\n## 显示温湿度\n\n### 加载DHT的库\n为了能读取DHT11的数据，我们需要引入新的库，这里我们用了这个库：[DHTlib](https://github.com/RobTillaart/DHTlib)，用Arduino也可以直接搜到  \n\n![upload successful](/images/DHTlib.png)  \n\n### 接线\n\n![upload successful](/images/dht_lcd_final.png)  \n接线蛮简单的，DHT就用到了3个脚，需要注意的是**在VCC和DHT11的DATA脚之间放置一个10KΩ的上拉电阻**，以使其保持高电平，以实现传感器和MCU之间的正确通信。\n\n\n\n代码：  \n```C++\n// meng\n#include <Wire.h> \n#include <LiquidCrystal_I2C.h> //引用I2C库\n#include <dht.h>\n\n \n//设置LCD1602设备地址，这里的地址是0x3F，一般是0x20，或者0x27，具体看模块手册\nLiquidCrystal_I2C lcd(0x27, 16, 2);\n\n#define dataPin 2\ndht DHT; // Creats a DHT object\n\nvoid setup()\n{\n  lcd.init();                  // 初始化LCD\n  lcd.backlight();             //设置LCD背景等亮\n}\n \nvoid loop()\n{\n  int readData = DHT.read11(dataPin); // 读取数据\n  // int readData =  DHT.read22(dataPin); // DHT22/AM2302\n  float t = DHT.temperature; // 温度\n  float h = DHT.humidity;    // 湿度\n\n  lcd.setCursor(0,0);                // 设置显示指针\n\n  // 显示温度\n  lcd.print(\"Temp: \");\n  lcd.print(t); // Prints the temperature value from the sensor\n  lcd.print(\" \");\n  lcd.print((char)223);//shows degrees character\n  lcd.print(\"C\");\n  \n  lcd.setCursor(0,1);\n  lcd.print(\"Humi: \");\n  lcd.print(h);\n  lcd.print(\" %\");\n  delay(3000);\n}\n```\n\n最终，我们实现了把DHT11的温湿度显示到LCD上的效果了：  \n![](https://z3.ax1x.com/2021/10/10/5kxeUS.jpg)  \n\n\n\n\n\n\n\n\n\n\n参考文章：\n* [LCD 1602显示屏](https://www.jianshu.com/p/eee98fb5e68f)","slug":"arduino_DTH11","published":1,"updated":"2023-03-21T02:48:19.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40la00212o3m4v2xhoew","content":"<h2 id=\"概览\">概览</h2>\r\n<p>这篇文章很简单（就是一点电工知识），就是利用<a\r\nhref=\"https://baike.baidu.com/item/DHT11/1206271\">DHT11</a>温湿度传感器测量温湿度值，并把结果显示在<a\r\nhref=\"https://baike.baidu.com/item/LCD1602/6014393\">LCD1602</a>显示器上。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"实验元器件列表\">实验元器件列表</h2>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>元器件</th>\r\n<th>型号</th>\r\n<th>数量</th>\r\n<th>备注</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>主控板</td>\r\n<td>arduino Uno</td>\r\n<td>1</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>温湿度传感器</td>\r\n<td>DHT11</td>\r\n<td>1</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>液晶屏</td>\r\n<td>1602 LCD</td>\r\n<td>1</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>电阻</td>\r\n<td>1K电阻</td>\r\n<td>4</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>面包板</td>\r\n<td></td>\r\n<td>1</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>面包板条线</td>\r\n<td></td>\r\n<td>若个</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>数据线</td>\r\n<td>Uno数据线</td>\r\n<td>1</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"工具和元器件介绍\">工具和元器件介绍</h2>\r\n<h3 id=\"dht11温湿度传感器\">DHT11温湿度传感器</h3>\r\n<p><img src=\"https://s2.ax1x.com/2019/08/29/mLoDuF.png\" /> DHT11\r\n传感器接线方法并不复杂，DHT11封装有4个引脚，各个引脚说明如下：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>Pin</th>\r\n<th>名称</th>\r\n<th>注释</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>1</td>\r\n<td>VDD</td>\r\n<td>供电 3-5.5 VDC</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>2</td>\r\n<td>DATA</td>\r\n<td>串行数据，单总线</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>3</td>\r\n<td>NC</td>\r\n<td>空脚</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>4</td>\r\n<td>GND</td>\r\n<td>接地，电源负极</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"lcd1602\">LCD1602</h3>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/04/nE8k7R.jpg\" alt=\"1602图片\" />\r\n<figcaption aria-hidden=\"true\">1602图片</figcaption>\r\n</figure>\r\n<p>1602字符型液晶，是一种专门用来显示字母、数字、符号等的点阵型液晶模块，能够同时显示16x02即32个字符。</p>\r\n<p>LCD1602分为两种：带背光和不带背光，带背光的要后一些，引脚多2个，为16个引脚，如下：</p>\r\n<p><img src=\"https://s2.ax1x.com/2019/08/29/mLTcqg.png\" /></p>\r\n<h5 id=\"引脚说明\">引脚说明</h5>\r\n<p>LCD1602\r\n通常有14条引脚或16条引脚，14与16引脚的差别在于16条引脚多了背光电源线VCC(15脚)和地线GND(16脚)，其它引脚与14脚的LCD完全一样，如下：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 4%\" />\r\n<col style=\"width: 6%\" />\r\n<col style=\"width: 88%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>引脚</th>\r\n<th>符号</th>\r\n<th>功能说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>1</td>\r\n<td>VSS</td>\r\n<td>一般接地</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>2</td>\r\n<td>VDD</td>\r\n<td>接电源（+5V）</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>3</td>\r\n<td>V0</td>\r\n<td>液晶显示器对比度调整端，接正电源时对比度最弱，接地电源时对比度最高（对比度过高时会产生“鬼影”，使用时可以通过一个10K的电位器调整对比度）</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>4</td>\r\n<td>RS</td>\r\n<td>RS为寄存器选择，高电平1时选择数据寄存器、低电平0时选择指令寄存器</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>5</td>\r\n<td>R/W</td>\r\n<td>R/W为读写信号线，高电平(1)时进行读操作，低电平(0)时进行写操作</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>6</td>\r\n<td>E</td>\r\n<td>E(或EN)端为使能(enable)端，写操作时，下降沿使能；读操作时，E高电平有效</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>7</td>\r\n<td>DB0</td>\r\n<td>低4位三态、 双向数据总线 0位（最低位）</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>8</td>\r\n<td>DB1</td>\r\n<td>高4位三态、 双向数据总线 1位</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>9</td>\r\n<td>DB2</td>\r\n<td>高4位三态、 双向数据总线 2位</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>10</td>\r\n<td>DB3</td>\r\n<td>高4位三态、 双向数据总线 3位</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>11</td>\r\n<td>DB4</td>\r\n<td>高4位三态、 双向数据总线 4位</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>12</td>\r\n<td>DB5</td>\r\n<td>高4位三态、 双向数据总线 5位</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>13</td>\r\n<td>DB6</td>\r\n<td>高4位三态、 双向数据总线 6位</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>14</td>\r\n<td>DB7</td>\r\n<td>高4位三态、 双向数据总线 7位（busy flag）</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>15</td>\r\n<td>BLA</td>\r\n<td>背光电源正极</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>16</td>\r\n<td>BLK</td>\r\n<td>背光电源负极</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"驱动lcd1602\">驱动LCD1602</h2>\r\n<h3 id=\"驱动方式\">驱动方式</h3>\r\n<p>Arduino驱动LCD1602可以选择直接驱动，可以有4线和8线的驱动方式，不过这样还是挺占IO口的，要接的东西多了，就不够用了。所以在这里，我们介绍IIC驱动方式，在LCD1602上得焊接一块IIC转接板（如PCF8574T），只占用2个IO口就能驱动LCD1602。<br />\r\n<code>IIC</code>「Inter-Integrated Circuit\r\n集成电路总线」是一种串行通信总线，应用于板载低速设备间的通讯。由飞利浦公司开发的这一通讯协议，其目的就是为了简化系统硬件设计，减少设备间的连线。<br />\r\nIIC串行总线有两根信号线，一根是双向的数字线SDA，另一根是时钟线SCL，每个IIC设备都有自己的地址，IIC总线上多个设备间通过设备地址进行区别。</p>\r\n<p><img src=\"/images/lcd_iic.png\" alt=\"upload successful\" /><br />\r\n上图为本篇使用的IIC转接板，直接焊接于LCD1602。可通过跳线帽设置是否开启背光，通过蓝色电位器调节对比度。IIC设备地址可通过短路A0/A1/A2修改，默认地址用下文的方法查看。<br />\r\n### 接线 | PCF8574T | | Arduino | |----------|----|---------| | GND |\r\n-&gt; | GND | | VCC | -&gt; | 5V | | SDA | -&gt; | A4 | | SCL | -&gt; |\r\nA5 |</p>\r\n<h3 id=\"扫描i2c地址\">扫描I2C地址</h3>\r\n<p>将以下代码拷贝到Arduino\r\nIDE，并执行。然后选择工具-&gt;串口监视器，把右下角的波特率改为115200，即可读出I2C地址:</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// I2C Scanner</span></span><br><span class=\"line\"><span class=\"comment\">// Written by Nick Gammon</span></span><br><span class=\"line\"><span class=\"comment\">// Date: 20th April 2011</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Wire.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">    Serial.<span class=\"built_in\">begin</span> (<span class=\"number\">115200</span>); <span class=\"comment\">// Leonardo: wait for serial port to connect </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!Serial) &#123; &#125; </span><br><span class=\"line\">    Serial.<span class=\"built_in\">println</span> (); </span><br><span class=\"line\">    Serial.<span class=\"built_in\">println</span> (<span class=\"string\">&quot;I2C scanner. Scanning ...&quot;</span>); </span><br><span class=\"line\">    byte count = <span class=\"number\">0</span>; </span><br><span class=\"line\">    Wire.<span class=\"built_in\">begin</span>(); </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (byte i = <span class=\"number\">8</span>; i &lt; <span class=\"number\">120</span>; i++) &#123; </span><br><span class=\"line\">        Wire.<span class=\"built_in\">beginTransmission</span> (i); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Wire.<span class=\"built_in\">endTransmission</span> () == <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">          Serial.<span class=\"built_in\">print</span> (<span class=\"string\">&quot;Found address: &quot;</span>); </span><br><span class=\"line\">          Serial.<span class=\"built_in\">print</span> (i, DEC); </span><br><span class=\"line\">          Serial.<span class=\"built_in\">print</span> (<span class=\"string\">&quot; (0x&quot;</span>); </span><br><span class=\"line\">          Serial.<span class=\"built_in\">print</span> (i, HEX); </span><br><span class=\"line\">          Serial.<span class=\"built_in\">println</span> (<span class=\"string\">&quot;)&quot;</span>); </span><br><span class=\"line\">          count++; </span><br><span class=\"line\">          <span class=\"built_in\">delay</span> (<span class=\"number\">1</span>); <span class=\"comment\">// maybe unneeded? </span></span><br><span class=\"line\">        &#125; <span class=\"comment\">// end of good response </span></span><br><span class=\"line\">    &#125; <span class=\"comment\">// end of for loop </span></span><br><span class=\"line\">    Serial.<span class=\"built_in\">println</span> (<span class=\"string\">&quot;Done.&quot;</span>); </span><br><span class=\"line\">    Serial.<span class=\"built_in\">print</span> (<span class=\"string\">&quot;Found &quot;</span>); </span><br><span class=\"line\">    Serial.<span class=\"built_in\">print</span> (count, DEC); </span><br><span class=\"line\">    Serial.<span class=\"built_in\">println</span> (<span class=\"string\">&quot; device(s).&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"comment\">// end of setup</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\r\n<p><img src=\"/images/iic_address.png\" alt=\"upload successful\" /><br />\r\n可以看到默认地址是<strong>0x27</strong>（所以不能轻易相信淘宝客服的话。。。）。</p>\r\n<h3 id=\"安装驱动库\">安装驱动库</h3>\r\n<p>LCD1602的驱动库都是要额外装的。<br />\r\n在Arduino\r\nIDE中点击「项目」—「加载库」—「管理库」，查找「LiquidCrystal_I2C」，选择最新版本进行安装。<br />\r\n<img src=\"/images/arduino_library.png\" alt=\"upload successful\" /></p>\r\n<h3 id=\"显示字符\">显示字符</h3>\r\n<p>代码挺简单的：<br />\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// meng</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Wire.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;LiquidCrystal_I2C.h&gt;</span> <span class=\"comment\">//引用I2C库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//设置LCD1602设备地址，这里的地址是0x3F，一般是0x20，或者0x27，具体看模块手册</span></span><br><span class=\"line\"><span class=\"function\">LiquidCrystal_I2C <span class=\"title\">lcd</span><span class=\"params\">(<span class=\"number\">0x27</span>, <span class=\"number\">16</span>, <span class=\"number\">2</span>)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  lcd.<span class=\"built_in\">init</span>();                  <span class=\"comment\">// 初始化LCD</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">backlight</span>();             <span class=\"comment\">//设置LCD背景等亮</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  lcd.<span class=\"built_in\">setCursor</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);                <span class=\"comment\">// 设置显示指针</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;Pig Love Rabbit&quot;</span>);     <span class=\"comment\">// 输出字符到LCD1602上</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">setCursor</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;       by MH.&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">setBacklight</span>(LOW); <span class=\"comment\">// 关掉背光 delay(1000);</span></span><br><span class=\"line\">  <span class=\"built_in\">delay</span>(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">  lcd.<span class=\"built_in\">setBacklight</span>(HIGH);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>最终显示效果：<img\r\nsrc=\"https://z3.ax1x.com/2021/10/08/5PI7e1.jpg\" /></p>\r\n<h2 id=\"显示温湿度\">显示温湿度</h2>\r\n<h3 id=\"加载dht的库\">加载DHT的库</h3>\r\n<p>为了能读取DHT11的数据，我们需要引入新的库，这里我们用了这个库：<a\r\nhref=\"https://github.com/RobTillaart/DHTlib\">DHTlib</a>，用Arduino也可以直接搜到</p>\r\n<figure>\r\n<img src=\"/images/DHTlib.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<h3 id=\"接线\">接线</h3>\r\n<p><img src=\"/images/dht_lcd_final.png\" alt=\"upload successful\" /><br />\r\n接线蛮简单的，DHT就用到了3个脚，需要注意的是<strong>在VCC和DHT11的DATA脚之间放置一个10KΩ的上拉电阻</strong>，以使其保持高电平，以实现传感器和MCU之间的正确通信。</p>\r\n<p>代码：<br />\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// meng</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Wire.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;LiquidCrystal_I2C.h&gt;</span> <span class=\"comment\">//引用I2C库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;dht.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//设置LCD1602设备地址，这里的地址是0x3F，一般是0x20，或者0x27，具体看模块手册</span></span><br><span class=\"line\"><span class=\"function\">LiquidCrystal_I2C <span class=\"title\">lcd</span><span class=\"params\">(<span class=\"number\">0x27</span>, <span class=\"number\">16</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dataPin 2</span></span><br><span class=\"line\">dht DHT; <span class=\"comment\">// Creats a DHT object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  lcd.<span class=\"built_in\">init</span>();                  <span class=\"comment\">// 初始化LCD</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">backlight</span>();             <span class=\"comment\">//设置LCD背景等亮</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> readData = DHT.<span class=\"built_in\">read11</span>(dataPin); <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">  <span class=\"comment\">// int readData =  DHT.read22(dataPin); // DHT22/AM2302</span></span><br><span class=\"line\">  <span class=\"type\">float</span> t = DHT.temperature; <span class=\"comment\">// 温度</span></span><br><span class=\"line\">  <span class=\"type\">float</span> h = DHT.humidity;    <span class=\"comment\">// 湿度</span></span><br><span class=\"line\"></span><br><span class=\"line\">  lcd.<span class=\"built_in\">setCursor</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);                <span class=\"comment\">// 设置显示指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 显示温度</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;Temp: &quot;</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(t); <span class=\"comment\">// Prints the temperature value from the sensor</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>((<span class=\"type\">char</span>)<span class=\"number\">223</span>);<span class=\"comment\">//shows degrees character</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  lcd.<span class=\"built_in\">setCursor</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;Humi: &quot;</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(h);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot; %&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">delay</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>最终，我们实现了把DHT11的温湿度显示到LCD上的效果了：<br />\r\n<img src=\"https://z3.ax1x.com/2021/10/10/5kxeUS.jpg\" /></p>\r\n<p>参考文章： * <a href=\"https://www.jianshu.com/p/eee98fb5e68f\">LCD\r\n1602显示屏</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"概览\">概览</h2>\r\n<p>这篇文章很简单（就是一点电工知识），就是利用<a\r\nhref=\"https://baike.baidu.com/item/DHT11/1206271\">DHT11</a>温湿度传感器测量温湿度值，并把结果显示在<a\r\nhref=\"https://baike.baidu.com/item/LCD1602/6014393\">LCD1602</a>显示器上。</p>","more":"<h2 id=\"实验元器件列表\">实验元器件列表</h2>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>元器件</th>\r\n<th>型号</th>\r\n<th>数量</th>\r\n<th>备注</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>主控板</td>\r\n<td>arduino Uno</td>\r\n<td>1</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>温湿度传感器</td>\r\n<td>DHT11</td>\r\n<td>1</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>液晶屏</td>\r\n<td>1602 LCD</td>\r\n<td>1</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>电阻</td>\r\n<td>1K电阻</td>\r\n<td>4</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>面包板</td>\r\n<td></td>\r\n<td>1</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>面包板条线</td>\r\n<td></td>\r\n<td>若个</td>\r\n<td></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>数据线</td>\r\n<td>Uno数据线</td>\r\n<td>1</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"工具和元器件介绍\">工具和元器件介绍</h2>\r\n<h3 id=\"dht11温湿度传感器\">DHT11温湿度传感器</h3>\r\n<p><img src=\"https://s2.ax1x.com/2019/08/29/mLoDuF.png\" /> DHT11\r\n传感器接线方法并不复杂，DHT11封装有4个引脚，各个引脚说明如下：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>Pin</th>\r\n<th>名称</th>\r\n<th>注释</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>1</td>\r\n<td>VDD</td>\r\n<td>供电 3-5.5 VDC</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>2</td>\r\n<td>DATA</td>\r\n<td>串行数据，单总线</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>3</td>\r\n<td>NC</td>\r\n<td>空脚</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>4</td>\r\n<td>GND</td>\r\n<td>接地，电源负极</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"lcd1602\">LCD1602</h3>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/09/04/nE8k7R.jpg\" alt=\"1602图片\" />\r\n<figcaption aria-hidden=\"true\">1602图片</figcaption>\r\n</figure>\r\n<p>1602字符型液晶，是一种专门用来显示字母、数字、符号等的点阵型液晶模块，能够同时显示16x02即32个字符。</p>\r\n<p>LCD1602分为两种：带背光和不带背光，带背光的要后一些，引脚多2个，为16个引脚，如下：</p>\r\n<p><img src=\"https://s2.ax1x.com/2019/08/29/mLTcqg.png\" /></p>\r\n<h5 id=\"引脚说明\">引脚说明</h5>\r\n<p>LCD1602\r\n通常有14条引脚或16条引脚，14与16引脚的差别在于16条引脚多了背光电源线VCC(15脚)和地线GND(16脚)，其它引脚与14脚的LCD完全一样，如下：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 4%\" />\r\n<col style=\"width: 6%\" />\r\n<col style=\"width: 88%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>引脚</th>\r\n<th>符号</th>\r\n<th>功能说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>1</td>\r\n<td>VSS</td>\r\n<td>一般接地</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>2</td>\r\n<td>VDD</td>\r\n<td>接电源（+5V）</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>3</td>\r\n<td>V0</td>\r\n<td>液晶显示器对比度调整端，接正电源时对比度最弱，接地电源时对比度最高（对比度过高时会产生“鬼影”，使用时可以通过一个10K的电位器调整对比度）</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>4</td>\r\n<td>RS</td>\r\n<td>RS为寄存器选择，高电平1时选择数据寄存器、低电平0时选择指令寄存器</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>5</td>\r\n<td>R/W</td>\r\n<td>R/W为读写信号线，高电平(1)时进行读操作，低电平(0)时进行写操作</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>6</td>\r\n<td>E</td>\r\n<td>E(或EN)端为使能(enable)端，写操作时，下降沿使能；读操作时，E高电平有效</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>7</td>\r\n<td>DB0</td>\r\n<td>低4位三态、 双向数据总线 0位（最低位）</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>8</td>\r\n<td>DB1</td>\r\n<td>高4位三态、 双向数据总线 1位</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>9</td>\r\n<td>DB2</td>\r\n<td>高4位三态、 双向数据总线 2位</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>10</td>\r\n<td>DB3</td>\r\n<td>高4位三态、 双向数据总线 3位</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>11</td>\r\n<td>DB4</td>\r\n<td>高4位三态、 双向数据总线 4位</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>12</td>\r\n<td>DB5</td>\r\n<td>高4位三态、 双向数据总线 5位</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>13</td>\r\n<td>DB6</td>\r\n<td>高4位三态、 双向数据总线 6位</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>14</td>\r\n<td>DB7</td>\r\n<td>高4位三态、 双向数据总线 7位（busy flag）</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>15</td>\r\n<td>BLA</td>\r\n<td>背光电源正极</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>16</td>\r\n<td>BLK</td>\r\n<td>背光电源负极</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"驱动lcd1602\">驱动LCD1602</h2>\r\n<h3 id=\"驱动方式\">驱动方式</h3>\r\n<p>Arduino驱动LCD1602可以选择直接驱动，可以有4线和8线的驱动方式，不过这样还是挺占IO口的，要接的东西多了，就不够用了。所以在这里，我们介绍IIC驱动方式，在LCD1602上得焊接一块IIC转接板（如PCF8574T），只占用2个IO口就能驱动LCD1602。<br />\r\n<code>IIC</code>「Inter-Integrated Circuit\r\n集成电路总线」是一种串行通信总线，应用于板载低速设备间的通讯。由飞利浦公司开发的这一通讯协议，其目的就是为了简化系统硬件设计，减少设备间的连线。<br />\r\nIIC串行总线有两根信号线，一根是双向的数字线SDA，另一根是时钟线SCL，每个IIC设备都有自己的地址，IIC总线上多个设备间通过设备地址进行区别。</p>\r\n<p><img src=\"/images/lcd_iic.png\" alt=\"upload successful\" /><br />\r\n上图为本篇使用的IIC转接板，直接焊接于LCD1602。可通过跳线帽设置是否开启背光，通过蓝色电位器调节对比度。IIC设备地址可通过短路A0/A1/A2修改，默认地址用下文的方法查看。<br />\r\n### 接线 | PCF8574T | | Arduino | |----------|----|---------| | GND |\r\n-&gt; | GND | | VCC | -&gt; | 5V | | SDA | -&gt; | A4 | | SCL | -&gt; |\r\nA5 |</p>\r\n<h3 id=\"扫描i2c地址\">扫描I2C地址</h3>\r\n<p>将以下代码拷贝到Arduino\r\nIDE，并执行。然后选择工具-&gt;串口监视器，把右下角的波特率改为115200，即可读出I2C地址:</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// I2C Scanner</span></span><br><span class=\"line\"><span class=\"comment\">// Written by Nick Gammon</span></span><br><span class=\"line\"><span class=\"comment\">// Date: 20th April 2011</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Wire.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">    Serial.<span class=\"built_in\">begin</span> (<span class=\"number\">115200</span>); <span class=\"comment\">// Leonardo: wait for serial port to connect </span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!Serial) &#123; &#125; </span><br><span class=\"line\">    Serial.<span class=\"built_in\">println</span> (); </span><br><span class=\"line\">    Serial.<span class=\"built_in\">println</span> (<span class=\"string\">&quot;I2C scanner. Scanning ...&quot;</span>); </span><br><span class=\"line\">    byte count = <span class=\"number\">0</span>; </span><br><span class=\"line\">    Wire.<span class=\"built_in\">begin</span>(); </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (byte i = <span class=\"number\">8</span>; i &lt; <span class=\"number\">120</span>; i++) &#123; </span><br><span class=\"line\">        Wire.<span class=\"built_in\">beginTransmission</span> (i); </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Wire.<span class=\"built_in\">endTransmission</span> () == <span class=\"number\">0</span>) &#123; </span><br><span class=\"line\">          Serial.<span class=\"built_in\">print</span> (<span class=\"string\">&quot;Found address: &quot;</span>); </span><br><span class=\"line\">          Serial.<span class=\"built_in\">print</span> (i, DEC); </span><br><span class=\"line\">          Serial.<span class=\"built_in\">print</span> (<span class=\"string\">&quot; (0x&quot;</span>); </span><br><span class=\"line\">          Serial.<span class=\"built_in\">print</span> (i, HEX); </span><br><span class=\"line\">          Serial.<span class=\"built_in\">println</span> (<span class=\"string\">&quot;)&quot;</span>); </span><br><span class=\"line\">          count++; </span><br><span class=\"line\">          <span class=\"built_in\">delay</span> (<span class=\"number\">1</span>); <span class=\"comment\">// maybe unneeded? </span></span><br><span class=\"line\">        &#125; <span class=\"comment\">// end of good response </span></span><br><span class=\"line\">    &#125; <span class=\"comment\">// end of for loop </span></span><br><span class=\"line\">    Serial.<span class=\"built_in\">println</span> (<span class=\"string\">&quot;Done.&quot;</span>); </span><br><span class=\"line\">    Serial.<span class=\"built_in\">print</span> (<span class=\"string\">&quot;Found &quot;</span>); </span><br><span class=\"line\">    Serial.<span class=\"built_in\">print</span> (count, DEC); </span><br><span class=\"line\">    Serial.<span class=\"built_in\">println</span> (<span class=\"string\">&quot; device(s).&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"comment\">// end of setup</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\r\n<p><img src=\"/images/iic_address.png\" alt=\"upload successful\" /><br />\r\n可以看到默认地址是<strong>0x27</strong>（所以不能轻易相信淘宝客服的话。。。）。</p>\r\n<h3 id=\"安装驱动库\">安装驱动库</h3>\r\n<p>LCD1602的驱动库都是要额外装的。<br />\r\n在Arduino\r\nIDE中点击「项目」—「加载库」—「管理库」，查找「LiquidCrystal_I2C」，选择最新版本进行安装。<br />\r\n<img src=\"/images/arduino_library.png\" alt=\"upload successful\" /></p>\r\n<h3 id=\"显示字符\">显示字符</h3>\r\n<p>代码挺简单的：<br />\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// meng</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Wire.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;LiquidCrystal_I2C.h&gt;</span> <span class=\"comment\">//引用I2C库</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//设置LCD1602设备地址，这里的地址是0x3F，一般是0x20，或者0x27，具体看模块手册</span></span><br><span class=\"line\"><span class=\"function\">LiquidCrystal_I2C <span class=\"title\">lcd</span><span class=\"params\">(<span class=\"number\">0x27</span>, <span class=\"number\">16</span>, <span class=\"number\">2</span>)</span></span>;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  lcd.<span class=\"built_in\">init</span>();                  <span class=\"comment\">// 初始化LCD</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">backlight</span>();             <span class=\"comment\">//设置LCD背景等亮</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  lcd.<span class=\"built_in\">setCursor</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);                <span class=\"comment\">// 设置显示指针</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;Pig Love Rabbit&quot;</span>);     <span class=\"comment\">// 输出字符到LCD1602上</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">setCursor</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;       by MH.&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">setBacklight</span>(LOW); <span class=\"comment\">// 关掉背光 delay(1000);</span></span><br><span class=\"line\">  <span class=\"built_in\">delay</span>(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">  lcd.<span class=\"built_in\">setBacklight</span>(HIGH);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>最终显示效果：<img\r\nsrc=\"https://z3.ax1x.com/2021/10/08/5PI7e1.jpg\" /></p>\r\n<h2 id=\"显示温湿度\">显示温湿度</h2>\r\n<h3 id=\"加载dht的库\">加载DHT的库</h3>\r\n<p>为了能读取DHT11的数据，我们需要引入新的库，这里我们用了这个库：<a\r\nhref=\"https://github.com/RobTillaart/DHTlib\">DHTlib</a>，用Arduino也可以直接搜到</p>\r\n<figure>\r\n<img src=\"/images/DHTlib.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<h3 id=\"接线\">接线</h3>\r\n<p><img src=\"/images/dht_lcd_final.png\" alt=\"upload successful\" /><br />\r\n接线蛮简单的，DHT就用到了3个脚，需要注意的是<strong>在VCC和DHT11的DATA脚之间放置一个10KΩ的上拉电阻</strong>，以使其保持高电平，以实现传感器和MCU之间的正确通信。</p>\r\n<p>代码：<br />\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// meng</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;Wire.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;LiquidCrystal_I2C.h&gt;</span> <span class=\"comment\">//引用I2C库</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;dht.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//设置LCD1602设备地址，这里的地址是0x3F，一般是0x20，或者0x27，具体看模块手册</span></span><br><span class=\"line\"><span class=\"function\">LiquidCrystal_I2C <span class=\"title\">lcd</span><span class=\"params\">(<span class=\"number\">0x27</span>, <span class=\"number\">16</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dataPin 2</span></span><br><span class=\"line\">dht DHT; <span class=\"comment\">// Creats a DHT object</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  lcd.<span class=\"built_in\">init</span>();                  <span class=\"comment\">// 初始化LCD</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">backlight</span>();             <span class=\"comment\">//设置LCD背景等亮</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> readData = DHT.<span class=\"built_in\">read11</span>(dataPin); <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">  <span class=\"comment\">// int readData =  DHT.read22(dataPin); // DHT22/AM2302</span></span><br><span class=\"line\">  <span class=\"type\">float</span> t = DHT.temperature; <span class=\"comment\">// 温度</span></span><br><span class=\"line\">  <span class=\"type\">float</span> h = DHT.humidity;    <span class=\"comment\">// 湿度</span></span><br><span class=\"line\"></span><br><span class=\"line\">  lcd.<span class=\"built_in\">setCursor</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);                <span class=\"comment\">// 设置显示指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 显示温度</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;Temp: &quot;</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(t); <span class=\"comment\">// Prints the temperature value from the sensor</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>((<span class=\"type\">char</span>)<span class=\"number\">223</span>);<span class=\"comment\">//shows degrees character</span></span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  lcd.<span class=\"built_in\">setCursor</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot;Humi: &quot;</span>);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(h);</span><br><span class=\"line\">  lcd.<span class=\"built_in\">print</span>(<span class=\"string\">&quot; %&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">delay</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>最终，我们实现了把DHT11的温湿度显示到LCD上的效果了：<br />\r\n<img src=\"https://z3.ax1x.com/2021/10/10/5kxeUS.jpg\" /></p>\r\n<p>参考文章： * <a href=\"https://www.jianshu.com/p/eee98fb5e68f\">LCD\r\n1602显示屏</a></p>"},{"title":"DOS 系统功能调用（INT 21H）","author":"Salamander","date":"2022-03-05T12:17:00.000Z","_content":"![upload successful](/images/dos_image.png)\n\n`INT`表示`interrupt`（中断）， INT指令是X86汇编语言中最重要的指令之一，它的作用是引发中断，调用“中断例程”（interrupt routine）。   \n中断是由于软件或硬件的信号，使CPU暂停执行当前的任务，转而去执行另一段子程序。  \n* 硬中断（外中断）：由外部设备，如网卡、硬盘随机引发的，比如网卡收到数据包的时候，就会发出一个中断。\n* 软中断（内中断）：由执行中的指令产生的，可以通过程序控制触发。\n\n可以通过 “ INT 中断码 ” 实现中断，内存中有一张**中断向量表**，用来存放中断码处理中断程序的入口地址。CPU在接受到中断信号后，暂停当前正在执行的程序，跳转到中断码对应的向量表地址处去执行中断。\n\n\n我们理解上可以当`INT`就是调用系统内置的一些功能。  \n常用的中断：  \n* `INT 21H`：DOS系统功能调用\n* `INT 10H`：BIOS终端调用\n* `INT 3H`：断点中断，用于调试程序\n\n这篇文章重点记录下DOS的系统功能调用，也就是`INT 21H`。  \n\n<!-- more -->\n\n\n本文环境：\n* 操作系统：虚拟机中的Windows 10\n* Visual Studio Code\n* VSCode 插件：[MASM/TASM](https://marketplace.visualstudio.com/items?itemName=xsro.masm-tasm)\n这个插件还蛮方便的，省去了自己配环境的麻烦，右键单击文件选择`Run ASM code`就可以执行代码：  \n\n![upload successful](/images/vsc_run_code.png)\n\n\nDOS系统功能调用格式都是一致的，步骤如下：\n1. 在`AH`寄存器中设置系统功能调用号。\n2. 在指定的寄存器中设置入口参数。\n3. 用`INT 21H`指令执行功能调用。\n4. 根据出口参数分析功能调用执行情况。\n\n## 常见功能\n\nDOS 系统功能调用 `INT 21H`，有数百种功能供用户使用。下面介绍几个常用的 DOS 系统功能调用，简要描述如表所示。  \n\n![upload successful](/images/dos_api.png)  \n4C肯定天天用，毕竟用来返回DOS的，这里写点其他功能的例子。  \n\n\n## 一些例子\n汇编代码中，指令和寄存器名大写和小写没关系，所以这里ah和AH，dx和DX也没问题。但是4H和4还是有点不一样的，`4H`是16进制，不带h表示10进制。\n\n#### 显示一个字符\n```\nassume cs:code, ds:data\n  \n; 数据段\ndata segment  \n    message db 'hello'\ndata ends\n\n; 代码段\ncode segment  \nstart: \n    mov ax, data\n    mov ds, ax\n\n    mov dl, ds:[1h]\n\n    ;调用DOS系统功能，2表示输出DL寄存器的字符到显示器\n    mov ah, 2h\n    int 21h\n    \n    ;返回DOS\n    mov ah, 4ch\n    int 21h\n     \ncode ends     \nend start\n```\n这个程序会输出一个`e`的字符。\n\n#### 打印hello world\n代码是用别人的，他的注释写的蛮好的：\n```\n; 注：这里的关联并没有任何实际操作，相当于给我们自己的注释而已\n; 相当于即使不写这一行也没有关系\nassume cs:code, ds:data\n  \n; 数据段\ndata segment  \n    ; 创建字符串\n    ; 汇编打印字符串要在尾部用 $ 标记字符串的结束位置\n    ; 将字符串用hello做一个标记，方便后面使用它\n    hello db 'Hello World!$'\ndata ends\n\n; 代码段\ncode segment  \n; 指令执行的起始，类似于C语言的main函数入口\nstart:  \n    ; 汇编语言不会自动把数据段寄存器指向我们程序的数据段\n    ; 将数据段寄存器指向我们自己程序的数据段\n    mov ax, data\n    mov ds, ax\n\n    ; 打印字符串的参数\n    ; DS:DX=串地址，将字符串的偏移地址传入dx寄存器\n    ; 字符串是在数据段起始创建的，它的偏移地址是0H\n    ; offset hello 即找到标记为hello的数据段字符串的编译地址\n    ; 还可以写成 mov dx, 0H\n    mov dx, offset hello  \n    ; 打印字符串，ah=9H代表打印\n    mov ah, 9h\n    int 21h\n    \n    ; 正常退出程序，相当于高级语言的 return 0\n    mov ah, 4ch\n    int 21h\n     \ncode ends     \nend start\n```\n\n#### 读取键盘输入两个数求和\n这个例子复杂了点\n```\nassume cs:code, ds:data, ss:stack\n\nstack segment\n    dw 30h dup(0)\nstack ends\n  \n; 数据段\ndata segment\n    buf db 20h, 0, 20h dup (0)\n    message db 'input a number:$'\n    num dw ?\ndata ends\n\ncode segment\nstart:\n    mov ax, data\n    mov ds, ax\n    call printMsg\n    call readInput\n    call atoi\n    push num\n\n    ; again\n    call printMsg\n    call readInput\n    call atoi\n    push num\n\n    ; cal summ\n    call sum\n    call printAx\n\n    mov ah, 4ch\n    int 21h\n\nprintMsg:\n    mov dx, offset message\n    mov ah, 9h\n    int 21h\n    ret\n\nreadInput:\n    ; first byte to tell dos maximum characters buffer can hold\n    mov dx, 0h\n    mov ah, 0Ah\n    int 21h\n    ; print \\n\n    mov dl, 0Ah\n    mov ah, 02h\n    int 21h\n    ret\n\natoi proc\n    mov dx,0\n    mov bx,10\n    mov si,2\n    mov num,0\n    mov ax,0\nlop:\n    mov al,buf[si]\n    cmp al,0Dh\n    je  final\n    sub al,30h\n    cmp num,0\n    je  do_delta\n    push ax\n    mov ax,num\n    mul bx\n    mov num,ax  \n    pop ax\ndo_delta:\n    add num,ax\n    mov ax,0\n    inc si\n    jmp lop\nfinal:    \n    ret\natoi endp\n; 内平衡\nsum:\n    mov bp, sp\n    mov ax, ss:[bp+2]\n    add ax, ss:[bp+4]  \n    \n    ret 4\n\n\nprintAx proc\n    ;initialize count\n    mov cx,0\n    mov dx,0\n    label1:\n        ; if ax is zero\n        cmp ax,0\n        je print1     \n        mov bx,10\n        div bx\n         \n        ;push it in the stack\n        push dx             \n         \n        ;increment the count\n        inc cx             \n         \n        ;set dx to 0\n        xor dx,dx\n        jmp label1\n    print1:\n        ;check if count\n        ;is greater than zero\n        cmp cx,0\n        je exit\n         \n        ;pop the top of stack\n        pop dx\n         \n        ;add 48 so that it\n        ;represents the ASCII\n        ;value of digits\n        add dx,48\n        ; print character\n        mov ah,02h\n        int 21h\n         \n        ;decrease the count\n        dec cx\n        jmp print1\nexit:\n        ret\nprintAx endp\n\ncode ends\nend start\n```\n\n\n![upload successful](/images/dos_cal_result.png)\n\n\n## 调试工具DEBUG常用命令\n\n##### R ——查看和修改寄存器\n##### D ——查看内存单元\n内存每16个字节单元为一小段，逻辑段必须从小段的首址开始。用D命令可以查看存储单元的地址和内容。  \nD命令格式为：  \n```\nD  段地址:起始偏移地址 [结尾偏移地址] [L范围]\n```\n例如：  \n```\nD DS:0      查看数据段，从0号单元开始  \nD ES:0      查看附加段，从0号单元开始  \nD DS:100   查看数据段，从100H号单元开始  \nD 0200:5 15   查看0200H段的5号单元到15H号单元（在虚拟机上该命令不能执行）  \nD 0200:5 L 11  用L选择范围。查看0200H段的5号单元到15H号单元共10个单元  \n```\n##### T /P——单步执行\nP可以跳过子程序或系统调用，其他方面T和P是类型的。\n\n\n参考：\n* [从零入门8086汇编](https://juejin.cn/post/6844903866153041928)\n* [调试工具DEBUG](https://www.cnblogs.com/lfri/p/10780994.html)","source":"_posts/assembly_int21H.md","raw":"title: DOS 系统功能调用（INT 21H）\nauthor: Salamander\ntags:\n  - Assembly\ncategories: []\ndate: 2022-03-05 20:17:00\n---\n![upload successful](/images/dos_image.png)\n\n`INT`表示`interrupt`（中断）， INT指令是X86汇编语言中最重要的指令之一，它的作用是引发中断，调用“中断例程”（interrupt routine）。   \n中断是由于软件或硬件的信号，使CPU暂停执行当前的任务，转而去执行另一段子程序。  \n* 硬中断（外中断）：由外部设备，如网卡、硬盘随机引发的，比如网卡收到数据包的时候，就会发出一个中断。\n* 软中断（内中断）：由执行中的指令产生的，可以通过程序控制触发。\n\n可以通过 “ INT 中断码 ” 实现中断，内存中有一张**中断向量表**，用来存放中断码处理中断程序的入口地址。CPU在接受到中断信号后，暂停当前正在执行的程序，跳转到中断码对应的向量表地址处去执行中断。\n\n\n我们理解上可以当`INT`就是调用系统内置的一些功能。  \n常用的中断：  \n* `INT 21H`：DOS系统功能调用\n* `INT 10H`：BIOS终端调用\n* `INT 3H`：断点中断，用于调试程序\n\n这篇文章重点记录下DOS的系统功能调用，也就是`INT 21H`。  \n\n<!-- more -->\n\n\n本文环境：\n* 操作系统：虚拟机中的Windows 10\n* Visual Studio Code\n* VSCode 插件：[MASM/TASM](https://marketplace.visualstudio.com/items?itemName=xsro.masm-tasm)\n这个插件还蛮方便的，省去了自己配环境的麻烦，右键单击文件选择`Run ASM code`就可以执行代码：  \n\n![upload successful](/images/vsc_run_code.png)\n\n\nDOS系统功能调用格式都是一致的，步骤如下：\n1. 在`AH`寄存器中设置系统功能调用号。\n2. 在指定的寄存器中设置入口参数。\n3. 用`INT 21H`指令执行功能调用。\n4. 根据出口参数分析功能调用执行情况。\n\n## 常见功能\n\nDOS 系统功能调用 `INT 21H`，有数百种功能供用户使用。下面介绍几个常用的 DOS 系统功能调用，简要描述如表所示。  \n\n![upload successful](/images/dos_api.png)  \n4C肯定天天用，毕竟用来返回DOS的，这里写点其他功能的例子。  \n\n\n## 一些例子\n汇编代码中，指令和寄存器名大写和小写没关系，所以这里ah和AH，dx和DX也没问题。但是4H和4还是有点不一样的，`4H`是16进制，不带h表示10进制。\n\n#### 显示一个字符\n```\nassume cs:code, ds:data\n  \n; 数据段\ndata segment  \n    message db 'hello'\ndata ends\n\n; 代码段\ncode segment  \nstart: \n    mov ax, data\n    mov ds, ax\n\n    mov dl, ds:[1h]\n\n    ;调用DOS系统功能，2表示输出DL寄存器的字符到显示器\n    mov ah, 2h\n    int 21h\n    \n    ;返回DOS\n    mov ah, 4ch\n    int 21h\n     \ncode ends     \nend start\n```\n这个程序会输出一个`e`的字符。\n\n#### 打印hello world\n代码是用别人的，他的注释写的蛮好的：\n```\n; 注：这里的关联并没有任何实际操作，相当于给我们自己的注释而已\n; 相当于即使不写这一行也没有关系\nassume cs:code, ds:data\n  \n; 数据段\ndata segment  \n    ; 创建字符串\n    ; 汇编打印字符串要在尾部用 $ 标记字符串的结束位置\n    ; 将字符串用hello做一个标记，方便后面使用它\n    hello db 'Hello World!$'\ndata ends\n\n; 代码段\ncode segment  \n; 指令执行的起始，类似于C语言的main函数入口\nstart:  \n    ; 汇编语言不会自动把数据段寄存器指向我们程序的数据段\n    ; 将数据段寄存器指向我们自己程序的数据段\n    mov ax, data\n    mov ds, ax\n\n    ; 打印字符串的参数\n    ; DS:DX=串地址，将字符串的偏移地址传入dx寄存器\n    ; 字符串是在数据段起始创建的，它的偏移地址是0H\n    ; offset hello 即找到标记为hello的数据段字符串的编译地址\n    ; 还可以写成 mov dx, 0H\n    mov dx, offset hello  \n    ; 打印字符串，ah=9H代表打印\n    mov ah, 9h\n    int 21h\n    \n    ; 正常退出程序，相当于高级语言的 return 0\n    mov ah, 4ch\n    int 21h\n     \ncode ends     \nend start\n```\n\n#### 读取键盘输入两个数求和\n这个例子复杂了点\n```\nassume cs:code, ds:data, ss:stack\n\nstack segment\n    dw 30h dup(0)\nstack ends\n  \n; 数据段\ndata segment\n    buf db 20h, 0, 20h dup (0)\n    message db 'input a number:$'\n    num dw ?\ndata ends\n\ncode segment\nstart:\n    mov ax, data\n    mov ds, ax\n    call printMsg\n    call readInput\n    call atoi\n    push num\n\n    ; again\n    call printMsg\n    call readInput\n    call atoi\n    push num\n\n    ; cal summ\n    call sum\n    call printAx\n\n    mov ah, 4ch\n    int 21h\n\nprintMsg:\n    mov dx, offset message\n    mov ah, 9h\n    int 21h\n    ret\n\nreadInput:\n    ; first byte to tell dos maximum characters buffer can hold\n    mov dx, 0h\n    mov ah, 0Ah\n    int 21h\n    ; print \\n\n    mov dl, 0Ah\n    mov ah, 02h\n    int 21h\n    ret\n\natoi proc\n    mov dx,0\n    mov bx,10\n    mov si,2\n    mov num,0\n    mov ax,0\nlop:\n    mov al,buf[si]\n    cmp al,0Dh\n    je  final\n    sub al,30h\n    cmp num,0\n    je  do_delta\n    push ax\n    mov ax,num\n    mul bx\n    mov num,ax  \n    pop ax\ndo_delta:\n    add num,ax\n    mov ax,0\n    inc si\n    jmp lop\nfinal:    \n    ret\natoi endp\n; 内平衡\nsum:\n    mov bp, sp\n    mov ax, ss:[bp+2]\n    add ax, ss:[bp+4]  \n    \n    ret 4\n\n\nprintAx proc\n    ;initialize count\n    mov cx,0\n    mov dx,0\n    label1:\n        ; if ax is zero\n        cmp ax,0\n        je print1     \n        mov bx,10\n        div bx\n         \n        ;push it in the stack\n        push dx             \n         \n        ;increment the count\n        inc cx             \n         \n        ;set dx to 0\n        xor dx,dx\n        jmp label1\n    print1:\n        ;check if count\n        ;is greater than zero\n        cmp cx,0\n        je exit\n         \n        ;pop the top of stack\n        pop dx\n         \n        ;add 48 so that it\n        ;represents the ASCII\n        ;value of digits\n        add dx,48\n        ; print character\n        mov ah,02h\n        int 21h\n         \n        ;decrease the count\n        dec cx\n        jmp print1\nexit:\n        ret\nprintAx endp\n\ncode ends\nend start\n```\n\n\n![upload successful](/images/dos_cal_result.png)\n\n\n## 调试工具DEBUG常用命令\n\n##### R ——查看和修改寄存器\n##### D ——查看内存单元\n内存每16个字节单元为一小段，逻辑段必须从小段的首址开始。用D命令可以查看存储单元的地址和内容。  \nD命令格式为：  \n```\nD  段地址:起始偏移地址 [结尾偏移地址] [L范围]\n```\n例如：  \n```\nD DS:0      查看数据段，从0号单元开始  \nD ES:0      查看附加段，从0号单元开始  \nD DS:100   查看数据段，从100H号单元开始  \nD 0200:5 15   查看0200H段的5号单元到15H号单元（在虚拟机上该命令不能执行）  \nD 0200:5 L 11  用L选择范围。查看0200H段的5号单元到15H号单元共10个单元  \n```\n##### T /P——单步执行\nP可以跳过子程序或系统调用，其他方面T和P是类型的。\n\n\n参考：\n* [从零入门8086汇编](https://juejin.cn/post/6844903866153041928)\n* [调试工具DEBUG](https://www.cnblogs.com/lfri/p/10780994.html)","slug":"assembly_int21H","published":1,"updated":"2023-03-21T02:48:19.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40la00252o3mahn9brw1","content":"<figure>\r\n<img src=\"/images/dos_image.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p><code>INT</code>表示<code>interrupt</code>（中断），\r\nINT指令是X86汇编语言中最重要的指令之一，它的作用是引发中断，调用“中断例程”（interrupt\r\nroutine）。<br />\r\n中断是由于软件或硬件的信号，使CPU暂停执行当前的任务，转而去执行另一段子程序。<br />\r\n*\r\n硬中断（外中断）：由外部设备，如网卡、硬盘随机引发的，比如网卡收到数据包的时候，就会发出一个中断。\r\n* 软中断（内中断）：由执行中的指令产生的，可以通过程序控制触发。</p>\r\n<p>可以通过 “ INT 中断码 ”\r\n实现中断，内存中有一张<strong>中断向量表</strong>，用来存放中断码处理中断程序的入口地址。CPU在接受到中断信号后，暂停当前正在执行的程序，跳转到中断码对应的向量表地址处去执行中断。</p>\r\n<p>我们理解上可以当<code>INT</code>就是调用系统内置的一些功能。<br />\r\n常用的中断：<br />\r\n* <code>INT 21H</code>：DOS系统功能调用 *\r\n<code>INT 10H</code>：BIOS终端调用 *\r\n<code>INT 3H</code>：断点中断，用于调试程序</p>\r\n<p>这篇文章重点记录下DOS的系统功能调用，也就是<code>INT 21H</code>。</p>\r\n<span id=\"more\"></span>\r\n<p>本文环境： * 操作系统：虚拟机中的Windows 10 * Visual Studio Code *\r\nVSCode 插件：<a\r\nhref=\"https://marketplace.visualstudio.com/items?itemName=xsro.masm-tasm\">MASM/TASM</a>\r\n这个插件还蛮方便的，省去了自己配环境的麻烦，右键单击文件选择<code>Run ASM code</code>就可以执行代码：</p>\r\n<figure>\r\n<img src=\"/images/vsc_run_code.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>DOS系统功能调用格式都是一致的，步骤如下： 1.\r\n在<code>AH</code>寄存器中设置系统功能调用号。 2.\r\n在指定的寄存器中设置入口参数。 3.\r\n用<code>INT 21H</code>指令执行功能调用。 4.\r\n根据出口参数分析功能调用执行情况。</p>\r\n<h2 id=\"常见功能\">常见功能</h2>\r\n<p>DOS 系统功能调用\r\n<code>INT 21H</code>，有数百种功能供用户使用。下面介绍几个常用的 DOS\r\n系统功能调用，简要描述如表所示。</p>\r\n<p><img src=\"/images/dos_api.png\" alt=\"upload successful\" /><br />\r\n4C肯定天天用，毕竟用来返回DOS的，这里写点其他功能的例子。</p>\r\n<h2 id=\"一些例子\">一些例子</h2>\r\n<p>汇编代码中，指令和寄存器名大写和小写没关系，所以这里ah和AH，dx和DX也没问题。但是4H和4还是有点不一样的，<code>4H</code>是16进制，不带h表示10进制。</p>\r\n<h4 id=\"显示一个字符\">显示一个字符</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assume cs:code, ds:data</span><br><span class=\"line\">  </span><br><span class=\"line\">; 数据段</span><br><span class=\"line\">data segment  </span><br><span class=\"line\">    message db &#x27;hello&#x27;</span><br><span class=\"line\">data ends</span><br><span class=\"line\"></span><br><span class=\"line\">; 代码段</span><br><span class=\"line\">code segment  </span><br><span class=\"line\">start: </span><br><span class=\"line\">    mov ax, data</span><br><span class=\"line\">    mov ds, ax</span><br><span class=\"line\"></span><br><span class=\"line\">    mov dl, ds:[1h]</span><br><span class=\"line\"></span><br><span class=\"line\">    ;调用DOS系统功能，2表示输出DL寄存器的字符到显示器</span><br><span class=\"line\">    mov ah, 2h</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">    </span><br><span class=\"line\">    ;返回DOS</span><br><span class=\"line\">    mov ah, 4ch</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">     </span><br><span class=\"line\">code ends     </span><br><span class=\"line\">end start</span><br></pre></td></tr></table></figure>\r\n<p>这个程序会输出一个<code>e</code>的字符。</p>\r\n<h4 id=\"打印hello-world\">打印hello world</h4>\r\n<p>代码是用别人的，他的注释写的蛮好的： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; 注：这里的关联并没有任何实际操作，相当于给我们自己的注释而已</span><br><span class=\"line\">; 相当于即使不写这一行也没有关系</span><br><span class=\"line\">assume cs:code, ds:data</span><br><span class=\"line\">  </span><br><span class=\"line\">; 数据段</span><br><span class=\"line\">data segment  </span><br><span class=\"line\">    ; 创建字符串</span><br><span class=\"line\">    ; 汇编打印字符串要在尾部用 $ 标记字符串的结束位置</span><br><span class=\"line\">    ; 将字符串用hello做一个标记，方便后面使用它</span><br><span class=\"line\">    hello db &#x27;Hello World!$&#x27;</span><br><span class=\"line\">data ends</span><br><span class=\"line\"></span><br><span class=\"line\">; 代码段</span><br><span class=\"line\">code segment  </span><br><span class=\"line\">; 指令执行的起始，类似于C语言的main函数入口</span><br><span class=\"line\">start:  </span><br><span class=\"line\">    ; 汇编语言不会自动把数据段寄存器指向我们程序的数据段</span><br><span class=\"line\">    ; 将数据段寄存器指向我们自己程序的数据段</span><br><span class=\"line\">    mov ax, data</span><br><span class=\"line\">    mov ds, ax</span><br><span class=\"line\"></span><br><span class=\"line\">    ; 打印字符串的参数</span><br><span class=\"line\">    ; DS:DX=串地址，将字符串的偏移地址传入dx寄存器</span><br><span class=\"line\">    ; 字符串是在数据段起始创建的，它的偏移地址是0H</span><br><span class=\"line\">    ; offset hello 即找到标记为hello的数据段字符串的编译地址</span><br><span class=\"line\">    ; 还可以写成 mov dx, 0H</span><br><span class=\"line\">    mov dx, offset hello  </span><br><span class=\"line\">    ; 打印字符串，ah=9H代表打印</span><br><span class=\"line\">    mov ah, 9h</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">    </span><br><span class=\"line\">    ; 正常退出程序，相当于高级语言的 return 0</span><br><span class=\"line\">    mov ah, 4ch</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">     </span><br><span class=\"line\">code ends     </span><br><span class=\"line\">end start</span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"读取键盘输入两个数求和\">读取键盘输入两个数求和</h4>\r\n<p>这个例子复杂了点 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assume cs:code, ds:data, ss:stack</span><br><span class=\"line\"></span><br><span class=\"line\">stack segment</span><br><span class=\"line\">    dw 30h dup(0)</span><br><span class=\"line\">stack ends</span><br><span class=\"line\">  </span><br><span class=\"line\">; 数据段</span><br><span class=\"line\">data segment</span><br><span class=\"line\">    buf db 20h, 0, 20h dup (0)</span><br><span class=\"line\">    message db &#x27;input a number:$&#x27;</span><br><span class=\"line\">    num dw ?</span><br><span class=\"line\">data ends</span><br><span class=\"line\"></span><br><span class=\"line\">code segment</span><br><span class=\"line\">start:</span><br><span class=\"line\">    mov ax, data</span><br><span class=\"line\">    mov ds, ax</span><br><span class=\"line\">    call printMsg</span><br><span class=\"line\">    call readInput</span><br><span class=\"line\">    call atoi</span><br><span class=\"line\">    push num</span><br><span class=\"line\"></span><br><span class=\"line\">    ; again</span><br><span class=\"line\">    call printMsg</span><br><span class=\"line\">    call readInput</span><br><span class=\"line\">    call atoi</span><br><span class=\"line\">    push num</span><br><span class=\"line\"></span><br><span class=\"line\">    ; cal summ</span><br><span class=\"line\">    call sum</span><br><span class=\"line\">    call printAx</span><br><span class=\"line\"></span><br><span class=\"line\">    mov ah, 4ch</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\"></span><br><span class=\"line\">printMsg:</span><br><span class=\"line\">    mov dx, offset message</span><br><span class=\"line\">    mov ah, 9h</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">    ret</span><br><span class=\"line\"></span><br><span class=\"line\">readInput:</span><br><span class=\"line\">    ; first byte to tell dos maximum characters buffer can hold</span><br><span class=\"line\">    mov dx, 0h</span><br><span class=\"line\">    mov ah, 0Ah</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">    ; print \\n</span><br><span class=\"line\">    mov dl, 0Ah</span><br><span class=\"line\">    mov ah, 02h</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">    ret</span><br><span class=\"line\"></span><br><span class=\"line\">atoi proc</span><br><span class=\"line\">    mov dx,0</span><br><span class=\"line\">    mov bx,10</span><br><span class=\"line\">    mov si,2</span><br><span class=\"line\">    mov num,0</span><br><span class=\"line\">    mov ax,0</span><br><span class=\"line\">lop:</span><br><span class=\"line\">    mov al,buf[si]</span><br><span class=\"line\">    cmp al,0Dh</span><br><span class=\"line\">    je  final</span><br><span class=\"line\">    sub al,30h</span><br><span class=\"line\">    cmp num,0</span><br><span class=\"line\">    je  do_delta</span><br><span class=\"line\">    push ax</span><br><span class=\"line\">    mov ax,num</span><br><span class=\"line\">    mul bx</span><br><span class=\"line\">    mov num,ax  </span><br><span class=\"line\">    pop ax</span><br><span class=\"line\">do_delta:</span><br><span class=\"line\">    add num,ax</span><br><span class=\"line\">    mov ax,0</span><br><span class=\"line\">    inc si</span><br><span class=\"line\">    jmp lop</span><br><span class=\"line\">final:    </span><br><span class=\"line\">    ret</span><br><span class=\"line\">atoi endp</span><br><span class=\"line\">; 内平衡</span><br><span class=\"line\">sum:</span><br><span class=\"line\">    mov bp, sp</span><br><span class=\"line\">    mov ax, ss:[bp+2]</span><br><span class=\"line\">    add ax, ss:[bp+4]  </span><br><span class=\"line\">    </span><br><span class=\"line\">    ret 4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">printAx proc</span><br><span class=\"line\">    ;initialize count</span><br><span class=\"line\">    mov cx,0</span><br><span class=\"line\">    mov dx,0</span><br><span class=\"line\">    label1:</span><br><span class=\"line\">        ; if ax is zero</span><br><span class=\"line\">        cmp ax,0</span><br><span class=\"line\">        je print1     </span><br><span class=\"line\">        mov bx,10</span><br><span class=\"line\">        div bx</span><br><span class=\"line\">         </span><br><span class=\"line\">        ;push it in the stack</span><br><span class=\"line\">        push dx             </span><br><span class=\"line\">         </span><br><span class=\"line\">        ;increment the count</span><br><span class=\"line\">        inc cx             </span><br><span class=\"line\">         </span><br><span class=\"line\">        ;set dx to 0</span><br><span class=\"line\">        xor dx,dx</span><br><span class=\"line\">        jmp label1</span><br><span class=\"line\">    print1:</span><br><span class=\"line\">        ;check if count</span><br><span class=\"line\">        ;is greater than zero</span><br><span class=\"line\">        cmp cx,0</span><br><span class=\"line\">        je exit</span><br><span class=\"line\">         </span><br><span class=\"line\">        ;pop the top of stack</span><br><span class=\"line\">        pop dx</span><br><span class=\"line\">         </span><br><span class=\"line\">        ;add 48 so that it</span><br><span class=\"line\">        ;represents the ASCII</span><br><span class=\"line\">        ;value of digits</span><br><span class=\"line\">        add dx,48</span><br><span class=\"line\">        ; print character</span><br><span class=\"line\">        mov ah,02h</span><br><span class=\"line\">        int 21h</span><br><span class=\"line\">         </span><br><span class=\"line\">        ;decrease the count</span><br><span class=\"line\">        dec cx</span><br><span class=\"line\">        jmp print1</span><br><span class=\"line\">exit:</span><br><span class=\"line\">        ret</span><br><span class=\"line\">printAx endp</span><br><span class=\"line\"></span><br><span class=\"line\">code ends</span><br><span class=\"line\">end start</span><br></pre></td></tr></table></figure></p>\r\n<figure>\r\n<img src=\"/images/dos_cal_result.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<h2 id=\"调试工具debug常用命令\">调试工具DEBUG常用命令</h2>\r\n<h5 id=\"r-查看和修改寄存器\">R ——查看和修改寄存器</h5>\r\n<h5 id=\"d-查看内存单元\">D ——查看内存单元</h5>\r\n<p>内存每16个字节单元为一小段，逻辑段必须从小段的首址开始。用D命令可以查看存储单元的地址和内容。<br />\r\nD命令格式为：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D  段地址:起始偏移地址 [结尾偏移地址] [L范围]</span><br></pre></td></tr></table></figure> 例如：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D DS:0      查看数据段，从0号单元开始  </span><br><span class=\"line\">D ES:0      查看附加段，从0号单元开始  </span><br><span class=\"line\">D DS:100   查看数据段，从100H号单元开始  </span><br><span class=\"line\">D 0200:5 15   查看0200H段的5号单元到15H号单元（在虚拟机上该命令不能执行）  </span><br><span class=\"line\">D 0200:5 L 11  用L选择范围。查看0200H段的5号单元到15H号单元共10个单元  </span><br></pre></td></tr></table></figure> ##### T /P——单步执行\r\nP可以跳过子程序或系统调用，其他方面T和P是类型的。</p>\r\n<p>参考： * <a\r\nhref=\"https://juejin.cn/post/6844903866153041928\">从零入门8086汇编</a> *\r\n<a\r\nhref=\"https://www.cnblogs.com/lfri/p/10780994.html\">调试工具DEBUG</a></p>\r\n","site":{"data":{}},"excerpt":"<figure>\r\n<img src=\"/images/dos_image.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p><code>INT</code>表示<code>interrupt</code>（中断），\r\nINT指令是X86汇编语言中最重要的指令之一，它的作用是引发中断，调用“中断例程”（interrupt\r\nroutine）。<br />\r\n中断是由于软件或硬件的信号，使CPU暂停执行当前的任务，转而去执行另一段子程序。<br />\r\n*\r\n硬中断（外中断）：由外部设备，如网卡、硬盘随机引发的，比如网卡收到数据包的时候，就会发出一个中断。\r\n* 软中断（内中断）：由执行中的指令产生的，可以通过程序控制触发。</p>\r\n<p>可以通过 “ INT 中断码 ”\r\n实现中断，内存中有一张<strong>中断向量表</strong>，用来存放中断码处理中断程序的入口地址。CPU在接受到中断信号后，暂停当前正在执行的程序，跳转到中断码对应的向量表地址处去执行中断。</p>\r\n<p>我们理解上可以当<code>INT</code>就是调用系统内置的一些功能。<br />\r\n常用的中断：<br />\r\n* <code>INT 21H</code>：DOS系统功能调用 *\r\n<code>INT 10H</code>：BIOS终端调用 *\r\n<code>INT 3H</code>：断点中断，用于调试程序</p>\r\n<p>这篇文章重点记录下DOS的系统功能调用，也就是<code>INT 21H</code>。</p>","more":"<p>本文环境： * 操作系统：虚拟机中的Windows 10 * Visual Studio Code *\r\nVSCode 插件：<a\r\nhref=\"https://marketplace.visualstudio.com/items?itemName=xsro.masm-tasm\">MASM/TASM</a>\r\n这个插件还蛮方便的，省去了自己配环境的麻烦，右键单击文件选择<code>Run ASM code</code>就可以执行代码：</p>\r\n<figure>\r\n<img src=\"/images/vsc_run_code.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>DOS系统功能调用格式都是一致的，步骤如下： 1.\r\n在<code>AH</code>寄存器中设置系统功能调用号。 2.\r\n在指定的寄存器中设置入口参数。 3.\r\n用<code>INT 21H</code>指令执行功能调用。 4.\r\n根据出口参数分析功能调用执行情况。</p>\r\n<h2 id=\"常见功能\">常见功能</h2>\r\n<p>DOS 系统功能调用\r\n<code>INT 21H</code>，有数百种功能供用户使用。下面介绍几个常用的 DOS\r\n系统功能调用，简要描述如表所示。</p>\r\n<p><img src=\"/images/dos_api.png\" alt=\"upload successful\" /><br />\r\n4C肯定天天用，毕竟用来返回DOS的，这里写点其他功能的例子。</p>\r\n<h2 id=\"一些例子\">一些例子</h2>\r\n<p>汇编代码中，指令和寄存器名大写和小写没关系，所以这里ah和AH，dx和DX也没问题。但是4H和4还是有点不一样的，<code>4H</code>是16进制，不带h表示10进制。</p>\r\n<h4 id=\"显示一个字符\">显示一个字符</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assume cs:code, ds:data</span><br><span class=\"line\">  </span><br><span class=\"line\">; 数据段</span><br><span class=\"line\">data segment  </span><br><span class=\"line\">    message db &#x27;hello&#x27;</span><br><span class=\"line\">data ends</span><br><span class=\"line\"></span><br><span class=\"line\">; 代码段</span><br><span class=\"line\">code segment  </span><br><span class=\"line\">start: </span><br><span class=\"line\">    mov ax, data</span><br><span class=\"line\">    mov ds, ax</span><br><span class=\"line\"></span><br><span class=\"line\">    mov dl, ds:[1h]</span><br><span class=\"line\"></span><br><span class=\"line\">    ;调用DOS系统功能，2表示输出DL寄存器的字符到显示器</span><br><span class=\"line\">    mov ah, 2h</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">    </span><br><span class=\"line\">    ;返回DOS</span><br><span class=\"line\">    mov ah, 4ch</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">     </span><br><span class=\"line\">code ends     </span><br><span class=\"line\">end start</span><br></pre></td></tr></table></figure>\r\n<p>这个程序会输出一个<code>e</code>的字符。</p>\r\n<h4 id=\"打印hello-world\">打印hello world</h4>\r\n<p>代码是用别人的，他的注释写的蛮好的： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; 注：这里的关联并没有任何实际操作，相当于给我们自己的注释而已</span><br><span class=\"line\">; 相当于即使不写这一行也没有关系</span><br><span class=\"line\">assume cs:code, ds:data</span><br><span class=\"line\">  </span><br><span class=\"line\">; 数据段</span><br><span class=\"line\">data segment  </span><br><span class=\"line\">    ; 创建字符串</span><br><span class=\"line\">    ; 汇编打印字符串要在尾部用 $ 标记字符串的结束位置</span><br><span class=\"line\">    ; 将字符串用hello做一个标记，方便后面使用它</span><br><span class=\"line\">    hello db &#x27;Hello World!$&#x27;</span><br><span class=\"line\">data ends</span><br><span class=\"line\"></span><br><span class=\"line\">; 代码段</span><br><span class=\"line\">code segment  </span><br><span class=\"line\">; 指令执行的起始，类似于C语言的main函数入口</span><br><span class=\"line\">start:  </span><br><span class=\"line\">    ; 汇编语言不会自动把数据段寄存器指向我们程序的数据段</span><br><span class=\"line\">    ; 将数据段寄存器指向我们自己程序的数据段</span><br><span class=\"line\">    mov ax, data</span><br><span class=\"line\">    mov ds, ax</span><br><span class=\"line\"></span><br><span class=\"line\">    ; 打印字符串的参数</span><br><span class=\"line\">    ; DS:DX=串地址，将字符串的偏移地址传入dx寄存器</span><br><span class=\"line\">    ; 字符串是在数据段起始创建的，它的偏移地址是0H</span><br><span class=\"line\">    ; offset hello 即找到标记为hello的数据段字符串的编译地址</span><br><span class=\"line\">    ; 还可以写成 mov dx, 0H</span><br><span class=\"line\">    mov dx, offset hello  </span><br><span class=\"line\">    ; 打印字符串，ah=9H代表打印</span><br><span class=\"line\">    mov ah, 9h</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">    </span><br><span class=\"line\">    ; 正常退出程序，相当于高级语言的 return 0</span><br><span class=\"line\">    mov ah, 4ch</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">     </span><br><span class=\"line\">code ends     </span><br><span class=\"line\">end start</span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"读取键盘输入两个数求和\">读取键盘输入两个数求和</h4>\r\n<p>这个例子复杂了点 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assume cs:code, ds:data, ss:stack</span><br><span class=\"line\"></span><br><span class=\"line\">stack segment</span><br><span class=\"line\">    dw 30h dup(0)</span><br><span class=\"line\">stack ends</span><br><span class=\"line\">  </span><br><span class=\"line\">; 数据段</span><br><span class=\"line\">data segment</span><br><span class=\"line\">    buf db 20h, 0, 20h dup (0)</span><br><span class=\"line\">    message db &#x27;input a number:$&#x27;</span><br><span class=\"line\">    num dw ?</span><br><span class=\"line\">data ends</span><br><span class=\"line\"></span><br><span class=\"line\">code segment</span><br><span class=\"line\">start:</span><br><span class=\"line\">    mov ax, data</span><br><span class=\"line\">    mov ds, ax</span><br><span class=\"line\">    call printMsg</span><br><span class=\"line\">    call readInput</span><br><span class=\"line\">    call atoi</span><br><span class=\"line\">    push num</span><br><span class=\"line\"></span><br><span class=\"line\">    ; again</span><br><span class=\"line\">    call printMsg</span><br><span class=\"line\">    call readInput</span><br><span class=\"line\">    call atoi</span><br><span class=\"line\">    push num</span><br><span class=\"line\"></span><br><span class=\"line\">    ; cal summ</span><br><span class=\"line\">    call sum</span><br><span class=\"line\">    call printAx</span><br><span class=\"line\"></span><br><span class=\"line\">    mov ah, 4ch</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\"></span><br><span class=\"line\">printMsg:</span><br><span class=\"line\">    mov dx, offset message</span><br><span class=\"line\">    mov ah, 9h</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">    ret</span><br><span class=\"line\"></span><br><span class=\"line\">readInput:</span><br><span class=\"line\">    ; first byte to tell dos maximum characters buffer can hold</span><br><span class=\"line\">    mov dx, 0h</span><br><span class=\"line\">    mov ah, 0Ah</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">    ; print \\n</span><br><span class=\"line\">    mov dl, 0Ah</span><br><span class=\"line\">    mov ah, 02h</span><br><span class=\"line\">    int 21h</span><br><span class=\"line\">    ret</span><br><span class=\"line\"></span><br><span class=\"line\">atoi proc</span><br><span class=\"line\">    mov dx,0</span><br><span class=\"line\">    mov bx,10</span><br><span class=\"line\">    mov si,2</span><br><span class=\"line\">    mov num,0</span><br><span class=\"line\">    mov ax,0</span><br><span class=\"line\">lop:</span><br><span class=\"line\">    mov al,buf[si]</span><br><span class=\"line\">    cmp al,0Dh</span><br><span class=\"line\">    je  final</span><br><span class=\"line\">    sub al,30h</span><br><span class=\"line\">    cmp num,0</span><br><span class=\"line\">    je  do_delta</span><br><span class=\"line\">    push ax</span><br><span class=\"line\">    mov ax,num</span><br><span class=\"line\">    mul bx</span><br><span class=\"line\">    mov num,ax  </span><br><span class=\"line\">    pop ax</span><br><span class=\"line\">do_delta:</span><br><span class=\"line\">    add num,ax</span><br><span class=\"line\">    mov ax,0</span><br><span class=\"line\">    inc si</span><br><span class=\"line\">    jmp lop</span><br><span class=\"line\">final:    </span><br><span class=\"line\">    ret</span><br><span class=\"line\">atoi endp</span><br><span class=\"line\">; 内平衡</span><br><span class=\"line\">sum:</span><br><span class=\"line\">    mov bp, sp</span><br><span class=\"line\">    mov ax, ss:[bp+2]</span><br><span class=\"line\">    add ax, ss:[bp+4]  </span><br><span class=\"line\">    </span><br><span class=\"line\">    ret 4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">printAx proc</span><br><span class=\"line\">    ;initialize count</span><br><span class=\"line\">    mov cx,0</span><br><span class=\"line\">    mov dx,0</span><br><span class=\"line\">    label1:</span><br><span class=\"line\">        ; if ax is zero</span><br><span class=\"line\">        cmp ax,0</span><br><span class=\"line\">        je print1     </span><br><span class=\"line\">        mov bx,10</span><br><span class=\"line\">        div bx</span><br><span class=\"line\">         </span><br><span class=\"line\">        ;push it in the stack</span><br><span class=\"line\">        push dx             </span><br><span class=\"line\">         </span><br><span class=\"line\">        ;increment the count</span><br><span class=\"line\">        inc cx             </span><br><span class=\"line\">         </span><br><span class=\"line\">        ;set dx to 0</span><br><span class=\"line\">        xor dx,dx</span><br><span class=\"line\">        jmp label1</span><br><span class=\"line\">    print1:</span><br><span class=\"line\">        ;check if count</span><br><span class=\"line\">        ;is greater than zero</span><br><span class=\"line\">        cmp cx,0</span><br><span class=\"line\">        je exit</span><br><span class=\"line\">         </span><br><span class=\"line\">        ;pop the top of stack</span><br><span class=\"line\">        pop dx</span><br><span class=\"line\">         </span><br><span class=\"line\">        ;add 48 so that it</span><br><span class=\"line\">        ;represents the ASCII</span><br><span class=\"line\">        ;value of digits</span><br><span class=\"line\">        add dx,48</span><br><span class=\"line\">        ; print character</span><br><span class=\"line\">        mov ah,02h</span><br><span class=\"line\">        int 21h</span><br><span class=\"line\">         </span><br><span class=\"line\">        ;decrease the count</span><br><span class=\"line\">        dec cx</span><br><span class=\"line\">        jmp print1</span><br><span class=\"line\">exit:</span><br><span class=\"line\">        ret</span><br><span class=\"line\">printAx endp</span><br><span class=\"line\"></span><br><span class=\"line\">code ends</span><br><span class=\"line\">end start</span><br></pre></td></tr></table></figure></p>\r\n<figure>\r\n<img src=\"/images/dos_cal_result.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<h2 id=\"调试工具debug常用命令\">调试工具DEBUG常用命令</h2>\r\n<h5 id=\"r-查看和修改寄存器\">R ——查看和修改寄存器</h5>\r\n<h5 id=\"d-查看内存单元\">D ——查看内存单元</h5>\r\n<p>内存每16个字节单元为一小段，逻辑段必须从小段的首址开始。用D命令可以查看存储单元的地址和内容。<br />\r\nD命令格式为：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D  段地址:起始偏移地址 [结尾偏移地址] [L范围]</span><br></pre></td></tr></table></figure> 例如：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D DS:0      查看数据段，从0号单元开始  </span><br><span class=\"line\">D ES:0      查看附加段，从0号单元开始  </span><br><span class=\"line\">D DS:100   查看数据段，从100H号单元开始  </span><br><span class=\"line\">D 0200:5 15   查看0200H段的5号单元到15H号单元（在虚拟机上该命令不能执行）  </span><br><span class=\"line\">D 0200:5 L 11  用L选择范围。查看0200H段的5号单元到15H号单元共10个单元  </span><br></pre></td></tr></table></figure> ##### T /P——单步执行\r\nP可以跳过子程序或系统调用，其他方面T和P是类型的。</p>\r\n<p>参考： * <a\r\nhref=\"https://juejin.cn/post/6844903866153041928\">从零入门8086汇编</a> *\r\n<a\r\nhref=\"https://www.cnblogs.com/lfri/p/10780994.html\">调试工具DEBUG</a></p>"},{"title":"bochs下启动自己的MBR","author":"pigLoveRabbit","date":"2022-04-17T15:12:00.000Z","_content":"# Bochs\nBochs是一个x86硬件平台的开源模拟器。你可以当它是一台虚拟的x86的计算机。\n\n\n<!-- more -->\n\n\n本文环境：  \n* OS: Ubuntu 20.04.4 LTS\n* Bochs： 2.6.9\n\n\n## 安装Bochs\n这个网上教程很多了，先去[下载](https://sourceforge.net/projects/bochs/files/bochs/)，然后configure：\n```\n./configure \\\n--prefix=/your_path/bochs \\\n--enable-debugger\\\n--enable-disasm \\\n--enable-iodebug \\\n--enable-x86-debugger \\\n--with-x \\\n--with-x11\n```\n这里会出点问题，一般是缺少库了：\n```\nsudo apt-get install libx11-dev ................. for X11/Xlib.h\nsudo apt-get install mesa-common-dev........ for GL/glx.h\nsudo apt-get install libglu1-mesa-dev ..... for GL/glu.h\nsudo apt-get install libxrandr-dev ........... for X11/extensions/Xrandr.h\nsudo apt-get install libxi-dev ................... for X11/extensions/XInput.h\n```\nconfigure通过就可以编译安装了：\n```\nmake\nsudo make install\n```\n\n## 配置\n当我们在终端输入bochs后，\nBochs会自己在当前目录顺序寻找以下文件作为默认配置文件：\n.bochsrc  \nbochsrc  \nbochsrc.txt  \nbochsrc.bxrc(仅对Windows有效)  \n我们可以自己创建一个名为.bochsrc的文件，来指定Bochs配置我们想要的虚拟机。  \n```\n[~/bochs_fun]$ cat bochsrc\n\n#################################################################\n# Bochs的配置文件\n# Configuration file for Bochs\n#################################################################\n\n# how much memory the emulated machine will have\nmegs: 32\n\n# filenameof ROM images\nromimage:file=/usr/local/share/bochs/BIOS-bochs-latest\nvgaromimage:file=/usr/local/share/bochs/VGABIOS-lgpl-latest\n\n# which disk image will be used 这个是启动软盘\nfloppya:1_44=a.img, status=inserted\n\n# choose the boot disk 确定启动方式\n#boot: floppy\nboot: disk\n\n# where do we send log messages?\nlog: bochsout.txt\n\n# disable the mouse\nmouse: enabled=0\n\n# enable key mapping ,using US layout as default\nkeyboard:keymap=/usr/local/share/bochs/keymaps/x11-pc-us.map\n\n# 硬盘设置\nata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14\n```\n\n## 测试开机\n\n按`c`继续运行，弹出新的窗口。  \n\n\n\n\n\n## MBR\nMBR：Master Boot Record，主分区引导记录，它是整个硬盘最开始的扇区，即0柱面0磁头1扇区（CHS表示方法，如果是LBA的话，那就是0扇区）。  \n\n扇区是什么？那就涉及到硬盘基本知识了，对于机械硬盘，有以下概念：\n* 盘片（platter）\n* 磁头（head）\n* 磁道（track）\n* 扇区（sector）\n* 柱面（cylinder）\n\n**盘片 片面 和 磁头（Head）**\n\n硬盘中一般会有多个盘片组成，每个盘片包含两个面，每个盘面都对应地有一个**读/写磁头**。受到硬盘整体体积和生产成本的限制，盘片数量都受到限制，一般都在5片以内。盘片的编号自下向上从0开始，如最下边的盘片有0面和1面，再上一个盘片就编号为2面和3面。  \n\n\n![upload successful](/images/disk_image.png)  \n\n**扇区（Sector）和 磁道（Track）**  \n\n下图显示的是一个盘面，盘面中一圈圈灰色同心圆为一条条磁道，从圆心向外画直线，可以将磁道划分为若干个弧段，每个磁道上一个弧段被称之为一个扇区（图践绿色部分）。扇区是磁盘的最小组成单元，通常是512字节。（由于不断提高磁盘的大小，部分厂商设定每个扇区的大小是4096字节）  \n\n\n![upload successful](/images/disk_sector.png)\n\n\n\n**磁头（Head）和 柱面（Cylinder）**\n硬盘通常由重叠的一组盘片构成，每个盘面都被划分为数目相等的磁道，并从外缘的“0”开始编号，具有相同编号的磁道形成一个圆柱，称之为磁盘的柱面。磁盘的柱面数与一个盘面上的磁道数是相等的。由于每个盘面都有自己的磁头，因此，盘面数等于总的磁头数。 如下图  \n\n![upload successful](/images/disk_cylinder.png)  图3\n\n\n\n\n所谓CHS即柱面（cylinder），磁头（header），扇区（sector），通过这三个变量描述磁盘地址（先定位柱面，然后选定磁头，然后确定扇区），需要明白的是，这里表示的已不是物理地址而是逻辑地址了。这种方法也称作是LARGE寻址方式。该方法下：  \n\n硬盘容量=磁头数×柱面数×扇区数×扇区大小（一般为512byte）。  \n\n后来，人们通过为每个扇区分配逻辑地址，以扇区为单位进行寻址，也就有了LBA寻址方式。但是为了保持与CHS模式的兼容，通过逻辑变换算法，可以转换为磁头/柱面/扇区三种参数来表示，和 LARGE寻址模式一样，这里的地址也是逻辑地址了。（固态硬盘的存储原理虽然与机械硬盘不同，采用的是**flash**存储，但仍然使用LBA进行管理，此处不再详述。）  \n\n\n好了，再回来说MBR，MBR(Master Boot Record)是传统的分区机制，应用于绝大多数使用BIOS引导的PC设备（苹果使用EFI的方式），很多Server服务器即支持BIOS也支持EFI的引导方式。它的结构如下：  \nMBR结构：占用硬盘最开头的512字节\n\n * 前446字节为：引导代码（Bootstrap Code Area）（引导不同的操作系统；不同操作系统，引导代码是不一样的）  \n * 接下来的为4个16字节：分别对应4个主分区表信息(Primary Partition Table)\n * 最后2个字节：为启动标示（Boot Signature），永远都是`55`和`AA`；55和ＡＡ是个永久性的标示，代表这个硬盘是可启动的。\n \n \n![upload successful](/images/mbr_structure.png)  \n\n\n\n## 主引导代码\nBIOS在完成一些简单的检测工作或初始化工作后，会把处理器使用权交出去，下一棒就是MBR程序。BIOS会把MBR加载到0x7c00的位置，然后执行里头代码（`jmp 0:0x7c00`）。  \n**mbr.S**文件：\n```\n;主引导程序 \n;------------------------------------------------------------\nSECTION MBR vstart=0x7c00\n   mov ax,cs      \n   mov ds,ax\n   mov es,ax\n   mov ss,ax\n   mov fs,ax\n   mov sp,0x7c00\n\n; 清屏 利用0x06号功能，上卷全部行，则可清屏。\n; -----------------------------------------------------------\n;INT 0x10   功能号:0x06\t   功能描述:上卷窗口\n;------------------------------------------------------\n;输入：\n;AH 功能号= 0x06\n;AL = 上卷的行数(如果为0,表示全部)\n;BH = 上卷行属性\n;(CL,CH) = 窗口左上角的(X,Y)位置\n;(DL,DH) = 窗口右下角的(X,Y)位置\n;无返回值：\n   mov     ax, 0x600\n   mov     bx, 0x700\n   mov     cx, 0           ; 左上角: (0, 0)\n   mov     dx, 0x184f\t   ; 右下角: (80,25),\n\t\t\t   ; VGA文本模式中,一行只能容纳80个字符,共25行。\n\t\t\t   ; 下标从0开始,所以0x18=24,0x4f=79\n   int     0x10            ; int 0x10\n\n;;;;;;;;;    下面这三行代码是获取光标位置    ;;;;;;;;;\n;.get_cursor获取当前光标位置,在光标位置处打印字符.\n   mov ah, 3\t\t; 输入: 3号子功能是获取光标位置,需要存入ah寄存器\n   mov bh, 0\t\t; bh寄存器存储的是待获取光标的页号\n\n   int 0x10\t\t; 输出: ch=光标开始行,cl=光标结束行\n\t\t\t; dh=光标所在行号,dl=光标所在列号\n\n;;;;;;;;;    获取光标位置结束    ;;;;;;;;;;;;;;;;\n\n;;;;;;;;;     打印字符串    ;;;;;;;;;;;\n   ;还是用10h中断,不过这次是调用13号子功能打印字符串\n   mov ax, message \n   mov bp, ax\t\t; es:bp 为串首地址, es此时同cs一致，\n\t\t\t; 开头时已经为sreg初始化\n\n   ; 光标位置要用到dx寄存器中内容,cx中的光标位置可忽略\n   mov cx, 0xb\t\t; cx 为串长度,不包括结束符0的字符个数\n   mov ax, 0x1301\t; 子功能号13是显示字符及属性,要存入ah寄存器,\n\t\t\t; al设置写字符方式 ah=01: 显示字符串,光标跟随移动\n   mov bx, 0x2\t\t; bh存储要显示的页号,此处是第0页,\n\t\t\t; bl中是字符属性, 属性黑底绿字(bl = 02h)\n   int 0x10\t\t; 执行BIOS 0x10 号中断\n;;;;;;;;;      打字字符串结束\t ;;;;;;;;;;;;;;;\n\n   jmp $\t\t; 使程序悬停在此\n\n   message db \"love rabbit\"\n   times 510-($-$$) db 0\n   db 0x55,0xaa\n```\n用nasm编译成纯二进制文件`nasm -o mbr.bin mbr.S`，可以查看**mbr.bin**文件大小，正好512个字节。  \n\n然后利用`dd`命令把bin文件写进磁盘的0柱面0磁头1扇区：\n```\ndd if=/your_path/bochs_fun/mbr.bin of=/your_path/bochs_fun/hd60M.img bs=512 count=1 conv=notrunc\n```\n\n\n## 增加磁盘读写\nmbr.S\n```\n;主引导程序 \n;------------------------------------------------------------\n%include \"boot.inc\"\nSECTION MBR vstart=0x7c00         \n   mov ax,cs      \n   mov ds,ax\n   mov es,ax\n   mov ss,ax\n   mov fs,ax\n   mov sp,0x7c00\n   mov ax,0xb800\n   mov gs,ax\n\n; 清屏\n;利用0x06号功能，上卷全部行，则可清屏。\n; -----------------------------------------------------------\n;INT 0x10   功能号:0x06\t   功能描述:上卷窗口\n;------------------------------------------------------\n;输入：\n;AH 功能号= 0x06\n;AL = 上卷的行数(如果为0,表示全部)\n;BH = 上卷行属性\n;(CL,CH) = 窗口左上角的(X,Y)位置\n;(DL,DH) = 窗口右下角的(X,Y)位置\n;无返回值：\n   mov     ax, 0600h\n   mov     bx, 0700h\n   mov     cx, 0                   ; 左上角: (0, 0)\n   mov     dx, 184fh\t\t   ; 右下角: (80,25),\n\t\t\t\t   ; 因为VGA文本模式中，一行只能容纳80个字符,共25行。\n\t\t\t\t   ; 下标从0开始，所以0x18=24,0x4f=79\n   int     10h                     ; int 10h\n\n   ; 输出字符串:MBR\n   mov byte [gs:0x00],'1'\n   mov byte [gs:0x01],0xA4\n\n   mov byte [gs:0x02],' '\n   mov byte [gs:0x03],0xA4\n\n   mov byte [gs:0x04],'M'\n   mov byte [gs:0x05],0xA4\t   ;A表示绿色背景闪烁，4表示前景色为红色\n\n   mov byte [gs:0x06],'B'\n   mov byte [gs:0x07],0xA4\n\n   mov byte [gs:0x08],'R'\n   mov byte [gs:0x09],0xA4\n\t \n   mov eax,LOADER_START_SECTOR\t ; 起始扇区lba地址\n   mov bx,LOADER_BASE_ADDR       ; 写入的地址\n   mov cx,1\t\t\t ; 待读入的扇区数\n   call rd_disk_m_16\t\t ; 以下读取程序的起始部分（一个扇区）\n  \n   jmp LOADER_BASE_ADDR\n       \n;-------------------------------------------------------------------------------\n;功能:读取硬盘n个扇区\nrd_disk_m_16:\t   \n;-------------------------------------------------------------------------------\n\t\t\t\t       ; eax=LBA扇区号\n\t\t\t\t       ; ebx=将数据写入的内存地址\n\t\t\t\t       ; ecx=读入的扇区数\n      mov esi,eax\t  ;备份eax\n      mov di,cx\t\t  ;备份cx\n;读写硬盘:\n;第1步：设置要读取的扇区数\n      mov dx,0x1f2\n      mov al,cl\n      out dx,al            ;读取的扇区数\n\n      mov eax,esi\t   ;恢复ax\n\n;第2步：将LBA地址存入0x1f3 ~ 0x1f6\n\n      ;LBA地址7~0位写入端口0x1f3\n      mov dx,0x1f3                       \n      out dx,al                          \n\n      ;LBA地址15~8位写入端口0x1f4\n      mov cl,8\n      shr eax,cl\n      mov dx,0x1f4\n      out dx,al\n\n      ;LBA地址23~16位写入端口0x1f5\n      shr eax,cl\n      mov dx,0x1f5\n      out dx,al\n\n      shr eax,cl\n      and al,0x0f\t   ;lba第24~27位\n      or al,0xe0\t   ; 设置7～4位为1110,表示lba模式\n      mov dx,0x1f6\n      out dx,al\n\n;第3步：向0x1f7端口写入读命令，0x20 \n      mov dx,0x1f7\n      mov al,0x20                        \n      out dx,al\n\n;第4步：检测硬盘状态\n  .not_ready:\n      ;同一端口，写时表示写入命令字，读时表示读入硬盘状态\n      nop\n      in al,dx\n      and al,0x88\t   ;第4位为1表示硬盘控制器已准备好数据传输，第7位为1表示硬盘忙\n      cmp al,0x08\n      jnz .not_ready\t   ;若未准备好，继续等。\n\n;第5步：从0x1f0端口读数据\n      mov ax, di\n      mov dx, 256\n      mul dx\n      mov cx, ax\t   ; di为要读取的扇区数，一个扇区有512字节，每次读入一个字，\n\t\t\t   ; 共需di*512/2次，所以di*256\n      mov dx, 0x1f0\n  .go_on_read:\n      in ax,dx\n      mov [bx],ax\n      add bx,2\t\t  \n      loop .go_on_read\n      ret\n\n   times 510-($-$$) db 0\n   db 0x55,0xaa\n```\n**boot.inc**文件\n```\n;-------------\t loader和kernel   ----------\nLOADER_BASE_ADDR equ 0x900 \nLOADER_START_SECTOR equ 0x2\n```\n最后CPU会调到0x900的地址，还得有个loader\n```\n%include \"boot.inc\"\nsection loader vstart=LOADER_BASE_ADDR\n\n; 输出背景色绿色，前景色红色，并且跳动的字符串\"1 MBR\"\nmov byte [gs:0x20],'2'\nmov byte [gs:0x21],0xA4     ; A表示绿色背景闪烁，4表示前景色为红色\n\nmov byte [gs:0x22],' '\nmov byte [gs:0x23],0xA4\n\nmov byte [gs:0x24],'L'\nmov byte [gs:0x25],0xA4   \n\nmov byte [gs:0x26],'O'\nmov byte [gs:0x27],0xA4\n\nmov byte [gs:0x28],'A'\nmov byte [gs:0x29],0xA4\n\nmov byte [gs:0x2a],'D'\nmov byte [gs:0x2b],0xA4\n\nmov byte [gs:0x2c],'E'\nmov byte [gs:0x2d],0xA4\n\nmov byte [gs:0x2e],'R'\nmov byte [gs:0x2f],0xA4\n\njmp $\t\t       ; 通过死循环使程序悬停在此\n```\n\n\n参考：\n* [OS篇-Bochs在Ubuntu下的安装教程](https://mikeygithub.github.io/2021/02/26/os/OS%E7%AF%87-Bochs%E5%9C%A8Ubuntu%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/)\n* [Ubuntu20.04/18.04安装Bochs2.6.9编译运行GeekOS](https://www.cxybb.com/article/Java_c110/115737121)\n* [柱面-磁头-扇区寻址的一些旧事 ](https://farseerfc.me/zhs/history-of-chs-addressing.html)\n* [MBR与GPT](https://zhuanlan.zhihu.com/p/26098509)","source":"_posts/bochs下启动.md","raw":"title: bochs下启动自己的MBR\nauthor: pigLoveRabbit\ntags:\n  - OS\ncategories:\n  - OS\ndate: 2022-04-17 23:12:00\n---\n# Bochs\nBochs是一个x86硬件平台的开源模拟器。你可以当它是一台虚拟的x86的计算机。\n\n\n<!-- more -->\n\n\n本文环境：  \n* OS: Ubuntu 20.04.4 LTS\n* Bochs： 2.6.9\n\n\n## 安装Bochs\n这个网上教程很多了，先去[下载](https://sourceforge.net/projects/bochs/files/bochs/)，然后configure：\n```\n./configure \\\n--prefix=/your_path/bochs \\\n--enable-debugger\\\n--enable-disasm \\\n--enable-iodebug \\\n--enable-x86-debugger \\\n--with-x \\\n--with-x11\n```\n这里会出点问题，一般是缺少库了：\n```\nsudo apt-get install libx11-dev ................. for X11/Xlib.h\nsudo apt-get install mesa-common-dev........ for GL/glx.h\nsudo apt-get install libglu1-mesa-dev ..... for GL/glu.h\nsudo apt-get install libxrandr-dev ........... for X11/extensions/Xrandr.h\nsudo apt-get install libxi-dev ................... for X11/extensions/XInput.h\n```\nconfigure通过就可以编译安装了：\n```\nmake\nsudo make install\n```\n\n## 配置\n当我们在终端输入bochs后，\nBochs会自己在当前目录顺序寻找以下文件作为默认配置文件：\n.bochsrc  \nbochsrc  \nbochsrc.txt  \nbochsrc.bxrc(仅对Windows有效)  \n我们可以自己创建一个名为.bochsrc的文件，来指定Bochs配置我们想要的虚拟机。  \n```\n[~/bochs_fun]$ cat bochsrc\n\n#################################################################\n# Bochs的配置文件\n# Configuration file for Bochs\n#################################################################\n\n# how much memory the emulated machine will have\nmegs: 32\n\n# filenameof ROM images\nromimage:file=/usr/local/share/bochs/BIOS-bochs-latest\nvgaromimage:file=/usr/local/share/bochs/VGABIOS-lgpl-latest\n\n# which disk image will be used 这个是启动软盘\nfloppya:1_44=a.img, status=inserted\n\n# choose the boot disk 确定启动方式\n#boot: floppy\nboot: disk\n\n# where do we send log messages?\nlog: bochsout.txt\n\n# disable the mouse\nmouse: enabled=0\n\n# enable key mapping ,using US layout as default\nkeyboard:keymap=/usr/local/share/bochs/keymaps/x11-pc-us.map\n\n# 硬盘设置\nata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14\n```\n\n## 测试开机\n\n按`c`继续运行，弹出新的窗口。  \n\n\n\n\n\n## MBR\nMBR：Master Boot Record，主分区引导记录，它是整个硬盘最开始的扇区，即0柱面0磁头1扇区（CHS表示方法，如果是LBA的话，那就是0扇区）。  \n\n扇区是什么？那就涉及到硬盘基本知识了，对于机械硬盘，有以下概念：\n* 盘片（platter）\n* 磁头（head）\n* 磁道（track）\n* 扇区（sector）\n* 柱面（cylinder）\n\n**盘片 片面 和 磁头（Head）**\n\n硬盘中一般会有多个盘片组成，每个盘片包含两个面，每个盘面都对应地有一个**读/写磁头**。受到硬盘整体体积和生产成本的限制，盘片数量都受到限制，一般都在5片以内。盘片的编号自下向上从0开始，如最下边的盘片有0面和1面，再上一个盘片就编号为2面和3面。  \n\n\n![upload successful](/images/disk_image.png)  \n\n**扇区（Sector）和 磁道（Track）**  \n\n下图显示的是一个盘面，盘面中一圈圈灰色同心圆为一条条磁道，从圆心向外画直线，可以将磁道划分为若干个弧段，每个磁道上一个弧段被称之为一个扇区（图践绿色部分）。扇区是磁盘的最小组成单元，通常是512字节。（由于不断提高磁盘的大小，部分厂商设定每个扇区的大小是4096字节）  \n\n\n![upload successful](/images/disk_sector.png)\n\n\n\n**磁头（Head）和 柱面（Cylinder）**\n硬盘通常由重叠的一组盘片构成，每个盘面都被划分为数目相等的磁道，并从外缘的“0”开始编号，具有相同编号的磁道形成一个圆柱，称之为磁盘的柱面。磁盘的柱面数与一个盘面上的磁道数是相等的。由于每个盘面都有自己的磁头，因此，盘面数等于总的磁头数。 如下图  \n\n![upload successful](/images/disk_cylinder.png)  图3\n\n\n\n\n所谓CHS即柱面（cylinder），磁头（header），扇区（sector），通过这三个变量描述磁盘地址（先定位柱面，然后选定磁头，然后确定扇区），需要明白的是，这里表示的已不是物理地址而是逻辑地址了。这种方法也称作是LARGE寻址方式。该方法下：  \n\n硬盘容量=磁头数×柱面数×扇区数×扇区大小（一般为512byte）。  \n\n后来，人们通过为每个扇区分配逻辑地址，以扇区为单位进行寻址，也就有了LBA寻址方式。但是为了保持与CHS模式的兼容，通过逻辑变换算法，可以转换为磁头/柱面/扇区三种参数来表示，和 LARGE寻址模式一样，这里的地址也是逻辑地址了。（固态硬盘的存储原理虽然与机械硬盘不同，采用的是**flash**存储，但仍然使用LBA进行管理，此处不再详述。）  \n\n\n好了，再回来说MBR，MBR(Master Boot Record)是传统的分区机制，应用于绝大多数使用BIOS引导的PC设备（苹果使用EFI的方式），很多Server服务器即支持BIOS也支持EFI的引导方式。它的结构如下：  \nMBR结构：占用硬盘最开头的512字节\n\n * 前446字节为：引导代码（Bootstrap Code Area）（引导不同的操作系统；不同操作系统，引导代码是不一样的）  \n * 接下来的为4个16字节：分别对应4个主分区表信息(Primary Partition Table)\n * 最后2个字节：为启动标示（Boot Signature），永远都是`55`和`AA`；55和ＡＡ是个永久性的标示，代表这个硬盘是可启动的。\n \n \n![upload successful](/images/mbr_structure.png)  \n\n\n\n## 主引导代码\nBIOS在完成一些简单的检测工作或初始化工作后，会把处理器使用权交出去，下一棒就是MBR程序。BIOS会把MBR加载到0x7c00的位置，然后执行里头代码（`jmp 0:0x7c00`）。  \n**mbr.S**文件：\n```\n;主引导程序 \n;------------------------------------------------------------\nSECTION MBR vstart=0x7c00\n   mov ax,cs      \n   mov ds,ax\n   mov es,ax\n   mov ss,ax\n   mov fs,ax\n   mov sp,0x7c00\n\n; 清屏 利用0x06号功能，上卷全部行，则可清屏。\n; -----------------------------------------------------------\n;INT 0x10   功能号:0x06\t   功能描述:上卷窗口\n;------------------------------------------------------\n;输入：\n;AH 功能号= 0x06\n;AL = 上卷的行数(如果为0,表示全部)\n;BH = 上卷行属性\n;(CL,CH) = 窗口左上角的(X,Y)位置\n;(DL,DH) = 窗口右下角的(X,Y)位置\n;无返回值：\n   mov     ax, 0x600\n   mov     bx, 0x700\n   mov     cx, 0           ; 左上角: (0, 0)\n   mov     dx, 0x184f\t   ; 右下角: (80,25),\n\t\t\t   ; VGA文本模式中,一行只能容纳80个字符,共25行。\n\t\t\t   ; 下标从0开始,所以0x18=24,0x4f=79\n   int     0x10            ; int 0x10\n\n;;;;;;;;;    下面这三行代码是获取光标位置    ;;;;;;;;;\n;.get_cursor获取当前光标位置,在光标位置处打印字符.\n   mov ah, 3\t\t; 输入: 3号子功能是获取光标位置,需要存入ah寄存器\n   mov bh, 0\t\t; bh寄存器存储的是待获取光标的页号\n\n   int 0x10\t\t; 输出: ch=光标开始行,cl=光标结束行\n\t\t\t; dh=光标所在行号,dl=光标所在列号\n\n;;;;;;;;;    获取光标位置结束    ;;;;;;;;;;;;;;;;\n\n;;;;;;;;;     打印字符串    ;;;;;;;;;;;\n   ;还是用10h中断,不过这次是调用13号子功能打印字符串\n   mov ax, message \n   mov bp, ax\t\t; es:bp 为串首地址, es此时同cs一致，\n\t\t\t; 开头时已经为sreg初始化\n\n   ; 光标位置要用到dx寄存器中内容,cx中的光标位置可忽略\n   mov cx, 0xb\t\t; cx 为串长度,不包括结束符0的字符个数\n   mov ax, 0x1301\t; 子功能号13是显示字符及属性,要存入ah寄存器,\n\t\t\t; al设置写字符方式 ah=01: 显示字符串,光标跟随移动\n   mov bx, 0x2\t\t; bh存储要显示的页号,此处是第0页,\n\t\t\t; bl中是字符属性, 属性黑底绿字(bl = 02h)\n   int 0x10\t\t; 执行BIOS 0x10 号中断\n;;;;;;;;;      打字字符串结束\t ;;;;;;;;;;;;;;;\n\n   jmp $\t\t; 使程序悬停在此\n\n   message db \"love rabbit\"\n   times 510-($-$$) db 0\n   db 0x55,0xaa\n```\n用nasm编译成纯二进制文件`nasm -o mbr.bin mbr.S`，可以查看**mbr.bin**文件大小，正好512个字节。  \n\n然后利用`dd`命令把bin文件写进磁盘的0柱面0磁头1扇区：\n```\ndd if=/your_path/bochs_fun/mbr.bin of=/your_path/bochs_fun/hd60M.img bs=512 count=1 conv=notrunc\n```\n\n\n## 增加磁盘读写\nmbr.S\n```\n;主引导程序 \n;------------------------------------------------------------\n%include \"boot.inc\"\nSECTION MBR vstart=0x7c00         \n   mov ax,cs      \n   mov ds,ax\n   mov es,ax\n   mov ss,ax\n   mov fs,ax\n   mov sp,0x7c00\n   mov ax,0xb800\n   mov gs,ax\n\n; 清屏\n;利用0x06号功能，上卷全部行，则可清屏。\n; -----------------------------------------------------------\n;INT 0x10   功能号:0x06\t   功能描述:上卷窗口\n;------------------------------------------------------\n;输入：\n;AH 功能号= 0x06\n;AL = 上卷的行数(如果为0,表示全部)\n;BH = 上卷行属性\n;(CL,CH) = 窗口左上角的(X,Y)位置\n;(DL,DH) = 窗口右下角的(X,Y)位置\n;无返回值：\n   mov     ax, 0600h\n   mov     bx, 0700h\n   mov     cx, 0                   ; 左上角: (0, 0)\n   mov     dx, 184fh\t\t   ; 右下角: (80,25),\n\t\t\t\t   ; 因为VGA文本模式中，一行只能容纳80个字符,共25行。\n\t\t\t\t   ; 下标从0开始，所以0x18=24,0x4f=79\n   int     10h                     ; int 10h\n\n   ; 输出字符串:MBR\n   mov byte [gs:0x00],'1'\n   mov byte [gs:0x01],0xA4\n\n   mov byte [gs:0x02],' '\n   mov byte [gs:0x03],0xA4\n\n   mov byte [gs:0x04],'M'\n   mov byte [gs:0x05],0xA4\t   ;A表示绿色背景闪烁，4表示前景色为红色\n\n   mov byte [gs:0x06],'B'\n   mov byte [gs:0x07],0xA4\n\n   mov byte [gs:0x08],'R'\n   mov byte [gs:0x09],0xA4\n\t \n   mov eax,LOADER_START_SECTOR\t ; 起始扇区lba地址\n   mov bx,LOADER_BASE_ADDR       ; 写入的地址\n   mov cx,1\t\t\t ; 待读入的扇区数\n   call rd_disk_m_16\t\t ; 以下读取程序的起始部分（一个扇区）\n  \n   jmp LOADER_BASE_ADDR\n       \n;-------------------------------------------------------------------------------\n;功能:读取硬盘n个扇区\nrd_disk_m_16:\t   \n;-------------------------------------------------------------------------------\n\t\t\t\t       ; eax=LBA扇区号\n\t\t\t\t       ; ebx=将数据写入的内存地址\n\t\t\t\t       ; ecx=读入的扇区数\n      mov esi,eax\t  ;备份eax\n      mov di,cx\t\t  ;备份cx\n;读写硬盘:\n;第1步：设置要读取的扇区数\n      mov dx,0x1f2\n      mov al,cl\n      out dx,al            ;读取的扇区数\n\n      mov eax,esi\t   ;恢复ax\n\n;第2步：将LBA地址存入0x1f3 ~ 0x1f6\n\n      ;LBA地址7~0位写入端口0x1f3\n      mov dx,0x1f3                       \n      out dx,al                          \n\n      ;LBA地址15~8位写入端口0x1f4\n      mov cl,8\n      shr eax,cl\n      mov dx,0x1f4\n      out dx,al\n\n      ;LBA地址23~16位写入端口0x1f5\n      shr eax,cl\n      mov dx,0x1f5\n      out dx,al\n\n      shr eax,cl\n      and al,0x0f\t   ;lba第24~27位\n      or al,0xe0\t   ; 设置7～4位为1110,表示lba模式\n      mov dx,0x1f6\n      out dx,al\n\n;第3步：向0x1f7端口写入读命令，0x20 \n      mov dx,0x1f7\n      mov al,0x20                        \n      out dx,al\n\n;第4步：检测硬盘状态\n  .not_ready:\n      ;同一端口，写时表示写入命令字，读时表示读入硬盘状态\n      nop\n      in al,dx\n      and al,0x88\t   ;第4位为1表示硬盘控制器已准备好数据传输，第7位为1表示硬盘忙\n      cmp al,0x08\n      jnz .not_ready\t   ;若未准备好，继续等。\n\n;第5步：从0x1f0端口读数据\n      mov ax, di\n      mov dx, 256\n      mul dx\n      mov cx, ax\t   ; di为要读取的扇区数，一个扇区有512字节，每次读入一个字，\n\t\t\t   ; 共需di*512/2次，所以di*256\n      mov dx, 0x1f0\n  .go_on_read:\n      in ax,dx\n      mov [bx],ax\n      add bx,2\t\t  \n      loop .go_on_read\n      ret\n\n   times 510-($-$$) db 0\n   db 0x55,0xaa\n```\n**boot.inc**文件\n```\n;-------------\t loader和kernel   ----------\nLOADER_BASE_ADDR equ 0x900 \nLOADER_START_SECTOR equ 0x2\n```\n最后CPU会调到0x900的地址，还得有个loader\n```\n%include \"boot.inc\"\nsection loader vstart=LOADER_BASE_ADDR\n\n; 输出背景色绿色，前景色红色，并且跳动的字符串\"1 MBR\"\nmov byte [gs:0x20],'2'\nmov byte [gs:0x21],0xA4     ; A表示绿色背景闪烁，4表示前景色为红色\n\nmov byte [gs:0x22],' '\nmov byte [gs:0x23],0xA4\n\nmov byte [gs:0x24],'L'\nmov byte [gs:0x25],0xA4   \n\nmov byte [gs:0x26],'O'\nmov byte [gs:0x27],0xA4\n\nmov byte [gs:0x28],'A'\nmov byte [gs:0x29],0xA4\n\nmov byte [gs:0x2a],'D'\nmov byte [gs:0x2b],0xA4\n\nmov byte [gs:0x2c],'E'\nmov byte [gs:0x2d],0xA4\n\nmov byte [gs:0x2e],'R'\nmov byte [gs:0x2f],0xA4\n\njmp $\t\t       ; 通过死循环使程序悬停在此\n```\n\n\n参考：\n* [OS篇-Bochs在Ubuntu下的安装教程](https://mikeygithub.github.io/2021/02/26/os/OS%E7%AF%87-Bochs%E5%9C%A8Ubuntu%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/)\n* [Ubuntu20.04/18.04安装Bochs2.6.9编译运行GeekOS](https://www.cxybb.com/article/Java_c110/115737121)\n* [柱面-磁头-扇区寻址的一些旧事 ](https://farseerfc.me/zhs/history-of-chs-addressing.html)\n* [MBR与GPT](https://zhuanlan.zhihu.com/p/26098509)","slug":"bochs下启动","published":1,"updated":"2023-03-21T02:48:19.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40lb00272o3m9odp0v4p","content":"<h1 id=\"bochs\">Bochs</h1>\r\n<p>Bochs是一个x86硬件平台的开源模拟器。你可以当它是一台虚拟的x86的计算机。</p>\r\n<span id=\"more\"></span>\r\n<p>本文环境：<br />\r\n* OS: Ubuntu 20.04.4 LTS * Bochs： 2.6.9</p>\r\n<h2 id=\"安装bochs\">安装Bochs</h2>\r\n<p>这个网上教程很多了，先去<a\r\nhref=\"https://sourceforge.net/projects/bochs/files/bochs/\">下载</a>，然后configure：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=/your_path/bochs \\</span><br><span class=\"line\">--enable-debugger\\</span><br><span class=\"line\">--enable-disasm \\</span><br><span class=\"line\">--enable-iodebug \\</span><br><span class=\"line\">--enable-x86-debugger \\</span><br><span class=\"line\">--with-x \\</span><br><span class=\"line\">--with-x11</span><br></pre></td></tr></table></figure> 这里会出点问题，一般是缺少库了： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libx11-dev ................. for X11/Xlib.h</span><br><span class=\"line\">sudo apt-get install mesa-common-dev........ for GL/glx.h</span><br><span class=\"line\">sudo apt-get install libglu1-mesa-dev ..... for GL/glu.h</span><br><span class=\"line\">sudo apt-get install libxrandr-dev ........... for X11/extensions/Xrandr.h</span><br><span class=\"line\">sudo apt-get install libxi-dev ................... for X11/extensions/XInput.h</span><br></pre></td></tr></table></figure>\r\nconfigure通过就可以编译安装了： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"配置\">配置</h2>\r\n<p>当我们在终端输入bochs后，\r\nBochs会自己在当前目录顺序寻找以下文件作为默认配置文件： .bochsrc<br />\r\nbochsrc<br />\r\nbochsrc.txt<br />\r\nbochsrc.bxrc(仅对Windows有效)<br />\r\n我们可以自己创建一个名为.bochsrc的文件，来指定Bochs配置我们想要的虚拟机。<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[~/bochs_fun]$ cat bochsrc</span><br><span class=\"line\"></span><br><span class=\"line\">#################################################################</span><br><span class=\"line\"># Bochs的配置文件</span><br><span class=\"line\"># Configuration file for Bochs</span><br><span class=\"line\">#################################################################</span><br><span class=\"line\"></span><br><span class=\"line\"># how much memory the emulated machine will have</span><br><span class=\"line\">megs: 32</span><br><span class=\"line\"></span><br><span class=\"line\"># filenameof ROM images</span><br><span class=\"line\">romimage:file=/usr/local/share/bochs/BIOS-bochs-latest</span><br><span class=\"line\">vgaromimage:file=/usr/local/share/bochs/VGABIOS-lgpl-latest</span><br><span class=\"line\"></span><br><span class=\"line\"># which disk image will be used 这个是启动软盘</span><br><span class=\"line\">floppya:1_44=a.img, status=inserted</span><br><span class=\"line\"></span><br><span class=\"line\"># choose the boot disk 确定启动方式</span><br><span class=\"line\">#boot: floppy</span><br><span class=\"line\">boot: disk</span><br><span class=\"line\"></span><br><span class=\"line\"># where do we send log messages?</span><br><span class=\"line\">log: bochsout.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># disable the mouse</span><br><span class=\"line\">mouse: enabled=0</span><br><span class=\"line\"></span><br><span class=\"line\"># enable key mapping ,using US layout as default</span><br><span class=\"line\">keyboard:keymap=/usr/local/share/bochs/keymaps/x11-pc-us.map</span><br><span class=\"line\"></span><br><span class=\"line\"># 硬盘设置</span><br><span class=\"line\">ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"测试开机\">测试开机</h2>\r\n<p>按<code>c</code>继续运行，弹出新的窗口。</p>\r\n<h2 id=\"mbr\">MBR</h2>\r\n<p>MBR：Master Boot\r\nRecord，主分区引导记录，它是整个硬盘最开始的扇区，即0柱面0磁头1扇区（CHS表示方法，如果是LBA的话，那就是0扇区）。</p>\r\n<p>扇区是什么？那就涉及到硬盘基本知识了，对于机械硬盘，有以下概念： *\r\n盘片（platter） * 磁头（head） * 磁道（track） * 扇区（sector） *\r\n柱面（cylinder）</p>\r\n<p><strong>盘片 片面 和 磁头（Head）</strong></p>\r\n<p>硬盘中一般会有多个盘片组成，每个盘片包含两个面，每个盘面都对应地有一个<strong>读/写磁头</strong>。受到硬盘整体体积和生产成本的限制，盘片数量都受到限制，一般都在5片以内。盘片的编号自下向上从0开始，如最下边的盘片有0面和1面，再上一个盘片就编号为2面和3面。</p>\r\n<figure>\r\n<img src=\"/images/disk_image.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p><strong>扇区（Sector）和 磁道（Track）</strong></p>\r\n<p>下图显示的是一个盘面，盘面中一圈圈灰色同心圆为一条条磁道，从圆心向外画直线，可以将磁道划分为若干个弧段，每个磁道上一个弧段被称之为一个扇区（图践绿色部分）。扇区是磁盘的最小组成单元，通常是512字节。（由于不断提高磁盘的大小，部分厂商设定每个扇区的大小是4096字节）</p>\r\n<figure>\r\n<img src=\"/images/disk_sector.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p><strong>磁头（Head）和 柱面（Cylinder）</strong>\r\n硬盘通常由重叠的一组盘片构成，每个盘面都被划分为数目相等的磁道，并从外缘的“0”开始编号，具有相同编号的磁道形成一个圆柱，称之为磁盘的柱面。磁盘的柱面数与一个盘面上的磁道数是相等的。由于每个盘面都有自己的磁头，因此，盘面数等于总的磁头数。\r\n如下图</p>\r\n<p><img src=\"/images/disk_cylinder.png\" alt=\"upload successful\" />\r\n图3</p>\r\n<p>所谓CHS即柱面（cylinder），磁头（header），扇区（sector），通过这三个变量描述磁盘地址（先定位柱面，然后选定磁头，然后确定扇区），需要明白的是，这里表示的已不是物理地址而是逻辑地址了。这种方法也称作是LARGE寻址方式。该方法下：</p>\r\n<p>硬盘容量=磁头数×柱面数×扇区数×扇区大小（一般为512byte）。</p>\r\n<p>后来，人们通过为每个扇区分配逻辑地址，以扇区为单位进行寻址，也就有了LBA寻址方式。但是为了保持与CHS模式的兼容，通过逻辑变换算法，可以转换为磁头/柱面/扇区三种参数来表示，和\r\nLARGE寻址模式一样，这里的地址也是逻辑地址了。（固态硬盘的存储原理虽然与机械硬盘不同，采用的是<strong>flash</strong>存储，但仍然使用LBA进行管理，此处不再详述。）</p>\r\n<p>好了，再回来说MBR，MBR(Master Boot\r\nRecord)是传统的分区机制，应用于绝大多数使用BIOS引导的PC设备（苹果使用EFI的方式），很多Server服务器即支持BIOS也支持EFI的引导方式。它的结构如下：<br />\r\nMBR结构：占用硬盘最开头的512字节</p>\r\n<p> <em> 前446字节为：引导代码（Bootstrap Code\r\nArea）（引导不同的操作系统；不同操作系统，引导代码是不一样的）   </em>\r\n接下来的为4个16字节：分别对应4个主分区表信息(Primary Partition Table) *\r\n最后2个字节：为启动标示（Boot\r\nSignature），永远都是<code>55</code>和<code>AA</code>；55和ＡＡ是个永久性的标示，代表这个硬盘是可启动的。</p>\r\n<figure>\r\n<img src=\"/images/mbr_structure.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<h2 id=\"主引导代码\">主引导代码</h2>\r\n<p>BIOS在完成一些简单的检测工作或初始化工作后，会把处理器使用权交出去，下一棒就是MBR程序。BIOS会把MBR加载到0x7c00的位置，然后执行里头代码（<code>jmp 0:0x7c00</code>）。<br />\r\n<strong>mbr.S</strong>文件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;主引导程序 </span><br><span class=\"line\">;------------------------------------------------------------</span><br><span class=\"line\">SECTION MBR vstart=0x7c00</span><br><span class=\"line\">   mov ax,cs      </span><br><span class=\"line\">   mov ds,ax</span><br><span class=\"line\">   mov es,ax</span><br><span class=\"line\">   mov ss,ax</span><br><span class=\"line\">   mov fs,ax</span><br><span class=\"line\">   mov sp,0x7c00</span><br><span class=\"line\"></span><br><span class=\"line\">; 清屏 利用0x06号功能，上卷全部行，则可清屏。</span><br><span class=\"line\">; -----------------------------------------------------------</span><br><span class=\"line\">;INT 0x10   功能号:0x06\t   功能描述:上卷窗口</span><br><span class=\"line\">;------------------------------------------------------</span><br><span class=\"line\">;输入：</span><br><span class=\"line\">;AH 功能号= 0x06</span><br><span class=\"line\">;AL = 上卷的行数(如果为0,表示全部)</span><br><span class=\"line\">;BH = 上卷行属性</span><br><span class=\"line\">;(CL,CH) = 窗口左上角的(X,Y)位置</span><br><span class=\"line\">;(DL,DH) = 窗口右下角的(X,Y)位置</span><br><span class=\"line\">;无返回值：</span><br><span class=\"line\">   mov     ax, 0x600</span><br><span class=\"line\">   mov     bx, 0x700</span><br><span class=\"line\">   mov     cx, 0           ; 左上角: (0, 0)</span><br><span class=\"line\">   mov     dx, 0x184f\t   ; 右下角: (80,25),</span><br><span class=\"line\">\t\t\t   ; VGA文本模式中,一行只能容纳80个字符,共25行。</span><br><span class=\"line\">\t\t\t   ; 下标从0开始,所以0x18=24,0x4f=79</span><br><span class=\"line\">   int     0x10            ; int 0x10</span><br><span class=\"line\"></span><br><span class=\"line\">;;;;;;;;;    下面这三行代码是获取光标位置    ;;;;;;;;;</span><br><span class=\"line\">;.get_cursor获取当前光标位置,在光标位置处打印字符.</span><br><span class=\"line\">   mov ah, 3\t\t; 输入: 3号子功能是获取光标位置,需要存入ah寄存器</span><br><span class=\"line\">   mov bh, 0\t\t; bh寄存器存储的是待获取光标的页号</span><br><span class=\"line\"></span><br><span class=\"line\">   int 0x10\t\t; 输出: ch=光标开始行,cl=光标结束行</span><br><span class=\"line\">\t\t\t; dh=光标所在行号,dl=光标所在列号</span><br><span class=\"line\"></span><br><span class=\"line\">;;;;;;;;;    获取光标位置结束    ;;;;;;;;;;;;;;;;</span><br><span class=\"line\"></span><br><span class=\"line\">;;;;;;;;;     打印字符串    ;;;;;;;;;;;</span><br><span class=\"line\">   ;还是用10h中断,不过这次是调用13号子功能打印字符串</span><br><span class=\"line\">   mov ax, message </span><br><span class=\"line\">   mov bp, ax\t\t; es:bp 为串首地址, es此时同cs一致，</span><br><span class=\"line\">\t\t\t; 开头时已经为sreg初始化</span><br><span class=\"line\"></span><br><span class=\"line\">   ; 光标位置要用到dx寄存器中内容,cx中的光标位置可忽略</span><br><span class=\"line\">   mov cx, 0xb\t\t; cx 为串长度,不包括结束符0的字符个数</span><br><span class=\"line\">   mov ax, 0x1301\t; 子功能号13是显示字符及属性,要存入ah寄存器,</span><br><span class=\"line\">\t\t\t; al设置写字符方式 ah=01: 显示字符串,光标跟随移动</span><br><span class=\"line\">   mov bx, 0x2\t\t; bh存储要显示的页号,此处是第0页,</span><br><span class=\"line\">\t\t\t; bl中是字符属性, 属性黑底绿字(bl = 02h)</span><br><span class=\"line\">   int 0x10\t\t; 执行BIOS 0x10 号中断</span><br><span class=\"line\">;;;;;;;;;      打字字符串结束\t ;;;;;;;;;;;;;;;</span><br><span class=\"line\"></span><br><span class=\"line\">   jmp $\t\t; 使程序悬停在此</span><br><span class=\"line\"></span><br><span class=\"line\">   message db &quot;love rabbit&quot;</span><br><span class=\"line\">   times 510-($-$$) db 0</span><br><span class=\"line\">   db 0x55,0xaa</span><br></pre></td></tr></table></figure>\r\n用nasm编译成纯二进制文件<code>nasm -o mbr.bin mbr.S</code>，可以查看<strong>mbr.bin</strong>文件大小，正好512个字节。</p>\r\n<p>然后利用<code>dd</code>命令把bin文件写进磁盘的0柱面0磁头1扇区：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=/your_path/bochs_fun/mbr.bin of=/your_path/bochs_fun/hd60M.img bs=512 count=1 conv=notrunc</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"增加磁盘读写\">增加磁盘读写</h2>\r\n<p>mbr.S <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;主引导程序 </span><br><span class=\"line\">;------------------------------------------------------------</span><br><span class=\"line\">%include &quot;boot.inc&quot;</span><br><span class=\"line\">SECTION MBR vstart=0x7c00         </span><br><span class=\"line\">   mov ax,cs      </span><br><span class=\"line\">   mov ds,ax</span><br><span class=\"line\">   mov es,ax</span><br><span class=\"line\">   mov ss,ax</span><br><span class=\"line\">   mov fs,ax</span><br><span class=\"line\">   mov sp,0x7c00</span><br><span class=\"line\">   mov ax,0xb800</span><br><span class=\"line\">   mov gs,ax</span><br><span class=\"line\"></span><br><span class=\"line\">; 清屏</span><br><span class=\"line\">;利用0x06号功能，上卷全部行，则可清屏。</span><br><span class=\"line\">; -----------------------------------------------------------</span><br><span class=\"line\">;INT 0x10   功能号:0x06\t   功能描述:上卷窗口</span><br><span class=\"line\">;------------------------------------------------------</span><br><span class=\"line\">;输入：</span><br><span class=\"line\">;AH 功能号= 0x06</span><br><span class=\"line\">;AL = 上卷的行数(如果为0,表示全部)</span><br><span class=\"line\">;BH = 上卷行属性</span><br><span class=\"line\">;(CL,CH) = 窗口左上角的(X,Y)位置</span><br><span class=\"line\">;(DL,DH) = 窗口右下角的(X,Y)位置</span><br><span class=\"line\">;无返回值：</span><br><span class=\"line\">   mov     ax, 0600h</span><br><span class=\"line\">   mov     bx, 0700h</span><br><span class=\"line\">   mov     cx, 0                   ; 左上角: (0, 0)</span><br><span class=\"line\">   mov     dx, 184fh\t\t   ; 右下角: (80,25),</span><br><span class=\"line\">\t\t\t\t   ; 因为VGA文本模式中，一行只能容纳80个字符,共25行。</span><br><span class=\"line\">\t\t\t\t   ; 下标从0开始，所以0x18=24,0x4f=79</span><br><span class=\"line\">   int     10h                     ; int 10h</span><br><span class=\"line\"></span><br><span class=\"line\">   ; 输出字符串:MBR</span><br><span class=\"line\">   mov byte [gs:0x00],&#x27;1&#x27;</span><br><span class=\"line\">   mov byte [gs:0x01],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">   mov byte [gs:0x02],&#x27; &#x27;</span><br><span class=\"line\">   mov byte [gs:0x03],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">   mov byte [gs:0x04],&#x27;M&#x27;</span><br><span class=\"line\">   mov byte [gs:0x05],0xA4\t   ;A表示绿色背景闪烁，4表示前景色为红色</span><br><span class=\"line\"></span><br><span class=\"line\">   mov byte [gs:0x06],&#x27;B&#x27;</span><br><span class=\"line\">   mov byte [gs:0x07],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">   mov byte [gs:0x08],&#x27;R&#x27;</span><br><span class=\"line\">   mov byte [gs:0x09],0xA4</span><br><span class=\"line\">\t </span><br><span class=\"line\">   mov eax,LOADER_START_SECTOR\t ; 起始扇区lba地址</span><br><span class=\"line\">   mov bx,LOADER_BASE_ADDR       ; 写入的地址</span><br><span class=\"line\">   mov cx,1\t\t\t ; 待读入的扇区数</span><br><span class=\"line\">   call rd_disk_m_16\t\t ; 以下读取程序的起始部分（一个扇区）</span><br><span class=\"line\">  </span><br><span class=\"line\">   jmp LOADER_BASE_ADDR</span><br><span class=\"line\">       </span><br><span class=\"line\">;-------------------------------------------------------------------------------</span><br><span class=\"line\">;功能:读取硬盘n个扇区</span><br><span class=\"line\">rd_disk_m_16:\t   </span><br><span class=\"line\">;-------------------------------------------------------------------------------</span><br><span class=\"line\">\t\t\t\t       ; eax=LBA扇区号</span><br><span class=\"line\">\t\t\t\t       ; ebx=将数据写入的内存地址</span><br><span class=\"line\">\t\t\t\t       ; ecx=读入的扇区数</span><br><span class=\"line\">      mov esi,eax\t  ;备份eax</span><br><span class=\"line\">      mov di,cx\t\t  ;备份cx</span><br><span class=\"line\">;读写硬盘:</span><br><span class=\"line\">;第1步：设置要读取的扇区数</span><br><span class=\"line\">      mov dx,0x1f2</span><br><span class=\"line\">      mov al,cl</span><br><span class=\"line\">      out dx,al            ;读取的扇区数</span><br><span class=\"line\"></span><br><span class=\"line\">      mov eax,esi\t   ;恢复ax</span><br><span class=\"line\"></span><br><span class=\"line\">;第2步：将LBA地址存入0x1f3 ~ 0x1f6</span><br><span class=\"line\"></span><br><span class=\"line\">      ;LBA地址7~0位写入端口0x1f3</span><br><span class=\"line\">      mov dx,0x1f3                       </span><br><span class=\"line\">      out dx,al                          </span><br><span class=\"line\"></span><br><span class=\"line\">      ;LBA地址15~8位写入端口0x1f4</span><br><span class=\"line\">      mov cl,8</span><br><span class=\"line\">      shr eax,cl</span><br><span class=\"line\">      mov dx,0x1f4</span><br><span class=\"line\">      out dx,al</span><br><span class=\"line\"></span><br><span class=\"line\">      ;LBA地址23~16位写入端口0x1f5</span><br><span class=\"line\">      shr eax,cl</span><br><span class=\"line\">      mov dx,0x1f5</span><br><span class=\"line\">      out dx,al</span><br><span class=\"line\"></span><br><span class=\"line\">      shr eax,cl</span><br><span class=\"line\">      and al,0x0f\t   ;lba第24~27位</span><br><span class=\"line\">      or al,0xe0\t   ; 设置7～4位为1110,表示lba模式</span><br><span class=\"line\">      mov dx,0x1f6</span><br><span class=\"line\">      out dx,al</span><br><span class=\"line\"></span><br><span class=\"line\">;第3步：向0x1f7端口写入读命令，0x20 </span><br><span class=\"line\">      mov dx,0x1f7</span><br><span class=\"line\">      mov al,0x20                        </span><br><span class=\"line\">      out dx,al</span><br><span class=\"line\"></span><br><span class=\"line\">;第4步：检测硬盘状态</span><br><span class=\"line\">  .not_ready:</span><br><span class=\"line\">      ;同一端口，写时表示写入命令字，读时表示读入硬盘状态</span><br><span class=\"line\">      nop</span><br><span class=\"line\">      in al,dx</span><br><span class=\"line\">      and al,0x88\t   ;第4位为1表示硬盘控制器已准备好数据传输，第7位为1表示硬盘忙</span><br><span class=\"line\">      cmp al,0x08</span><br><span class=\"line\">      jnz .not_ready\t   ;若未准备好，继续等。</span><br><span class=\"line\"></span><br><span class=\"line\">;第5步：从0x1f0端口读数据</span><br><span class=\"line\">      mov ax, di</span><br><span class=\"line\">      mov dx, 256</span><br><span class=\"line\">      mul dx</span><br><span class=\"line\">      mov cx, ax\t   ; di为要读取的扇区数，一个扇区有512字节，每次读入一个字，</span><br><span class=\"line\">\t\t\t   ; 共需di*512/2次，所以di*256</span><br><span class=\"line\">      mov dx, 0x1f0</span><br><span class=\"line\">  .go_on_read:</span><br><span class=\"line\">      in ax,dx</span><br><span class=\"line\">      mov [bx],ax</span><br><span class=\"line\">      add bx,2\t\t  </span><br><span class=\"line\">      loop .go_on_read</span><br><span class=\"line\">      ret</span><br><span class=\"line\"></span><br><span class=\"line\">   times 510-($-$$) db 0</span><br><span class=\"line\">   db 0x55,0xaa</span><br></pre></td></tr></table></figure> <strong>boot.inc</strong>文件 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;-------------\t loader和kernel   ----------</span><br><span class=\"line\">LOADER_BASE_ADDR equ 0x900 </span><br><span class=\"line\">LOADER_START_SECTOR equ 0x2</span><br></pre></td></tr></table></figure>\r\n最后CPU会调到0x900的地址，还得有个loader <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%include &quot;boot.inc&quot;</span><br><span class=\"line\">section loader vstart=LOADER_BASE_ADDR</span><br><span class=\"line\"></span><br><span class=\"line\">; 输出背景色绿色，前景色红色，并且跳动的字符串&quot;1 MBR&quot;</span><br><span class=\"line\">mov byte [gs:0x20],&#x27;2&#x27;</span><br><span class=\"line\">mov byte [gs:0x21],0xA4     ; A表示绿色背景闪烁，4表示前景色为红色</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x22],&#x27; &#x27;</span><br><span class=\"line\">mov byte [gs:0x23],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x24],&#x27;L&#x27;</span><br><span class=\"line\">mov byte [gs:0x25],0xA4   </span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x26],&#x27;O&#x27;</span><br><span class=\"line\">mov byte [gs:0x27],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x28],&#x27;A&#x27;</span><br><span class=\"line\">mov byte [gs:0x29],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x2a],&#x27;D&#x27;</span><br><span class=\"line\">mov byte [gs:0x2b],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x2c],&#x27;E&#x27;</span><br><span class=\"line\">mov byte [gs:0x2d],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x2e],&#x27;R&#x27;</span><br><span class=\"line\">mov byte [gs:0x2f],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">jmp $\t\t       ; 通过死循环使程序悬停在此</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://mikeygithub.github.io/2021/02/26/os/OS%E7%AF%87-Bochs%E5%9C%A8Ubuntu%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/\">OS篇-Bochs在Ubuntu下的安装教程</a>\r\n* <a\r\nhref=\"https://www.cxybb.com/article/Java_c110/115737121\">Ubuntu20.04/18.04安装Bochs2.6.9编译运行GeekOS</a>\r\n* <a\r\nhref=\"https://farseerfc.me/zhs/history-of-chs-addressing.html\">柱面-磁头-扇区寻址的一些旧事</a>\r\n* <a href=\"https://zhuanlan.zhihu.com/p/26098509\">MBR与GPT</a></p>\r\n","site":{"data":{}},"excerpt":"<h1 id=\"bochs\">Bochs</h1>\r\n<p>Bochs是一个x86硬件平台的开源模拟器。你可以当它是一台虚拟的x86的计算机。</p>","more":"<p>本文环境：<br />\r\n* OS: Ubuntu 20.04.4 LTS * Bochs： 2.6.9</p>\r\n<h2 id=\"安装bochs\">安装Bochs</h2>\r\n<p>这个网上教程很多了，先去<a\r\nhref=\"https://sourceforge.net/projects/bochs/files/bochs/\">下载</a>，然后configure：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=/your_path/bochs \\</span><br><span class=\"line\">--enable-debugger\\</span><br><span class=\"line\">--enable-disasm \\</span><br><span class=\"line\">--enable-iodebug \\</span><br><span class=\"line\">--enable-x86-debugger \\</span><br><span class=\"line\">--with-x \\</span><br><span class=\"line\">--with-x11</span><br></pre></td></tr></table></figure> 这里会出点问题，一般是缺少库了： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libx11-dev ................. for X11/Xlib.h</span><br><span class=\"line\">sudo apt-get install mesa-common-dev........ for GL/glx.h</span><br><span class=\"line\">sudo apt-get install libglu1-mesa-dev ..... for GL/glu.h</span><br><span class=\"line\">sudo apt-get install libxrandr-dev ........... for X11/extensions/Xrandr.h</span><br><span class=\"line\">sudo apt-get install libxi-dev ................... for X11/extensions/XInput.h</span><br></pre></td></tr></table></figure>\r\nconfigure通过就可以编译安装了： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"配置\">配置</h2>\r\n<p>当我们在终端输入bochs后，\r\nBochs会自己在当前目录顺序寻找以下文件作为默认配置文件： .bochsrc<br />\r\nbochsrc<br />\r\nbochsrc.txt<br />\r\nbochsrc.bxrc(仅对Windows有效)<br />\r\n我们可以自己创建一个名为.bochsrc的文件，来指定Bochs配置我们想要的虚拟机。<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[~/bochs_fun]$ cat bochsrc</span><br><span class=\"line\"></span><br><span class=\"line\">#################################################################</span><br><span class=\"line\"># Bochs的配置文件</span><br><span class=\"line\"># Configuration file for Bochs</span><br><span class=\"line\">#################################################################</span><br><span class=\"line\"></span><br><span class=\"line\"># how much memory the emulated machine will have</span><br><span class=\"line\">megs: 32</span><br><span class=\"line\"></span><br><span class=\"line\"># filenameof ROM images</span><br><span class=\"line\">romimage:file=/usr/local/share/bochs/BIOS-bochs-latest</span><br><span class=\"line\">vgaromimage:file=/usr/local/share/bochs/VGABIOS-lgpl-latest</span><br><span class=\"line\"></span><br><span class=\"line\"># which disk image will be used 这个是启动软盘</span><br><span class=\"line\">floppya:1_44=a.img, status=inserted</span><br><span class=\"line\"></span><br><span class=\"line\"># choose the boot disk 确定启动方式</span><br><span class=\"line\">#boot: floppy</span><br><span class=\"line\">boot: disk</span><br><span class=\"line\"></span><br><span class=\"line\"># where do we send log messages?</span><br><span class=\"line\">log: bochsout.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># disable the mouse</span><br><span class=\"line\">mouse: enabled=0</span><br><span class=\"line\"></span><br><span class=\"line\"># enable key mapping ,using US layout as default</span><br><span class=\"line\">keyboard:keymap=/usr/local/share/bochs/keymaps/x11-pc-us.map</span><br><span class=\"line\"></span><br><span class=\"line\"># 硬盘设置</span><br><span class=\"line\">ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"测试开机\">测试开机</h2>\r\n<p>按<code>c</code>继续运行，弹出新的窗口。</p>\r\n<h2 id=\"mbr\">MBR</h2>\r\n<p>MBR：Master Boot\r\nRecord，主分区引导记录，它是整个硬盘最开始的扇区，即0柱面0磁头1扇区（CHS表示方法，如果是LBA的话，那就是0扇区）。</p>\r\n<p>扇区是什么？那就涉及到硬盘基本知识了，对于机械硬盘，有以下概念： *\r\n盘片（platter） * 磁头（head） * 磁道（track） * 扇区（sector） *\r\n柱面（cylinder）</p>\r\n<p><strong>盘片 片面 和 磁头（Head）</strong></p>\r\n<p>硬盘中一般会有多个盘片组成，每个盘片包含两个面，每个盘面都对应地有一个<strong>读/写磁头</strong>。受到硬盘整体体积和生产成本的限制，盘片数量都受到限制，一般都在5片以内。盘片的编号自下向上从0开始，如最下边的盘片有0面和1面，再上一个盘片就编号为2面和3面。</p>\r\n<figure>\r\n<img src=\"/images/disk_image.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p><strong>扇区（Sector）和 磁道（Track）</strong></p>\r\n<p>下图显示的是一个盘面，盘面中一圈圈灰色同心圆为一条条磁道，从圆心向外画直线，可以将磁道划分为若干个弧段，每个磁道上一个弧段被称之为一个扇区（图践绿色部分）。扇区是磁盘的最小组成单元，通常是512字节。（由于不断提高磁盘的大小，部分厂商设定每个扇区的大小是4096字节）</p>\r\n<figure>\r\n<img src=\"/images/disk_sector.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p><strong>磁头（Head）和 柱面（Cylinder）</strong>\r\n硬盘通常由重叠的一组盘片构成，每个盘面都被划分为数目相等的磁道，并从外缘的“0”开始编号，具有相同编号的磁道形成一个圆柱，称之为磁盘的柱面。磁盘的柱面数与一个盘面上的磁道数是相等的。由于每个盘面都有自己的磁头，因此，盘面数等于总的磁头数。\r\n如下图</p>\r\n<p><img src=\"/images/disk_cylinder.png\" alt=\"upload successful\" />\r\n图3</p>\r\n<p>所谓CHS即柱面（cylinder），磁头（header），扇区（sector），通过这三个变量描述磁盘地址（先定位柱面，然后选定磁头，然后确定扇区），需要明白的是，这里表示的已不是物理地址而是逻辑地址了。这种方法也称作是LARGE寻址方式。该方法下：</p>\r\n<p>硬盘容量=磁头数×柱面数×扇区数×扇区大小（一般为512byte）。</p>\r\n<p>后来，人们通过为每个扇区分配逻辑地址，以扇区为单位进行寻址，也就有了LBA寻址方式。但是为了保持与CHS模式的兼容，通过逻辑变换算法，可以转换为磁头/柱面/扇区三种参数来表示，和\r\nLARGE寻址模式一样，这里的地址也是逻辑地址了。（固态硬盘的存储原理虽然与机械硬盘不同，采用的是<strong>flash</strong>存储，但仍然使用LBA进行管理，此处不再详述。）</p>\r\n<p>好了，再回来说MBR，MBR(Master Boot\r\nRecord)是传统的分区机制，应用于绝大多数使用BIOS引导的PC设备（苹果使用EFI的方式），很多Server服务器即支持BIOS也支持EFI的引导方式。它的结构如下：<br />\r\nMBR结构：占用硬盘最开头的512字节</p>\r\n<p> <em> 前446字节为：引导代码（Bootstrap Code\r\nArea）（引导不同的操作系统；不同操作系统，引导代码是不一样的）   </em>\r\n接下来的为4个16字节：分别对应4个主分区表信息(Primary Partition Table) *\r\n最后2个字节：为启动标示（Boot\r\nSignature），永远都是<code>55</code>和<code>AA</code>；55和ＡＡ是个永久性的标示，代表这个硬盘是可启动的。</p>\r\n<figure>\r\n<img src=\"/images/mbr_structure.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<h2 id=\"主引导代码\">主引导代码</h2>\r\n<p>BIOS在完成一些简单的检测工作或初始化工作后，会把处理器使用权交出去，下一棒就是MBR程序。BIOS会把MBR加载到0x7c00的位置，然后执行里头代码（<code>jmp 0:0x7c00</code>）。<br />\r\n<strong>mbr.S</strong>文件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;主引导程序 </span><br><span class=\"line\">;------------------------------------------------------------</span><br><span class=\"line\">SECTION MBR vstart=0x7c00</span><br><span class=\"line\">   mov ax,cs      </span><br><span class=\"line\">   mov ds,ax</span><br><span class=\"line\">   mov es,ax</span><br><span class=\"line\">   mov ss,ax</span><br><span class=\"line\">   mov fs,ax</span><br><span class=\"line\">   mov sp,0x7c00</span><br><span class=\"line\"></span><br><span class=\"line\">; 清屏 利用0x06号功能，上卷全部行，则可清屏。</span><br><span class=\"line\">; -----------------------------------------------------------</span><br><span class=\"line\">;INT 0x10   功能号:0x06\t   功能描述:上卷窗口</span><br><span class=\"line\">;------------------------------------------------------</span><br><span class=\"line\">;输入：</span><br><span class=\"line\">;AH 功能号= 0x06</span><br><span class=\"line\">;AL = 上卷的行数(如果为0,表示全部)</span><br><span class=\"line\">;BH = 上卷行属性</span><br><span class=\"line\">;(CL,CH) = 窗口左上角的(X,Y)位置</span><br><span class=\"line\">;(DL,DH) = 窗口右下角的(X,Y)位置</span><br><span class=\"line\">;无返回值：</span><br><span class=\"line\">   mov     ax, 0x600</span><br><span class=\"line\">   mov     bx, 0x700</span><br><span class=\"line\">   mov     cx, 0           ; 左上角: (0, 0)</span><br><span class=\"line\">   mov     dx, 0x184f\t   ; 右下角: (80,25),</span><br><span class=\"line\">\t\t\t   ; VGA文本模式中,一行只能容纳80个字符,共25行。</span><br><span class=\"line\">\t\t\t   ; 下标从0开始,所以0x18=24,0x4f=79</span><br><span class=\"line\">   int     0x10            ; int 0x10</span><br><span class=\"line\"></span><br><span class=\"line\">;;;;;;;;;    下面这三行代码是获取光标位置    ;;;;;;;;;</span><br><span class=\"line\">;.get_cursor获取当前光标位置,在光标位置处打印字符.</span><br><span class=\"line\">   mov ah, 3\t\t; 输入: 3号子功能是获取光标位置,需要存入ah寄存器</span><br><span class=\"line\">   mov bh, 0\t\t; bh寄存器存储的是待获取光标的页号</span><br><span class=\"line\"></span><br><span class=\"line\">   int 0x10\t\t; 输出: ch=光标开始行,cl=光标结束行</span><br><span class=\"line\">\t\t\t; dh=光标所在行号,dl=光标所在列号</span><br><span class=\"line\"></span><br><span class=\"line\">;;;;;;;;;    获取光标位置结束    ;;;;;;;;;;;;;;;;</span><br><span class=\"line\"></span><br><span class=\"line\">;;;;;;;;;     打印字符串    ;;;;;;;;;;;</span><br><span class=\"line\">   ;还是用10h中断,不过这次是调用13号子功能打印字符串</span><br><span class=\"line\">   mov ax, message </span><br><span class=\"line\">   mov bp, ax\t\t; es:bp 为串首地址, es此时同cs一致，</span><br><span class=\"line\">\t\t\t; 开头时已经为sreg初始化</span><br><span class=\"line\"></span><br><span class=\"line\">   ; 光标位置要用到dx寄存器中内容,cx中的光标位置可忽略</span><br><span class=\"line\">   mov cx, 0xb\t\t; cx 为串长度,不包括结束符0的字符个数</span><br><span class=\"line\">   mov ax, 0x1301\t; 子功能号13是显示字符及属性,要存入ah寄存器,</span><br><span class=\"line\">\t\t\t; al设置写字符方式 ah=01: 显示字符串,光标跟随移动</span><br><span class=\"line\">   mov bx, 0x2\t\t; bh存储要显示的页号,此处是第0页,</span><br><span class=\"line\">\t\t\t; bl中是字符属性, 属性黑底绿字(bl = 02h)</span><br><span class=\"line\">   int 0x10\t\t; 执行BIOS 0x10 号中断</span><br><span class=\"line\">;;;;;;;;;      打字字符串结束\t ;;;;;;;;;;;;;;;</span><br><span class=\"line\"></span><br><span class=\"line\">   jmp $\t\t; 使程序悬停在此</span><br><span class=\"line\"></span><br><span class=\"line\">   message db &quot;love rabbit&quot;</span><br><span class=\"line\">   times 510-($-$$) db 0</span><br><span class=\"line\">   db 0x55,0xaa</span><br></pre></td></tr></table></figure>\r\n用nasm编译成纯二进制文件<code>nasm -o mbr.bin mbr.S</code>，可以查看<strong>mbr.bin</strong>文件大小，正好512个字节。</p>\r\n<p>然后利用<code>dd</code>命令把bin文件写进磁盘的0柱面0磁头1扇区：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd if=/your_path/bochs_fun/mbr.bin of=/your_path/bochs_fun/hd60M.img bs=512 count=1 conv=notrunc</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"增加磁盘读写\">增加磁盘读写</h2>\r\n<p>mbr.S <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;主引导程序 </span><br><span class=\"line\">;------------------------------------------------------------</span><br><span class=\"line\">%include &quot;boot.inc&quot;</span><br><span class=\"line\">SECTION MBR vstart=0x7c00         </span><br><span class=\"line\">   mov ax,cs      </span><br><span class=\"line\">   mov ds,ax</span><br><span class=\"line\">   mov es,ax</span><br><span class=\"line\">   mov ss,ax</span><br><span class=\"line\">   mov fs,ax</span><br><span class=\"line\">   mov sp,0x7c00</span><br><span class=\"line\">   mov ax,0xb800</span><br><span class=\"line\">   mov gs,ax</span><br><span class=\"line\"></span><br><span class=\"line\">; 清屏</span><br><span class=\"line\">;利用0x06号功能，上卷全部行，则可清屏。</span><br><span class=\"line\">; -----------------------------------------------------------</span><br><span class=\"line\">;INT 0x10   功能号:0x06\t   功能描述:上卷窗口</span><br><span class=\"line\">;------------------------------------------------------</span><br><span class=\"line\">;输入：</span><br><span class=\"line\">;AH 功能号= 0x06</span><br><span class=\"line\">;AL = 上卷的行数(如果为0,表示全部)</span><br><span class=\"line\">;BH = 上卷行属性</span><br><span class=\"line\">;(CL,CH) = 窗口左上角的(X,Y)位置</span><br><span class=\"line\">;(DL,DH) = 窗口右下角的(X,Y)位置</span><br><span class=\"line\">;无返回值：</span><br><span class=\"line\">   mov     ax, 0600h</span><br><span class=\"line\">   mov     bx, 0700h</span><br><span class=\"line\">   mov     cx, 0                   ; 左上角: (0, 0)</span><br><span class=\"line\">   mov     dx, 184fh\t\t   ; 右下角: (80,25),</span><br><span class=\"line\">\t\t\t\t   ; 因为VGA文本模式中，一行只能容纳80个字符,共25行。</span><br><span class=\"line\">\t\t\t\t   ; 下标从0开始，所以0x18=24,0x4f=79</span><br><span class=\"line\">   int     10h                     ; int 10h</span><br><span class=\"line\"></span><br><span class=\"line\">   ; 输出字符串:MBR</span><br><span class=\"line\">   mov byte [gs:0x00],&#x27;1&#x27;</span><br><span class=\"line\">   mov byte [gs:0x01],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">   mov byte [gs:0x02],&#x27; &#x27;</span><br><span class=\"line\">   mov byte [gs:0x03],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">   mov byte [gs:0x04],&#x27;M&#x27;</span><br><span class=\"line\">   mov byte [gs:0x05],0xA4\t   ;A表示绿色背景闪烁，4表示前景色为红色</span><br><span class=\"line\"></span><br><span class=\"line\">   mov byte [gs:0x06],&#x27;B&#x27;</span><br><span class=\"line\">   mov byte [gs:0x07],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">   mov byte [gs:0x08],&#x27;R&#x27;</span><br><span class=\"line\">   mov byte [gs:0x09],0xA4</span><br><span class=\"line\">\t </span><br><span class=\"line\">   mov eax,LOADER_START_SECTOR\t ; 起始扇区lba地址</span><br><span class=\"line\">   mov bx,LOADER_BASE_ADDR       ; 写入的地址</span><br><span class=\"line\">   mov cx,1\t\t\t ; 待读入的扇区数</span><br><span class=\"line\">   call rd_disk_m_16\t\t ; 以下读取程序的起始部分（一个扇区）</span><br><span class=\"line\">  </span><br><span class=\"line\">   jmp LOADER_BASE_ADDR</span><br><span class=\"line\">       </span><br><span class=\"line\">;-------------------------------------------------------------------------------</span><br><span class=\"line\">;功能:读取硬盘n个扇区</span><br><span class=\"line\">rd_disk_m_16:\t   </span><br><span class=\"line\">;-------------------------------------------------------------------------------</span><br><span class=\"line\">\t\t\t\t       ; eax=LBA扇区号</span><br><span class=\"line\">\t\t\t\t       ; ebx=将数据写入的内存地址</span><br><span class=\"line\">\t\t\t\t       ; ecx=读入的扇区数</span><br><span class=\"line\">      mov esi,eax\t  ;备份eax</span><br><span class=\"line\">      mov di,cx\t\t  ;备份cx</span><br><span class=\"line\">;读写硬盘:</span><br><span class=\"line\">;第1步：设置要读取的扇区数</span><br><span class=\"line\">      mov dx,0x1f2</span><br><span class=\"line\">      mov al,cl</span><br><span class=\"line\">      out dx,al            ;读取的扇区数</span><br><span class=\"line\"></span><br><span class=\"line\">      mov eax,esi\t   ;恢复ax</span><br><span class=\"line\"></span><br><span class=\"line\">;第2步：将LBA地址存入0x1f3 ~ 0x1f6</span><br><span class=\"line\"></span><br><span class=\"line\">      ;LBA地址7~0位写入端口0x1f3</span><br><span class=\"line\">      mov dx,0x1f3                       </span><br><span class=\"line\">      out dx,al                          </span><br><span class=\"line\"></span><br><span class=\"line\">      ;LBA地址15~8位写入端口0x1f4</span><br><span class=\"line\">      mov cl,8</span><br><span class=\"line\">      shr eax,cl</span><br><span class=\"line\">      mov dx,0x1f4</span><br><span class=\"line\">      out dx,al</span><br><span class=\"line\"></span><br><span class=\"line\">      ;LBA地址23~16位写入端口0x1f5</span><br><span class=\"line\">      shr eax,cl</span><br><span class=\"line\">      mov dx,0x1f5</span><br><span class=\"line\">      out dx,al</span><br><span class=\"line\"></span><br><span class=\"line\">      shr eax,cl</span><br><span class=\"line\">      and al,0x0f\t   ;lba第24~27位</span><br><span class=\"line\">      or al,0xe0\t   ; 设置7～4位为1110,表示lba模式</span><br><span class=\"line\">      mov dx,0x1f6</span><br><span class=\"line\">      out dx,al</span><br><span class=\"line\"></span><br><span class=\"line\">;第3步：向0x1f7端口写入读命令，0x20 </span><br><span class=\"line\">      mov dx,0x1f7</span><br><span class=\"line\">      mov al,0x20                        </span><br><span class=\"line\">      out dx,al</span><br><span class=\"line\"></span><br><span class=\"line\">;第4步：检测硬盘状态</span><br><span class=\"line\">  .not_ready:</span><br><span class=\"line\">      ;同一端口，写时表示写入命令字，读时表示读入硬盘状态</span><br><span class=\"line\">      nop</span><br><span class=\"line\">      in al,dx</span><br><span class=\"line\">      and al,0x88\t   ;第4位为1表示硬盘控制器已准备好数据传输，第7位为1表示硬盘忙</span><br><span class=\"line\">      cmp al,0x08</span><br><span class=\"line\">      jnz .not_ready\t   ;若未准备好，继续等。</span><br><span class=\"line\"></span><br><span class=\"line\">;第5步：从0x1f0端口读数据</span><br><span class=\"line\">      mov ax, di</span><br><span class=\"line\">      mov dx, 256</span><br><span class=\"line\">      mul dx</span><br><span class=\"line\">      mov cx, ax\t   ; di为要读取的扇区数，一个扇区有512字节，每次读入一个字，</span><br><span class=\"line\">\t\t\t   ; 共需di*512/2次，所以di*256</span><br><span class=\"line\">      mov dx, 0x1f0</span><br><span class=\"line\">  .go_on_read:</span><br><span class=\"line\">      in ax,dx</span><br><span class=\"line\">      mov [bx],ax</span><br><span class=\"line\">      add bx,2\t\t  </span><br><span class=\"line\">      loop .go_on_read</span><br><span class=\"line\">      ret</span><br><span class=\"line\"></span><br><span class=\"line\">   times 510-($-$$) db 0</span><br><span class=\"line\">   db 0x55,0xaa</span><br></pre></td></tr></table></figure> <strong>boot.inc</strong>文件 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;-------------\t loader和kernel   ----------</span><br><span class=\"line\">LOADER_BASE_ADDR equ 0x900 </span><br><span class=\"line\">LOADER_START_SECTOR equ 0x2</span><br></pre></td></tr></table></figure>\r\n最后CPU会调到0x900的地址，还得有个loader <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%include &quot;boot.inc&quot;</span><br><span class=\"line\">section loader vstart=LOADER_BASE_ADDR</span><br><span class=\"line\"></span><br><span class=\"line\">; 输出背景色绿色，前景色红色，并且跳动的字符串&quot;1 MBR&quot;</span><br><span class=\"line\">mov byte [gs:0x20],&#x27;2&#x27;</span><br><span class=\"line\">mov byte [gs:0x21],0xA4     ; A表示绿色背景闪烁，4表示前景色为红色</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x22],&#x27; &#x27;</span><br><span class=\"line\">mov byte [gs:0x23],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x24],&#x27;L&#x27;</span><br><span class=\"line\">mov byte [gs:0x25],0xA4   </span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x26],&#x27;O&#x27;</span><br><span class=\"line\">mov byte [gs:0x27],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x28],&#x27;A&#x27;</span><br><span class=\"line\">mov byte [gs:0x29],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x2a],&#x27;D&#x27;</span><br><span class=\"line\">mov byte [gs:0x2b],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x2c],&#x27;E&#x27;</span><br><span class=\"line\">mov byte [gs:0x2d],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">mov byte [gs:0x2e],&#x27;R&#x27;</span><br><span class=\"line\">mov byte [gs:0x2f],0xA4</span><br><span class=\"line\"></span><br><span class=\"line\">jmp $\t\t       ; 通过死循环使程序悬停在此</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://mikeygithub.github.io/2021/02/26/os/OS%E7%AF%87-Bochs%E5%9C%A8Ubuntu%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/\">OS篇-Bochs在Ubuntu下的安装教程</a>\r\n* <a\r\nhref=\"https://www.cxybb.com/article/Java_c110/115737121\">Ubuntu20.04/18.04安装Bochs2.6.9编译运行GeekOS</a>\r\n* <a\r\nhref=\"https://farseerfc.me/zhs/history-of-chs-addressing.html\">柱面-磁头-扇区寻址的一些旧事</a>\r\n* <a href=\"https://zhuanlan.zhihu.com/p/26098509\">MBR与GPT</a></p>"},{"title":"一步步自己做个Docker之Linux Namespace 简介","author":"Salamander","date":"2019-11-28T08:10:00.000Z","_content":"![docker logo](/images/docker-logo.png)\n\n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* 内核版本： 5.0.0-36-generic \n\n## Linux Namespaces\nDocker的所用的两个关键技术，一个是`Namespaces`，一个是`Cgroups`。它俩都不是新技术，Linux内核很早就支持，但是Docker把它们有机地结合起来，加上自己创新，使得现在容器技术非常流行。  \n`Linux Namespaces`其实是做到了进程之间全局资源的隔离，譬如，`UTS Namespace`隔离了Hostname空间。这意味着在新的`UTS Namespace`中的进程，可以拥有不同于宿主机的主机名。 \n\n<!-- more -->\n\n目前Linux内核主要实现了以下几种不同的资源`Namespace`：\n\n| 名称 | 宏定义 | 隔离的内容 |\n|--- |--- |--- |\n|IPC|CLONE_NEWIPC|System V IPC, POSIX message queues (since Linux 2.6.19)|\n|Network|CLONE_NEWNET|network device interfaces, IPv4 and IPv6 protocol stacks, IP routing tables, firewall rules, the /proc/net and /sys/class/net directory trees, sockets, etc (since Linux 2.6.24)|\n|Mount|CLONE_NEWNS|Mount points (since Linux 2.4.19)|\n|PID|CLONE_NEWPID|Process IDs (since Linux 2.6.24)|\n|User|CLONE_NEWUSER|User and group IDs (started in Linux 2.6.23 and completed in Linux 3.8)|\n|UTS|CLONE_NEWUTS|Hostname and NIS domain name (since Linux 2.6.19)|\n|Cgroup|CLONE_NEWCGROUP|Cgroup root directory (since Linux 4.6)|\n\n要注意一点的是，不是所有的系统资源都能隔离，时间就是个例外，没有对应的`Namespace`，因此同一台Linux启动的容器时间都是相同的。\n\n### 尝试一下Namespace\n```\nlucy@lucy-computer:~$ unshare -h\n\n用法：\n unshare [选项] [<程序> [<参数>...]]\n\n以某些未与父(进程)共享的名字空间运行某个程序。\n\n选项：\n -m, --mount[=<文件>]      取消共享 mounts 名字空间\n -u, --uts[=<文件>]        取消共享 UTS 名字空间(主机名等)\n -i, --ipc[=<文件>]        取消共享 System V IPC 名字空间\n -n, --net[=<file>]        取消共享网络名字空间\n -p, --pid[=<文件>]        取消共享 pid 名字空间\n -U, --user[=<文件>]       取消共享用户名字空间\n -C, --cgroup[=<文件>]     取消共享 cgroup 名字空间\n -f, --fork                在启动<程序>前 fork\n     --mount-proc[=<目录>] 先挂载 proc 文件系统(连带打开 --mount)\n -r, --map-root-user       将当前用户映射为 root (连带打开 --user)\n     --propagation slave|shared|private|unchanged\n                           修改 mount 名字空间中的 mount 传播\n -s, --setgroups allow|deny  控制用户名字空间中的 setgroups 系统调用\n\n -h, --help                display this help\n -V, --version             display version\n```\n`unshare`命令可以让你在新的名称空间集中启动一个新的程序（unshared本身的含义就是不和父进程共享）。  \n下面的例子使用了`UTS namespace`，可以看到在新的`/bin/sh`进程中修改hostname，并没有影响宿主机：\n```\n$ sudo su                   # become root user\n$ hostname                  # check current hostname\nlucy-computer  \n$ unshare -u /bin/sh        # create a shell in new UTS namespace\n$ hostname my-new-hostname  # set hostname\n$ hostname                  # confirm new hostname\nmy-new-hostname  \n$ exit                      # exit new UTS namespace\n$ hostname                  # confirm original hostname unchanged\nlucy-computer\n```\n\n### 三个系统调用\n`unshare`命令很棒，但是当我们想要对程序中的命名空间进行更细粒度的控制时，那该怎么办呢？  \nLinux 内核提供的功能都会提供`系统调用`接口供应用程序使用，`Namespace`也不例外。和`Namespace`相关的系统调用主要有三个：\n* [clone](http://man7.org/linux/man-pages/man2/clone.2.html)\n* [setns](http://man7.org/linux/man-pages/man2/setns.2.html)\n* [unshare](http://man7.org/linux/man-pages/man2/unshare.2.html)\n\n**注意**：这些系统调用都是 linux 内核实现的，不能直接适用于其他操作系统。\n\n查看一下它们对应的C语言函数原型：\n#### clone：创建新进程并设置它的Namespace\n`clone`类似于`fork`系统调用，可以创建一个新的进程，不同的是你可以指定要子进程要执行的函数以及通过参数控制子进程的运行环境。\n\n> 实际上，clone() 是在 C 语言库中定义的一个封装(wrapper)函数，它负责建立新进程的堆栈并且调用对编程者隐藏的 clone() 系统调用。Clone() 其实是 linux 系统调用 fork() 的一种更通用的实现方式，它可以通过 flags 来控制使用多少功能。\n\n```\n#define _GNU_SOURCE\n#include <sched.h>\n\nint clone(int (*fn)(void *), void *child_stack, int flags, void *arg);\n```\n* fn：指定一个由新进程执行的函数。当这个函数返回时，子进程终止。该函数返回一个整数，表示子进程的退出代码。\n* child_stack：传入子进程使用的栈空间，也就是把用户态堆栈指针赋给子进程的 esp 寄存器。调用进程(指调用 clone() 的进程)应该总是为子进程分配新的堆栈。\n* flags：表示使用哪些 CLONE_ 开头的标志位，与 namespace 相关的有CLONE_NEWIPC、CLONE_NEWNET、CLONE_NEWNS、CLONE_NEWPID、CLONE_NEWUSER、CLONE_NEWUTS 和 CLONE_NEWCGROUP，如果要同时隔离多个 namespace，**可以使用 | (按位或)组合这些参数**。\n* arg：指向传递给 fn() 函数的参数。\n\n#### setns：让进程加入已经存在Namespace\nsetns 能够把某个进程加入到给定的 namespace，它的定义是这样的：\n```\n#define _GNU_SOURCE\n#include <sched.h>\nint setns(int fd, int nstype);\n```\n和`clone()`函数一样，C 语言库中的`setns()`函数也是对`setns系统调用`的封装。  \n* fd：表示要加入 namespace 的文件描述符。它是一个指向 /proc/[pid]/ns 目录中文件的文件描述符，可以通过直接打开该目录下的链接文件或者打开一个挂载了该目录下链接文件的文件得到。\n* nstype：参数 nstype 让调用者可以检查 fd 指向的 namespace 类型是否符合实际要求。若把该参数设置为 0 表示不检查。\n\n#### unshare：让进程加入新的Namespace\n```\n#define _GNU_SOURCE\n#include <sched.h>\nint unshare(int flags);\n```\n`unshare()`函数比较简单，只有一个参数`flags`，它的含义和`clone()`的`flags`相同。`unshare`和 `setns` 的区别是，`setns` 只能让进程加入到已经存在的`namespace`中，而`unshare`则让进程离开当前的`namespace`，加入到新建的`namespace`中。  \n\n`unshare()`和`clone()`的区别在于：`unshare()`是把当前进程进入到新的`namespace`；`clone()`是创建新的进程，然后让新创建的进程（子进程）加入到新的`namespace`。\n\n\n## C程序中使用clone系统调用\n我们先来看看 clone 一个简单的使用例子：创建一个新的进程，并执行 /bin/bash，这样就可以接受命令，方便我们查看新进程的信息。\n```\n#define _GNU_SOURCE\n#include <sched.h>\n#include <sys/wait.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\n// 设置子进程要使用的栈空间\n#define STACK_SIZE (1024*1024)\nstatic char container_stack[STACK_SIZE];\n\n#define errExit(code, msg); {if(code == -1){perror(msg); exit(-1);} }\n\n\nchar* const container_args[] = {\n    \"/bin/bash\",\n    NULL\n};\n\nstatic int container_func(void *arg)\n{\n    pid_t pid = getpid();\n    printf(\"Container[%d] - inside the container!\\n\", pid);\n\n    // 用一个新的bash来替换掉当前子进程，\n    // 这样我们就能通过 bash 查看当前子进程的情况.\n    // bash退出后，子进程执行完毕\n    execv(container_args[0], container_args);\n\n    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;\n    // 所以如果执行到这里，一定是出错了\n    printf(\"Container[%d] - oops!\\n\", pid);\n    return 1;\n}\n\n\nint main(int argc, char *argv[])\n{\n    pid_t pid = getpid();\n    printf(\"Parent[%d] - create a container!\\n\", pid);\n\n    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid\n    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数\n                    container_stack + sizeof(container_stack),\n                    // 这里SIGCHLD是子进程退出后返回给父进程的信号，跟namespace无关\n                    SIGCHLD,\n                    NULL);  // 传给child_func的参数\n    errExit(child_pid, \"clone\");\n\n    waitpid(child_pid, NULL, 0); // 等待子进程结束\n\n    printf(\"Parent[%d] - container exited!\\n\", pid);\n    return 0;\n}\n```\n这段代码不长，但是做了很多事情：\n* 通过`clone()`创建出一个子进程，并设置启动时的参数\n* 在子进程中调用 execv 来执行 /bin/bash，等待用户进行交互\n* 子进程退出之后，父进程也跟着退出\n\n我们可以用`ls -l /proc/$$/ns`查看当前进程所在命名空间的信息，运行程序：\n```\nlucy@lucy-computer:~$ gcc container.c -o container\nlucy@lucy-computer:~$ ./container \nParent[19644] - create a container!\nContainer[19645] - inside the container!\nlucy@lucy-computer:~$ ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 uts -> 'uts:[4026531838]'\nlucy@lucy-computer:~$ exit\nexit\nParent[19644] - container exited!\nlucy@lucy-computer:~$ ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 uts -> 'uts:[4026531838]'\n```\n各类命名空间id都是一样，因为我们只是单单使用了`clone`，未设置要隔离的命名空间，现在，我们加入`UTS Namespace`隔离，`UTS namespace` 功能最简单，它只隔离了 hostname 和 NIS domain name 两个资源。  \n同一个 namespace 里面的进程看到的 hostname 和 domain name 是相同的，这两个值可以通过 `sethostname(2)` 和 `setdomainname(2)` 来进行设置，也可以通过 `uname(2)`、`gethostname(2)` 和 `getdomainname(2)` 来读取。    \n**注意**： UTS 的名字来自于`uname`函数用到的结构体`struct utsname`，这个结构体的名字源自于`UNIX Time-sharing System`。  \n代码主要修改两个地方：clone 的参数加上了 CLONE_NEWUTS，子进程函数中使用`sethostname`来设置 hostname。  \n\n```\n#define _GNU_SOURCE\n#include <sched.h>\n#include <sys/wait.h>\n#include <sys/utsname.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\n// 设置子进程要使用的栈空间\n#define STACK_SIZE (1024*1024)\nstatic char container_stack[STACK_SIZE];\n\n#define errExit(code, msg); {if(code == -1){perror(msg); exit(-1);} }\n\n\nchar* const container_args[] = {\n    \"/bin/bash\",\n    NULL\n};\n\nstatic int container_func(void *hostname)\n{\n    pid_t pid = getpid();\n    printf(\"Container[%d] - inside the container!\\n\", pid);\n\n    // 使用 sethostname 设置子进程的 hostname 信息\n    struct utsname uts;\n    if (sethostname(hostname, strlen(hostname)) == -1) {\n        errExit(-1, \"sethostname\")\n    };\n\n    // 使用 uname 获取子进程的机器信息，并打印 hostname 出来\n    if (uname(&uts) == -1){\n        errExit(-1, \"uname\")\n    }\n    printf(\"Container[%d] - container uts.nodename: [%s]!\\n\", pid, uts.nodename);\n\n    // 用一个新的bash来替换掉当前子进程，\n    // 这样我们就能通过 bash 查看当前子进程的情况.\n    // bash退出后，子进程执行完毕\n    execv(container_args[0], container_args);\n\n    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;\n    // 所以如果执行到这里，一定是出错了\n    printf(\"Container[%d] - oops!\\n\", pid);\n    return 1;\n}\n\n\nint main(int argc, char *argv[])\n{\n    pid_t pid = getpid();\n    printf(\"Parent[%d] - create a container!\\n\", pid);\n\n    // 把第一个参数作为子进程的 hostname，默认是 `container`\n    char *hostname;\n    if (argc < 2) {\n        hostname = \"container\";\n    } else {\n        hostname = argv[1];\n    }\n\n    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid\n    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数\n                    container_stack + sizeof(container_stack),\n                    // CLONE_NEWUTS表示创建新的UTS namespace\n                    CLONE_NEWUTS | SIGCHLD,\n                    hostname);  // 传给child_func的参数\n    errExit(child_pid, \"clone\");\n\n    waitpid(child_pid, NULL, 0); // 等待子进程结束\n\n    printf(\"Parent[%d] - container exited!\\n\", pid);\n    return 0;\n}\n```\n执行程序，发现容器中hostname与宿主机已经不一样了，容器中`UTS Namespace`id也跟宿主机不一样了（这里需要root权限）：\n\n```\nsudo su\nroot@lucy-computer:/home/lucy# gcc container.c -o container\nroot@lucy-computer:/home/lucy# ./container \nParent[21091] - create a container!\nContainer[21092] - inside the container!\nContainer[21092] - container uts.nodename: [container]!\nroot@container:/home/lucy# hostname\ncontainer\nroot@container:/home/lucy# ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 uts -> 'uts:[4026532944]'\nroot@container:/home/lucy# exit\nexit\nParent[21091] - container exited!\nroot@lucy-computer:/home/lucy# ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 uts -> 'uts:[4026531838]'\nroot@lucy-computer:/home/lucy# hostname\nlucy-computer\n```\n\n\n\n### Let's Go\nC语言很底层，能控制到很多细节，但是它对于大部分人有点困难，接下来我们会有Go语言来一步步实现Docker容器。\n\n\n\n\n\n\n\n### 参考资料\n* [cizixs.com/2017/08/29/linux-namespace](https://cizixs.com/2017/08/29/linux-namespace/)\n* [Linux Namespace : 简介](https://www.cnblogs.com/sparkdev/p/9365405.html)","source":"_posts/docker-Linux-Namespace-intro.md","raw":"title: 一步步自己做个Docker之Linux Namespace 简介\nauthor: Salamander\ntags:\n  - Docker\n  - Namespace\n  - Cgroup\ncategories:\n  - Docker\ndate: 2019-11-28 16:10:00\n---\n![docker logo](/images/docker-logo.png)\n\n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n* 内核版本： 5.0.0-36-generic \n\n## Linux Namespaces\nDocker的所用的两个关键技术，一个是`Namespaces`，一个是`Cgroups`。它俩都不是新技术，Linux内核很早就支持，但是Docker把它们有机地结合起来，加上自己创新，使得现在容器技术非常流行。  \n`Linux Namespaces`其实是做到了进程之间全局资源的隔离，譬如，`UTS Namespace`隔离了Hostname空间。这意味着在新的`UTS Namespace`中的进程，可以拥有不同于宿主机的主机名。 \n\n<!-- more -->\n\n目前Linux内核主要实现了以下几种不同的资源`Namespace`：\n\n| 名称 | 宏定义 | 隔离的内容 |\n|--- |--- |--- |\n|IPC|CLONE_NEWIPC|System V IPC, POSIX message queues (since Linux 2.6.19)|\n|Network|CLONE_NEWNET|network device interfaces, IPv4 and IPv6 protocol stacks, IP routing tables, firewall rules, the /proc/net and /sys/class/net directory trees, sockets, etc (since Linux 2.6.24)|\n|Mount|CLONE_NEWNS|Mount points (since Linux 2.4.19)|\n|PID|CLONE_NEWPID|Process IDs (since Linux 2.6.24)|\n|User|CLONE_NEWUSER|User and group IDs (started in Linux 2.6.23 and completed in Linux 3.8)|\n|UTS|CLONE_NEWUTS|Hostname and NIS domain name (since Linux 2.6.19)|\n|Cgroup|CLONE_NEWCGROUP|Cgroup root directory (since Linux 4.6)|\n\n要注意一点的是，不是所有的系统资源都能隔离，时间就是个例外，没有对应的`Namespace`，因此同一台Linux启动的容器时间都是相同的。\n\n### 尝试一下Namespace\n```\nlucy@lucy-computer:~$ unshare -h\n\n用法：\n unshare [选项] [<程序> [<参数>...]]\n\n以某些未与父(进程)共享的名字空间运行某个程序。\n\n选项：\n -m, --mount[=<文件>]      取消共享 mounts 名字空间\n -u, --uts[=<文件>]        取消共享 UTS 名字空间(主机名等)\n -i, --ipc[=<文件>]        取消共享 System V IPC 名字空间\n -n, --net[=<file>]        取消共享网络名字空间\n -p, --pid[=<文件>]        取消共享 pid 名字空间\n -U, --user[=<文件>]       取消共享用户名字空间\n -C, --cgroup[=<文件>]     取消共享 cgroup 名字空间\n -f, --fork                在启动<程序>前 fork\n     --mount-proc[=<目录>] 先挂载 proc 文件系统(连带打开 --mount)\n -r, --map-root-user       将当前用户映射为 root (连带打开 --user)\n     --propagation slave|shared|private|unchanged\n                           修改 mount 名字空间中的 mount 传播\n -s, --setgroups allow|deny  控制用户名字空间中的 setgroups 系统调用\n\n -h, --help                display this help\n -V, --version             display version\n```\n`unshare`命令可以让你在新的名称空间集中启动一个新的程序（unshared本身的含义就是不和父进程共享）。  \n下面的例子使用了`UTS namespace`，可以看到在新的`/bin/sh`进程中修改hostname，并没有影响宿主机：\n```\n$ sudo su                   # become root user\n$ hostname                  # check current hostname\nlucy-computer  \n$ unshare -u /bin/sh        # create a shell in new UTS namespace\n$ hostname my-new-hostname  # set hostname\n$ hostname                  # confirm new hostname\nmy-new-hostname  \n$ exit                      # exit new UTS namespace\n$ hostname                  # confirm original hostname unchanged\nlucy-computer\n```\n\n### 三个系统调用\n`unshare`命令很棒，但是当我们想要对程序中的命名空间进行更细粒度的控制时，那该怎么办呢？  \nLinux 内核提供的功能都会提供`系统调用`接口供应用程序使用，`Namespace`也不例外。和`Namespace`相关的系统调用主要有三个：\n* [clone](http://man7.org/linux/man-pages/man2/clone.2.html)\n* [setns](http://man7.org/linux/man-pages/man2/setns.2.html)\n* [unshare](http://man7.org/linux/man-pages/man2/unshare.2.html)\n\n**注意**：这些系统调用都是 linux 内核实现的，不能直接适用于其他操作系统。\n\n查看一下它们对应的C语言函数原型：\n#### clone：创建新进程并设置它的Namespace\n`clone`类似于`fork`系统调用，可以创建一个新的进程，不同的是你可以指定要子进程要执行的函数以及通过参数控制子进程的运行环境。\n\n> 实际上，clone() 是在 C 语言库中定义的一个封装(wrapper)函数，它负责建立新进程的堆栈并且调用对编程者隐藏的 clone() 系统调用。Clone() 其实是 linux 系统调用 fork() 的一种更通用的实现方式，它可以通过 flags 来控制使用多少功能。\n\n```\n#define _GNU_SOURCE\n#include <sched.h>\n\nint clone(int (*fn)(void *), void *child_stack, int flags, void *arg);\n```\n* fn：指定一个由新进程执行的函数。当这个函数返回时，子进程终止。该函数返回一个整数，表示子进程的退出代码。\n* child_stack：传入子进程使用的栈空间，也就是把用户态堆栈指针赋给子进程的 esp 寄存器。调用进程(指调用 clone() 的进程)应该总是为子进程分配新的堆栈。\n* flags：表示使用哪些 CLONE_ 开头的标志位，与 namespace 相关的有CLONE_NEWIPC、CLONE_NEWNET、CLONE_NEWNS、CLONE_NEWPID、CLONE_NEWUSER、CLONE_NEWUTS 和 CLONE_NEWCGROUP，如果要同时隔离多个 namespace，**可以使用 | (按位或)组合这些参数**。\n* arg：指向传递给 fn() 函数的参数。\n\n#### setns：让进程加入已经存在Namespace\nsetns 能够把某个进程加入到给定的 namespace，它的定义是这样的：\n```\n#define _GNU_SOURCE\n#include <sched.h>\nint setns(int fd, int nstype);\n```\n和`clone()`函数一样，C 语言库中的`setns()`函数也是对`setns系统调用`的封装。  \n* fd：表示要加入 namespace 的文件描述符。它是一个指向 /proc/[pid]/ns 目录中文件的文件描述符，可以通过直接打开该目录下的链接文件或者打开一个挂载了该目录下链接文件的文件得到。\n* nstype：参数 nstype 让调用者可以检查 fd 指向的 namespace 类型是否符合实际要求。若把该参数设置为 0 表示不检查。\n\n#### unshare：让进程加入新的Namespace\n```\n#define _GNU_SOURCE\n#include <sched.h>\nint unshare(int flags);\n```\n`unshare()`函数比较简单，只有一个参数`flags`，它的含义和`clone()`的`flags`相同。`unshare`和 `setns` 的区别是，`setns` 只能让进程加入到已经存在的`namespace`中，而`unshare`则让进程离开当前的`namespace`，加入到新建的`namespace`中。  \n\n`unshare()`和`clone()`的区别在于：`unshare()`是把当前进程进入到新的`namespace`；`clone()`是创建新的进程，然后让新创建的进程（子进程）加入到新的`namespace`。\n\n\n## C程序中使用clone系统调用\n我们先来看看 clone 一个简单的使用例子：创建一个新的进程，并执行 /bin/bash，这样就可以接受命令，方便我们查看新进程的信息。\n```\n#define _GNU_SOURCE\n#include <sched.h>\n#include <sys/wait.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\n// 设置子进程要使用的栈空间\n#define STACK_SIZE (1024*1024)\nstatic char container_stack[STACK_SIZE];\n\n#define errExit(code, msg); {if(code == -1){perror(msg); exit(-1);} }\n\n\nchar* const container_args[] = {\n    \"/bin/bash\",\n    NULL\n};\n\nstatic int container_func(void *arg)\n{\n    pid_t pid = getpid();\n    printf(\"Container[%d] - inside the container!\\n\", pid);\n\n    // 用一个新的bash来替换掉当前子进程，\n    // 这样我们就能通过 bash 查看当前子进程的情况.\n    // bash退出后，子进程执行完毕\n    execv(container_args[0], container_args);\n\n    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;\n    // 所以如果执行到这里，一定是出错了\n    printf(\"Container[%d] - oops!\\n\", pid);\n    return 1;\n}\n\n\nint main(int argc, char *argv[])\n{\n    pid_t pid = getpid();\n    printf(\"Parent[%d] - create a container!\\n\", pid);\n\n    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid\n    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数\n                    container_stack + sizeof(container_stack),\n                    // 这里SIGCHLD是子进程退出后返回给父进程的信号，跟namespace无关\n                    SIGCHLD,\n                    NULL);  // 传给child_func的参数\n    errExit(child_pid, \"clone\");\n\n    waitpid(child_pid, NULL, 0); // 等待子进程结束\n\n    printf(\"Parent[%d] - container exited!\\n\", pid);\n    return 0;\n}\n```\n这段代码不长，但是做了很多事情：\n* 通过`clone()`创建出一个子进程，并设置启动时的参数\n* 在子进程中调用 execv 来执行 /bin/bash，等待用户进行交互\n* 子进程退出之后，父进程也跟着退出\n\n我们可以用`ls -l /proc/$$/ns`查看当前进程所在命名空间的信息，运行程序：\n```\nlucy@lucy-computer:~$ gcc container.c -o container\nlucy@lucy-computer:~$ ./container \nParent[19644] - create a container!\nContainer[19645] - inside the container!\nlucy@lucy-computer:~$ ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 uts -> 'uts:[4026531838]'\nlucy@lucy-computer:~$ exit\nexit\nParent[19644] - container exited!\nlucy@lucy-computer:~$ ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 uts -> 'uts:[4026531838]'\n```\n各类命名空间id都是一样，因为我们只是单单使用了`clone`，未设置要隔离的命名空间，现在，我们加入`UTS Namespace`隔离，`UTS namespace` 功能最简单，它只隔离了 hostname 和 NIS domain name 两个资源。  \n同一个 namespace 里面的进程看到的 hostname 和 domain name 是相同的，这两个值可以通过 `sethostname(2)` 和 `setdomainname(2)` 来进行设置，也可以通过 `uname(2)`、`gethostname(2)` 和 `getdomainname(2)` 来读取。    \n**注意**： UTS 的名字来自于`uname`函数用到的结构体`struct utsname`，这个结构体的名字源自于`UNIX Time-sharing System`。  \n代码主要修改两个地方：clone 的参数加上了 CLONE_NEWUTS，子进程函数中使用`sethostname`来设置 hostname。  \n\n```\n#define _GNU_SOURCE\n#include <sched.h>\n#include <sys/wait.h>\n#include <sys/utsname.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\n// 设置子进程要使用的栈空间\n#define STACK_SIZE (1024*1024)\nstatic char container_stack[STACK_SIZE];\n\n#define errExit(code, msg); {if(code == -1){perror(msg); exit(-1);} }\n\n\nchar* const container_args[] = {\n    \"/bin/bash\",\n    NULL\n};\n\nstatic int container_func(void *hostname)\n{\n    pid_t pid = getpid();\n    printf(\"Container[%d] - inside the container!\\n\", pid);\n\n    // 使用 sethostname 设置子进程的 hostname 信息\n    struct utsname uts;\n    if (sethostname(hostname, strlen(hostname)) == -1) {\n        errExit(-1, \"sethostname\")\n    };\n\n    // 使用 uname 获取子进程的机器信息，并打印 hostname 出来\n    if (uname(&uts) == -1){\n        errExit(-1, \"uname\")\n    }\n    printf(\"Container[%d] - container uts.nodename: [%s]!\\n\", pid, uts.nodename);\n\n    // 用一个新的bash来替换掉当前子进程，\n    // 这样我们就能通过 bash 查看当前子进程的情况.\n    // bash退出后，子进程执行完毕\n    execv(container_args[0], container_args);\n\n    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;\n    // 所以如果执行到这里，一定是出错了\n    printf(\"Container[%d] - oops!\\n\", pid);\n    return 1;\n}\n\n\nint main(int argc, char *argv[])\n{\n    pid_t pid = getpid();\n    printf(\"Parent[%d] - create a container!\\n\", pid);\n\n    // 把第一个参数作为子进程的 hostname，默认是 `container`\n    char *hostname;\n    if (argc < 2) {\n        hostname = \"container\";\n    } else {\n        hostname = argv[1];\n    }\n\n    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid\n    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数\n                    container_stack + sizeof(container_stack),\n                    // CLONE_NEWUTS表示创建新的UTS namespace\n                    CLONE_NEWUTS | SIGCHLD,\n                    hostname);  // 传给child_func的参数\n    errExit(child_pid, \"clone\");\n\n    waitpid(child_pid, NULL, 0); // 等待子进程结束\n\n    printf(\"Parent[%d] - container exited!\\n\", pid);\n    return 0;\n}\n```\n执行程序，发现容器中hostname与宿主机已经不一样了，容器中`UTS Namespace`id也跟宿主机不一样了（这里需要root权限）：\n\n```\nsudo su\nroot@lucy-computer:/home/lucy# gcc container.c -o container\nroot@lucy-computer:/home/lucy# ./container \nParent[21091] - create a container!\nContainer[21092] - inside the container!\nContainer[21092] - container uts.nodename: [container]!\nroot@container:/home/lucy# hostname\ncontainer\nroot@container:/home/lucy# ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 uts -> 'uts:[4026532944]'\nroot@container:/home/lucy# exit\nexit\nParent[21091] - container exited!\nroot@lucy-computer:/home/lucy# ls -l /proc/$$/ns\n总用量 0\nlrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -> 'cgroup:[4026531835]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -> 'ipc:[4026531839]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -> 'mnt:[4026531840]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 net -> 'net:[4026531992]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -> 'pid:[4026531836]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 user -> 'user:[4026531837]'\nlrwxrwxrwx 1 root root 0 11月 28 16:00 uts -> 'uts:[4026531838]'\nroot@lucy-computer:/home/lucy# hostname\nlucy-computer\n```\n\n\n\n### Let's Go\nC语言很底层，能控制到很多细节，但是它对于大部分人有点困难，接下来我们会有Go语言来一步步实现Docker容器。\n\n\n\n\n\n\n\n### 参考资料\n* [cizixs.com/2017/08/29/linux-namespace](https://cizixs.com/2017/08/29/linux-namespace/)\n* [Linux Namespace : 简介](https://www.cnblogs.com/sparkdev/p/9365405.html)","slug":"docker-Linux-Namespace-intro","published":1,"updated":"2023-03-21T02:48:19.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40lb00292o3mafsuetfe","content":"<figure>\r\n<img src=\"/images/docker-logo.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<p>本文环境： * OS：Ubuntu 18.04.3 LTS * 内核版本： 5.0.0-36-generic</p>\r\n<h2 id=\"linux-namespaces\">Linux Namespaces</h2>\r\n<p>Docker的所用的两个关键技术，一个是<code>Namespaces</code>，一个是<code>Cgroups</code>。它俩都不是新技术，Linux内核很早就支持，但是Docker把它们有机地结合起来，加上自己创新，使得现在容器技术非常流行。<br />\r\n<code>Linux Namespaces</code>其实是做到了进程之间全局资源的隔离，譬如，<code>UTS Namespace</code>隔离了Hostname空间。这意味着在新的<code>UTS Namespace</code>中的进程，可以拥有不同于宿主机的主机名。</p>\r\n<span id=\"more\"></span>\r\n<p>目前Linux内核主要实现了以下几种不同的资源<code>Namespace</code>：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 33%\" />\r\n<col style=\"width: 33%\" />\r\n<col style=\"width: 33%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>名称</th>\r\n<th>宏定义</th>\r\n<th>隔离的内容</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>IPC</td>\r\n<td>CLONE_NEWIPC</td>\r\n<td>System V IPC, POSIX message queues (since Linux 2.6.19)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>Network</td>\r\n<td>CLONE_NEWNET</td>\r\n<td>network device interfaces, IPv4 and IPv6 protocol stacks, IP routing\r\ntables, firewall rules, the /proc/net and /sys/class/net directory\r\ntrees, sockets, etc (since Linux 2.6.24)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>Mount</td>\r\n<td>CLONE_NEWNS</td>\r\n<td>Mount points (since Linux 2.4.19)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>PID</td>\r\n<td>CLONE_NEWPID</td>\r\n<td>Process IDs (since Linux 2.6.24)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>User</td>\r\n<td>CLONE_NEWUSER</td>\r\n<td>User and group IDs (started in Linux 2.6.23 and completed in Linux\r\n3.8)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>UTS</td>\r\n<td>CLONE_NEWUTS</td>\r\n<td>Hostname and NIS domain name (since Linux 2.6.19)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>Cgroup</td>\r\n<td>CLONE_NEWCGROUP</td>\r\n<td>Cgroup root directory (since Linux 4.6)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>要注意一点的是，不是所有的系统资源都能隔离，时间就是个例外，没有对应的<code>Namespace</code>，因此同一台Linux启动的容器时间都是相同的。</p>\r\n<h3 id=\"尝试一下namespace\">尝试一下Namespace</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy@lucy-computer:~$ unshare -h</span><br><span class=\"line\"></span><br><span class=\"line\">用法：</span><br><span class=\"line\"> unshare [选项] [&lt;程序&gt; [&lt;参数&gt;...]]</span><br><span class=\"line\"></span><br><span class=\"line\">以某些未与父(进程)共享的名字空间运行某个程序。</span><br><span class=\"line\"></span><br><span class=\"line\">选项：</span><br><span class=\"line\"> -m, --mount[=&lt;文件&gt;]      取消共享 mounts 名字空间</span><br><span class=\"line\"> -u, --uts[=&lt;文件&gt;]        取消共享 UTS 名字空间(主机名等)</span><br><span class=\"line\"> -i, --ipc[=&lt;文件&gt;]        取消共享 System V IPC 名字空间</span><br><span class=\"line\"> -n, --net[=&lt;file&gt;]        取消共享网络名字空间</span><br><span class=\"line\"> -p, --pid[=&lt;文件&gt;]        取消共享 pid 名字空间</span><br><span class=\"line\"> -U, --user[=&lt;文件&gt;]       取消共享用户名字空间</span><br><span class=\"line\"> -C, --cgroup[=&lt;文件&gt;]     取消共享 cgroup 名字空间</span><br><span class=\"line\"> -f, --fork                在启动&lt;程序&gt;前 fork</span><br><span class=\"line\">     --mount-proc[=&lt;目录&gt;] 先挂载 proc 文件系统(连带打开 --mount)</span><br><span class=\"line\"> -r, --map-root-user       将当前用户映射为 root (连带打开 --user)</span><br><span class=\"line\">     --propagation slave|shared|private|unchanged</span><br><span class=\"line\">                           修改 mount 名字空间中的 mount 传播</span><br><span class=\"line\"> -s, --setgroups allow|deny  控制用户名字空间中的 setgroups 系统调用</span><br><span class=\"line\"></span><br><span class=\"line\"> -h, --help                display this help</span><br><span class=\"line\"> -V, --version             display version</span><br></pre></td></tr></table></figure>\r\n<p><code>unshare</code>命令可以让你在新的名称空间集中启动一个新的程序（unshared本身的含义就是不和父进程共享）。<br />\r\n下面的例子使用了<code>UTS namespace</code>，可以看到在新的<code>/bin/sh</code>进程中修改hostname，并没有影响宿主机：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo su                   # become root user</span><br><span class=\"line\">$ hostname                  # check current hostname</span><br><span class=\"line\">lucy-computer  </span><br><span class=\"line\">$ unshare -u /bin/sh        # create a shell in new UTS namespace</span><br><span class=\"line\">$ hostname my-new-hostname  # set hostname</span><br><span class=\"line\">$ hostname                  # confirm new hostname</span><br><span class=\"line\">my-new-hostname  </span><br><span class=\"line\">$ exit                      # exit new UTS namespace</span><br><span class=\"line\">$ hostname                  # confirm original hostname unchanged</span><br><span class=\"line\">lucy-computer</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"三个系统调用\">三个系统调用</h3>\r\n<p><code>unshare</code>命令很棒，但是当我们想要对程序中的命名空间进行更细粒度的控制时，那该怎么办呢？<br />\r\nLinux\r\n内核提供的功能都会提供<code>系统调用</code>接口供应用程序使用，<code>Namespace</code>也不例外。和<code>Namespace</code>相关的系统调用主要有三个：\r\n* <a href=\"http://man7.org/linux/man-pages/man2/clone.2.html\">clone</a>\r\n* <a href=\"http://man7.org/linux/man-pages/man2/setns.2.html\">setns</a>\r\n* <a\r\nhref=\"http://man7.org/linux/man-pages/man2/unshare.2.html\">unshare</a></p>\r\n<p><strong>注意</strong>：这些系统调用都是 linux\r\n内核实现的，不能直接适用于其他操作系统。</p>\r\n<p>查看一下它们对应的C语言函数原型： ####\r\nclone：创建新进程并设置它的Namespace\r\n<code>clone</code>类似于<code>fork</code>系统调用，可以创建一个新的进程，不同的是你可以指定要子进程要执行的函数以及通过参数控制子进程的运行环境。</p>\r\n<blockquote>\r\n<p>实际上，clone() 是在 C\r\n语言库中定义的一个封装(wrapper)函数，它负责建立新进程的堆栈并且调用对编程者隐藏的\r\nclone() 系统调用。Clone() 其实是 linux 系统调用 fork()\r\n的一种更通用的实现方式，它可以通过 flags 来控制使用多少功能。</p>\r\n</blockquote>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int clone(int (*fn)(void *), void *child_stack, int flags, void *arg);</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>fn：指定一个由新进程执行的函数。当这个函数返回时，子进程终止。该函数返回一个整数，表示子进程的退出代码。</li>\r\n<li>child_stack：传入子进程使用的栈空间，也就是把用户态堆栈指针赋给子进程的\r\nesp 寄存器。调用进程(指调用 clone()\r\n的进程)应该总是为子进程分配新的堆栈。</li>\r\n<li>flags：表示使用哪些 CLONE_ 开头的标志位，与 namespace\r\n相关的有CLONE_NEWIPC、CLONE_NEWNET、CLONE_NEWNS、CLONE_NEWPID、CLONE_NEWUSER、CLONE_NEWUTS\r\n和 CLONE_NEWCGROUP，如果要同时隔离多个 namespace，<strong>可以使用 |\r\n(按位或)组合这些参数</strong>。</li>\r\n<li>arg：指向传递给 fn() 函数的参数。</li>\r\n</ul>\r\n<h4\r\nid=\"setns让进程加入已经存在namespace\">setns：让进程加入已经存在Namespace</h4>\r\n<p>setns 能够把某个进程加入到给定的 namespace，它的定义是这样的：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">int setns(int fd, int nstype);</span><br></pre></td></tr></table></figure> 和<code>clone()</code>函数一样，C\r\n语言库中的<code>setns()</code>函数也是对<code>setns系统调用</code>的封装。<br />\r\n* fd：表示要加入 namespace 的文件描述符。它是一个指向 /proc/[pid]/ns\r\n目录中文件的文件描述符，可以通过直接打开该目录下的链接文件或者打开一个挂载了该目录下链接文件的文件得到。\r\n* nstype：参数 nstype 让调用者可以检查 fd 指向的 namespace\r\n类型是否符合实际要求。若把该参数设置为 0 表示不检查。</p>\r\n<h4\r\nid=\"unshare让进程加入新的namespace\">unshare：让进程加入新的Namespace</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">int unshare(int flags);</span><br></pre></td></tr></table></figure>\r\n<p><code>unshare()</code>函数比较简单，只有一个参数<code>flags</code>，它的含义和<code>clone()</code>的<code>flags</code>相同。<code>unshare</code>和\r\n<code>setns</code> 的区别是，<code>setns</code>\r\n只能让进程加入到已经存在的<code>namespace</code>中，而<code>unshare</code>则让进程离开当前的<code>namespace</code>，加入到新建的<code>namespace</code>中。</p>\r\n<p><code>unshare()</code>和<code>clone()</code>的区别在于：<code>unshare()</code>是把当前进程进入到新的<code>namespace</code>；<code>clone()</code>是创建新的进程，然后让新创建的进程（子进程）加入到新的<code>namespace</code>。</p>\r\n<h2 id=\"c程序中使用clone系统调用\">C程序中使用clone系统调用</h2>\r\n<p>我们先来看看 clone 一个简单的使用例子：创建一个新的进程，并执行\r\n/bin/bash，这样就可以接受命令，方便我们查看新进程的信息。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;sys/wait.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置子进程要使用的栈空间</span><br><span class=\"line\">#define STACK_SIZE (1024*1024)</span><br><span class=\"line\">static char container_stack[STACK_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">#define errExit(code, msg); &#123;if(code == -1)&#123;perror(msg); exit(-1);&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">char* const container_args[] = &#123;</span><br><span class=\"line\">    &quot;/bin/bash&quot;,</span><br><span class=\"line\">    NULL</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static int container_func(void *arg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Container[%d] - inside the container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 用一个新的bash来替换掉当前子进程，</span><br><span class=\"line\">    // 这样我们就能通过 bash 查看当前子进程的情况.</span><br><span class=\"line\">    // bash退出后，子进程执行完毕</span><br><span class=\"line\">    execv(container_args[0], container_args);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;</span><br><span class=\"line\">    // 所以如果执行到这里，一定是出错了</span><br><span class=\"line\">    printf(&quot;Container[%d] - oops!\\n&quot;, pid);</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Parent[%d] - create a container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid</span><br><span class=\"line\">    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数</span><br><span class=\"line\">                    container_stack + sizeof(container_stack),</span><br><span class=\"line\">                    // 这里SIGCHLD是子进程退出后返回给父进程的信号，跟namespace无关</span><br><span class=\"line\">                    SIGCHLD,</span><br><span class=\"line\">                    NULL);  // 传给child_func的参数</span><br><span class=\"line\">    errExit(child_pid, &quot;clone&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    waitpid(child_pid, NULL, 0); // 等待子进程结束</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Parent[%d] - container exited!\\n&quot;, pid);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n这段代码不长，但是做了很多事情： *\r\n通过<code>clone()</code>创建出一个子进程，并设置启动时的参数 *\r\n在子进程中调用 execv 来执行 /bin/bash，等待用户进行交互 *\r\n子进程退出之后，父进程也跟着退出</p>\r\n<p>我们可以用<code>ls -l /proc/$$/ns</code>查看当前进程所在命名空间的信息，运行程序：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy@lucy-computer:~$ gcc container.c -o container</span><br><span class=\"line\">lucy@lucy-computer:~$ ./container </span><br><span class=\"line\">Parent[19644] - create a container!</span><br><span class=\"line\">Container[19645] - inside the container!</span><br><span class=\"line\">lucy@lucy-computer:~$ ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 cgroup -&gt; &#x27;cgroup:[4026531835]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 ipc -&gt; &#x27;ipc:[4026531839]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 mnt -&gt; &#x27;mnt:[4026531840]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 net -&gt; &#x27;net:[4026531992]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid_for_children -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 user -&gt; &#x27;user:[4026531837]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 uts -&gt; &#x27;uts:[4026531838]&#x27;</span><br><span class=\"line\">lucy@lucy-computer:~$ exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">Parent[19644] - container exited!</span><br><span class=\"line\">lucy@lucy-computer:~$ ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 cgroup -&gt; &#x27;cgroup:[4026531835]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 ipc -&gt; &#x27;ipc:[4026531839]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 mnt -&gt; &#x27;mnt:[4026531840]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 net -&gt; &#x27;net:[4026531992]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid_for_children -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 user -&gt; &#x27;user:[4026531837]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 uts -&gt; &#x27;uts:[4026531838]&#x27;</span><br></pre></td></tr></table></figure>\r\n各类命名空间id都是一样，因为我们只是单单使用了<code>clone</code>，未设置要隔离的命名空间，现在，我们加入<code>UTS Namespace</code>隔离，<code>UTS namespace</code>\r\n功能最简单，它只隔离了 hostname 和 NIS domain name 两个资源。<br />\r\n同一个 namespace 里面的进程看到的 hostname 和 domain name\r\n是相同的，这两个值可以通过 <code>sethostname(2)</code> 和\r\n<code>setdomainname(2)</code> 来进行设置，也可以通过\r\n<code>uname(2)</code>、<code>gethostname(2)</code> 和\r\n<code>getdomainname(2)</code> 来读取。<br />\r\n<strong>注意</strong>： UTS\r\n的名字来自于<code>uname</code>函数用到的结构体<code>struct utsname</code>，这个结构体的名字源自于<code>UNIX Time-sharing System</code>。<br />\r\n代码主要修改两个地方：clone 的参数加上了\r\nCLONE_NEWUTS，子进程函数中使用<code>sethostname</code>来设置\r\nhostname。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;sys/wait.h&gt;</span><br><span class=\"line\">#include &lt;sys/utsname.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置子进程要使用的栈空间</span><br><span class=\"line\">#define STACK_SIZE (1024*1024)</span><br><span class=\"line\">static char container_stack[STACK_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">#define errExit(code, msg); &#123;if(code == -1)&#123;perror(msg); exit(-1);&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">char* const container_args[] = &#123;</span><br><span class=\"line\">    &quot;/bin/bash&quot;,</span><br><span class=\"line\">    NULL</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static int container_func(void *hostname)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Container[%d] - inside the container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 使用 sethostname 设置子进程的 hostname 信息</span><br><span class=\"line\">    struct utsname uts;</span><br><span class=\"line\">    if (sethostname(hostname, strlen(hostname)) == -1) &#123;</span><br><span class=\"line\">        errExit(-1, &quot;sethostname&quot;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 使用 uname 获取子进程的机器信息，并打印 hostname 出来</span><br><span class=\"line\">    if (uname(&amp;uts) == -1)&#123;</span><br><span class=\"line\">        errExit(-1, &quot;uname&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;Container[%d] - container uts.nodename: [%s]!\\n&quot;, pid, uts.nodename);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 用一个新的bash来替换掉当前子进程，</span><br><span class=\"line\">    // 这样我们就能通过 bash 查看当前子进程的情况.</span><br><span class=\"line\">    // bash退出后，子进程执行完毕</span><br><span class=\"line\">    execv(container_args[0], container_args);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;</span><br><span class=\"line\">    // 所以如果执行到这里，一定是出错了</span><br><span class=\"line\">    printf(&quot;Container[%d] - oops!\\n&quot;, pid);</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Parent[%d] - create a container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 把第一个参数作为子进程的 hostname，默认是 `container`</span><br><span class=\"line\">    char *hostname;</span><br><span class=\"line\">    if (argc &lt; 2) &#123;</span><br><span class=\"line\">        hostname = &quot;container&quot;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        hostname = argv[1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid</span><br><span class=\"line\">    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数</span><br><span class=\"line\">                    container_stack + sizeof(container_stack),</span><br><span class=\"line\">                    // CLONE_NEWUTS表示创建新的UTS namespace</span><br><span class=\"line\">                    CLONE_NEWUTS | SIGCHLD,</span><br><span class=\"line\">                    hostname);  // 传给child_func的参数</span><br><span class=\"line\">    errExit(child_pid, &quot;clone&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    waitpid(child_pid, NULL, 0); // 等待子进程结束</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Parent[%d] - container exited!\\n&quot;, pid);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>执行程序，发现容器中hostname与宿主机已经不一样了，容器中<code>UTS Namespace</code>id也跟宿主机不一样了（这里需要root权限）：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br><span class=\"line\">root@lucy-computer:/home/lucy# gcc container.c -o container</span><br><span class=\"line\">root@lucy-computer:/home/lucy# ./container </span><br><span class=\"line\">Parent[21091] - create a container!</span><br><span class=\"line\">Container[21092] - inside the container!</span><br><span class=\"line\">Container[21092] - container uts.nodename: [container]!</span><br><span class=\"line\">root@container:/home/lucy# hostname</span><br><span class=\"line\">container</span><br><span class=\"line\">root@container:/home/lucy# ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -&gt; &#x27;cgroup:[4026531835]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -&gt; &#x27;ipc:[4026531839]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -&gt; &#x27;mnt:[4026531840]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 net -&gt; &#x27;net:[4026531992]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 user -&gt; &#x27;user:[4026531837]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 uts -&gt; &#x27;uts:[4026532944]&#x27;</span><br><span class=\"line\">root@container:/home/lucy# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">Parent[21091] - container exited!</span><br><span class=\"line\">root@lucy-computer:/home/lucy# ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -&gt; &#x27;cgroup:[4026531835]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -&gt; &#x27;ipc:[4026531839]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -&gt; &#x27;mnt:[4026531840]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 net -&gt; &#x27;net:[4026531992]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 user -&gt; &#x27;user:[4026531837]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 uts -&gt; &#x27;uts:[4026531838]&#x27;</span><br><span class=\"line\">root@lucy-computer:/home/lucy# hostname</span><br><span class=\"line\">lucy-computer</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"lets-go\">Let's Go</h3>\r\n<p>C语言很底层，能控制到很多细节，但是它对于大部分人有点困难，接下来我们会有Go语言来一步步实现Docker容器。</p>\r\n<h3 id=\"参考资料\">参考资料</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://cizixs.com/2017/08/29/linux-namespace/\">cizixs.com/2017/08/29/linux-namespace</a></li>\r\n<li><a href=\"https://www.cnblogs.com/sparkdev/p/9365405.html\">Linux\r\nNamespace : 简介</a></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<figure>\r\n<img src=\"/images/docker-logo.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<p>本文环境： * OS：Ubuntu 18.04.3 LTS * 内核版本： 5.0.0-36-generic</p>\r\n<h2 id=\"linux-namespaces\">Linux Namespaces</h2>\r\n<p>Docker的所用的两个关键技术，一个是<code>Namespaces</code>，一个是<code>Cgroups</code>。它俩都不是新技术，Linux内核很早就支持，但是Docker把它们有机地结合起来，加上自己创新，使得现在容器技术非常流行。<br />\r\n<code>Linux Namespaces</code>其实是做到了进程之间全局资源的隔离，譬如，<code>UTS Namespace</code>隔离了Hostname空间。这意味着在新的<code>UTS Namespace</code>中的进程，可以拥有不同于宿主机的主机名。</p>","more":"<p>目前Linux内核主要实现了以下几种不同的资源<code>Namespace</code>：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 33%\" />\r\n<col style=\"width: 33%\" />\r\n<col style=\"width: 33%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>名称</th>\r\n<th>宏定义</th>\r\n<th>隔离的内容</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>IPC</td>\r\n<td>CLONE_NEWIPC</td>\r\n<td>System V IPC, POSIX message queues (since Linux 2.6.19)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>Network</td>\r\n<td>CLONE_NEWNET</td>\r\n<td>network device interfaces, IPv4 and IPv6 protocol stacks, IP routing\r\ntables, firewall rules, the /proc/net and /sys/class/net directory\r\ntrees, sockets, etc (since Linux 2.6.24)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>Mount</td>\r\n<td>CLONE_NEWNS</td>\r\n<td>Mount points (since Linux 2.4.19)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>PID</td>\r\n<td>CLONE_NEWPID</td>\r\n<td>Process IDs (since Linux 2.6.24)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>User</td>\r\n<td>CLONE_NEWUSER</td>\r\n<td>User and group IDs (started in Linux 2.6.23 and completed in Linux\r\n3.8)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>UTS</td>\r\n<td>CLONE_NEWUTS</td>\r\n<td>Hostname and NIS domain name (since Linux 2.6.19)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>Cgroup</td>\r\n<td>CLONE_NEWCGROUP</td>\r\n<td>Cgroup root directory (since Linux 4.6)</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>要注意一点的是，不是所有的系统资源都能隔离，时间就是个例外，没有对应的<code>Namespace</code>，因此同一台Linux启动的容器时间都是相同的。</p>\r\n<h3 id=\"尝试一下namespace\">尝试一下Namespace</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy@lucy-computer:~$ unshare -h</span><br><span class=\"line\"></span><br><span class=\"line\">用法：</span><br><span class=\"line\"> unshare [选项] [&lt;程序&gt; [&lt;参数&gt;...]]</span><br><span class=\"line\"></span><br><span class=\"line\">以某些未与父(进程)共享的名字空间运行某个程序。</span><br><span class=\"line\"></span><br><span class=\"line\">选项：</span><br><span class=\"line\"> -m, --mount[=&lt;文件&gt;]      取消共享 mounts 名字空间</span><br><span class=\"line\"> -u, --uts[=&lt;文件&gt;]        取消共享 UTS 名字空间(主机名等)</span><br><span class=\"line\"> -i, --ipc[=&lt;文件&gt;]        取消共享 System V IPC 名字空间</span><br><span class=\"line\"> -n, --net[=&lt;file&gt;]        取消共享网络名字空间</span><br><span class=\"line\"> -p, --pid[=&lt;文件&gt;]        取消共享 pid 名字空间</span><br><span class=\"line\"> -U, --user[=&lt;文件&gt;]       取消共享用户名字空间</span><br><span class=\"line\"> -C, --cgroup[=&lt;文件&gt;]     取消共享 cgroup 名字空间</span><br><span class=\"line\"> -f, --fork                在启动&lt;程序&gt;前 fork</span><br><span class=\"line\">     --mount-proc[=&lt;目录&gt;] 先挂载 proc 文件系统(连带打开 --mount)</span><br><span class=\"line\"> -r, --map-root-user       将当前用户映射为 root (连带打开 --user)</span><br><span class=\"line\">     --propagation slave|shared|private|unchanged</span><br><span class=\"line\">                           修改 mount 名字空间中的 mount 传播</span><br><span class=\"line\"> -s, --setgroups allow|deny  控制用户名字空间中的 setgroups 系统调用</span><br><span class=\"line\"></span><br><span class=\"line\"> -h, --help                display this help</span><br><span class=\"line\"> -V, --version             display version</span><br></pre></td></tr></table></figure>\r\n<p><code>unshare</code>命令可以让你在新的名称空间集中启动一个新的程序（unshared本身的含义就是不和父进程共享）。<br />\r\n下面的例子使用了<code>UTS namespace</code>，可以看到在新的<code>/bin/sh</code>进程中修改hostname，并没有影响宿主机：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo su                   # become root user</span><br><span class=\"line\">$ hostname                  # check current hostname</span><br><span class=\"line\">lucy-computer  </span><br><span class=\"line\">$ unshare -u /bin/sh        # create a shell in new UTS namespace</span><br><span class=\"line\">$ hostname my-new-hostname  # set hostname</span><br><span class=\"line\">$ hostname                  # confirm new hostname</span><br><span class=\"line\">my-new-hostname  </span><br><span class=\"line\">$ exit                      # exit new UTS namespace</span><br><span class=\"line\">$ hostname                  # confirm original hostname unchanged</span><br><span class=\"line\">lucy-computer</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"三个系统调用\">三个系统调用</h3>\r\n<p><code>unshare</code>命令很棒，但是当我们想要对程序中的命名空间进行更细粒度的控制时，那该怎么办呢？<br />\r\nLinux\r\n内核提供的功能都会提供<code>系统调用</code>接口供应用程序使用，<code>Namespace</code>也不例外。和<code>Namespace</code>相关的系统调用主要有三个：\r\n* <a href=\"http://man7.org/linux/man-pages/man2/clone.2.html\">clone</a>\r\n* <a href=\"http://man7.org/linux/man-pages/man2/setns.2.html\">setns</a>\r\n* <a\r\nhref=\"http://man7.org/linux/man-pages/man2/unshare.2.html\">unshare</a></p>\r\n<p><strong>注意</strong>：这些系统调用都是 linux\r\n内核实现的，不能直接适用于其他操作系统。</p>\r\n<p>查看一下它们对应的C语言函数原型： ####\r\nclone：创建新进程并设置它的Namespace\r\n<code>clone</code>类似于<code>fork</code>系统调用，可以创建一个新的进程，不同的是你可以指定要子进程要执行的函数以及通过参数控制子进程的运行环境。</p>\r\n<blockquote>\r\n<p>实际上，clone() 是在 C\r\n语言库中定义的一个封装(wrapper)函数，它负责建立新进程的堆栈并且调用对编程者隐藏的\r\nclone() 系统调用。Clone() 其实是 linux 系统调用 fork()\r\n的一种更通用的实现方式，它可以通过 flags 来控制使用多少功能。</p>\r\n</blockquote>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int clone(int (*fn)(void *), void *child_stack, int flags, void *arg);</span><br></pre></td></tr></table></figure>\r\n<ul>\r\n<li>fn：指定一个由新进程执行的函数。当这个函数返回时，子进程终止。该函数返回一个整数，表示子进程的退出代码。</li>\r\n<li>child_stack：传入子进程使用的栈空间，也就是把用户态堆栈指针赋给子进程的\r\nesp 寄存器。调用进程(指调用 clone()\r\n的进程)应该总是为子进程分配新的堆栈。</li>\r\n<li>flags：表示使用哪些 CLONE_ 开头的标志位，与 namespace\r\n相关的有CLONE_NEWIPC、CLONE_NEWNET、CLONE_NEWNS、CLONE_NEWPID、CLONE_NEWUSER、CLONE_NEWUTS\r\n和 CLONE_NEWCGROUP，如果要同时隔离多个 namespace，<strong>可以使用 |\r\n(按位或)组合这些参数</strong>。</li>\r\n<li>arg：指向传递给 fn() 函数的参数。</li>\r\n</ul>\r\n<h4\r\nid=\"setns让进程加入已经存在namespace\">setns：让进程加入已经存在Namespace</h4>\r\n<p>setns 能够把某个进程加入到给定的 namespace，它的定义是这样的：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">int setns(int fd, int nstype);</span><br></pre></td></tr></table></figure> 和<code>clone()</code>函数一样，C\r\n语言库中的<code>setns()</code>函数也是对<code>setns系统调用</code>的封装。<br />\r\n* fd：表示要加入 namespace 的文件描述符。它是一个指向 /proc/[pid]/ns\r\n目录中文件的文件描述符，可以通过直接打开该目录下的链接文件或者打开一个挂载了该目录下链接文件的文件得到。\r\n* nstype：参数 nstype 让调用者可以检查 fd 指向的 namespace\r\n类型是否符合实际要求。若把该参数设置为 0 表示不检查。</p>\r\n<h4\r\nid=\"unshare让进程加入新的namespace\">unshare：让进程加入新的Namespace</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">int unshare(int flags);</span><br></pre></td></tr></table></figure>\r\n<p><code>unshare()</code>函数比较简单，只有一个参数<code>flags</code>，它的含义和<code>clone()</code>的<code>flags</code>相同。<code>unshare</code>和\r\n<code>setns</code> 的区别是，<code>setns</code>\r\n只能让进程加入到已经存在的<code>namespace</code>中，而<code>unshare</code>则让进程离开当前的<code>namespace</code>，加入到新建的<code>namespace</code>中。</p>\r\n<p><code>unshare()</code>和<code>clone()</code>的区别在于：<code>unshare()</code>是把当前进程进入到新的<code>namespace</code>；<code>clone()</code>是创建新的进程，然后让新创建的进程（子进程）加入到新的<code>namespace</code>。</p>\r\n<h2 id=\"c程序中使用clone系统调用\">C程序中使用clone系统调用</h2>\r\n<p>我们先来看看 clone 一个简单的使用例子：创建一个新的进程，并执行\r\n/bin/bash，这样就可以接受命令，方便我们查看新进程的信息。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;sys/wait.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置子进程要使用的栈空间</span><br><span class=\"line\">#define STACK_SIZE (1024*1024)</span><br><span class=\"line\">static char container_stack[STACK_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">#define errExit(code, msg); &#123;if(code == -1)&#123;perror(msg); exit(-1);&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">char* const container_args[] = &#123;</span><br><span class=\"line\">    &quot;/bin/bash&quot;,</span><br><span class=\"line\">    NULL</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static int container_func(void *arg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Container[%d] - inside the container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 用一个新的bash来替换掉当前子进程，</span><br><span class=\"line\">    // 这样我们就能通过 bash 查看当前子进程的情况.</span><br><span class=\"line\">    // bash退出后，子进程执行完毕</span><br><span class=\"line\">    execv(container_args[0], container_args);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;</span><br><span class=\"line\">    // 所以如果执行到这里，一定是出错了</span><br><span class=\"line\">    printf(&quot;Container[%d] - oops!\\n&quot;, pid);</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Parent[%d] - create a container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid</span><br><span class=\"line\">    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数</span><br><span class=\"line\">                    container_stack + sizeof(container_stack),</span><br><span class=\"line\">                    // 这里SIGCHLD是子进程退出后返回给父进程的信号，跟namespace无关</span><br><span class=\"line\">                    SIGCHLD,</span><br><span class=\"line\">                    NULL);  // 传给child_func的参数</span><br><span class=\"line\">    errExit(child_pid, &quot;clone&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    waitpid(child_pid, NULL, 0); // 等待子进程结束</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Parent[%d] - container exited!\\n&quot;, pid);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n这段代码不长，但是做了很多事情： *\r\n通过<code>clone()</code>创建出一个子进程，并设置启动时的参数 *\r\n在子进程中调用 execv 来执行 /bin/bash，等待用户进行交互 *\r\n子进程退出之后，父进程也跟着退出</p>\r\n<p>我们可以用<code>ls -l /proc/$$/ns</code>查看当前进程所在命名空间的信息，运行程序：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy@lucy-computer:~$ gcc container.c -o container</span><br><span class=\"line\">lucy@lucy-computer:~$ ./container </span><br><span class=\"line\">Parent[19644] - create a container!</span><br><span class=\"line\">Container[19645] - inside the container!</span><br><span class=\"line\">lucy@lucy-computer:~$ ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 cgroup -&gt; &#x27;cgroup:[4026531835]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 ipc -&gt; &#x27;ipc:[4026531839]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 mnt -&gt; &#x27;mnt:[4026531840]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 net -&gt; &#x27;net:[4026531992]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 pid_for_children -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 user -&gt; &#x27;user:[4026531837]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:36 uts -&gt; &#x27;uts:[4026531838]&#x27;</span><br><span class=\"line\">lucy@lucy-computer:~$ exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">Parent[19644] - container exited!</span><br><span class=\"line\">lucy@lucy-computer:~$ ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 cgroup -&gt; &#x27;cgroup:[4026531835]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 ipc -&gt; &#x27;ipc:[4026531839]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 mnt -&gt; &#x27;mnt:[4026531840]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 net -&gt; &#x27;net:[4026531992]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 pid_for_children -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 user -&gt; &#x27;user:[4026531837]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 lucy lucy 0 11月 28 15:39 uts -&gt; &#x27;uts:[4026531838]&#x27;</span><br></pre></td></tr></table></figure>\r\n各类命名空间id都是一样，因为我们只是单单使用了<code>clone</code>，未设置要隔离的命名空间，现在，我们加入<code>UTS Namespace</code>隔离，<code>UTS namespace</code>\r\n功能最简单，它只隔离了 hostname 和 NIS domain name 两个资源。<br />\r\n同一个 namespace 里面的进程看到的 hostname 和 domain name\r\n是相同的，这两个值可以通过 <code>sethostname(2)</code> 和\r\n<code>setdomainname(2)</code> 来进行设置，也可以通过\r\n<code>uname(2)</code>、<code>gethostname(2)</code> 和\r\n<code>getdomainname(2)</code> 来读取。<br />\r\n<strong>注意</strong>： UTS\r\n的名字来自于<code>uname</code>函数用到的结构体<code>struct utsname</code>，这个结构体的名字源自于<code>UNIX Time-sharing System</code>。<br />\r\n代码主要修改两个地方：clone 的参数加上了\r\nCLONE_NEWUTS，子进程函数中使用<code>sethostname</code>来设置\r\nhostname。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _GNU_SOURCE</span><br><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;sys/wait.h&gt;</span><br><span class=\"line\">#include &lt;sys/utsname.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置子进程要使用的栈空间</span><br><span class=\"line\">#define STACK_SIZE (1024*1024)</span><br><span class=\"line\">static char container_stack[STACK_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">#define errExit(code, msg); &#123;if(code == -1)&#123;perror(msg); exit(-1);&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">char* const container_args[] = &#123;</span><br><span class=\"line\">    &quot;/bin/bash&quot;,</span><br><span class=\"line\">    NULL</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static int container_func(void *hostname)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Container[%d] - inside the container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 使用 sethostname 设置子进程的 hostname 信息</span><br><span class=\"line\">    struct utsname uts;</span><br><span class=\"line\">    if (sethostname(hostname, strlen(hostname)) == -1) &#123;</span><br><span class=\"line\">        errExit(-1, &quot;sethostname&quot;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 使用 uname 获取子进程的机器信息，并打印 hostname 出来</span><br><span class=\"line\">    if (uname(&amp;uts) == -1)&#123;</span><br><span class=\"line\">        errExit(-1, &quot;uname&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;Container[%d] - container uts.nodename: [%s]!\\n&quot;, pid, uts.nodename);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 用一个新的bash来替换掉当前子进程，</span><br><span class=\"line\">    // 这样我们就能通过 bash 查看当前子进程的情况.</span><br><span class=\"line\">    // bash退出后，子进程执行完毕</span><br><span class=\"line\">    execv(container_args[0], container_args);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 从这里开始的代码将不会被执行到，因为当前子进程已经被上面的bash替换掉了;</span><br><span class=\"line\">    // 所以如果执行到这里，一定是出错了</span><br><span class=\"line\">    printf(&quot;Container[%d] - oops!\\n&quot;, pid);</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid_t pid = getpid();</span><br><span class=\"line\">    printf(&quot;Parent[%d] - create a container!\\n&quot;, pid);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 把第一个参数作为子进程的 hostname，默认是 `container`</span><br><span class=\"line\">    char *hostname;</span><br><span class=\"line\">    if (argc &lt; 2) &#123;</span><br><span class=\"line\">        hostname = &quot;container&quot;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        hostname = argv[1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建并启动子进程，调用该函数后，父进程将继续往后执行，也就是执行后面的waitpid</span><br><span class=\"line\">    pid_t child_pid = clone(container_func,  // 子进程将执行container_func这个函数</span><br><span class=\"line\">                    container_stack + sizeof(container_stack),</span><br><span class=\"line\">                    // CLONE_NEWUTS表示创建新的UTS namespace</span><br><span class=\"line\">                    CLONE_NEWUTS | SIGCHLD,</span><br><span class=\"line\">                    hostname);  // 传给child_func的参数</span><br><span class=\"line\">    errExit(child_pid, &quot;clone&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    waitpid(child_pid, NULL, 0); // 等待子进程结束</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Parent[%d] - container exited!\\n&quot;, pid);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>执行程序，发现容器中hostname与宿主机已经不一样了，容器中<code>UTS Namespace</code>id也跟宿主机不一样了（这里需要root权限）：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su</span><br><span class=\"line\">root@lucy-computer:/home/lucy# gcc container.c -o container</span><br><span class=\"line\">root@lucy-computer:/home/lucy# ./container </span><br><span class=\"line\">Parent[21091] - create a container!</span><br><span class=\"line\">Container[21092] - inside the container!</span><br><span class=\"line\">Container[21092] - container uts.nodename: [container]!</span><br><span class=\"line\">root@container:/home/lucy# hostname</span><br><span class=\"line\">container</span><br><span class=\"line\">root@container:/home/lucy# ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -&gt; &#x27;cgroup:[4026531835]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -&gt; &#x27;ipc:[4026531839]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -&gt; &#x27;mnt:[4026531840]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 net -&gt; &#x27;net:[4026531992]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 user -&gt; &#x27;user:[4026531837]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 uts -&gt; &#x27;uts:[4026532944]&#x27;</span><br><span class=\"line\">root@container:/home/lucy# exit</span><br><span class=\"line\">exit</span><br><span class=\"line\">Parent[21091] - container exited!</span><br><span class=\"line\">root@lucy-computer:/home/lucy# ls -l /proc/$$/ns</span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 cgroup -&gt; &#x27;cgroup:[4026531835]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 ipc -&gt; &#x27;ipc:[4026531839]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 mnt -&gt; &#x27;mnt:[4026531840]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 net -&gt; &#x27;net:[4026531992]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 pid_for_children -&gt; &#x27;pid:[4026531836]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 user -&gt; &#x27;user:[4026531837]&#x27;</span><br><span class=\"line\">lrwxrwxrwx 1 root root 0 11月 28 16:00 uts -&gt; &#x27;uts:[4026531838]&#x27;</span><br><span class=\"line\">root@lucy-computer:/home/lucy# hostname</span><br><span class=\"line\">lucy-computer</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"lets-go\">Let's Go</h3>\r\n<p>C语言很底层，能控制到很多细节，但是它对于大部分人有点困难，接下来我们会有Go语言来一步步实现Docker容器。</p>\r\n<h3 id=\"参考资料\">参考资料</h3>\r\n<ul>\r\n<li><a\r\nhref=\"https://cizixs.com/2017/08/29/linux-namespace/\">cizixs.com/2017/08/29/linux-namespace</a></li>\r\n<li><a href=\"https://www.cnblogs.com/sparkdev/p/9365405.html\">Linux\r\nNamespace : 简介</a></li>\r\n</ul>"},{"title":"Node.js：容器中Core Dump","author":"Salamander","date":"2021-07-27T07:49:00.000Z","_content":"在开始之前，我们先了解下什么是 Core 和 Core Dump。  \n**什么是 Core?**  \n> 在使用半导体作为内存材料前，人类是利用线圈当作内存的材料，线圈就叫作 core ，用线圈做的内存就叫作 core memory。如今 ，半导体工业澎勃发展，已经没有人用 core memory 了，不过在许多情况下， 人们还是把记忆体叫作 core 。\n\n**什么是 Core Dump?**  \n\n>  当程序运行的过程中异常终止或崩溃，操作系统会将程序当时的内存状态记录下来，保存在一个文件中，这种行为就叫做 Core Dump（中文有的翻译成 “核心转储”)。我们可以认为 Core Dump 是 “内存快照”，但实际上，除了内存信息之外，还有些关键的程序运行状态也会同时 dump 下来，例如寄存器信息（包括程序指针、栈指针等）、内存管理信息、其他处理器和操作系统状态和信息。Core Dump 对于编程人员诊断和调试程序是非常有帮助的，因为对于有些程序错误是很难重现的，例如指针异常，而 Core Dump 文件可以再现程序出错时的情景。  \n  \n\n在Node生成core dump文件有两步  \n**先开启core dump**  \n\n```\nulimit -c unlimited\n```\n`ulimit -c`设置允许 Core Dump 生成的文件的大小，如果是 0 则表示关闭了 Core Dump。`unlimited`表示无限制。\n\n**gcore**\n\n第二步我们可以用`gcore`命令（需要装gdb）不重启程序生成core dump文件：\n```\ngcore [-o filename] pid\n```\n但在容器中，gcore命令会报错。\n\n\n\n\n\n\n\n\n参考：\n* [Node.js 调试指南](https://www.bookstack.cn/read/node-in-debugging/2.1gcorellnode.md)","source":"_posts/core_dump_in_docker.md","raw":"title: Node.js：容器中Core Dump\nauthor: Salamander\ntags:\n  - nodejs\ncategories:\n  - nodejs\ndate: 2021-07-27 15:49:00\n---\n在开始之前，我们先了解下什么是 Core 和 Core Dump。  \n**什么是 Core?**  \n> 在使用半导体作为内存材料前，人类是利用线圈当作内存的材料，线圈就叫作 core ，用线圈做的内存就叫作 core memory。如今 ，半导体工业澎勃发展，已经没有人用 core memory 了，不过在许多情况下， 人们还是把记忆体叫作 core 。\n\n**什么是 Core Dump?**  \n\n>  当程序运行的过程中异常终止或崩溃，操作系统会将程序当时的内存状态记录下来，保存在一个文件中，这种行为就叫做 Core Dump（中文有的翻译成 “核心转储”)。我们可以认为 Core Dump 是 “内存快照”，但实际上，除了内存信息之外，还有些关键的程序运行状态也会同时 dump 下来，例如寄存器信息（包括程序指针、栈指针等）、内存管理信息、其他处理器和操作系统状态和信息。Core Dump 对于编程人员诊断和调试程序是非常有帮助的，因为对于有些程序错误是很难重现的，例如指针异常，而 Core Dump 文件可以再现程序出错时的情景。  \n  \n\n在Node生成core dump文件有两步  \n**先开启core dump**  \n\n```\nulimit -c unlimited\n```\n`ulimit -c`设置允许 Core Dump 生成的文件的大小，如果是 0 则表示关闭了 Core Dump。`unlimited`表示无限制。\n\n**gcore**\n\n第二步我们可以用`gcore`命令（需要装gdb）不重启程序生成core dump文件：\n```\ngcore [-o filename] pid\n```\n但在容器中，gcore命令会报错。\n\n\n\n\n\n\n\n\n参考：\n* [Node.js 调试指南](https://www.bookstack.cn/read/node-in-debugging/2.1gcorellnode.md)","slug":"core_dump_in_docker","published":1,"updated":"2023-03-21T02:48:19.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40lc002c2o3m2uzcf45m","content":"<p>在开始之前，我们先了解下什么是 Core 和 Core Dump。<br />\r\n<strong>什么是 Core?</strong><br />\r\n&gt;\r\n在使用半导体作为内存材料前，人类是利用线圈当作内存的材料，线圈就叫作\r\ncore ，用线圈做的内存就叫作 core memory。如今\r\n，半导体工业澎勃发展，已经没有人用 core memory 了，不过在许多情况下，\r\n人们还是把记忆体叫作 core 。</p>\r\n<p><strong>什么是 Core Dump?</strong></p>\r\n<blockquote>\r\n<p>当程序运行的过程中异常终止或崩溃，操作系统会将程序当时的内存状态记录下来，保存在一个文件中，这种行为就叫做\r\nCore Dump（中文有的翻译成 “核心转储”)。我们可以认为 Core Dump 是\r\n“内存快照”，但实际上，除了内存信息之外，还有些关键的程序运行状态也会同时\r\ndump\r\n下来，例如寄存器信息（包括程序指针、栈指针等）、内存管理信息、其他处理器和操作系统状态和信息。Core\r\nDump\r\n对于编程人员诊断和调试程序是非常有帮助的，因为对于有些程序错误是很难重现的，例如指针异常，而\r\nCore Dump 文件可以再现程序出错时的情景。</p>\r\n</blockquote>\r\n<p>在Node生成core dump文件有两步<br />\r\n<strong>先开启core dump</strong></p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -c unlimited</span><br></pre></td></tr></table></figure>\r\n<p><code>ulimit -c</code>设置允许 Core Dump 生成的文件的大小，如果是 0\r\n则表示关闭了 Core Dump。<code>unlimited</code>表示无限制。</p>\r\n<p><strong>gcore</strong></p>\r\n<p>第二步我们可以用<code>gcore</code>命令（需要装gdb）不重启程序生成core\r\ndump文件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcore [-o filename] pid</span><br></pre></td></tr></table></figure> 但在容器中，gcore命令会报错。</p>\r\n<p>参考： * <a\r\nhref=\"https://www.bookstack.cn/read/node-in-debugging/2.1gcorellnode.md\">Node.js\r\n调试指南</a></p>\r\n","site":{"data":{}},"excerpt":"","more":"<p>在开始之前，我们先了解下什么是 Core 和 Core Dump。<br />\r\n<strong>什么是 Core?</strong><br />\r\n&gt;\r\n在使用半导体作为内存材料前，人类是利用线圈当作内存的材料，线圈就叫作\r\ncore ，用线圈做的内存就叫作 core memory。如今\r\n，半导体工业澎勃发展，已经没有人用 core memory 了，不过在许多情况下，\r\n人们还是把记忆体叫作 core 。</p>\r\n<p><strong>什么是 Core Dump?</strong></p>\r\n<blockquote>\r\n<p>当程序运行的过程中异常终止或崩溃，操作系统会将程序当时的内存状态记录下来，保存在一个文件中，这种行为就叫做\r\nCore Dump（中文有的翻译成 “核心转储”)。我们可以认为 Core Dump 是\r\n“内存快照”，但实际上，除了内存信息之外，还有些关键的程序运行状态也会同时\r\ndump\r\n下来，例如寄存器信息（包括程序指针、栈指针等）、内存管理信息、其他处理器和操作系统状态和信息。Core\r\nDump\r\n对于编程人员诊断和调试程序是非常有帮助的，因为对于有些程序错误是很难重现的，例如指针异常，而\r\nCore Dump 文件可以再现程序出错时的情景。</p>\r\n</blockquote>\r\n<p>在Node生成core dump文件有两步<br />\r\n<strong>先开启core dump</strong></p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ulimit -c unlimited</span><br></pre></td></tr></table></figure>\r\n<p><code>ulimit -c</code>设置允许 Core Dump 生成的文件的大小，如果是 0\r\n则表示关闭了 Core Dump。<code>unlimited</code>表示无限制。</p>\r\n<p><strong>gcore</strong></p>\r\n<p>第二步我们可以用<code>gcore</code>命令（需要装gdb）不重启程序生成core\r\ndump文件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcore [-o filename] pid</span><br></pre></td></tr></table></figure> 但在容器中，gcore命令会报错。</p>\r\n<p>参考： * <a\r\nhref=\"https://www.bookstack.cn/read/node-in-debugging/2.1gcorellnode.md\">Node.js\r\n调试指南</a></p>\r\n"},{"title":"ftplib源码分析","author":"Salamander","date":"2020-05-13T07:00:00.000Z","_content":"## FTP协议\n相比其他协议，如 HTTP 协议，FTP 协议要复杂一些。与一般的 C/S 应用不同点在于一般的C/S 应用程序一般只会建立一个 Socket 连接，这个连接同时处理服务器端和客户端的连接命令和数据传输。而FTP协议中将命令与数据分开传送的方法提高了效率。 \n\n\n<!-- more -->\n\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS 还有 Windows 10专业版\n* ftplib：V4.0-1\n* gcc： 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)\n\n\n### 命令结构\nFTP 每个命令都有 3 到 4 个大写字母组成，命令后面跟参数，用空格分开。每个命令都以 \"\\r\\n\"结束（应答也是用\"\\r\\n\"结束），例如发送一个`CWD`命令，那要要发送数据就是：`CWD dirname\\r\\n`。  \n\n常见的FTP命令有：  \n![](https://s1.ax1x.com/2020/05/12/YNtW3F.png)\n\n### 响应结构\nFTP响应跟命令结构是类似的。  \nFTP响应通常是单行的，格式为\"响应码+空格+提示信息+\\r\\n\"。如果需要**产生一条多行应答**，第1行在第3位数字应答码之后包含一个连字符\"-\"，而不是空格，最后一行包含相同的3位数字应答码，后跟一个空格字符。\n\n### FTP响应码\n客户端发送 FTP 命令后，服务器返回响应码。  \n响应码用**三位数字编码**表示：  \n第一个数字给出了命令状态的一般性指示，比如响应成功、失败或不完整。  \n第二个数字是响应类型的分类，如 2 代表跟连接有关的响应，3 代表用户认证。  \n第三个数字提供了更加详细的信息。  \n\n第一个数字的含义如下：  \n\n* 1 表示服务器正确接收信息，还未处理。\n* 2 表示服务器已经正确处理信息。\n* 3 表示服务器正确接收信息，正在处理。\n* 4 表示信息暂时错误。\n* 5 表示信息永久错误。\n\n第二个数字的含义如下：  \n* 0 表示语法。\n* 1 表示系统状态和信息。\n* 2 表示连接状态。\n* 3 表示与用户认证有关的信息。\n* 4 表示未定义。\n* 5 表示与文件系统有关的信息。\n\n### 例子\n用`客户端登录 FTP 服务器`为例子\n![](https://s1.ax1x.com/2020/05/18/YfCuff.jpg)\n\n大致调用函数过称为：\n```\n/* 命令 ”USER username\\r\\n” */\nsprintf(send_buf,\"USER %s\\r\\n\",username);\n/*客户端发送用户名到服务器端 */\nwrite(control_sock, send_buf, strlen(send_buf));\n/* 客户端接收服务器的响应码和信息，正常为 ”331 User name okay, need password.” */\nread(control_sock, read_buf, read_len);\n \n/* 命令 ”PASS password\\r\\n” */\nsprintf(send_buf,\"PASS %s\\r\\n\",password);\n/* 客户端发送密码到服务器端 */\nwrite(control_sock, send_buf, strlen(send_buf));\n/* 客户端接收服务器的响应码和信息，正常为 ”230 User logged in, proceed.” */\nread(control_sock, read_buf, read_len);\n```\n\n\n\n## 源码分析\nftplib在这里[下载](https://nbpfaus.net/~pfau/ftplib/)。\n\n\n登录了FTP服务器后，肯定需要一个句柄的量，在这个`ftplib`中是`netbuf`：\n```C\ntypedef struct NetBuf netbuf;\n\nstruct NetBuf {\n    char *cput,*cget;\n    int handle;\n    int cavail,cleft;\n    char *buf;\n    int dir;\n    netbuf *ctrl;\n    netbuf *data;    \n    int cmode;\n    struct timeval idletime;\n    FtpCallback idlecb;\n    void *idlearg;\n    unsigned long int xfered;\n    unsigned long int cbbytes;\n    unsigned long int xfered1;\n    char response[RESPONSE_BUFSIZ];\n};\n```\n`handle`字段其实就存了tcp握手成功后的`socket`。\n\n### FtpSendCmd函数\n\n首先来看`FtpSendCmd`函数，这个函数顾名思义，就是用来发送FTP命令，你在`FtpPwd`、`FtpNlst`、`FtpDir`、`FtpGet`等函数中都可以看到它：\n```C++\nstatic int FtpSendCmd(const char *cmd, char expresp, netbuf *nControl)\n{\n    char buf[TMP_BUFSIZ];\n    if (nControl->dir != FTPLIB_CONTROL)\n        return 0;\n    if (ftplib_debug > 2)\n        fprintf(stderr,\"%s\\n\",cmd);\n    if ((strlen(cmd) + 3) > sizeof(buf))\n        return 0;\n    sprintf(buf,\"%s\\r\\n\",cmd);\n    if (net_write(nControl->handle, buf, strlen(buf)) <= 0)\n    {\n        if (ftplib_debug)\n            perror(\"write\");\n        return 0;\n    }\n    return readresp(expresp, nControl);\n}\n```\n这个函数的过程：\n1. 用`net_write`函数操作socket发送数据\n2. `readresp`函数读取服务器响应\n\n\n#### net_write函数\n我们查看一下`net_write`，其实它就是封装了一下`write`函数，因为**TCP通信对于应用程序来说是完全异步**，你调用`write`写入5个字节，返回不一定是5个字节，可能是3个，4个，所以`net_write`多次调用了`write`（在《UNIX网络编程 卷1》中，作者也有类似的封装）。另外，`write`返回成功了也只代表buf中的数据被复制到了kernel中的TCP发送缓冲区，至于数据什么时候被发往网络，什么时候被对方主机接收，什么时候被对方进程读取，系统调用层面不会给予任何保证和通知。\n```C\nint net_write(int fd, const char *buf, size_t len)\n{\n    int done = 0;\n    while ( len > 0 )\n    {\n        int c = write( fd, buf, len );\n        if ( c == -1 )\n        {\n            if ( errno != EINTR && errno != EAGAIN )\n            return -1;\n        }\n        else if ( c == 0 )\n        {\n            return done;\n        }\n        else\n        {\n            buf += c;\n            done += c;\n            len -= c;\n        }\n    }\n    return done;\n}\n```\n\n#### readresp函数\n发送了FTP的命令数据后，就需要用socket接受响应数据了，**切记TCP是流式传输的**，所以你需要自己做应用层的解析。\nFTP的消息块的分割符是`\\r\\n`，看`readline`函数名应该是读取一行数据\n```C++\nstatic int readresp(char c, netbuf *nControl)\n{\n    char match[5];\n    if (readline(nControl->response, RESPONSE_BUFSIZ, nControl) == -1)\n    {\n        if (ftplib_debug)\n            perror(\"Control socket read failed\");\n        return 0;\n    }\n    if (ftplib_debug > 1)\n        fprintf(stderr,\"%s\",nControl->response);\n    if (nControl->response[3] == '-')\n    {\n        strncpy(match,nControl->response,3);\n        match[3] = ' ';\n        match[4] = '\\0';\n        do\n        {\n            if (readline(nControl->response, RESPONSE_BUFSIZ, nControl) == -1)\n            {\n                if (ftplib_debug)\n                    perror(\"Control socket read failed\");\n                return 0;\n            }\n            if (ftplib_debug > 1)\n                fprintf(stderr,\"%s\",nControl->response);\n        }\n        while (strncmp(nControl->response, match, 4));\n    }\n    if (nControl->response[0] == c)\n          return 1;\n    return 0;\n}\n```\n\n\n\n#### readline函数\n```C++\nstatic int readline(char *buf, int max, netbuf *ctl)\n{\n    int x, retval = 0;\n    char *end,*bp=buf;\n    int eof = 0;\n\n    if ((ctl->dir != FTPLIB_CONTROL) && (ctl->dir != FTPLIB_READ))\n        return -1;\n    if (max == 0)\n        return 0;\n    do\n    {\n        if (ctl->cavail > 0)\n        {\n            x = (max >= ctl->cavail) ? ctl->cavail : max-1;\n            end = memccpy(bp, ctl->cget, '\\n',x);\n            if (end != NULL)\n                x = end - bp;\n            retval += x;\n            bp += x;\n            *bp = '\\0';\n            max -= x;\n            ctl->cget += x;\n            ctl->cavail -= x;\n            if (end != NULL)\n            {\n                bp -= 2;\n                if (strcmp(bp,\"\\r\\n\") == 0)\n                {\n                    *bp++ = '\\n';\n                    *bp++ = '\\0';\n                    --retval;\n                }\n                break;\n            }\n        }\n        if (max == 1)\n        {\n            *buf = '\\0';\n            break;\n        }\n        if (ctl->cput == ctl->cget)\n        {\n            ctl->cput = ctl->cget = ctl->buf;\n            ctl->cavail = 0;\n            ctl->cleft = FTPLIB_BUFSIZ;\n        }\n        if (eof)\n        {\n            if (retval == 0)\n                retval = -1;\n            break;\n        }\n        if (!socket_wait(ctl))\n            return retval;\n        if ((x = net_read(ctl->handle, ctl->cput, ctl->cleft)) == -1)\n        {\n            if (ftplib_debug)\n                perror(\"read\");\n            retval = -1;\n            break;\n        }\n        if (x == 0)\n            eof = 1;\n        ctl->cleft -= x;\n        ctl->cavail += x;\n        ctl->cput += x;\n    }\n    while (1);\n    return retval;\n}\n```\n\n#### socket_wait()函数\n这个函数用了`select`系统函数，用来检测`ctl->handle`是否可读（这里可读的时候就是服务端发过来响应数据了）。select函数的返回值：返回-1表示调用select函数时有错误发生，具体的错误在Linux可通过errno输出来查看；返回0，表示select函数超时；返回正数即调用select函数成功，表示集合中文件描述符的数量，集合也会被修改以显示哪一个文件描述符已准备就绪。  \n不过在用来发送命令的`socket`上（也就是调用`FtpConnect`函数得到的那个`socket`），因为`ctl->dir`是`FTPLIB_CONTROL`（`ctl->idlecb`也是NULL），所以直接返回了1。\n\n```C++\n/*\n * socket_wait - wait for socket to receive or flush data\n *\n * return 1 if no user callback, otherwise, return value returned by\n * user callback\n */\nstatic int socket_wait(netbuf *ctl)\n{\n    fd_set fd,*rfd = NULL,*wfd = NULL;\n    struct timeval tv;\n    int rv = 0;\n    if ((ctl->dir == FTPLIB_CONTROL) || (ctl->idlecb == NULL))\n        return 1;\n    if (ctl->dir == FTPLIB_WRITE)\n        wfd = &fd;\n    else\n        rfd = &fd;\n    FD_ZERO(&fd);\n    do\n    {\n        FD_SET(ctl->handle,&fd);\n        tv = ctl->idletime;\n        rv = select(ctl->handle+1, rfd, wfd, NULL, &tv);\n        if (rv == -1)\n        {\n            rv = 0;\n            strncpy(ctl->ctrl->response, strerror(errno),\n                        sizeof(ctl->ctrl->response));\n            break;\n        }\n        else if (rv > 0)\n        {\n            rv = 1;\n            break;\n        }\n    }\n    while ((rv = ctl->idlecb(ctl, ctl->xfered, ctl->idlearg)));\n    return rv;\n}\n```\n\n#### net_read函数\n这个函数简单，用了`read`函数读到了数据，就立马返回，但也要注意，你读10个字节，也不一定能读取10个字节，可能会比10个字节小，因为`read`总是在接收缓冲区有数据时立即返回，而不是等到给定的read buffer填满时返回。\n```\nint net_read(int fd, char *buf, size_t len)\n{\n    while ( 1 )\n    {\n        int c = read(fd, buf, len);\n        if ( c == -1 )\n        {\n            if ( errno != EINTR && errno != EAGAIN )\n            return -1;\n        }\n        else\n        {\n            return c;\n        }\n    }\n}\n```\n\n\n\n\n参考：\n* [使用 Socket 通信实现 FTP 客户端程序](https://www.ibm.com/developerworks/cn/linux/l-cn-socketftp/index.html)\n* [网络编程中的read，write函数](https://www.cnblogs.com/wuchanming/p/3783650.html)","source":"_posts/ftplib_source.md","raw":"title: ftplib源码分析\nauthor: Salamander\ntags:\n  - c\ncategories:\n  - c\ndate: 2020-05-13 15:00:00\n---\n## FTP协议\n相比其他协议，如 HTTP 协议，FTP 协议要复杂一些。与一般的 C/S 应用不同点在于一般的C/S 应用程序一般只会建立一个 Socket 连接，这个连接同时处理服务器端和客户端的连接命令和数据传输。而FTP协议中将命令与数据分开传送的方法提高了效率。 \n\n\n<!-- more -->\n\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS 还有 Windows 10专业版\n* ftplib：V4.0-1\n* gcc： 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)\n\n\n### 命令结构\nFTP 每个命令都有 3 到 4 个大写字母组成，命令后面跟参数，用空格分开。每个命令都以 \"\\r\\n\"结束（应答也是用\"\\r\\n\"结束），例如发送一个`CWD`命令，那要要发送数据就是：`CWD dirname\\r\\n`。  \n\n常见的FTP命令有：  \n![](https://s1.ax1x.com/2020/05/12/YNtW3F.png)\n\n### 响应结构\nFTP响应跟命令结构是类似的。  \nFTP响应通常是单行的，格式为\"响应码+空格+提示信息+\\r\\n\"。如果需要**产生一条多行应答**，第1行在第3位数字应答码之后包含一个连字符\"-\"，而不是空格，最后一行包含相同的3位数字应答码，后跟一个空格字符。\n\n### FTP响应码\n客户端发送 FTP 命令后，服务器返回响应码。  \n响应码用**三位数字编码**表示：  \n第一个数字给出了命令状态的一般性指示，比如响应成功、失败或不完整。  \n第二个数字是响应类型的分类，如 2 代表跟连接有关的响应，3 代表用户认证。  \n第三个数字提供了更加详细的信息。  \n\n第一个数字的含义如下：  \n\n* 1 表示服务器正确接收信息，还未处理。\n* 2 表示服务器已经正确处理信息。\n* 3 表示服务器正确接收信息，正在处理。\n* 4 表示信息暂时错误。\n* 5 表示信息永久错误。\n\n第二个数字的含义如下：  \n* 0 表示语法。\n* 1 表示系统状态和信息。\n* 2 表示连接状态。\n* 3 表示与用户认证有关的信息。\n* 4 表示未定义。\n* 5 表示与文件系统有关的信息。\n\n### 例子\n用`客户端登录 FTP 服务器`为例子\n![](https://s1.ax1x.com/2020/05/18/YfCuff.jpg)\n\n大致调用函数过称为：\n```\n/* 命令 ”USER username\\r\\n” */\nsprintf(send_buf,\"USER %s\\r\\n\",username);\n/*客户端发送用户名到服务器端 */\nwrite(control_sock, send_buf, strlen(send_buf));\n/* 客户端接收服务器的响应码和信息，正常为 ”331 User name okay, need password.” */\nread(control_sock, read_buf, read_len);\n \n/* 命令 ”PASS password\\r\\n” */\nsprintf(send_buf,\"PASS %s\\r\\n\",password);\n/* 客户端发送密码到服务器端 */\nwrite(control_sock, send_buf, strlen(send_buf));\n/* 客户端接收服务器的响应码和信息，正常为 ”230 User logged in, proceed.” */\nread(control_sock, read_buf, read_len);\n```\n\n\n\n## 源码分析\nftplib在这里[下载](https://nbpfaus.net/~pfau/ftplib/)。\n\n\n登录了FTP服务器后，肯定需要一个句柄的量，在这个`ftplib`中是`netbuf`：\n```C\ntypedef struct NetBuf netbuf;\n\nstruct NetBuf {\n    char *cput,*cget;\n    int handle;\n    int cavail,cleft;\n    char *buf;\n    int dir;\n    netbuf *ctrl;\n    netbuf *data;    \n    int cmode;\n    struct timeval idletime;\n    FtpCallback idlecb;\n    void *idlearg;\n    unsigned long int xfered;\n    unsigned long int cbbytes;\n    unsigned long int xfered1;\n    char response[RESPONSE_BUFSIZ];\n};\n```\n`handle`字段其实就存了tcp握手成功后的`socket`。\n\n### FtpSendCmd函数\n\n首先来看`FtpSendCmd`函数，这个函数顾名思义，就是用来发送FTP命令，你在`FtpPwd`、`FtpNlst`、`FtpDir`、`FtpGet`等函数中都可以看到它：\n```C++\nstatic int FtpSendCmd(const char *cmd, char expresp, netbuf *nControl)\n{\n    char buf[TMP_BUFSIZ];\n    if (nControl->dir != FTPLIB_CONTROL)\n        return 0;\n    if (ftplib_debug > 2)\n        fprintf(stderr,\"%s\\n\",cmd);\n    if ((strlen(cmd) + 3) > sizeof(buf))\n        return 0;\n    sprintf(buf,\"%s\\r\\n\",cmd);\n    if (net_write(nControl->handle, buf, strlen(buf)) <= 0)\n    {\n        if (ftplib_debug)\n            perror(\"write\");\n        return 0;\n    }\n    return readresp(expresp, nControl);\n}\n```\n这个函数的过程：\n1. 用`net_write`函数操作socket发送数据\n2. `readresp`函数读取服务器响应\n\n\n#### net_write函数\n我们查看一下`net_write`，其实它就是封装了一下`write`函数，因为**TCP通信对于应用程序来说是完全异步**，你调用`write`写入5个字节，返回不一定是5个字节，可能是3个，4个，所以`net_write`多次调用了`write`（在《UNIX网络编程 卷1》中，作者也有类似的封装）。另外，`write`返回成功了也只代表buf中的数据被复制到了kernel中的TCP发送缓冲区，至于数据什么时候被发往网络，什么时候被对方主机接收，什么时候被对方进程读取，系统调用层面不会给予任何保证和通知。\n```C\nint net_write(int fd, const char *buf, size_t len)\n{\n    int done = 0;\n    while ( len > 0 )\n    {\n        int c = write( fd, buf, len );\n        if ( c == -1 )\n        {\n            if ( errno != EINTR && errno != EAGAIN )\n            return -1;\n        }\n        else if ( c == 0 )\n        {\n            return done;\n        }\n        else\n        {\n            buf += c;\n            done += c;\n            len -= c;\n        }\n    }\n    return done;\n}\n```\n\n#### readresp函数\n发送了FTP的命令数据后，就需要用socket接受响应数据了，**切记TCP是流式传输的**，所以你需要自己做应用层的解析。\nFTP的消息块的分割符是`\\r\\n`，看`readline`函数名应该是读取一行数据\n```C++\nstatic int readresp(char c, netbuf *nControl)\n{\n    char match[5];\n    if (readline(nControl->response, RESPONSE_BUFSIZ, nControl) == -1)\n    {\n        if (ftplib_debug)\n            perror(\"Control socket read failed\");\n        return 0;\n    }\n    if (ftplib_debug > 1)\n        fprintf(stderr,\"%s\",nControl->response);\n    if (nControl->response[3] == '-')\n    {\n        strncpy(match,nControl->response,3);\n        match[3] = ' ';\n        match[4] = '\\0';\n        do\n        {\n            if (readline(nControl->response, RESPONSE_BUFSIZ, nControl) == -1)\n            {\n                if (ftplib_debug)\n                    perror(\"Control socket read failed\");\n                return 0;\n            }\n            if (ftplib_debug > 1)\n                fprintf(stderr,\"%s\",nControl->response);\n        }\n        while (strncmp(nControl->response, match, 4));\n    }\n    if (nControl->response[0] == c)\n          return 1;\n    return 0;\n}\n```\n\n\n\n#### readline函数\n```C++\nstatic int readline(char *buf, int max, netbuf *ctl)\n{\n    int x, retval = 0;\n    char *end,*bp=buf;\n    int eof = 0;\n\n    if ((ctl->dir != FTPLIB_CONTROL) && (ctl->dir != FTPLIB_READ))\n        return -1;\n    if (max == 0)\n        return 0;\n    do\n    {\n        if (ctl->cavail > 0)\n        {\n            x = (max >= ctl->cavail) ? ctl->cavail : max-1;\n            end = memccpy(bp, ctl->cget, '\\n',x);\n            if (end != NULL)\n                x = end - bp;\n            retval += x;\n            bp += x;\n            *bp = '\\0';\n            max -= x;\n            ctl->cget += x;\n            ctl->cavail -= x;\n            if (end != NULL)\n            {\n                bp -= 2;\n                if (strcmp(bp,\"\\r\\n\") == 0)\n                {\n                    *bp++ = '\\n';\n                    *bp++ = '\\0';\n                    --retval;\n                }\n                break;\n            }\n        }\n        if (max == 1)\n        {\n            *buf = '\\0';\n            break;\n        }\n        if (ctl->cput == ctl->cget)\n        {\n            ctl->cput = ctl->cget = ctl->buf;\n            ctl->cavail = 0;\n            ctl->cleft = FTPLIB_BUFSIZ;\n        }\n        if (eof)\n        {\n            if (retval == 0)\n                retval = -1;\n            break;\n        }\n        if (!socket_wait(ctl))\n            return retval;\n        if ((x = net_read(ctl->handle, ctl->cput, ctl->cleft)) == -1)\n        {\n            if (ftplib_debug)\n                perror(\"read\");\n            retval = -1;\n            break;\n        }\n        if (x == 0)\n            eof = 1;\n        ctl->cleft -= x;\n        ctl->cavail += x;\n        ctl->cput += x;\n    }\n    while (1);\n    return retval;\n}\n```\n\n#### socket_wait()函数\n这个函数用了`select`系统函数，用来检测`ctl->handle`是否可读（这里可读的时候就是服务端发过来响应数据了）。select函数的返回值：返回-1表示调用select函数时有错误发生，具体的错误在Linux可通过errno输出来查看；返回0，表示select函数超时；返回正数即调用select函数成功，表示集合中文件描述符的数量，集合也会被修改以显示哪一个文件描述符已准备就绪。  \n不过在用来发送命令的`socket`上（也就是调用`FtpConnect`函数得到的那个`socket`），因为`ctl->dir`是`FTPLIB_CONTROL`（`ctl->idlecb`也是NULL），所以直接返回了1。\n\n```C++\n/*\n * socket_wait - wait for socket to receive or flush data\n *\n * return 1 if no user callback, otherwise, return value returned by\n * user callback\n */\nstatic int socket_wait(netbuf *ctl)\n{\n    fd_set fd,*rfd = NULL,*wfd = NULL;\n    struct timeval tv;\n    int rv = 0;\n    if ((ctl->dir == FTPLIB_CONTROL) || (ctl->idlecb == NULL))\n        return 1;\n    if (ctl->dir == FTPLIB_WRITE)\n        wfd = &fd;\n    else\n        rfd = &fd;\n    FD_ZERO(&fd);\n    do\n    {\n        FD_SET(ctl->handle,&fd);\n        tv = ctl->idletime;\n        rv = select(ctl->handle+1, rfd, wfd, NULL, &tv);\n        if (rv == -1)\n        {\n            rv = 0;\n            strncpy(ctl->ctrl->response, strerror(errno),\n                        sizeof(ctl->ctrl->response));\n            break;\n        }\n        else if (rv > 0)\n        {\n            rv = 1;\n            break;\n        }\n    }\n    while ((rv = ctl->idlecb(ctl, ctl->xfered, ctl->idlearg)));\n    return rv;\n}\n```\n\n#### net_read函数\n这个函数简单，用了`read`函数读到了数据，就立马返回，但也要注意，你读10个字节，也不一定能读取10个字节，可能会比10个字节小，因为`read`总是在接收缓冲区有数据时立即返回，而不是等到给定的read buffer填满时返回。\n```\nint net_read(int fd, char *buf, size_t len)\n{\n    while ( 1 )\n    {\n        int c = read(fd, buf, len);\n        if ( c == -1 )\n        {\n            if ( errno != EINTR && errno != EAGAIN )\n            return -1;\n        }\n        else\n        {\n            return c;\n        }\n    }\n}\n```\n\n\n\n\n参考：\n* [使用 Socket 通信实现 FTP 客户端程序](https://www.ibm.com/developerworks/cn/linux/l-cn-socketftp/index.html)\n* [网络编程中的read，write函数](https://www.cnblogs.com/wuchanming/p/3783650.html)","slug":"ftplib_source","published":1,"updated":"2023-03-21T02:48:19.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40lc002e2o3m58v18sni","content":"<h2 id=\"ftp协议\">FTP协议</h2>\r\n<p>相比其他协议，如 HTTP 协议，FTP 协议要复杂一些。与一般的 C/S\r\n应用不同点在于一般的C/S 应用程序一般只会建立一个 Socket\r\n连接，这个连接同时处理服务器端和客户端的连接命令和数据传输。而FTP协议中将命令与数据分开传送的方法提高了效率。</p>\r\n<span id=\"more\"></span>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS 还有 Windows 10专业版 *\r\nftplib：V4.0-1 * gcc： 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)</p>\r\n<h3 id=\"命令结构\">命令结构</h3>\r\n<p>FTP 每个命令都有 3 到 4\r\n个大写字母组成，命令后面跟参数，用空格分开。每个命令都以\r\n\"\"结束（应答也是用\"\"结束），例如发送一个<code>CWD</code>命令，那要要发送数据就是：<code>CWD dirname\\r\\n</code>。</p>\r\n<p>常见的FTP命令有：<br />\r\n<img src=\"https://s1.ax1x.com/2020/05/12/YNtW3F.png\" /></p>\r\n<h3 id=\"响应结构\">响应结构</h3>\r\n<p>FTP响应跟命令结构是类似的。<br />\r\nFTP响应通常是单行的，格式为\"响应码+空格+提示信息+\"。如果需要<strong>产生一条多行应答</strong>，第1行在第3位数字应答码之后包含一个连字符\"-\"，而不是空格，最后一行包含相同的3位数字应答码，后跟一个空格字符。</p>\r\n<h3 id=\"ftp响应码\">FTP响应码</h3>\r\n<p>客户端发送 FTP 命令后，服务器返回响应码。<br />\r\n响应码用<strong>三位数字编码</strong>表示：<br />\r\n第一个数字给出了命令状态的一般性指示，比如响应成功、失败或不完整。<br />\r\n第二个数字是响应类型的分类，如 2 代表跟连接有关的响应，3\r\n代表用户认证。<br />\r\n第三个数字提供了更加详细的信息。</p>\r\n<p>第一个数字的含义如下：</p>\r\n<ul>\r\n<li>1 表示服务器正确接收信息，还未处理。</li>\r\n<li>2 表示服务器已经正确处理信息。</li>\r\n<li>3 表示服务器正确接收信息，正在处理。</li>\r\n<li>4 表示信息暂时错误。</li>\r\n<li>5 表示信息永久错误。</li>\r\n</ul>\r\n<p>第二个数字的含义如下：<br />\r\n* 0 表示语法。 * 1 表示系统状态和信息。 * 2 表示连接状态。 * 3\r\n表示与用户认证有关的信息。 * 4 表示未定义。 * 5\r\n表示与文件系统有关的信息。</p>\r\n<h3 id=\"例子\">例子</h3>\r\n<p>用<code>客户端登录 FTP 服务器</code>为例子 <img\r\nsrc=\"https://s1.ax1x.com/2020/05/18/YfCuff.jpg\" /></p>\r\n<p>大致调用函数过称为： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 命令 ”USER username\\r\\n” */</span><br><span class=\"line\">sprintf(send_buf,&quot;USER %s\\r\\n&quot;,username);</span><br><span class=\"line\">/*客户端发送用户名到服务器端 */</span><br><span class=\"line\">write(control_sock, send_buf, strlen(send_buf));</span><br><span class=\"line\">/* 客户端接收服务器的响应码和信息，正常为 ”331 User name okay, need password.” */</span><br><span class=\"line\">read(control_sock, read_buf, read_len);</span><br><span class=\"line\"> </span><br><span class=\"line\">/* 命令 ”PASS password\\r\\n” */</span><br><span class=\"line\">sprintf(send_buf,&quot;PASS %s\\r\\n&quot;,password);</span><br><span class=\"line\">/* 客户端发送密码到服务器端 */</span><br><span class=\"line\">write(control_sock, send_buf, strlen(send_buf));</span><br><span class=\"line\">/* 客户端接收服务器的响应码和信息，正常为 ”230 User logged in, proceed.” */</span><br><span class=\"line\">read(control_sock, read_buf, read_len);</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"源码分析\">源码分析</h2>\r\n<p>ftplib在这里<a\r\nhref=\"https://nbpfaus.net/~pfau/ftplib/\">下载</a>。</p>\r\n<p>登录了FTP服务器后，肯定需要一个句柄的量，在这个<code>ftplib</code>中是<code>netbuf</code>：\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NetBuf</span> <span class=\"title\">netbuf</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NetBuf</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *cput,*cget;</span><br><span class=\"line\">    <span class=\"type\">int</span> handle;</span><br><span class=\"line\">    <span class=\"type\">int</span> cavail,cleft;</span><br><span class=\"line\">    <span class=\"type\">char</span> *buf;</span><br><span class=\"line\">    <span class=\"type\">int</span> dir;</span><br><span class=\"line\">    netbuf *ctrl;</span><br><span class=\"line\">    netbuf *data;    </span><br><span class=\"line\">    <span class=\"type\">int</span> cmode;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">idletime</span>;</span></span><br><span class=\"line\">    FtpCallback idlecb;</span><br><span class=\"line\">    <span class=\"type\">void</span> *idlearg;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> xfered;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> cbbytes;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> xfered1;</span><br><span class=\"line\">    <span class=\"type\">char</span> response[RESPONSE_BUFSIZ];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<code>handle</code>字段其实就存了tcp握手成功后的<code>socket</code>。</p>\r\n<h3 id=\"ftpsendcmd函数\">FtpSendCmd函数</h3>\r\n<p>首先来看<code>FtpSendCmd</code>函数，这个函数顾名思义，就是用来发送FTP命令，你在<code>FtpPwd</code>、<code>FtpNlst</code>、<code>FtpDir</code>、<code>FtpGet</code>等函数中都可以看到它：\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">FtpSendCmd</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *cmd, <span class=\"type\">char</span> expresp, netbuf *nControl)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[TMP_BUFSIZ];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nControl-&gt;dir != FTPLIB_CONTROL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ftplib_debug &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(stderr,<span class=\"string\">&quot;%s\\n&quot;</span>,cmd);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">strlen</span>(cmd) + <span class=\"number\">3</span>) &gt; <span class=\"built_in\">sizeof</span>(buf))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(buf,<span class=\"string\">&quot;%s\\r\\n&quot;</span>,cmd);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">net_write</span>(nControl-&gt;handle, buf, <span class=\"built_in\">strlen</span>(buf)) &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ftplib_debug)</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;write&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">readresp</span>(expresp, nControl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 这个函数的过程： 1.\r\n用<code>net_write</code>函数操作socket发送数据 2.\r\n<code>readresp</code>函数读取服务器响应</p>\r\n<h4 id=\"net_write函数\">net_write函数</h4>\r\n<p>我们查看一下<code>net_write</code>，其实它就是封装了一下<code>write</code>函数，因为<strong>TCP通信对于应用程序来说是完全异步</strong>，你调用<code>write</code>写入5个字节，返回不一定是5个字节，可能是3个，4个，所以<code>net_write</code>多次调用了<code>write</code>（在《UNIX网络编程\r\n卷1》中，作者也有类似的封装）。另外，<code>write</code>返回成功了也只代表buf中的数据被复制到了kernel中的TCP发送缓冲区，至于数据什么时候被发往网络，什么时候被对方主机接收，什么时候被对方进程读取，系统调用层面不会给予任何保证和通知。\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">net_write</span><span class=\"params\">(<span class=\"type\">int</span> fd, <span class=\"type\">const</span> <span class=\"type\">char</span> *buf, <span class=\"type\">size_t</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> done = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( len &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> c = write( fd, buf, len );</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( c == <span class=\"number\">-1</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( errno != EINTR &amp;&amp; errno != EAGAIN )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( c == <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            buf += c;</span><br><span class=\"line\">            done += c;</span><br><span class=\"line\">            len -= c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"readresp函数\">readresp函数</h4>\r\n<p>发送了FTP的命令数据后，就需要用socket接受响应数据了，<strong>切记TCP是流式传输的</strong>，所以你需要自己做应用层的解析。\r\nFTP的消息块的分割符是<code>\\r\\n</code>，看<code>readline</code>函数名应该是读取一行数据\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">readresp</span><span class=\"params\">(<span class=\"type\">char</span> c, netbuf *nControl)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> match[<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">readline</span>(nControl-&gt;response, RESPONSE_BUFSIZ, nControl) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ftplib_debug)</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;Control socket read failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ftplib_debug &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(stderr,<span class=\"string\">&quot;%s&quot;</span>,nControl-&gt;response);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nControl-&gt;response[<span class=\"number\">3</span>] == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">strncpy</span>(match,nControl-&gt;response,<span class=\"number\">3</span>);</span><br><span class=\"line\">        match[<span class=\"number\">3</span>] = <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        match[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">readline</span>(nControl-&gt;response, RESPONSE_BUFSIZ, nControl) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ftplib_debug)</span><br><span class=\"line\">                    <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;Control socket read failed&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ftplib_debug &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"built_in\">fprintf</span>(stderr,<span class=\"string\">&quot;%s&quot;</span>,nControl-&gt;response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">strncmp</span>(nControl-&gt;response, match, <span class=\"number\">4</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nControl-&gt;response[<span class=\"number\">0</span>] == c)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"readline函数\">readline函数</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">readline</span><span class=\"params\">(<span class=\"type\">char</span> *buf, <span class=\"type\">int</span> max, netbuf *ctl)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x, retval = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> *end,*bp=buf;</span><br><span class=\"line\">    <span class=\"type\">int</span> eof = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((ctl-&gt;dir != FTPLIB_CONTROL) &amp;&amp; (ctl-&gt;dir != FTPLIB_READ))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ctl-&gt;cavail &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x = (max &gt;= ctl-&gt;cavail) ? ctl-&gt;cavail : max<span class=\"number\">-1</span>;</span><br><span class=\"line\">            end = <span class=\"built_in\">memccpy</span>(bp, ctl-&gt;cget, <span class=\"string\">&#x27;\\n&#x27;</span>,x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                x = end - bp;</span><br><span class=\"line\">            retval += x;</span><br><span class=\"line\">            bp += x;</span><br><span class=\"line\">            *bp = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">            max -= x;</span><br><span class=\"line\">            ctl-&gt;cget += x;</span><br><span class=\"line\">            ctl-&gt;cavail -= x;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                bp -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(bp,<span class=\"string\">&quot;\\r\\n&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    *bp++ = <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">                    *bp++ = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">                    --retval;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            *buf = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ctl-&gt;cput == ctl-&gt;cget)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ctl-&gt;cput = ctl-&gt;cget = ctl-&gt;buf;</span><br><span class=\"line\">            ctl-&gt;cavail = <span class=\"number\">0</span>;</span><br><span class=\"line\">            ctl-&gt;cleft = FTPLIB_BUFSIZ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (eof)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (retval == <span class=\"number\">0</span>)</span><br><span class=\"line\">                retval = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">socket_wait</span>(ctl))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x = <span class=\"built_in\">net_read</span>(ctl-&gt;handle, ctl-&gt;cput, ctl-&gt;cleft)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ftplib_debug)</span><br><span class=\"line\">                <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;read&quot;</span>);</span><br><span class=\"line\">            retval = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</span><br><span class=\"line\">            eof = <span class=\"number\">1</span>;</span><br><span class=\"line\">        ctl-&gt;cleft -= x;</span><br><span class=\"line\">        ctl-&gt;cavail += x;</span><br><span class=\"line\">        ctl-&gt;cput += x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"socket_wait函数\">socket_wait()函数</h4>\r\n<p>这个函数用了<code>select</code>系统函数，用来检测<code>ctl-&gt;handle</code>是否可读（这里可读的时候就是服务端发过来响应数据了）。select函数的返回值：返回-1表示调用select函数时有错误发生，具体的错误在Linux可通过errno输出来查看；返回0，表示select函数超时；返回正数即调用select函数成功，表示集合中文件描述符的数量，集合也会被修改以显示哪一个文件描述符已准备就绪。<br />\r\n不过在用来发送命令的<code>socket</code>上（也就是调用<code>FtpConnect</code>函数得到的那个<code>socket</code>），因为<code>ctl-&gt;dir</code>是<code>FTPLIB_CONTROL</code>（<code>ctl-&gt;idlecb</code>也是NULL），所以直接返回了1。</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * socket_wait - wait for socket to receive or flush data</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * return 1 if no user callback, otherwise, return value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * user callback</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">socket_wait</span><span class=\"params\">(netbuf *ctl)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fd_set fd,*rfd = <span class=\"literal\">NULL</span>,*wfd = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">timeval</span> tv;</span><br><span class=\"line\">    <span class=\"type\">int</span> rv = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((ctl-&gt;dir == FTPLIB_CONTROL) || (ctl-&gt;idlecb == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctl-&gt;dir == FTPLIB_WRITE)</span><br><span class=\"line\">        wfd = &amp;fd;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        rfd = &amp;fd;</span><br><span class=\"line\">    <span class=\"built_in\">FD_ZERO</span>(&amp;fd);</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">FD_SET</span>(ctl-&gt;handle,&amp;fd);</span><br><span class=\"line\">        tv = ctl-&gt;idletime;</span><br><span class=\"line\">        rv = <span class=\"built_in\">select</span>(ctl-&gt;handle+<span class=\"number\">1</span>, rfd, wfd, <span class=\"literal\">NULL</span>, &amp;tv);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rv == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rv = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">strncpy</span>(ctl-&gt;ctrl-&gt;response, <span class=\"built_in\">strerror</span>(errno),</span><br><span class=\"line\">                        <span class=\"built_in\">sizeof</span>(ctl-&gt;ctrl-&gt;response));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rv &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rv = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((rv = ctl-&gt;<span class=\"built_in\">idlecb</span>(ctl, ctl-&gt;xfered, ctl-&gt;idlearg)));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"net_read函数\">net_read函数</h4>\r\n<p>这个函数简单，用了<code>read</code>函数读到了数据，就立马返回，但也要注意，你读10个字节，也不一定能读取10个字节，可能会比10个字节小，因为<code>read</code>总是在接收缓冲区有数据时立即返回，而不是等到给定的read\r\nbuffer填满时返回。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int net_read(int fd, char *buf, size_t len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    while ( 1 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int c = read(fd, buf, len);</span><br><span class=\"line\">        if ( c == -1 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if ( errno != EINTR &amp;&amp; errno != EAGAIN )</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://www.ibm.com/developerworks/cn/linux/l-cn-socketftp/index.html\">使用\r\nSocket 通信实现 FTP 客户端程序</a> * <a\r\nhref=\"https://www.cnblogs.com/wuchanming/p/3783650.html\">网络编程中的read，write函数</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"ftp协议\">FTP协议</h2>\r\n<p>相比其他协议，如 HTTP 协议，FTP 协议要复杂一些。与一般的 C/S\r\n应用不同点在于一般的C/S 应用程序一般只会建立一个 Socket\r\n连接，这个连接同时处理服务器端和客户端的连接命令和数据传输。而FTP协议中将命令与数据分开传送的方法提高了效率。</p>","more":"<p>本文环境： * OS：Ubuntu 18.04.4 LTS 还有 Windows 10专业版 *\r\nftplib：V4.0-1 * gcc： 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)</p>\r\n<h3 id=\"命令结构\">命令结构</h3>\r\n<p>FTP 每个命令都有 3 到 4\r\n个大写字母组成，命令后面跟参数，用空格分开。每个命令都以\r\n\"\"结束（应答也是用\"\"结束），例如发送一个<code>CWD</code>命令，那要要发送数据就是：<code>CWD dirname\\r\\n</code>。</p>\r\n<p>常见的FTP命令有：<br />\r\n<img src=\"https://s1.ax1x.com/2020/05/12/YNtW3F.png\" /></p>\r\n<h3 id=\"响应结构\">响应结构</h3>\r\n<p>FTP响应跟命令结构是类似的。<br />\r\nFTP响应通常是单行的，格式为\"响应码+空格+提示信息+\"。如果需要<strong>产生一条多行应答</strong>，第1行在第3位数字应答码之后包含一个连字符\"-\"，而不是空格，最后一行包含相同的3位数字应答码，后跟一个空格字符。</p>\r\n<h3 id=\"ftp响应码\">FTP响应码</h3>\r\n<p>客户端发送 FTP 命令后，服务器返回响应码。<br />\r\n响应码用<strong>三位数字编码</strong>表示：<br />\r\n第一个数字给出了命令状态的一般性指示，比如响应成功、失败或不完整。<br />\r\n第二个数字是响应类型的分类，如 2 代表跟连接有关的响应，3\r\n代表用户认证。<br />\r\n第三个数字提供了更加详细的信息。</p>\r\n<p>第一个数字的含义如下：</p>\r\n<ul>\r\n<li>1 表示服务器正确接收信息，还未处理。</li>\r\n<li>2 表示服务器已经正确处理信息。</li>\r\n<li>3 表示服务器正确接收信息，正在处理。</li>\r\n<li>4 表示信息暂时错误。</li>\r\n<li>5 表示信息永久错误。</li>\r\n</ul>\r\n<p>第二个数字的含义如下：<br />\r\n* 0 表示语法。 * 1 表示系统状态和信息。 * 2 表示连接状态。 * 3\r\n表示与用户认证有关的信息。 * 4 表示未定义。 * 5\r\n表示与文件系统有关的信息。</p>\r\n<h3 id=\"例子\">例子</h3>\r\n<p>用<code>客户端登录 FTP 服务器</code>为例子 <img\r\nsrc=\"https://s1.ax1x.com/2020/05/18/YfCuff.jpg\" /></p>\r\n<p>大致调用函数过称为： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 命令 ”USER username\\r\\n” */</span><br><span class=\"line\">sprintf(send_buf,&quot;USER %s\\r\\n&quot;,username);</span><br><span class=\"line\">/*客户端发送用户名到服务器端 */</span><br><span class=\"line\">write(control_sock, send_buf, strlen(send_buf));</span><br><span class=\"line\">/* 客户端接收服务器的响应码和信息，正常为 ”331 User name okay, need password.” */</span><br><span class=\"line\">read(control_sock, read_buf, read_len);</span><br><span class=\"line\"> </span><br><span class=\"line\">/* 命令 ”PASS password\\r\\n” */</span><br><span class=\"line\">sprintf(send_buf,&quot;PASS %s\\r\\n&quot;,password);</span><br><span class=\"line\">/* 客户端发送密码到服务器端 */</span><br><span class=\"line\">write(control_sock, send_buf, strlen(send_buf));</span><br><span class=\"line\">/* 客户端接收服务器的响应码和信息，正常为 ”230 User logged in, proceed.” */</span><br><span class=\"line\">read(control_sock, read_buf, read_len);</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"源码分析\">源码分析</h2>\r\n<p>ftplib在这里<a\r\nhref=\"https://nbpfaus.net/~pfau/ftplib/\">下载</a>。</p>\r\n<p>登录了FTP服务器后，肯定需要一个句柄的量，在这个<code>ftplib</code>中是<code>netbuf</code>：\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NetBuf</span> <span class=\"title\">netbuf</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NetBuf</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> *cput,*cget;</span><br><span class=\"line\">    <span class=\"type\">int</span> handle;</span><br><span class=\"line\">    <span class=\"type\">int</span> cavail,cleft;</span><br><span class=\"line\">    <span class=\"type\">char</span> *buf;</span><br><span class=\"line\">    <span class=\"type\">int</span> dir;</span><br><span class=\"line\">    netbuf *ctrl;</span><br><span class=\"line\">    netbuf *data;    </span><br><span class=\"line\">    <span class=\"type\">int</span> cmode;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">idletime</span>;</span></span><br><span class=\"line\">    FtpCallback idlecb;</span><br><span class=\"line\">    <span class=\"type\">void</span> *idlearg;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> xfered;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> cbbytes;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">int</span> xfered1;</span><br><span class=\"line\">    <span class=\"type\">char</span> response[RESPONSE_BUFSIZ];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<code>handle</code>字段其实就存了tcp握手成功后的<code>socket</code>。</p>\r\n<h3 id=\"ftpsendcmd函数\">FtpSendCmd函数</h3>\r\n<p>首先来看<code>FtpSendCmd</code>函数，这个函数顾名思义，就是用来发送FTP命令，你在<code>FtpPwd</code>、<code>FtpNlst</code>、<code>FtpDir</code>、<code>FtpGet</code>等函数中都可以看到它：\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">FtpSendCmd</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *cmd, <span class=\"type\">char</span> expresp, netbuf *nControl)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[TMP_BUFSIZ];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nControl-&gt;dir != FTPLIB_CONTROL)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ftplib_debug &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(stderr,<span class=\"string\">&quot;%s\\n&quot;</span>,cmd);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">strlen</span>(cmd) + <span class=\"number\">3</span>) &gt; <span class=\"built_in\">sizeof</span>(buf))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">sprintf</span>(buf,<span class=\"string\">&quot;%s\\r\\n&quot;</span>,cmd);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">net_write</span>(nControl-&gt;handle, buf, <span class=\"built_in\">strlen</span>(buf)) &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ftplib_debug)</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;write&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">readresp</span>(expresp, nControl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 这个函数的过程： 1.\r\n用<code>net_write</code>函数操作socket发送数据 2.\r\n<code>readresp</code>函数读取服务器响应</p>\r\n<h4 id=\"net_write函数\">net_write函数</h4>\r\n<p>我们查看一下<code>net_write</code>，其实它就是封装了一下<code>write</code>函数，因为<strong>TCP通信对于应用程序来说是完全异步</strong>，你调用<code>write</code>写入5个字节，返回不一定是5个字节，可能是3个，4个，所以<code>net_write</code>多次调用了<code>write</code>（在《UNIX网络编程\r\n卷1》中，作者也有类似的封装）。另外，<code>write</code>返回成功了也只代表buf中的数据被复制到了kernel中的TCP发送缓冲区，至于数据什么时候被发往网络，什么时候被对方主机接收，什么时候被对方进程读取，系统调用层面不会给予任何保证和通知。\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">net_write</span><span class=\"params\">(<span class=\"type\">int</span> fd, <span class=\"type\">const</span> <span class=\"type\">char</span> *buf, <span class=\"type\">size_t</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> done = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( len &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> c = write( fd, buf, len );</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( c == <span class=\"number\">-1</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( errno != EINTR &amp;&amp; errno != EAGAIN )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( c == <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            buf += c;</span><br><span class=\"line\">            done += c;</span><br><span class=\"line\">            len -= c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"readresp函数\">readresp函数</h4>\r\n<p>发送了FTP的命令数据后，就需要用socket接受响应数据了，<strong>切记TCP是流式传输的</strong>，所以你需要自己做应用层的解析。\r\nFTP的消息块的分割符是<code>\\r\\n</code>，看<code>readline</code>函数名应该是读取一行数据\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">readresp</span><span class=\"params\">(<span class=\"type\">char</span> c, netbuf *nControl)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> match[<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">readline</span>(nControl-&gt;response, RESPONSE_BUFSIZ, nControl) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ftplib_debug)</span><br><span class=\"line\">            <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;Control socket read failed&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ftplib_debug &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(stderr,<span class=\"string\">&quot;%s&quot;</span>,nControl-&gt;response);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nControl-&gt;response[<span class=\"number\">3</span>] == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">strncpy</span>(match,nControl-&gt;response,<span class=\"number\">3</span>);</span><br><span class=\"line\">        match[<span class=\"number\">3</span>] = <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        match[<span class=\"number\">4</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">readline</span>(nControl-&gt;response, RESPONSE_BUFSIZ, nControl) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ftplib_debug)</span><br><span class=\"line\">                    <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;Control socket read failed&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ftplib_debug &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"built_in\">fprintf</span>(stderr,<span class=\"string\">&quot;%s&quot;</span>,nControl-&gt;response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">strncmp</span>(nControl-&gt;response, match, <span class=\"number\">4</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nControl-&gt;response[<span class=\"number\">0</span>] == c)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"readline函数\">readline函数</h4>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">readline</span><span class=\"params\">(<span class=\"type\">char</span> *buf, <span class=\"type\">int</span> max, netbuf *ctl)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x, retval = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> *end,*bp=buf;</span><br><span class=\"line\">    <span class=\"type\">int</span> eof = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((ctl-&gt;dir != FTPLIB_CONTROL) &amp;&amp; (ctl-&gt;dir != FTPLIB_READ))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ctl-&gt;cavail &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x = (max &gt;= ctl-&gt;cavail) ? ctl-&gt;cavail : max<span class=\"number\">-1</span>;</span><br><span class=\"line\">            end = <span class=\"built_in\">memccpy</span>(bp, ctl-&gt;cget, <span class=\"string\">&#x27;\\n&#x27;</span>,x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                x = end - bp;</span><br><span class=\"line\">            retval += x;</span><br><span class=\"line\">            bp += x;</span><br><span class=\"line\">            *bp = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">            max -= x;</span><br><span class=\"line\">            ctl-&gt;cget += x;</span><br><span class=\"line\">            ctl-&gt;cavail -= x;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                bp -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(bp,<span class=\"string\">&quot;\\r\\n&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    *bp++ = <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">                    *bp++ = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">                    --retval;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            *buf = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ctl-&gt;cput == ctl-&gt;cget)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ctl-&gt;cput = ctl-&gt;cget = ctl-&gt;buf;</span><br><span class=\"line\">            ctl-&gt;cavail = <span class=\"number\">0</span>;</span><br><span class=\"line\">            ctl-&gt;cleft = FTPLIB_BUFSIZ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (eof)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (retval == <span class=\"number\">0</span>)</span><br><span class=\"line\">                retval = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">socket_wait</span>(ctl))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((x = <span class=\"built_in\">net_read</span>(ctl-&gt;handle, ctl-&gt;cput, ctl-&gt;cleft)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ftplib_debug)</span><br><span class=\"line\">                <span class=\"built_in\">perror</span>(<span class=\"string\">&quot;read&quot;</span>);</span><br><span class=\"line\">            retval = <span class=\"number\">-1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</span><br><span class=\"line\">            eof = <span class=\"number\">1</span>;</span><br><span class=\"line\">        ctl-&gt;cleft -= x;</span><br><span class=\"line\">        ctl-&gt;cavail += x;</span><br><span class=\"line\">        ctl-&gt;cput += x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"socket_wait函数\">socket_wait()函数</h4>\r\n<p>这个函数用了<code>select</code>系统函数，用来检测<code>ctl-&gt;handle</code>是否可读（这里可读的时候就是服务端发过来响应数据了）。select函数的返回值：返回-1表示调用select函数时有错误发生，具体的错误在Linux可通过errno输出来查看；返回0，表示select函数超时；返回正数即调用select函数成功，表示集合中文件描述符的数量，集合也会被修改以显示哪一个文件描述符已准备就绪。<br />\r\n不过在用来发送命令的<code>socket</code>上（也就是调用<code>FtpConnect</code>函数得到的那个<code>socket</code>），因为<code>ctl-&gt;dir</code>是<code>FTPLIB_CONTROL</code>（<code>ctl-&gt;idlecb</code>也是NULL），所以直接返回了1。</p>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * socket_wait - wait for socket to receive or flush data</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * return 1 if no user callback, otherwise, return value returned by</span></span><br><span class=\"line\"><span class=\"comment\"> * user callback</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">socket_wait</span><span class=\"params\">(netbuf *ctl)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fd_set fd,*rfd = <span class=\"literal\">NULL</span>,*wfd = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">timeval</span> tv;</span><br><span class=\"line\">    <span class=\"type\">int</span> rv = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((ctl-&gt;dir == FTPLIB_CONTROL) || (ctl-&gt;idlecb == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ctl-&gt;dir == FTPLIB_WRITE)</span><br><span class=\"line\">        wfd = &amp;fd;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        rfd = &amp;fd;</span><br><span class=\"line\">    <span class=\"built_in\">FD_ZERO</span>(&amp;fd);</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">FD_SET</span>(ctl-&gt;handle,&amp;fd);</span><br><span class=\"line\">        tv = ctl-&gt;idletime;</span><br><span class=\"line\">        rv = <span class=\"built_in\">select</span>(ctl-&gt;handle+<span class=\"number\">1</span>, rfd, wfd, <span class=\"literal\">NULL</span>, &amp;tv);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rv == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rv = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">strncpy</span>(ctl-&gt;ctrl-&gt;response, <span class=\"built_in\">strerror</span>(errno),</span><br><span class=\"line\">                        <span class=\"built_in\">sizeof</span>(ctl-&gt;ctrl-&gt;response));</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rv &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rv = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((rv = ctl-&gt;<span class=\"built_in\">idlecb</span>(ctl, ctl-&gt;xfered, ctl-&gt;idlearg)));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"net_read函数\">net_read函数</h4>\r\n<p>这个函数简单，用了<code>read</code>函数读到了数据，就立马返回，但也要注意，你读10个字节，也不一定能读取10个字节，可能会比10个字节小，因为<code>read</code>总是在接收缓冲区有数据时立即返回，而不是等到给定的read\r\nbuffer填满时返回。 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int net_read(int fd, char *buf, size_t len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    while ( 1 )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int c = read(fd, buf, len);</span><br><span class=\"line\">        if ( c == -1 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if ( errno != EINTR &amp;&amp; errno != EAGAIN )</span><br><span class=\"line\">            return -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a\r\nhref=\"https://www.ibm.com/developerworks/cn/linux/l-cn-socketftp/index.html\">使用\r\nSocket 通信实现 FTP 客户端程序</a> * <a\r\nhref=\"https://www.cnblogs.com/wuchanming/p/3783650.html\">网络编程中的read，write函数</a></p>"},{"title":"gRPC入门使用","author":"Salamander","date":"2020-06-02T01:00:00.000Z","_content":"## gRPC是什么\n[官网]((https://grpc.io/))如此写到\n> A high-performance, open source universal RPC framework\n\n其实，gRPC是一个高性能的，通用的，面向服务端和移动端，基于 HTTP/2 设计的RPC框架。\n\n\n\n<!-- more -->\n\n\n## RPC框架是什么？\nRPC 框架说白了就是让你可以像调用本地方法一样调用远程服务提供的方法，而不需要关心底层的通信细节。简单地说就让远程服务调用更加简单、透明。\nRPC框架包含了客户端（Client）和服务端（Server）  \n常见的RPC框架有\n* gRPC。谷歌出品\n* Thrift。Apache出品\n* Dubbo。阿里出品，也是一个微服务框架\n\n## gRPC的特性\n看[官方文档](https://grpc.io/)的介绍，有以下4点特性：\n1. 使用Protocal Buffers这个强大的结构数据序列化工具\n2. gRPC可以跨语言使用\n3. 安装简单，扩展方便（用该框架每秒可达到百万个RPC）\n4. 基于HTTP2协议\n\n## gRPC使用流程\n* 定义标准的proto文件\n* 生成标准代码（用`protoc`工具）\n* 服务端使用生成的代码提供服务\n* 客户端使用生成的代码调用服务\n\n\n## Golang实践\n\n### 安装protoc\n首先，我们需要安装`protoc`，这个工具是`Protocol Buffer`的编译器，把proto文件翻译成不同语言（Java，Go等）。  \n地址：[protobuf/releases](https://github.com/protocolbuffers/protobuf/releases)  \n解压把bin目录下**protoc**文件放到/usr/local/bin目录下即可。\n\n### 安装 protoc-gen-go\n`protoc-gen-go`是Go的protoc编译插件，protobuf内置了许多高级语言的编译器，但没有Go的。\n```\n$ protoc -h\n...\n--cpp_out=OUT_DIR           Generate C++ header and source.\n  --csharp_out=OUT_DIR        Generate C# source file.\n  --java_out=OUT_DIR          Generate Java source file.\n  --js_out=OUT_DIR            Generate JavaScript source.\n  --objc_out=OUT_DIR          Generate Objective C header and source.\n  --php_out=OUT_DIR           Generate PHP source file.\n  --python_out=OUT_DIR        Generate Python source file.\n  --ruby_out=OUT_DIR          Generate Ruby source file.\n...\n```\n我们借助`Go Modules`来安装，新建一个目录grpc-test，在目录下执行`go mod init grpc-test`创建一个Module  \n因为墙的原因，我们在`go get`之前要设置proxy（或者把`GOPROXY`设置到`.bashrc`文件中）\n```\n$ export GOPROXY=https://goproxy.cn\n```\n然后执行\n\n```\ngo get -u github.com/golang/protobuf/protoc-gen-go\n```\n执行完就可以在`$GOPATH`的bin目录下看到**protoc-gen-go**文件。\n\n### 定义服务\n在grpc-test目录下新建一个protos的目录，写入**hello.proto**文件\n```\nsyntax = \"proto3\";\n\npackage hello;\noption go_package = \"hellopb\";\n\nmessage helloRequest {\n    string name = 1;\n    int64 age  = 2;\n}\n\nmessage helloResponse {\n    string greeting = 1;\n}\n\nservice helloService {\n    rpc Hello(helloRequest) returns (helloResponse) {};\n}\n```\n`helloService`就是给外部调用的服务  \n然后我们利用`protoc`工具把 **.proto** 文件翻译成需要语言的代码（这里是go）  \n`gen.sh`文件： \n```\n#!/bin/bash\n\nprotoDir=\"./protos\"\noutDir=\"./grpc\"\nprotoc -I ${protoDir}/ ${protoDir}/*proto --go_out=plugins=grpc:${outDir}\n```\n* -I： 指定import路径，可以指定多个-I参数，编译时按顺序查找，不指定默认当前目录\n* --go_out：指定go语言的访问类\n* plugins：指定依赖的插件\n这个bash会把生成的go代码写到hellopb目录下。\n\n\n### 定义服务端\n我们需要去实现**hello.proto**中的`helloService`\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"grpc-test/hellopb\"\n\t\"log\"\n\t\"net\"\n)\n\ntype server struct {\n}\n\nfunc (*server) Hello(ctx context.Context, request *hellopb.HelloRequest) (*hellopb.HelloResponse, error) {\n\tname := request.Name\n\tresponse := &hellopb.HelloResponse{\n\t\tGreeting: \"Hello \" + name,\n\t}\n\treturn response, nil\n}\n\nfunc main() {\n\taddress := \"0.0.0.0:50051\"\n\tlis, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error %v\", err)\n\t}\n\tfmt.Printf(\"Server is listening on %v ...\", address)\n\n\ts := grpc.NewServer()\n\thellopb.RegisterHelloServiceServer(s, &server{})\n\n\ts.Serve(lis)\n}\n\n```\n\n\n### 定义客户端\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"grpc-test/hellopb\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello client ...\")\n\n\topts := grpc.WithInsecure()\n\tcc, err := grpc.Dial(\"localhost:50051\", opts)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer cc.Close()\n\n\tclient := hellopb.NewHelloServiceClient(cc)\n\trequest := &hellopb.HelloRequest{Name: \"Jeremy\", Age: 18}\n\n\tresp, _ := client.Hello(context.Background(), request)\n\tfmt.Printf(\"Receive response => [%v]\", resp.Greeting)\n}\n```\n\n\n\n\n\n\n参考：\n* [gRPC详细入门教程，Golang/Python/PHP多语言讲解](https://www.cnblogs.com/chenqionghe/p/12394845.html)","source":"_posts/gRPC_learn.md","raw":"title: gRPC入门使用\nauthor: Salamander\ntags:\n  - rpc\n  - go\ncategories:\n  - Go\n  - gRPC\ndate: 2020-06-02 09:00:00\n---\n## gRPC是什么\n[官网]((https://grpc.io/))如此写到\n> A high-performance, open source universal RPC framework\n\n其实，gRPC是一个高性能的，通用的，面向服务端和移动端，基于 HTTP/2 设计的RPC框架。\n\n\n\n<!-- more -->\n\n\n## RPC框架是什么？\nRPC 框架说白了就是让你可以像调用本地方法一样调用远程服务提供的方法，而不需要关心底层的通信细节。简单地说就让远程服务调用更加简单、透明。\nRPC框架包含了客户端（Client）和服务端（Server）  \n常见的RPC框架有\n* gRPC。谷歌出品\n* Thrift。Apache出品\n* Dubbo。阿里出品，也是一个微服务框架\n\n## gRPC的特性\n看[官方文档](https://grpc.io/)的介绍，有以下4点特性：\n1. 使用Protocal Buffers这个强大的结构数据序列化工具\n2. gRPC可以跨语言使用\n3. 安装简单，扩展方便（用该框架每秒可达到百万个RPC）\n4. 基于HTTP2协议\n\n## gRPC使用流程\n* 定义标准的proto文件\n* 生成标准代码（用`protoc`工具）\n* 服务端使用生成的代码提供服务\n* 客户端使用生成的代码调用服务\n\n\n## Golang实践\n\n### 安装protoc\n首先，我们需要安装`protoc`，这个工具是`Protocol Buffer`的编译器，把proto文件翻译成不同语言（Java，Go等）。  \n地址：[protobuf/releases](https://github.com/protocolbuffers/protobuf/releases)  \n解压把bin目录下**protoc**文件放到/usr/local/bin目录下即可。\n\n### 安装 protoc-gen-go\n`protoc-gen-go`是Go的protoc编译插件，protobuf内置了许多高级语言的编译器，但没有Go的。\n```\n$ protoc -h\n...\n--cpp_out=OUT_DIR           Generate C++ header and source.\n  --csharp_out=OUT_DIR        Generate C# source file.\n  --java_out=OUT_DIR          Generate Java source file.\n  --js_out=OUT_DIR            Generate JavaScript source.\n  --objc_out=OUT_DIR          Generate Objective C header and source.\n  --php_out=OUT_DIR           Generate PHP source file.\n  --python_out=OUT_DIR        Generate Python source file.\n  --ruby_out=OUT_DIR          Generate Ruby source file.\n...\n```\n我们借助`Go Modules`来安装，新建一个目录grpc-test，在目录下执行`go mod init grpc-test`创建一个Module  \n因为墙的原因，我们在`go get`之前要设置proxy（或者把`GOPROXY`设置到`.bashrc`文件中）\n```\n$ export GOPROXY=https://goproxy.cn\n```\n然后执行\n\n```\ngo get -u github.com/golang/protobuf/protoc-gen-go\n```\n执行完就可以在`$GOPATH`的bin目录下看到**protoc-gen-go**文件。\n\n### 定义服务\n在grpc-test目录下新建一个protos的目录，写入**hello.proto**文件\n```\nsyntax = \"proto3\";\n\npackage hello;\noption go_package = \"hellopb\";\n\nmessage helloRequest {\n    string name = 1;\n    int64 age  = 2;\n}\n\nmessage helloResponse {\n    string greeting = 1;\n}\n\nservice helloService {\n    rpc Hello(helloRequest) returns (helloResponse) {};\n}\n```\n`helloService`就是给外部调用的服务  \n然后我们利用`protoc`工具把 **.proto** 文件翻译成需要语言的代码（这里是go）  \n`gen.sh`文件： \n```\n#!/bin/bash\n\nprotoDir=\"./protos\"\noutDir=\"./grpc\"\nprotoc -I ${protoDir}/ ${protoDir}/*proto --go_out=plugins=grpc:${outDir}\n```\n* -I： 指定import路径，可以指定多个-I参数，编译时按顺序查找，不指定默认当前目录\n* --go_out：指定go语言的访问类\n* plugins：指定依赖的插件\n这个bash会把生成的go代码写到hellopb目录下。\n\n\n### 定义服务端\n我们需要去实现**hello.proto**中的`helloService`\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/grpc\"\n\t\"grpc-test/hellopb\"\n\t\"log\"\n\t\"net\"\n)\n\ntype server struct {\n}\n\nfunc (*server) Hello(ctx context.Context, request *hellopb.HelloRequest) (*hellopb.HelloResponse, error) {\n\tname := request.Name\n\tresponse := &hellopb.HelloResponse{\n\t\tGreeting: \"Hello \" + name,\n\t}\n\treturn response, nil\n}\n\nfunc main() {\n\taddress := \"0.0.0.0:50051\"\n\tlis, err := net.Listen(\"tcp\", address)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error %v\", err)\n\t}\n\tfmt.Printf(\"Server is listening on %v ...\", address)\n\n\ts := grpc.NewServer()\n\thellopb.RegisterHelloServiceServer(s, &server{})\n\n\ts.Serve(lis)\n}\n\n```\n\n\n### 定义客户端\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"grpc-test/hellopb\"\n\t\"google.golang.org/grpc\"\n\t\"log\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello client ...\")\n\n\topts := grpc.WithInsecure()\n\tcc, err := grpc.Dial(\"localhost:50051\", opts)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer cc.Close()\n\n\tclient := hellopb.NewHelloServiceClient(cc)\n\trequest := &hellopb.HelloRequest{Name: \"Jeremy\", Age: 18}\n\n\tresp, _ := client.Hello(context.Background(), request)\n\tfmt.Printf(\"Receive response => [%v]\", resp.Greeting)\n}\n```\n\n\n\n\n\n\n参考：\n* [gRPC详细入门教程，Golang/Python/PHP多语言讲解](https://www.cnblogs.com/chenqionghe/p/12394845.html)","slug":"gRPC_learn","published":1,"updated":"2023-03-21T02:48:19.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40ld002j2o3mc4ru0n2y","content":"<h2 id=\"grpc是什么\">gRPC是什么</h2>\r\n<p><a href=\"(https://grpc.io/)\">官网</a>如此写到 &gt; A\r\nhigh-performance, open source universal RPC framework</p>\r\n<p>其实，gRPC是一个高性能的，通用的，面向服务端和移动端，基于 HTTP/2\r\n设计的RPC框架。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"rpc框架是什么\">RPC框架是什么？</h2>\r\n<p>RPC\r\n框架说白了就是让你可以像调用本地方法一样调用远程服务提供的方法，而不需要关心底层的通信细节。简单地说就让远程服务调用更加简单、透明。\r\nRPC框架包含了客户端（Client）和服务端（Server）<br />\r\n常见的RPC框架有 * gRPC。谷歌出品 * Thrift。Apache出品 *\r\nDubbo。阿里出品，也是一个微服务框架</p>\r\n<h2 id=\"grpc的特性\">gRPC的特性</h2>\r\n<p>看<a href=\"https://grpc.io/\">官方文档</a>的介绍，有以下4点特性： 1.\r\n使用Protocal Buffers这个强大的结构数据序列化工具 2. gRPC可以跨语言使用\r\n3. 安装简单，扩展方便（用该框架每秒可达到百万个RPC） 4.\r\n基于HTTP2协议</p>\r\n<h2 id=\"grpc使用流程\">gRPC使用流程</h2>\r\n<ul>\r\n<li>定义标准的proto文件</li>\r\n<li>生成标准代码（用<code>protoc</code>工具）</li>\r\n<li>服务端使用生成的代码提供服务</li>\r\n<li>客户端使用生成的代码调用服务</li>\r\n</ul>\r\n<h2 id=\"golang实践\">Golang实践</h2>\r\n<h3 id=\"安装protoc\">安装protoc</h3>\r\n<p>首先，我们需要安装<code>protoc</code>，这个工具是<code>Protocol Buffer</code>的编译器，把proto文件翻译成不同语言（Java，Go等）。<br />\r\n地址：<a\r\nhref=\"https://github.com/protocolbuffers/protobuf/releases\">protobuf/releases</a><br />\r\n解压把bin目录下<strong>protoc</strong>文件放到/usr/local/bin目录下即可。</p>\r\n<h3 id=\"安装-protoc-gen-go\">安装 protoc-gen-go</h3>\r\n<p><code>protoc-gen-go</code>是Go的protoc编译插件，protobuf内置了许多高级语言的编译器，但没有Go的。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ protoc -h</span><br><span class=\"line\">...</span><br><span class=\"line\">--cpp_out=OUT_DIR           Generate C++ header and source.</span><br><span class=\"line\">  --csharp_out=OUT_DIR        Generate C# source file.</span><br><span class=\"line\">  --java_out=OUT_DIR          Generate Java source file.</span><br><span class=\"line\">  --js_out=OUT_DIR            Generate JavaScript source.</span><br><span class=\"line\">  --objc_out=OUT_DIR          Generate Objective C header and source.</span><br><span class=\"line\">  --php_out=OUT_DIR           Generate PHP source file.</span><br><span class=\"line\">  --python_out=OUT_DIR        Generate Python source file.</span><br><span class=\"line\">  --ruby_out=OUT_DIR          Generate Ruby source file.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\r\n我们借助<code>Go Modules</code>来安装，新建一个目录grpc-test，在目录下执行<code>go mod init grpc-test</code>创建一个Module<br />\r\n因为墙的原因，我们在<code>go get</code>之前要设置proxy（或者把<code>GOPROXY</code>设置到<code>.bashrc</code>文件中）\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure> 然后执行</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure>\r\n<p>执行完就可以在<code>$GOPATH</code>的bin目录下看到<strong>protoc-gen-go</strong>文件。</p>\r\n<h3 id=\"定义服务\">定义服务</h3>\r\n<p>在grpc-test目录下新建一个protos的目录，写入<strong>hello.proto</strong>文件\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">package hello;</span><br><span class=\"line\">option go_package = &quot;hellopb&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">message helloRequest &#123;</span><br><span class=\"line\">    string name = 1;</span><br><span class=\"line\">    int64 age  = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message helloResponse &#123;</span><br><span class=\"line\">    string greeting = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">service helloService &#123;</span><br><span class=\"line\">    rpc Hello(helloRequest) returns (helloResponse) &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> <code>helloService</code>就是给外部调用的服务<br />\r\n然后我们利用<code>protoc</code>工具把 <strong>.proto</strong>\r\n文件翻译成需要语言的代码（这里是go）<br />\r\n<code>gen.sh</code>文件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">protoDir=&quot;./protos&quot;</span><br><span class=\"line\">outDir=&quot;./grpc&quot;</span><br><span class=\"line\">protoc -I $&#123;protoDir&#125;/ $&#123;protoDir&#125;/*proto --go_out=plugins=grpc:$&#123;outDir&#125;</span><br></pre></td></tr></table></figure> * -I：\r\n指定import路径，可以指定多个-I参数，编译时按顺序查找，不指定默认当前目录\r\n* --go_out：指定go语言的访问类 * plugins：指定依赖的插件\r\n这个bash会把生成的go代码写到hellopb目录下。</p>\r\n<h3 id=\"定义服务端\">定义服务端</h3>\r\n<p>我们需要去实现<strong>hello.proto</strong>中的<code>helloService</code>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;context&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;google.golang.org/grpc&quot;</span><br><span class=\"line\">\t&quot;grpc-test/hellopb&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;net&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type server struct &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (*server) Hello(ctx context.Context, request *hellopb.HelloRequest) (*hellopb.HelloResponse, error) &#123;</span><br><span class=\"line\">\tname := request.Name</span><br><span class=\"line\">\tresponse := &amp;hellopb.HelloResponse&#123;</span><br><span class=\"line\">\t\tGreeting: &quot;Hello &quot; + name,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn response, nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\taddress := &quot;0.0.0.0:50051&quot;</span><br><span class=\"line\">\tlis, err := net.Listen(&quot;tcp&quot;, address)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(&quot;Error %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(&quot;Server is listening on %v ...&quot;, address)</span><br><span class=\"line\"></span><br><span class=\"line\">\ts := grpc.NewServer()</span><br><span class=\"line\">\thellopb.RegisterHelloServiceServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\ts.Serve(lis)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"定义客户端\">定义客户端</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;context&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;grpc-test/hellopb&quot;</span><br><span class=\"line\">\t&quot;google.golang.org/grpc&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tfmt.Println(&quot;Hello client ...&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\topts := grpc.WithInsecure()</span><br><span class=\"line\">\tcc, err := grpc.Dial(&quot;localhost:50051&quot;, opts)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdefer cc.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tclient := hellopb.NewHelloServiceClient(cc)</span><br><span class=\"line\">\trequest := &amp;hellopb.HelloRequest&#123;Name: &quot;Jeremy&quot;, Age: 18&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tresp, _ := client.Hello(context.Background(), request)</span><br><span class=\"line\">\tfmt.Printf(&quot;Receive response =&gt; [%v]&quot;, resp.Greeting)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>参考： * <a\r\nhref=\"https://www.cnblogs.com/chenqionghe/p/12394845.html\">gRPC详细入门教程，Golang/Python/PHP多语言讲解</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"grpc是什么\">gRPC是什么</h2>\r\n<p><a href=\"(https://grpc.io/)\">官网</a>如此写到 &gt; A\r\nhigh-performance, open source universal RPC framework</p>\r\n<p>其实，gRPC是一个高性能的，通用的，面向服务端和移动端，基于 HTTP/2\r\n设计的RPC框架。</p>","more":"<h2 id=\"rpc框架是什么\">RPC框架是什么？</h2>\r\n<p>RPC\r\n框架说白了就是让你可以像调用本地方法一样调用远程服务提供的方法，而不需要关心底层的通信细节。简单地说就让远程服务调用更加简单、透明。\r\nRPC框架包含了客户端（Client）和服务端（Server）<br />\r\n常见的RPC框架有 * gRPC。谷歌出品 * Thrift。Apache出品 *\r\nDubbo。阿里出品，也是一个微服务框架</p>\r\n<h2 id=\"grpc的特性\">gRPC的特性</h2>\r\n<p>看<a href=\"https://grpc.io/\">官方文档</a>的介绍，有以下4点特性： 1.\r\n使用Protocal Buffers这个强大的结构数据序列化工具 2. gRPC可以跨语言使用\r\n3. 安装简单，扩展方便（用该框架每秒可达到百万个RPC） 4.\r\n基于HTTP2协议</p>\r\n<h2 id=\"grpc使用流程\">gRPC使用流程</h2>\r\n<ul>\r\n<li>定义标准的proto文件</li>\r\n<li>生成标准代码（用<code>protoc</code>工具）</li>\r\n<li>服务端使用生成的代码提供服务</li>\r\n<li>客户端使用生成的代码调用服务</li>\r\n</ul>\r\n<h2 id=\"golang实践\">Golang实践</h2>\r\n<h3 id=\"安装protoc\">安装protoc</h3>\r\n<p>首先，我们需要安装<code>protoc</code>，这个工具是<code>Protocol Buffer</code>的编译器，把proto文件翻译成不同语言（Java，Go等）。<br />\r\n地址：<a\r\nhref=\"https://github.com/protocolbuffers/protobuf/releases\">protobuf/releases</a><br />\r\n解压把bin目录下<strong>protoc</strong>文件放到/usr/local/bin目录下即可。</p>\r\n<h3 id=\"安装-protoc-gen-go\">安装 protoc-gen-go</h3>\r\n<p><code>protoc-gen-go</code>是Go的protoc编译插件，protobuf内置了许多高级语言的编译器，但没有Go的。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ protoc -h</span><br><span class=\"line\">...</span><br><span class=\"line\">--cpp_out=OUT_DIR           Generate C++ header and source.</span><br><span class=\"line\">  --csharp_out=OUT_DIR        Generate C# source file.</span><br><span class=\"line\">  --java_out=OUT_DIR          Generate Java source file.</span><br><span class=\"line\">  --js_out=OUT_DIR            Generate JavaScript source.</span><br><span class=\"line\">  --objc_out=OUT_DIR          Generate Objective C header and source.</span><br><span class=\"line\">  --php_out=OUT_DIR           Generate PHP source file.</span><br><span class=\"line\">  --python_out=OUT_DIR        Generate Python source file.</span><br><span class=\"line\">  --ruby_out=OUT_DIR          Generate Ruby source file.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\r\n我们借助<code>Go Modules</code>来安装，新建一个目录grpc-test，在目录下执行<code>go mod init grpc-test</code>创建一个Module<br />\r\n因为墙的原因，我们在<code>go get</code>之前要设置proxy（或者把<code>GOPROXY</code>设置到<code>.bashrc</code>文件中）\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure> 然后执行</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure>\r\n<p>执行完就可以在<code>$GOPATH</code>的bin目录下看到<strong>protoc-gen-go</strong>文件。</p>\r\n<h3 id=\"定义服务\">定义服务</h3>\r\n<p>在grpc-test目录下新建一个protos的目录，写入<strong>hello.proto</strong>文件\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">package hello;</span><br><span class=\"line\">option go_package = &quot;hellopb&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">message helloRequest &#123;</span><br><span class=\"line\">    string name = 1;</span><br><span class=\"line\">    int64 age  = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message helloResponse &#123;</span><br><span class=\"line\">    string greeting = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">service helloService &#123;</span><br><span class=\"line\">    rpc Hello(helloRequest) returns (helloResponse) &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> <code>helloService</code>就是给外部调用的服务<br />\r\n然后我们利用<code>protoc</code>工具把 <strong>.proto</strong>\r\n文件翻译成需要语言的代码（这里是go）<br />\r\n<code>gen.sh</code>文件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">protoDir=&quot;./protos&quot;</span><br><span class=\"line\">outDir=&quot;./grpc&quot;</span><br><span class=\"line\">protoc -I $&#123;protoDir&#125;/ $&#123;protoDir&#125;/*proto --go_out=plugins=grpc:$&#123;outDir&#125;</span><br></pre></td></tr></table></figure> * -I：\r\n指定import路径，可以指定多个-I参数，编译时按顺序查找，不指定默认当前目录\r\n* --go_out：指定go语言的访问类 * plugins：指定依赖的插件\r\n这个bash会把生成的go代码写到hellopb目录下。</p>\r\n<h3 id=\"定义服务端\">定义服务端</h3>\r\n<p>我们需要去实现<strong>hello.proto</strong>中的<code>helloService</code>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;context&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;google.golang.org/grpc&quot;</span><br><span class=\"line\">\t&quot;grpc-test/hellopb&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;net&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type server struct &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (*server) Hello(ctx context.Context, request *hellopb.HelloRequest) (*hellopb.HelloResponse, error) &#123;</span><br><span class=\"line\">\tname := request.Name</span><br><span class=\"line\">\tresponse := &amp;hellopb.HelloResponse&#123;</span><br><span class=\"line\">\t\tGreeting: &quot;Hello &quot; + name,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn response, nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\taddress := &quot;0.0.0.0:50051&quot;</span><br><span class=\"line\">\tlis, err := net.Listen(&quot;tcp&quot;, address)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(&quot;Error %v&quot;, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(&quot;Server is listening on %v ...&quot;, address)</span><br><span class=\"line\"></span><br><span class=\"line\">\ts := grpc.NewServer()</span><br><span class=\"line\">\thellopb.RegisterHelloServiceServer(s, &amp;server&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\ts.Serve(lis)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"定义客户端\">定义客户端</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;context&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;grpc-test/hellopb&quot;</span><br><span class=\"line\">\t&quot;google.golang.org/grpc&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tfmt.Println(&quot;Hello client ...&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\topts := grpc.WithInsecure()</span><br><span class=\"line\">\tcc, err := grpc.Dial(&quot;localhost:50051&quot;, opts)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdefer cc.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tclient := hellopb.NewHelloServiceClient(cc)</span><br><span class=\"line\">\trequest := &amp;hellopb.HelloRequest&#123;Name: &quot;Jeremy&quot;, Age: 18&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tresp, _ := client.Hello(context.Background(), request)</span><br><span class=\"line\">\tfmt.Printf(&quot;Receive response =&gt; [%v]&quot;, resp.Greeting)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>参考： * <a\r\nhref=\"https://www.cnblogs.com/chenqionghe/p/12394845.html\">gRPC详细入门教程，Golang/Python/PHP多语言讲解</a></p>"},{"title":"gdb调试简单使用","author":"Salamander","date":"2020-07-02T03:00:00.000Z","_content":"## gdb\ngdb 是 UNIX 及 UNIX-like 下的调试工具，在 Linux 下一般都直接在命令行中用 gdb 来调试程序，相比 Windows 上的集成开发环境 IDE 提供的图形界面调试，一开始使用 gdb 调试可能会让你感觉很难适应，但是只要熟悉了 gdb 调试的常用命令，调试出程序会很有成就感，一方面因为这些命令就类似图形界面调试按钮背后的逻辑，另一方面用命令行来调试程序，逼格瞬间就上了一个档次，这次就跟大家分享 gdb 调试的基本技术和 15 个常用调试命令。\n\n<!-- more -->\n\n## 使用\n\n### gdb快捷键说明\n ```\n 一些快捷命令\n\nl – list\np – print print {variable}  //打印变量\nc – continue           //继续执行\ns – step          \nb - break break line_number/break [file_name]:line_number/break [file_name]:func_name       //设置断点\nr - run                    //执行文件\n```\n\n### 使用\n#### 编译可以调试的程序\n这是本次要调试的 hello.c 程序，非常简单：\n```\n#include <stdio.h>\n\nint add(int x, int y) {\n\treturn x + y;\n}\n\nint main() {\n\tint a = 1;\n\tint b = 2;\n\tprintf(\"a = %d\\n\", a);\n\tprintf(\"b = %d\\n\", b);\n\n\tint c = add(a, b);\n\tprintf(\"%d + %d = %d\\n\", a, b, c);\n\treturn 0;\n}\n```\n我们平常使用 gcc 编译的程序如果不加 [-g] 选项：\n```\ngcc hello.c -o hello\n```\ngdb 会提示该可执行文件没有调试符号，不能调试：\n```\ngdb hello\n...\nReading symbols from hello...(no debugging symbols found)...done.\n...\n```\n如果需要让程序可以调试，就**必须在编译的时候加上 ** `[-g]` 参数\n\n#### 载入要调试的程序\n使用如下的命令来载入可执行文件 hello 到 gdb 中：\n```\ngdb hello\n```\n载入成功，gdb 会打印一段提示信息，并且命令行前缀变为 (gdb)，下面是我的 Ubuntu 输出的信息：\n```\nGNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git\nCopyright (C) 2018 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from hello...done.\n(gdb) \n```\n注，**按 q 退出 gdb**  \n\n方法二 - 使用 gdb 提供的 file 命令  \n第二种方法是在 gdb 环境中使用 file 命令，我们需要先进入 gdb 环境下：\n```\ngdb\n```\n使用 file hello 载入待调试程序：\n```\n...\n(gdb) file hello\nReading symbols from hello...done.\n(gdb) q\n```\n\n#### 查看调试程序\n在 gdb 下查看调试程序使用命令 `list` 或简写 `l`，「回车」列出后面程序：\n```\n(gdb) list\n1       #include <stdio.h>\n2\n3       int add(int x, int y) {\n4               return x + y;\n5       }\n6\n7       int main() {\n8               int a = 1;\n9               int b = 2;\n10              printf(\"a = %d\\n\", a);\n(gdb) \n```\n\n#### 添加断点\n在 gdb 下添加断点使用命令 `break` 或简写 `b`，有下面几个常见用法（这里统一用 `b`）：\n1. b function_name\n2. b row_num\n3. b file_name:row_num\n4. b row_num if condition\n\n比如我们以第一个为例，在 `main` 函数上添加断点：\n```\n(gdb) b main\nBreakpoint 1 at 0x666: file hello.c, line 8.\n```\n打印的信息告诉我们在 hello.c 文件的第 8 行，地址 0x666 处添加了一个断点，那如何查看断点呢？  \n#### 查看断点\n在 gdb 下查看断点使用命令 `info break` 或简写 `i b`，比如查看刚才打的断点：\n```\n(gdb) i b\nNum     Type           Disp Enb Address            What\n1       breakpoint     keep y   0x0000000000000666 in main at hello.c:8\n```\n\n#### 删除断点\n在 gdb 下删除断点使用命令 delete 断点 Num 或简写 d Num，比如删除刚才的 Num = 1 的断点：\n```\n(gdb) d 1\n(gdb) i b\nNo breakpoints or watchpoints.\n```\n删除后再次查看断点，提示当前没有断点，说明删除成功啦，下面来运行程序试试。\n\n\n#### 运行程序\n在 gdb 下使用命令 run 或简写 r 来运行当前载入的程序：\n```\n(gdb) r\nStarting program: /home/salamander/文档/test/hello \na = 1\nb = 2\n1 + 2 = 3\n[Inferior 1 (process 16249) exited normally]\n```\n我这次没有添加断点，程序全速运行，然后正常退出了。\n\n#### 单步执行下一步\n在 gdb 下使用命令 `next` 或简写 `n` 来单步执行下一步，假设我们在 `main` 打了断点：\n```\n(gdb) b main\nBreakpoint 1 at 0x555555554666: file hello.c, line 8.\n(gdb) r\nStarting program: /home/salamander/文档/test/hello \n\nBreakpoint 1, main () at hello.c:8\n8               int a = 1;\n(gdb) n\n9               int b = 2;\n```\n可以看到当前停在 int a = 1; 这一行，按 n 执行了下一句代码 `int b = 2;`\n\n\n#### 打印变量\n在 gdb 中使用命令 print var 或简写 p var 来打印一个变量或者函数的返回值，在上述gdb中打印 a 的值：\n```\n(gdb) b main\nBreakpoint 1 at 0x555555554666: file hello.c, line 8.\n(gdb) r\nStarting program: /home/salamander/文档/test/hello \n\nBreakpoint 1, main () at hello.c:8\n8               int a = 1;\n(gdb) n\n9               int b = 2;\n(gdb) n\n10              printf(\"a = %d\\n\", a);\n(gdb) p a\n$1 = 1\n```\n\n\n\n参考：\n* [Linux 高级编程 - 15 个 gdb 调试基础命令](https://dlonng.com/posts/gdb)","source":"_posts/gdb_use.md","raw":"title: gdb调试简单使用\nauthor: Salamander\ntags:\n  - gdb\n  - Linux\ncategories:\n  - Linux\ndate: 2020-07-02 11:00:00\n---\n## gdb\ngdb 是 UNIX 及 UNIX-like 下的调试工具，在 Linux 下一般都直接在命令行中用 gdb 来调试程序，相比 Windows 上的集成开发环境 IDE 提供的图形界面调试，一开始使用 gdb 调试可能会让你感觉很难适应，但是只要熟悉了 gdb 调试的常用命令，调试出程序会很有成就感，一方面因为这些命令就类似图形界面调试按钮背后的逻辑，另一方面用命令行来调试程序，逼格瞬间就上了一个档次，这次就跟大家分享 gdb 调试的基本技术和 15 个常用调试命令。\n\n<!-- more -->\n\n## 使用\n\n### gdb快捷键说明\n ```\n 一些快捷命令\n\nl – list\np – print print {variable}  //打印变量\nc – continue           //继续执行\ns – step          \nb - break break line_number/break [file_name]:line_number/break [file_name]:func_name       //设置断点\nr - run                    //执行文件\n```\n\n### 使用\n#### 编译可以调试的程序\n这是本次要调试的 hello.c 程序，非常简单：\n```\n#include <stdio.h>\n\nint add(int x, int y) {\n\treturn x + y;\n}\n\nint main() {\n\tint a = 1;\n\tint b = 2;\n\tprintf(\"a = %d\\n\", a);\n\tprintf(\"b = %d\\n\", b);\n\n\tint c = add(a, b);\n\tprintf(\"%d + %d = %d\\n\", a, b, c);\n\treturn 0;\n}\n```\n我们平常使用 gcc 编译的程序如果不加 [-g] 选项：\n```\ngcc hello.c -o hello\n```\ngdb 会提示该可执行文件没有调试符号，不能调试：\n```\ngdb hello\n...\nReading symbols from hello...(no debugging symbols found)...done.\n...\n```\n如果需要让程序可以调试，就**必须在编译的时候加上 ** `[-g]` 参数\n\n#### 载入要调试的程序\n使用如下的命令来载入可执行文件 hello 到 gdb 中：\n```\ngdb hello\n```\n载入成功，gdb 会打印一段提示信息，并且命令行前缀变为 (gdb)，下面是我的 Ubuntu 输出的信息：\n```\nGNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git\nCopyright (C) 2018 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from hello...done.\n(gdb) \n```\n注，**按 q 退出 gdb**  \n\n方法二 - 使用 gdb 提供的 file 命令  \n第二种方法是在 gdb 环境中使用 file 命令，我们需要先进入 gdb 环境下：\n```\ngdb\n```\n使用 file hello 载入待调试程序：\n```\n...\n(gdb) file hello\nReading symbols from hello...done.\n(gdb) q\n```\n\n#### 查看调试程序\n在 gdb 下查看调试程序使用命令 `list` 或简写 `l`，「回车」列出后面程序：\n```\n(gdb) list\n1       #include <stdio.h>\n2\n3       int add(int x, int y) {\n4               return x + y;\n5       }\n6\n7       int main() {\n8               int a = 1;\n9               int b = 2;\n10              printf(\"a = %d\\n\", a);\n(gdb) \n```\n\n#### 添加断点\n在 gdb 下添加断点使用命令 `break` 或简写 `b`，有下面几个常见用法（这里统一用 `b`）：\n1. b function_name\n2. b row_num\n3. b file_name:row_num\n4. b row_num if condition\n\n比如我们以第一个为例，在 `main` 函数上添加断点：\n```\n(gdb) b main\nBreakpoint 1 at 0x666: file hello.c, line 8.\n```\n打印的信息告诉我们在 hello.c 文件的第 8 行，地址 0x666 处添加了一个断点，那如何查看断点呢？  \n#### 查看断点\n在 gdb 下查看断点使用命令 `info break` 或简写 `i b`，比如查看刚才打的断点：\n```\n(gdb) i b\nNum     Type           Disp Enb Address            What\n1       breakpoint     keep y   0x0000000000000666 in main at hello.c:8\n```\n\n#### 删除断点\n在 gdb 下删除断点使用命令 delete 断点 Num 或简写 d Num，比如删除刚才的 Num = 1 的断点：\n```\n(gdb) d 1\n(gdb) i b\nNo breakpoints or watchpoints.\n```\n删除后再次查看断点，提示当前没有断点，说明删除成功啦，下面来运行程序试试。\n\n\n#### 运行程序\n在 gdb 下使用命令 run 或简写 r 来运行当前载入的程序：\n```\n(gdb) r\nStarting program: /home/salamander/文档/test/hello \na = 1\nb = 2\n1 + 2 = 3\n[Inferior 1 (process 16249) exited normally]\n```\n我这次没有添加断点，程序全速运行，然后正常退出了。\n\n#### 单步执行下一步\n在 gdb 下使用命令 `next` 或简写 `n` 来单步执行下一步，假设我们在 `main` 打了断点：\n```\n(gdb) b main\nBreakpoint 1 at 0x555555554666: file hello.c, line 8.\n(gdb) r\nStarting program: /home/salamander/文档/test/hello \n\nBreakpoint 1, main () at hello.c:8\n8               int a = 1;\n(gdb) n\n9               int b = 2;\n```\n可以看到当前停在 int a = 1; 这一行，按 n 执行了下一句代码 `int b = 2;`\n\n\n#### 打印变量\n在 gdb 中使用命令 print var 或简写 p var 来打印一个变量或者函数的返回值，在上述gdb中打印 a 的值：\n```\n(gdb) b main\nBreakpoint 1 at 0x555555554666: file hello.c, line 8.\n(gdb) r\nStarting program: /home/salamander/文档/test/hello \n\nBreakpoint 1, main () at hello.c:8\n8               int a = 1;\n(gdb) n\n9               int b = 2;\n(gdb) n\n10              printf(\"a = %d\\n\", a);\n(gdb) p a\n$1 = 1\n```\n\n\n\n参考：\n* [Linux 高级编程 - 15 个 gdb 调试基础命令](https://dlonng.com/posts/gdb)","slug":"gdb_use","published":1,"updated":"2023-03-21T02:48:19.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40ld002l2o3ma3q9bil6","content":"<h2 id=\"gdb\">gdb</h2>\r\n<p>gdb 是 UNIX 及 UNIX-like 下的调试工具，在 Linux\r\n下一般都直接在命令行中用 gdb 来调试程序，相比 Windows 上的集成开发环境\r\nIDE 提供的图形界面调试，一开始使用 gdb\r\n调试可能会让你感觉很难适应，但是只要熟悉了 gdb\r\n调试的常用命令，调试出程序会很有成就感，一方面因为这些命令就类似图形界面调试按钮背后的逻辑，另一方面用命令行来调试程序，逼格瞬间就上了一个档次，这次就跟大家分享\r\ngdb 调试的基本技术和 15 个常用调试命令。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"使用\">使用</h2>\r\n<h3 id=\"gdb快捷键说明\">gdb快捷键说明</h3>\r\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 一些快捷命令</span><br><span class=\"line\"></span><br><span class=\"line\">l – list</span><br><span class=\"line\">p – print print &#123;variable&#125;  //打印变量</span><br><span class=\"line\">c – continue           //继续执行</span><br><span class=\"line\">s – step          </span><br><span class=\"line\">b - break break line_number/break [file_name]:line_number/break [file_name]:func_name       //设置断点</span><br><span class=\"line\">r - run                    //执行文件</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"使用-1\">使用</h3>\r\n<h4 id=\"编译可以调试的程序\">编译可以调试的程序</h4>\r\n<p>这是本次要调试的 hello.c 程序，非常简单： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int add(int x, int y) &#123;</span><br><span class=\"line\">\treturn x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tint a = 1;</span><br><span class=\"line\">\tint b = 2;</span><br><span class=\"line\">\tprintf(&quot;a = %d\\n&quot;, a);</span><br><span class=\"line\">\tprintf(&quot;b = %d\\n&quot;, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint c = add(a, b);</span><br><span class=\"line\">\tprintf(&quot;%d + %d = %d\\n&quot;, a, b, c);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 我们平常使用\r\ngcc 编译的程序如果不加 [-g] 选项： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc hello.c -o hello</span><br></pre></td></tr></table></figure> gdb\r\n会提示该可执行文件没有调试符号，不能调试： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb hello</span><br><span class=\"line\">...</span><br><span class=\"line\">Reading symbols from hello...(no debugging symbols found)...done.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\r\n如果需要让程序可以调试，就<strong>必须在编译的时候加上 </strong>\r\n<code>[-g]</code> 参数</p>\r\n<h4 id=\"载入要调试的程序\">载入要调试的程序</h4>\r\n<p>使用如下的命令来载入可执行文件 hello 到 gdb 中： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb hello</span><br></pre></td></tr></table></figure>\r\n载入成功，gdb 会打印一段提示信息，并且命令行前缀变为 (gdb)，下面是我的\r\nUbuntu 输出的信息： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git</span><br><span class=\"line\">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class=\"line\">and &quot;show warranty&quot; for details.</span><br><span class=\"line\">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class=\"line\">Type &quot;show configuration&quot; for configuration details.</span><br><span class=\"line\">For bug reporting instructions, please see:</span><br><span class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class=\"line\">Find the GDB manual and other documentation resources online at:</span><br><span class=\"line\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class=\"line\">For help, type &quot;help&quot;.</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class=\"line\">Reading symbols from hello...done.</span><br><span class=\"line\">(gdb) </span><br></pre></td></tr></table></figure> 注，<strong>按 q 退出 gdb</strong></p>\r\n<p>方法二 - 使用 gdb 提供的 file 命令<br />\r\n第二种方法是在 gdb 环境中使用 file 命令，我们需要先进入 gdb 环境下：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb</span><br></pre></td></tr></table></figure> 使用 file hello 载入待调试程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">(gdb) file hello</span><br><span class=\"line\">Reading symbols from hello...done.</span><br><span class=\"line\">(gdb) q</span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"查看调试程序\">查看调试程序</h4>\r\n<p>在 gdb 下查看调试程序使用命令 <code>list</code> 或简写\r\n<code>l</code>，「回车」列出后面程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) list</span><br><span class=\"line\">1       #include &lt;stdio.h&gt;</span><br><span class=\"line\">2</span><br><span class=\"line\">3       int add(int x, int y) &#123;</span><br><span class=\"line\">4               return x + y;</span><br><span class=\"line\">5       &#125;</span><br><span class=\"line\">6</span><br><span class=\"line\">7       int main() &#123;</span><br><span class=\"line\">8               int a = 1;</span><br><span class=\"line\">9               int b = 2;</span><br><span class=\"line\">10              printf(&quot;a = %d\\n&quot;, a);</span><br><span class=\"line\">(gdb) </span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"添加断点\">添加断点</h4>\r\n<p>在 gdb 下添加断点使用命令 <code>break</code> 或简写\r\n<code>b</code>，有下面几个常见用法（这里统一用 <code>b</code>）： 1. b\r\nfunction_name 2. b row_num 3. b file_name:row_num 4. b row_num if\r\ncondition</p>\r\n<p>比如我们以第一个为例，在 <code>main</code> 函数上添加断点：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) b main</span><br><span class=\"line\">Breakpoint 1 at 0x666: file hello.c, line 8.</span><br></pre></td></tr></table></figure> 打印的信息告诉我们在 hello.c 文件的第 8 行，地址 0x666\r\n处添加了一个断点，那如何查看断点呢？<br />\r\n#### 查看断点 在 gdb 下查看断点使用命令 <code>info break</code> 或简写\r\n<code>i b</code>，比如查看刚才打的断点： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) i b</span><br><span class=\"line\">Num     Type           Disp Enb Address            What</span><br><span class=\"line\">1       breakpoint     keep y   0x0000000000000666 in main at hello.c:8</span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"删除断点\">删除断点</h4>\r\n<p>在 gdb 下删除断点使用命令 delete 断点 Num 或简写 d\r\nNum，比如删除刚才的 Num = 1 的断点： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) d 1</span><br><span class=\"line\">(gdb) i b</span><br><span class=\"line\">No breakpoints or watchpoints.</span><br></pre></td></tr></table></figure>\r\n删除后再次查看断点，提示当前没有断点，说明删除成功啦，下面来运行程序试试。</p>\r\n<h4 id=\"运行程序\">运行程序</h4>\r\n<p>在 gdb 下使用命令 run 或简写 r 来运行当前载入的程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) r</span><br><span class=\"line\">Starting program: /home/salamander/文档/test/hello </span><br><span class=\"line\">a = 1</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">1 + 2 = 3</span><br><span class=\"line\">[Inferior 1 (process 16249) exited normally]</span><br></pre></td></tr></table></figure>\r\n我这次没有添加断点，程序全速运行，然后正常退出了。</p>\r\n<h4 id=\"单步执行下一步\">单步执行下一步</h4>\r\n<p>在 gdb 下使用命令 <code>next</code> 或简写 <code>n</code>\r\n来单步执行下一步，假设我们在 <code>main</code> 打了断点： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) b main</span><br><span class=\"line\">Breakpoint 1 at 0x555555554666: file hello.c, line 8.</span><br><span class=\"line\">(gdb) r</span><br><span class=\"line\">Starting program: /home/salamander/文档/test/hello </span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint 1, main () at hello.c:8</span><br><span class=\"line\">8               int a = 1;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">9               int b = 2;</span><br></pre></td></tr></table></figure>\r\n可以看到当前停在 int a = 1; 这一行，按 n 执行了下一句代码\r\n<code>int b = 2;</code></p>\r\n<h4 id=\"打印变量\">打印变量</h4>\r\n<p>在 gdb 中使用命令 print var 或简写 p var\r\n来打印一个变量或者函数的返回值，在上述gdb中打印 a 的值：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) b main</span><br><span class=\"line\">Breakpoint 1 at 0x555555554666: file hello.c, line 8.</span><br><span class=\"line\">(gdb) r</span><br><span class=\"line\">Starting program: /home/salamander/文档/test/hello </span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint 1, main () at hello.c:8</span><br><span class=\"line\">8               int a = 1;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">9               int b = 2;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">10              printf(&quot;a = %d\\n&quot;, a);</span><br><span class=\"line\">(gdb) p a</span><br><span class=\"line\">$1 = 1</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a href=\"https://dlonng.com/posts/gdb\">Linux 高级编程 - 15\r\n个 gdb 调试基础命令</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"gdb\">gdb</h2>\r\n<p>gdb 是 UNIX 及 UNIX-like 下的调试工具，在 Linux\r\n下一般都直接在命令行中用 gdb 来调试程序，相比 Windows 上的集成开发环境\r\nIDE 提供的图形界面调试，一开始使用 gdb\r\n调试可能会让你感觉很难适应，但是只要熟悉了 gdb\r\n调试的常用命令，调试出程序会很有成就感，一方面因为这些命令就类似图形界面调试按钮背后的逻辑，另一方面用命令行来调试程序，逼格瞬间就上了一个档次，这次就跟大家分享\r\ngdb 调试的基本技术和 15 个常用调试命令。</p>","more":"<h2 id=\"使用\">使用</h2>\r\n<h3 id=\"gdb快捷键说明\">gdb快捷键说明</h3>\r\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 一些快捷命令</span><br><span class=\"line\"></span><br><span class=\"line\">l – list</span><br><span class=\"line\">p – print print &#123;variable&#125;  //打印变量</span><br><span class=\"line\">c – continue           //继续执行</span><br><span class=\"line\">s – step          </span><br><span class=\"line\">b - break break line_number/break [file_name]:line_number/break [file_name]:func_name       //设置断点</span><br><span class=\"line\">r - run                    //执行文件</span><br></pre></td></tr></table></figure></p>\r\n<h3 id=\"使用-1\">使用</h3>\r\n<h4 id=\"编译可以调试的程序\">编译可以调试的程序</h4>\r\n<p>这是本次要调试的 hello.c 程序，非常简单： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int add(int x, int y) &#123;</span><br><span class=\"line\">\treturn x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tint a = 1;</span><br><span class=\"line\">\tint b = 2;</span><br><span class=\"line\">\tprintf(&quot;a = %d\\n&quot;, a);</span><br><span class=\"line\">\tprintf(&quot;b = %d\\n&quot;, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tint c = add(a, b);</span><br><span class=\"line\">\tprintf(&quot;%d + %d = %d\\n&quot;, a, b, c);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 我们平常使用\r\ngcc 编译的程序如果不加 [-g] 选项： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc hello.c -o hello</span><br></pre></td></tr></table></figure> gdb\r\n会提示该可执行文件没有调试符号，不能调试： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb hello</span><br><span class=\"line\">...</span><br><span class=\"line\">Reading symbols from hello...(no debugging symbols found)...done.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\r\n如果需要让程序可以调试，就<strong>必须在编译的时候加上 </strong>\r\n<code>[-g]</code> 参数</p>\r\n<h4 id=\"载入要调试的程序\">载入要调试的程序</h4>\r\n<p>使用如下的命令来载入可执行文件 hello 到 gdb 中： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb hello</span><br></pre></td></tr></table></figure>\r\n载入成功，gdb 会打印一段提示信息，并且命令行前缀变为 (gdb)，下面是我的\r\nUbuntu 输出的信息： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git</span><br><span class=\"line\">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class=\"line\">and &quot;show warranty&quot; for details.</span><br><span class=\"line\">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class=\"line\">Type &quot;show configuration&quot; for configuration details.</span><br><span class=\"line\">For bug reporting instructions, please see:</span><br><span class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class=\"line\">Find the GDB manual and other documentation resources online at:</span><br><span class=\"line\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class=\"line\">For help, type &quot;help&quot;.</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class=\"line\">Reading symbols from hello...done.</span><br><span class=\"line\">(gdb) </span><br></pre></td></tr></table></figure> 注，<strong>按 q 退出 gdb</strong></p>\r\n<p>方法二 - 使用 gdb 提供的 file 命令<br />\r\n第二种方法是在 gdb 环境中使用 file 命令，我们需要先进入 gdb 环境下：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb</span><br></pre></td></tr></table></figure> 使用 file hello 载入待调试程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">(gdb) file hello</span><br><span class=\"line\">Reading symbols from hello...done.</span><br><span class=\"line\">(gdb) q</span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"查看调试程序\">查看调试程序</h4>\r\n<p>在 gdb 下查看调试程序使用命令 <code>list</code> 或简写\r\n<code>l</code>，「回车」列出后面程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) list</span><br><span class=\"line\">1       #include &lt;stdio.h&gt;</span><br><span class=\"line\">2</span><br><span class=\"line\">3       int add(int x, int y) &#123;</span><br><span class=\"line\">4               return x + y;</span><br><span class=\"line\">5       &#125;</span><br><span class=\"line\">6</span><br><span class=\"line\">7       int main() &#123;</span><br><span class=\"line\">8               int a = 1;</span><br><span class=\"line\">9               int b = 2;</span><br><span class=\"line\">10              printf(&quot;a = %d\\n&quot;, a);</span><br><span class=\"line\">(gdb) </span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"添加断点\">添加断点</h4>\r\n<p>在 gdb 下添加断点使用命令 <code>break</code> 或简写\r\n<code>b</code>，有下面几个常见用法（这里统一用 <code>b</code>）： 1. b\r\nfunction_name 2. b row_num 3. b file_name:row_num 4. b row_num if\r\ncondition</p>\r\n<p>比如我们以第一个为例，在 <code>main</code> 函数上添加断点：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) b main</span><br><span class=\"line\">Breakpoint 1 at 0x666: file hello.c, line 8.</span><br></pre></td></tr></table></figure> 打印的信息告诉我们在 hello.c 文件的第 8 行，地址 0x666\r\n处添加了一个断点，那如何查看断点呢？<br />\r\n#### 查看断点 在 gdb 下查看断点使用命令 <code>info break</code> 或简写\r\n<code>i b</code>，比如查看刚才打的断点： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) i b</span><br><span class=\"line\">Num     Type           Disp Enb Address            What</span><br><span class=\"line\">1       breakpoint     keep y   0x0000000000000666 in main at hello.c:8</span><br></pre></td></tr></table></figure></p>\r\n<h4 id=\"删除断点\">删除断点</h4>\r\n<p>在 gdb 下删除断点使用命令 delete 断点 Num 或简写 d\r\nNum，比如删除刚才的 Num = 1 的断点： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) d 1</span><br><span class=\"line\">(gdb) i b</span><br><span class=\"line\">No breakpoints or watchpoints.</span><br></pre></td></tr></table></figure>\r\n删除后再次查看断点，提示当前没有断点，说明删除成功啦，下面来运行程序试试。</p>\r\n<h4 id=\"运行程序\">运行程序</h4>\r\n<p>在 gdb 下使用命令 run 或简写 r 来运行当前载入的程序： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) r</span><br><span class=\"line\">Starting program: /home/salamander/文档/test/hello </span><br><span class=\"line\">a = 1</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">1 + 2 = 3</span><br><span class=\"line\">[Inferior 1 (process 16249) exited normally]</span><br></pre></td></tr></table></figure>\r\n我这次没有添加断点，程序全速运行，然后正常退出了。</p>\r\n<h4 id=\"单步执行下一步\">单步执行下一步</h4>\r\n<p>在 gdb 下使用命令 <code>next</code> 或简写 <code>n</code>\r\n来单步执行下一步，假设我们在 <code>main</code> 打了断点： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) b main</span><br><span class=\"line\">Breakpoint 1 at 0x555555554666: file hello.c, line 8.</span><br><span class=\"line\">(gdb) r</span><br><span class=\"line\">Starting program: /home/salamander/文档/test/hello </span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint 1, main () at hello.c:8</span><br><span class=\"line\">8               int a = 1;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">9               int b = 2;</span><br></pre></td></tr></table></figure>\r\n可以看到当前停在 int a = 1; 这一行，按 n 执行了下一句代码\r\n<code>int b = 2;</code></p>\r\n<h4 id=\"打印变量\">打印变量</h4>\r\n<p>在 gdb 中使用命令 print var 或简写 p var\r\n来打印一个变量或者函数的返回值，在上述gdb中打印 a 的值：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) b main</span><br><span class=\"line\">Breakpoint 1 at 0x555555554666: file hello.c, line 8.</span><br><span class=\"line\">(gdb) r</span><br><span class=\"line\">Starting program: /home/salamander/文档/test/hello </span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint 1, main () at hello.c:8</span><br><span class=\"line\">8               int a = 1;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">9               int b = 2;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">10              printf(&quot;a = %d\\n&quot;, a);</span><br><span class=\"line\">(gdb) p a</span><br><span class=\"line\">$1 = 1</span><br></pre></td></tr></table></figure></p>\r\n<p>参考： * <a href=\"https://dlonng.com/posts/gdb\">Linux 高级编程 - 15\r\n个 gdb 调试基础命令</a></p>"},{"title":"go并发之WaitGroup使用","author":"Salamander","date":"2020-06-15T12:00:00.000Z","_content":"## 需求\n有时候我们会开启很多线程（go中是协程）去做一件事件，然后希望主线程等待这些线程都完成后才结束，一个简单的想法是，我在主线程sleep一段时间，譬如3s钟，但是明显这样的做法不科学，因为这些任务很有可能在200ms内就都完成了。如果你用过Java的话，那你很快就会想到`CountDownLatch`类，在Go中，也有类似的结构，就是本文要讨论的`WaitGroup`。\n\n<!-- more -->\n\n\n## 使用\n示例代码\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc main() {\n\tlearnWaitGroup()\n}\n\nfunc learnWaitGroup() {\n\tnum := 10\n\twg := sync.WaitGroup{}\n\twg.Add(num)\n\n\tfor i := 0; i < num; i++ {\n\t\tgo func(idx int) {\n\t\t\tfmt.Printf(\"%d Doing something...\\n\", idx)\n\t\t\ttime.Sleep(time.Second)\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\n\twg.Wait()\n\tfmt.Println(\"All is done...\")\n}\n```\n`WaitGroup` 对象内部有一个计数器，最初从0开始，它有三个方法：`Add()`, `Done()`, `Wait()` 用来控制计数器的数量。`Add(n)` 把计数器设置为n ，`Done()` 每次把计数器-1 ，`Wait()` 会阻塞代码的运行，直到计数器地值减为0。  \n\n\n## 注意问题\n`WaitGroup`对象不是一个引用类型，所以在作为参数的时候，你应该要使用指针。在上面的示例提取一个任务函数\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc main() {\n\tlearnWaitGroup()\n}\n\nfunc learnWaitGroup() {\n\tnum := 10\n\twg := sync.WaitGroup{}\n\twg.Add(num)\n\n\tfor i := 0; i < num; i++ {\n\t\tgo runTask(i, &wg)\n\t}\n\n\twg.Wait()\n\tfmt.Println(\"All is done...\")\n}\n\nfunc runTask(idx int, wg *sync.WaitGroup) {\n\tfmt.Printf(\"%d Doing something...\\n\", idx)\n\ttime.Sleep(time.Second)\n\twg.Done()\n}\n```\n\n## Java类比\nJava中可以使用`CountDownLatch`类实现这个功能，它暴露出三个方法：\n```\n// 调用此方法的线程会被阻塞，直到 CountDownLatch 的 count 为 0\npublic void await() throws InterruptedException\n\n// 会将 count 减 1，直至为 0\npublic void countDown() \n```\n`countDown()` 跟`WaitGroup`的`Done()`函数类似，我们还是很容易实现的\n```\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            testCountDownLatch();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n    \n    static class TaskThread extends Thread {\n        \n        CountDownLatch latch;\n        \n        public TaskThread(CountDownLatch latch) {\n            this.latch = latch;\n        }\n        \n        @Override\n        public void run() {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                System.out.println(getName() + \" Task is Done\");\n                latch.countDown();\n            }\n        }\n    }\n\n    public static void testCountDownLatch() throws InterruptedException {\n        final int threadNum = 10;\n        CountDownLatch latch = new CountDownLatch(threadNum);\n        for(int i = 0; i < threadNum; i++) {\n            TaskThread task = new TaskThread(latch);\n            task.start();\n        }\n        \n        System.out.println(\"Task Start!\");\n        latch.await();\n        System.out.println(\"All Task is Done!\");\n    }\n}\n```","source":"_posts/go_sync_WaitGroup.md","raw":"title: go并发之WaitGroup使用\nauthor: Salamander\ntags:\n  - Go\ncategories:\n  - Go\ndate: 2020-06-15 20:00:00\n---\n## 需求\n有时候我们会开启很多线程（go中是协程）去做一件事件，然后希望主线程等待这些线程都完成后才结束，一个简单的想法是，我在主线程sleep一段时间，譬如3s钟，但是明显这样的做法不科学，因为这些任务很有可能在200ms内就都完成了。如果你用过Java的话，那你很快就会想到`CountDownLatch`类，在Go中，也有类似的结构，就是本文要讨论的`WaitGroup`。\n\n<!-- more -->\n\n\n## 使用\n示例代码\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc main() {\n\tlearnWaitGroup()\n}\n\nfunc learnWaitGroup() {\n\tnum := 10\n\twg := sync.WaitGroup{}\n\twg.Add(num)\n\n\tfor i := 0; i < num; i++ {\n\t\tgo func(idx int) {\n\t\t\tfmt.Printf(\"%d Doing something...\\n\", idx)\n\t\t\ttime.Sleep(time.Second)\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\n\twg.Wait()\n\tfmt.Println(\"All is done...\")\n}\n```\n`WaitGroup` 对象内部有一个计数器，最初从0开始，它有三个方法：`Add()`, `Done()`, `Wait()` 用来控制计数器的数量。`Add(n)` 把计数器设置为n ，`Done()` 每次把计数器-1 ，`Wait()` 会阻塞代码的运行，直到计数器地值减为0。  \n\n\n## 注意问题\n`WaitGroup`对象不是一个引用类型，所以在作为参数的时候，你应该要使用指针。在上面的示例提取一个任务函数\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc main() {\n\tlearnWaitGroup()\n}\n\nfunc learnWaitGroup() {\n\tnum := 10\n\twg := sync.WaitGroup{}\n\twg.Add(num)\n\n\tfor i := 0; i < num; i++ {\n\t\tgo runTask(i, &wg)\n\t}\n\n\twg.Wait()\n\tfmt.Println(\"All is done...\")\n}\n\nfunc runTask(idx int, wg *sync.WaitGroup) {\n\tfmt.Printf(\"%d Doing something...\\n\", idx)\n\ttime.Sleep(time.Second)\n\twg.Done()\n}\n```\n\n## Java类比\nJava中可以使用`CountDownLatch`类实现这个功能，它暴露出三个方法：\n```\n// 调用此方法的线程会被阻塞，直到 CountDownLatch 的 count 为 0\npublic void await() throws InterruptedException\n\n// 会将 count 减 1，直至为 0\npublic void countDown() \n```\n`countDown()` 跟`WaitGroup`的`Done()`函数类似，我们还是很容易实现的\n```\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            testCountDownLatch();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n    \n    static class TaskThread extends Thread {\n        \n        CountDownLatch latch;\n        \n        public TaskThread(CountDownLatch latch) {\n            this.latch = latch;\n        }\n        \n        @Override\n        public void run() {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                System.out.println(getName() + \" Task is Done\");\n                latch.countDown();\n            }\n        }\n    }\n\n    public static void testCountDownLatch() throws InterruptedException {\n        final int threadNum = 10;\n        CountDownLatch latch = new CountDownLatch(threadNum);\n        for(int i = 0; i < threadNum; i++) {\n            TaskThread task = new TaskThread(latch);\n            task.start();\n        }\n        \n        System.out.println(\"Task Start!\");\n        latch.await();\n        System.out.println(\"All Task is Done!\");\n    }\n}\n```","slug":"go_sync_WaitGroup","published":1,"updated":"2023-03-21T02:48:19.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40le002o2o3m73s96rif","content":"<h2 id=\"需求\">需求</h2>\r\n<p>有时候我们会开启很多线程（go中是协程）去做一件事件，然后希望主线程等待这些线程都完成后才结束，一个简单的想法是，我在主线程sleep一段时间，譬如3s钟，但是明显这样的做法不科学，因为这些任务很有可能在200ms内就都完成了。如果你用过Java的话，那你很快就会想到<code>CountDownLatch</code>类，在Go中，也有类似的结构，就是本文要讨论的<code>WaitGroup</code>。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"使用\">使用</h2>\r\n<p>示例代码 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;sync&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tlearnWaitGroup()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func learnWaitGroup() &#123;</span><br><span class=\"line\">\tnum := 10</span><br><span class=\"line\">\twg := sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">\twg.Add(num)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor i := 0; i &lt; num; i++ &#123;</span><br><span class=\"line\">\t\tgo func(idx int) &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(&quot;%d Doing something...\\n&quot;, idx)</span><br><span class=\"line\">\t\t\ttime.Sleep(time.Second)</span><br><span class=\"line\">\t\t\twg.Done()</span><br><span class=\"line\">\t\t&#125;(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tfmt.Println(&quot;All is done...&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> <code>WaitGroup</code>\r\n对象内部有一个计数器，最初从0开始，它有三个方法：<code>Add()</code>,\r\n<code>Done()</code>, <code>Wait()</code>\r\n用来控制计数器的数量。<code>Add(n)</code> 把计数器设置为n\r\n，<code>Done()</code> 每次把计数器-1 ，<code>Wait()</code>\r\n会阻塞代码的运行，直到计数器地值减为0。</p>\r\n<h2 id=\"注意问题\">注意问题</h2>\r\n<p><code>WaitGroup</code>对象不是一个引用类型，所以在作为参数的时候，你应该要使用指针。在上面的示例提取一个任务函数\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;sync&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tlearnWaitGroup()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func learnWaitGroup() &#123;</span><br><span class=\"line\">\tnum := 10</span><br><span class=\"line\">\twg := sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">\twg.Add(num)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor i := 0; i &lt; num; i++ &#123;</span><br><span class=\"line\">\t\tgo runTask(i, &amp;wg)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tfmt.Println(&quot;All is done...&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func runTask(idx int, wg *sync.WaitGroup) &#123;</span><br><span class=\"line\">\tfmt.Printf(&quot;%d Doing something...\\n&quot;, idx)</span><br><span class=\"line\">\ttime.Sleep(time.Second)</span><br><span class=\"line\">\twg.Done()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"java类比\">Java类比</h2>\r\n<p>Java中可以使用<code>CountDownLatch</code>类实现这个功能，它暴露出三个方法：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 调用此方法的线程会被阻塞，直到 CountDownLatch 的 count 为 0</span><br><span class=\"line\">public void await() throws InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\">// 会将 count 减 1，直至为 0</span><br><span class=\"line\">public void countDown() </span><br></pre></td></tr></table></figure> <code>countDown()</code>\r\n跟<code>WaitGroup</code>的<code>Done()</code>函数类似，我们还是很容易实现的\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            testCountDownLatch();</span><br><span class=\"line\">        &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static class TaskThread extends Thread &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        CountDownLatch latch;</span><br><span class=\"line\">        </span><br><span class=\"line\">        public TaskThread(CountDownLatch latch) &#123;</span><br><span class=\"line\">            this.latch = latch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(1000);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                System.out.println(getName() + &quot; Task is Done&quot;);</span><br><span class=\"line\">                latch.countDown();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void testCountDownLatch() throws InterruptedException &#123;</span><br><span class=\"line\">        final int threadNum = 10;</span><br><span class=\"line\">        CountDownLatch latch = new CountDownLatch(threadNum);</span><br><span class=\"line\">        for(int i = 0; i &lt; threadNum; i++) &#123;</span><br><span class=\"line\">            TaskThread task = new TaskThread(latch);</span><br><span class=\"line\">            task.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(&quot;Task Start!&quot;);</span><br><span class=\"line\">        latch.await();</span><br><span class=\"line\">        System.out.println(&quot;All Task is Done!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"需求\">需求</h2>\r\n<p>有时候我们会开启很多线程（go中是协程）去做一件事件，然后希望主线程等待这些线程都完成后才结束，一个简单的想法是，我在主线程sleep一段时间，譬如3s钟，但是明显这样的做法不科学，因为这些任务很有可能在200ms内就都完成了。如果你用过Java的话，那你很快就会想到<code>CountDownLatch</code>类，在Go中，也有类似的结构，就是本文要讨论的<code>WaitGroup</code>。</p>","more":"<h2 id=\"使用\">使用</h2>\r\n<p>示例代码 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;sync&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tlearnWaitGroup()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func learnWaitGroup() &#123;</span><br><span class=\"line\">\tnum := 10</span><br><span class=\"line\">\twg := sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">\twg.Add(num)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor i := 0; i &lt; num; i++ &#123;</span><br><span class=\"line\">\t\tgo func(idx int) &#123;</span><br><span class=\"line\">\t\t\tfmt.Printf(&quot;%d Doing something...\\n&quot;, idx)</span><br><span class=\"line\">\t\t\ttime.Sleep(time.Second)</span><br><span class=\"line\">\t\t\twg.Done()</span><br><span class=\"line\">\t\t&#125;(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tfmt.Println(&quot;All is done...&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> <code>WaitGroup</code>\r\n对象内部有一个计数器，最初从0开始，它有三个方法：<code>Add()</code>,\r\n<code>Done()</code>, <code>Wait()</code>\r\n用来控制计数器的数量。<code>Add(n)</code> 把计数器设置为n\r\n，<code>Done()</code> 每次把计数器-1 ，<code>Wait()</code>\r\n会阻塞代码的运行，直到计数器地值减为0。</p>\r\n<h2 id=\"注意问题\">注意问题</h2>\r\n<p><code>WaitGroup</code>对象不是一个引用类型，所以在作为参数的时候，你应该要使用指针。在上面的示例提取一个任务函数\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;sync&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tlearnWaitGroup()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func learnWaitGroup() &#123;</span><br><span class=\"line\">\tnum := 10</span><br><span class=\"line\">\twg := sync.WaitGroup&#123;&#125;</span><br><span class=\"line\">\twg.Add(num)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor i := 0; i &lt; num; i++ &#123;</span><br><span class=\"line\">\t\tgo runTask(i, &amp;wg)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">\tfmt.Println(&quot;All is done...&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func runTask(idx int, wg *sync.WaitGroup) &#123;</span><br><span class=\"line\">\tfmt.Printf(&quot;%d Doing something...\\n&quot;, idx)</span><br><span class=\"line\">\ttime.Sleep(time.Second)</span><br><span class=\"line\">\twg.Done()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<h2 id=\"java类比\">Java类比</h2>\r\n<p>Java中可以使用<code>CountDownLatch</code>类实现这个功能，它暴露出三个方法：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 调用此方法的线程会被阻塞，直到 CountDownLatch 的 count 为 0</span><br><span class=\"line\">public void await() throws InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\">// 会将 count 减 1，直至为 0</span><br><span class=\"line\">public void countDown() </span><br></pre></td></tr></table></figure> <code>countDown()</code>\r\n跟<code>WaitGroup</code>的<code>Done()</code>函数类似，我们还是很容易实现的\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Main &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            testCountDownLatch();</span><br><span class=\"line\">        &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static class TaskThread extends Thread &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        CountDownLatch latch;</span><br><span class=\"line\">        </span><br><span class=\"line\">        public TaskThread(CountDownLatch latch) &#123;</span><br><span class=\"line\">            this.latch = latch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void run() &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(1000);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                System.out.println(getName() + &quot; Task is Done&quot;);</span><br><span class=\"line\">                latch.countDown();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void testCountDownLatch() throws InterruptedException &#123;</span><br><span class=\"line\">        final int threadNum = 10;</span><br><span class=\"line\">        CountDownLatch latch = new CountDownLatch(threadNum);</span><br><span class=\"line\">        for(int i = 0; i &lt; threadNum; i++) &#123;</span><br><span class=\"line\">            TaskThread task = new TaskThread(latch);</span><br><span class=\"line\">            task.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(&quot;Task Start!&quot;);</span><br><span class=\"line\">        latch.await();</span><br><span class=\"line\">        System.out.println(&quot;All Task is Done!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"https深入分析","author":"Salamander","date":"2020-03-21T06:00:00.000Z","_content":"<img src=\"/images/https-click.png\" width=\"700px\" >\n\n## https\nhttps就是在http的基础上又增加了一个TLS层，它就是一个套壳协议。  \n\n<!-- more -->\n\n\n\n## 加密和解密\nhttps的发展和密码学的发展是分不开的。加密方式可以大体分为对称加密和非对称加密  \n\n* 对称加密，就是加密和解密都是用同一个秘钥，这种方式优点就是速度快，缺点就是在管理和分配秘钥的时候不安全。\n* 非对称加密算法，非对称加密有一个秘钥对，叫做公钥和私钥，私钥自己持有，公钥可以公开的发送给使用的人。使用公钥进行加密的信息，只有和其配对的私钥可以解开。目前常见的非对称加密算法是RSA，非对称的加密算法的优点是安全，因为他不需要把私钥暴露出去。 在正式的使用场景中一般都是对称加密和非对称加密结合使用，使用非对称加密完成秘钥的传递，然后使用对称秘钥进行数据加密和解密\n\n## https的简要流程\n![](https://s1.ax1x.com/2020/03/26/GpEtjs.png) \n1. 先是经典的TCP三次握手，这里不详细展开了。\n\n2. client Hello,客户端（通常是浏览器）先向服务器发出加密通信的请求\n```\n* 支持的协议版本，比如TLS 1.0版。\n* 一个客户端生成的随机数 random1，稍后用于生成\"对话密钥\"。\n* 支持的加密方法，比如RSA公钥加密。\n* 支持的压缩方法。\n```\n\n3. 服务器收到请求,然后响应 (server Hello)\n```\n* 确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。\n* 一个服务器生成的随机数random2，稍后用于生成\"对话密钥\"。\n* 确认使用的加密方法，比如RSA公钥加密。\n* 服务器证书。\n```\n\n4. 客户端收到证书之后会首先会进行验证\n```\n验证通过之后，客户端会生成一个随机数pre-master secret，然后使用证书中的公钥进行加密，然后传递给服务器端\n```  \n\n5. 服务器收到使用公钥加密的内容，在服务器端使用私钥解密之后获得随机数pre-master secret，然后根据radom1、radom2、pre-master secret通过一定的算法得出session Key和MAC算法秘钥，作为后面交互过程中使用对称秘钥。同时客户端也会使用radom1、radom2、pre-master secret，和同样的算法生成session Key和MAC算法的秘钥。  \n\n\n## https证书\n服务器发给了客户端证书，客户端是如何验证证书的**有效性**的呢？这里我们分析一下它的原理。  \n\nSSL 证书中包含的具体内容有：  \n（1）证书的发布机构CA  \n（2）证书的有效期  \n（3）公钥  \n（4）证书所有者  \n（5）签名  \n...   \nCA机构在签发证书的时候，都会使用自己的**私钥对证书进行签名**，如果我们使用的是购买的证书，那么很有可能，颁发这个证书的CA机构的公钥已经预置在操作系统中。这样**浏览器就可以使用CA机构的公钥对服务器的证书进行验签**，验签之后得到的是CA机构使用sha256得到的证书摘要，客户端就会对服务器发送过来的证书使用sha256进行哈希计算得到一份摘要，然后对比之前由CA得出来的摘要，就可以知道这个证书是不是正确的，是否被修改过。  \n**所以说原理就是因为CA机构的公钥已经预存于我们的操作系统之中。**  \n\n完整的验证过程如下：   \n 1. 首先浏览器读取证书中的证书所有者、有效期等信息进行一一校验；\n 2. 浏览器开始查找操作系统中已内置的受信任的证书发布机构CA，与服务器发来的证书中的颁发者CA比对，用于校验证书是否为合法机构颁发；\n 3. 如果找不到，浏览器就会报错，说明服务器发来的证书是不可信任的；\n 4. 如果找到，那么浏览器就会从操作系统中取出 颁发者CA 的公钥，然后对服务器发来的证书里面的签名进行解密；\n 5. 浏览器使用相同的hash算法计算出服务器发来的证书的hash值，将这个计算的hash值与证书中签名做对比；\n 6. 对比结果一致，则证明服务器发来的证书合法，没有被冒充；\n 7. 此时浏览器就可以读取证书中的公钥，用于后续加密了\n\n\n\n\n 参考：\n * [深入理解HTTPS协议](https://juejin.im/post/5a2fbe1b51882507ae25f991)\n * [HTTPS协议原理和流程分析](https://cloud.tencent.com/developer/article/1425339)","source":"_posts/https_more.md","raw":"title: https深入分析\nauthor: Salamander\ntags:\n  - https\n  - 协议\ncategories:\n  - \"protocol\\t\"\n  - https\ndate: 2020-03-21 14:00:00\n---\n<img src=\"/images/https-click.png\" width=\"700px\" >\n\n## https\nhttps就是在http的基础上又增加了一个TLS层，它就是一个套壳协议。  \n\n<!-- more -->\n\n\n\n## 加密和解密\nhttps的发展和密码学的发展是分不开的。加密方式可以大体分为对称加密和非对称加密  \n\n* 对称加密，就是加密和解密都是用同一个秘钥，这种方式优点就是速度快，缺点就是在管理和分配秘钥的时候不安全。\n* 非对称加密算法，非对称加密有一个秘钥对，叫做公钥和私钥，私钥自己持有，公钥可以公开的发送给使用的人。使用公钥进行加密的信息，只有和其配对的私钥可以解开。目前常见的非对称加密算法是RSA，非对称的加密算法的优点是安全，因为他不需要把私钥暴露出去。 在正式的使用场景中一般都是对称加密和非对称加密结合使用，使用非对称加密完成秘钥的传递，然后使用对称秘钥进行数据加密和解密\n\n## https的简要流程\n![](https://s1.ax1x.com/2020/03/26/GpEtjs.png) \n1. 先是经典的TCP三次握手，这里不详细展开了。\n\n2. client Hello,客户端（通常是浏览器）先向服务器发出加密通信的请求\n```\n* 支持的协议版本，比如TLS 1.0版。\n* 一个客户端生成的随机数 random1，稍后用于生成\"对话密钥\"。\n* 支持的加密方法，比如RSA公钥加密。\n* 支持的压缩方法。\n```\n\n3. 服务器收到请求,然后响应 (server Hello)\n```\n* 确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。\n* 一个服务器生成的随机数random2，稍后用于生成\"对话密钥\"。\n* 确认使用的加密方法，比如RSA公钥加密。\n* 服务器证书。\n```\n\n4. 客户端收到证书之后会首先会进行验证\n```\n验证通过之后，客户端会生成一个随机数pre-master secret，然后使用证书中的公钥进行加密，然后传递给服务器端\n```  \n\n5. 服务器收到使用公钥加密的内容，在服务器端使用私钥解密之后获得随机数pre-master secret，然后根据radom1、radom2、pre-master secret通过一定的算法得出session Key和MAC算法秘钥，作为后面交互过程中使用对称秘钥。同时客户端也会使用radom1、radom2、pre-master secret，和同样的算法生成session Key和MAC算法的秘钥。  \n\n\n## https证书\n服务器发给了客户端证书，客户端是如何验证证书的**有效性**的呢？这里我们分析一下它的原理。  \n\nSSL 证书中包含的具体内容有：  \n（1）证书的发布机构CA  \n（2）证书的有效期  \n（3）公钥  \n（4）证书所有者  \n（5）签名  \n...   \nCA机构在签发证书的时候，都会使用自己的**私钥对证书进行签名**，如果我们使用的是购买的证书，那么很有可能，颁发这个证书的CA机构的公钥已经预置在操作系统中。这样**浏览器就可以使用CA机构的公钥对服务器的证书进行验签**，验签之后得到的是CA机构使用sha256得到的证书摘要，客户端就会对服务器发送过来的证书使用sha256进行哈希计算得到一份摘要，然后对比之前由CA得出来的摘要，就可以知道这个证书是不是正确的，是否被修改过。  \n**所以说原理就是因为CA机构的公钥已经预存于我们的操作系统之中。**  \n\n完整的验证过程如下：   \n 1. 首先浏览器读取证书中的证书所有者、有效期等信息进行一一校验；\n 2. 浏览器开始查找操作系统中已内置的受信任的证书发布机构CA，与服务器发来的证书中的颁发者CA比对，用于校验证书是否为合法机构颁发；\n 3. 如果找不到，浏览器就会报错，说明服务器发来的证书是不可信任的；\n 4. 如果找到，那么浏览器就会从操作系统中取出 颁发者CA 的公钥，然后对服务器发来的证书里面的签名进行解密；\n 5. 浏览器使用相同的hash算法计算出服务器发来的证书的hash值，将这个计算的hash值与证书中签名做对比；\n 6. 对比结果一致，则证明服务器发来的证书合法，没有被冒充；\n 7. 此时浏览器就可以读取证书中的公钥，用于后续加密了\n\n\n\n\n 参考：\n * [深入理解HTTPS协议](https://juejin.im/post/5a2fbe1b51882507ae25f991)\n * [HTTPS协议原理和流程分析](https://cloud.tencent.com/developer/article/1425339)","slug":"https_more","published":1,"updated":"2023-03-21T02:48:19.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40lf002r2o3mck6le05k","content":"<p><img src=\"/images/https-click.png\" width=\"700px\" ></p>\r\n<h2 id=\"https\">https</h2>\r\n<p>https就是在http的基础上又增加了一个TLS层，它就是一个套壳协议。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"加密和解密\">加密和解密</h2>\r\n<p>https的发展和密码学的发展是分不开的。加密方式可以大体分为对称加密和非对称加密</p>\r\n<ul>\r\n<li>对称加密，就是加密和解密都是用同一个秘钥，这种方式优点就是速度快，缺点就是在管理和分配秘钥的时候不安全。</li>\r\n<li>非对称加密算法，非对称加密有一个秘钥对，叫做公钥和私钥，私钥自己持有，公钥可以公开的发送给使用的人。使用公钥进行加密的信息，只有和其配对的私钥可以解开。目前常见的非对称加密算法是RSA，非对称的加密算法的优点是安全，因为他不需要把私钥暴露出去。\r\n在正式的使用场景中一般都是对称加密和非对称加密结合使用，使用非对称加密完成秘钥的传递，然后使用对称秘钥进行数据加密和解密</li>\r\n</ul>\r\n<h2 id=\"https的简要流程\">https的简要流程</h2>\r\n<p><img src=\"https://s1.ax1x.com/2020/03/26/GpEtjs.png\" /> 1.\r\n先是经典的TCP三次握手，这里不详细展开了。</p>\r\n<ol start=\"2\" type=\"1\">\r\n<li><p>client Hello,客户端（通常是浏览器）先向服务器发出加密通信的请求\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 支持的协议版本，比如TLS 1.0版。</span><br><span class=\"line\">* 一个客户端生成的随机数 random1，稍后用于生成&quot;对话密钥&quot;。</span><br><span class=\"line\">* 支持的加密方法，比如RSA公钥加密。</span><br><span class=\"line\">* 支持的压缩方法。</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>服务器收到请求,然后响应 (server Hello) <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。</span><br><span class=\"line\">* 一个服务器生成的随机数random2，稍后用于生成&quot;对话密钥&quot;。</span><br><span class=\"line\">* 确认使用的加密方法，比如RSA公钥加密。</span><br><span class=\"line\">* 服务器证书。</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>客户端收到证书之后会首先会进行验证</p></li>\r\n</ol>\r\n<pre><code>验证通过之后，客户端会生成一个随机数pre-master secret，然后使用证书中的公钥进行加密，然后传递给服务器端</code></pre>\r\n<ol start=\"5\" type=\"1\">\r\n<li>服务器收到使用公钥加密的内容，在服务器端使用私钥解密之后获得随机数pre-master\r\nsecret，然后根据radom1、radom2、pre-master\r\nsecret通过一定的算法得出session\r\nKey和MAC算法秘钥，作为后面交互过程中使用对称秘钥。同时客户端也会使用radom1、radom2、pre-master\r\nsecret，和同样的算法生成session Key和MAC算法的秘钥。</li>\r\n</ol>\r\n<h2 id=\"https证书\">https证书</h2>\r\n<p>服务器发给了客户端证书，客户端是如何验证证书的<strong>有效性</strong>的呢？这里我们分析一下它的原理。</p>\r\n<p>SSL 证书中包含的具体内容有：<br />\r\n（1）证书的发布机构CA<br />\r\n（2）证书的有效期<br />\r\n（3）公钥<br />\r\n（4）证书所有者<br />\r\n（5）签名<br />\r\n...<br />\r\nCA机构在签发证书的时候，都会使用自己的<strong>私钥对证书进行签名</strong>，如果我们使用的是购买的证书，那么很有可能，颁发这个证书的CA机构的公钥已经预置在操作系统中。这样<strong>浏览器就可以使用CA机构的公钥对服务器的证书进行验签</strong>，验签之后得到的是CA机构使用sha256得到的证书摘要，客户端就会对服务器发送过来的证书使用sha256进行哈希计算得到一份摘要，然后对比之前由CA得出来的摘要，就可以知道这个证书是不是正确的，是否被修改过。<br />\r\n<strong>所以说原理就是因为CA机构的公钥已经预存于我们的操作系统之中。</strong></p>\r\n<p>完整的验证过程如下：<br />\r\n1. 首先浏览器读取证书中的证书所有者、有效期等信息进行一一校验； 2.\r\n浏览器开始查找操作系统中已内置的受信任的证书发布机构CA，与服务器发来的证书中的颁发者CA比对，用于校验证书是否为合法机构颁发；\r\n3. 如果找不到，浏览器就会报错，说明服务器发来的证书是不可信任的； 4.\r\n如果找到，那么浏览器就会从操作系统中取出 颁发者CA\r\n的公钥，然后对服务器发来的证书里面的签名进行解密； 5.\r\n浏览器使用相同的hash算法计算出服务器发来的证书的hash值，将这个计算的hash值与证书中签名做对比；\r\n6. 对比结果一致，则证明服务器发来的证书合法，没有被冒充； 7.\r\n此时浏览器就可以读取证书中的公钥，用于后续加密了</p>\r\n<p>参考： * <a\r\nhref=\"https://juejin.im/post/5a2fbe1b51882507ae25f991\">深入理解HTTPS协议</a>\r\n* <a\r\nhref=\"https://cloud.tencent.com/developer/article/1425339\">HTTPS协议原理和流程分析</a></p>\r\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/https-click.png\" width=\"700px\" ></p>\r\n<h2 id=\"https\">https</h2>\r\n<p>https就是在http的基础上又增加了一个TLS层，它就是一个套壳协议。</p>","more":"<h2 id=\"加密和解密\">加密和解密</h2>\r\n<p>https的发展和密码学的发展是分不开的。加密方式可以大体分为对称加密和非对称加密</p>\r\n<ul>\r\n<li>对称加密，就是加密和解密都是用同一个秘钥，这种方式优点就是速度快，缺点就是在管理和分配秘钥的时候不安全。</li>\r\n<li>非对称加密算法，非对称加密有一个秘钥对，叫做公钥和私钥，私钥自己持有，公钥可以公开的发送给使用的人。使用公钥进行加密的信息，只有和其配对的私钥可以解开。目前常见的非对称加密算法是RSA，非对称的加密算法的优点是安全，因为他不需要把私钥暴露出去。\r\n在正式的使用场景中一般都是对称加密和非对称加密结合使用，使用非对称加密完成秘钥的传递，然后使用对称秘钥进行数据加密和解密</li>\r\n</ul>\r\n<h2 id=\"https的简要流程\">https的简要流程</h2>\r\n<p><img src=\"https://s1.ax1x.com/2020/03/26/GpEtjs.png\" /> 1.\r\n先是经典的TCP三次握手，这里不详细展开了。</p>\r\n<ol start=\"2\" type=\"1\">\r\n<li><p>client Hello,客户端（通常是浏览器）先向服务器发出加密通信的请求\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 支持的协议版本，比如TLS 1.0版。</span><br><span class=\"line\">* 一个客户端生成的随机数 random1，稍后用于生成&quot;对话密钥&quot;。</span><br><span class=\"line\">* 支持的加密方法，比如RSA公钥加密。</span><br><span class=\"line\">* 支持的压缩方法。</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>服务器收到请求,然后响应 (server Hello) <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。</span><br><span class=\"line\">* 一个服务器生成的随机数random2，稍后用于生成&quot;对话密钥&quot;。</span><br><span class=\"line\">* 确认使用的加密方法，比如RSA公钥加密。</span><br><span class=\"line\">* 服务器证书。</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>客户端收到证书之后会首先会进行验证</p></li>\r\n</ol>\r\n<pre><code>验证通过之后，客户端会生成一个随机数pre-master secret，然后使用证书中的公钥进行加密，然后传递给服务器端</code></pre>\r\n<ol start=\"5\" type=\"1\">\r\n<li>服务器收到使用公钥加密的内容，在服务器端使用私钥解密之后获得随机数pre-master\r\nsecret，然后根据radom1、radom2、pre-master\r\nsecret通过一定的算法得出session\r\nKey和MAC算法秘钥，作为后面交互过程中使用对称秘钥。同时客户端也会使用radom1、radom2、pre-master\r\nsecret，和同样的算法生成session Key和MAC算法的秘钥。</li>\r\n</ol>\r\n<h2 id=\"https证书\">https证书</h2>\r\n<p>服务器发给了客户端证书，客户端是如何验证证书的<strong>有效性</strong>的呢？这里我们分析一下它的原理。</p>\r\n<p>SSL 证书中包含的具体内容有：<br />\r\n（1）证书的发布机构CA<br />\r\n（2）证书的有效期<br />\r\n（3）公钥<br />\r\n（4）证书所有者<br />\r\n（5）签名<br />\r\n...<br />\r\nCA机构在签发证书的时候，都会使用自己的<strong>私钥对证书进行签名</strong>，如果我们使用的是购买的证书，那么很有可能，颁发这个证书的CA机构的公钥已经预置在操作系统中。这样<strong>浏览器就可以使用CA机构的公钥对服务器的证书进行验签</strong>，验签之后得到的是CA机构使用sha256得到的证书摘要，客户端就会对服务器发送过来的证书使用sha256进行哈希计算得到一份摘要，然后对比之前由CA得出来的摘要，就可以知道这个证书是不是正确的，是否被修改过。<br />\r\n<strong>所以说原理就是因为CA机构的公钥已经预存于我们的操作系统之中。</strong></p>\r\n<p>完整的验证过程如下：<br />\r\n1. 首先浏览器读取证书中的证书所有者、有效期等信息进行一一校验； 2.\r\n浏览器开始查找操作系统中已内置的受信任的证书发布机构CA，与服务器发来的证书中的颁发者CA比对，用于校验证书是否为合法机构颁发；\r\n3. 如果找不到，浏览器就会报错，说明服务器发来的证书是不可信任的； 4.\r\n如果找到，那么浏览器就会从操作系统中取出 颁发者CA\r\n的公钥，然后对服务器发来的证书里面的签名进行解密； 5.\r\n浏览器使用相同的hash算法计算出服务器发来的证书的hash值，将这个计算的hash值与证书中签名做对比；\r\n6. 对比结果一致，则证明服务器发来的证书合法，没有被冒充； 7.\r\n此时浏览器就可以读取证书中的公钥，用于后续加密了</p>\r\n<p>参考： * <a\r\nhref=\"https://juejin.im/post/5a2fbe1b51882507ae25f991\">深入理解HTTPS协议</a>\r\n* <a\r\nhref=\"https://cloud.tencent.com/developer/article/1425339\">HTTPS协议原理和流程分析</a></p>"},{"title":"几何中矩阵","author":"pigLoveRabbit","date":"2022-07-10T06:00:00.000Z","_content":"## css中应用\n对元素的`transform`属性，我们可以应用矩阵\n```\nmatrix(a,b,c,d,e,f)\t\n```\n这6参数，对应的矩阵就是：  \n\n![upload successful](/images/matrix1.png)  \n注意书写方向是**竖着的**。  e, f参数其实就是x，y方向上偏移。\n\n<!-- more -->\n\n我们知道平面中旋转的矩阵是\n\n![upload successful](/images/matrix_rotate.png)  \n那我们可以写个demo了\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<style>\n.square {\n  height: 100px;\n  width: 100px;\n  background-color: red;\n  transform: matrix(1, 0, 0, 1, 30, 30);\n}\n</style>\n</head>\n<body>\n\n<h2>Square CSS</h2>\n<div class=\"square\" id=\"square\"></div>\n</body>\n<script>\n    let angle = 0; // 弧度\n    let squareElement = document.getElementById(\"square\");\n    function getMatrix(angle) {\n        return [Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0, 0];\n    }\n    setInterval(() => {\n        angle++;\n        let items = getMatrix(angle).join(\",\");\n        squareElement.style.transform = `matrix(${items})`;\n    }, 80);\n</script>\n</html> \n```\n上面展示了一个自动利用矩阵旋转的方块。\n\n\n\n参考：\n* [理解CSS3 transform中的Matrix(矩阵)](https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/)\n* [如何通俗地讲解「仿射变换」这个概念？](https://www.zhihu.com/question/20666664/answer/157400568)","source":"_posts/matrix.md","raw":"title: 几何中矩阵\nauthor: pigLoveRabbit\ntags: []\ncategories:\n  - Matrix\n  - css\ndate: 2022-07-10 14:00:00\n---\n## css中应用\n对元素的`transform`属性，我们可以应用矩阵\n```\nmatrix(a,b,c,d,e,f)\t\n```\n这6参数，对应的矩阵就是：  \n\n![upload successful](/images/matrix1.png)  \n注意书写方向是**竖着的**。  e, f参数其实就是x，y方向上偏移。\n\n<!-- more -->\n\n我们知道平面中旋转的矩阵是\n\n![upload successful](/images/matrix_rotate.png)  \n那我们可以写个demo了\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<style>\n.square {\n  height: 100px;\n  width: 100px;\n  background-color: red;\n  transform: matrix(1, 0, 0, 1, 30, 30);\n}\n</style>\n</head>\n<body>\n\n<h2>Square CSS</h2>\n<div class=\"square\" id=\"square\"></div>\n</body>\n<script>\n    let angle = 0; // 弧度\n    let squareElement = document.getElementById(\"square\");\n    function getMatrix(angle) {\n        return [Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0, 0];\n    }\n    setInterval(() => {\n        angle++;\n        let items = getMatrix(angle).join(\",\");\n        squareElement.style.transform = `matrix(${items})`;\n    }, 80);\n</script>\n</html> \n```\n上面展示了一个自动利用矩阵旋转的方块。\n\n\n\n参考：\n* [理解CSS3 transform中的Matrix(矩阵)](https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/)\n* [如何通俗地讲解「仿射变换」这个概念？](https://www.zhihu.com/question/20666664/answer/157400568)","slug":"matrix","published":1,"updated":"2023-03-21T02:48:19.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40lf002v2o3mc7cw90ac","content":"<h2 id=\"css中应用\">css中应用</h2>\r\n<p>对元素的<code>transform</code>属性，我们可以应用矩阵 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix(a,b,c,d,e,f)\t</span><br></pre></td></tr></table></figure>\r\n这6参数，对应的矩阵就是：</p>\r\n<p><img src=\"/images/matrix1.png\" alt=\"upload successful\" /><br />\r\n注意书写方向是<strong>竖着的</strong>。 e,\r\nf参数其实就是x，y方向上偏移。</p>\r\n<span id=\"more\"></span>\r\n<p>我们知道平面中旋转的矩阵是</p>\r\n<p><img src=\"/images/matrix_rotate.png\" alt=\"upload successful\" /><br />\r\n那我们可以写个demo了 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.square &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">  transform: matrix(1, 0, 0, 1, 30, 30);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;Square CSS&lt;/h2&gt;</span><br><span class=\"line\">&lt;div class=&quot;square&quot; id=&quot;square&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    let angle = 0; // 弧度</span><br><span class=\"line\">    let squareElement = document.getElementById(&quot;square&quot;);</span><br><span class=\"line\">    function getMatrix(angle) &#123;</span><br><span class=\"line\">        return [Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0, 0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setInterval(() =&gt; &#123;</span><br><span class=\"line\">        angle++;</span><br><span class=\"line\">        let items = getMatrix(angle).join(&quot;,&quot;);</span><br><span class=\"line\">        squareElement.style.transform = `matrix($&#123;items&#125;)`;</span><br><span class=\"line\">    &#125;, 80);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/html&gt; </span><br></pre></td></tr></table></figure>\r\n上面展示了一个自动利用矩阵旋转的方块。</p>\r\n<p>参考： * <a\r\nhref=\"https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/\">理解CSS3\r\ntransform中的Matrix(矩阵)</a> * <a\r\nhref=\"https://www.zhihu.com/question/20666664/answer/157400568\">如何通俗地讲解「仿射变换」这个概念？</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"css中应用\">css中应用</h2>\r\n<p>对元素的<code>transform</code>属性，我们可以应用矩阵 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix(a,b,c,d,e,f)\t</span><br></pre></td></tr></table></figure>\r\n这6参数，对应的矩阵就是：</p>\r\n<p><img src=\"/images/matrix1.png\" alt=\"upload successful\" /><br />\r\n注意书写方向是<strong>竖着的</strong>。 e,\r\nf参数其实就是x，y方向上偏移。</p>","more":"<p>我们知道平面中旋转的矩阵是</p>\r\n<p><img src=\"/images/matrix_rotate.png\" alt=\"upload successful\" /><br />\r\n那我们可以写个demo了 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.square &#123;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">  transform: matrix(1, 0, 0, 1, 30, 30);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;Square CSS&lt;/h2&gt;</span><br><span class=\"line\">&lt;div class=&quot;square&quot; id=&quot;square&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    let angle = 0; // 弧度</span><br><span class=\"line\">    let squareElement = document.getElementById(&quot;square&quot;);</span><br><span class=\"line\">    function getMatrix(angle) &#123;</span><br><span class=\"line\">        return [Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0, 0];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setInterval(() =&gt; &#123;</span><br><span class=\"line\">        angle++;</span><br><span class=\"line\">        let items = getMatrix(angle).join(&quot;,&quot;);</span><br><span class=\"line\">        squareElement.style.transform = `matrix($&#123;items&#125;)`;</span><br><span class=\"line\">    &#125;, 80);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/html&gt; </span><br></pre></td></tr></table></figure>\r\n上面展示了一个自动利用矩阵旋转的方块。</p>\r\n<p>参考： * <a\r\nhref=\"https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/\">理解CSS3\r\ntransform中的Matrix(矩阵)</a> * <a\r\nhref=\"https://www.zhihu.com/question/20666664/answer/157400568\">如何通俗地讲解「仿射变换」这个概念？</a></p>"},{"title":"最小生成树回顾","author":"Salamander","date":"2019-12-10T12:00:00.000Z","_content":"![docker logo](/images/MST.png)\n\n解决`最小生成树`（Minimum spanning tree）问题的算法，书上介绍了两个：`Prime`算法和`Kruskal`算法。\n\n\n<!-- more -->\n\n## Prim算法\n```C++\n#include <stdio.h>\n#include \"graph.h\"\n\nextern void DispMat1(MGraph);\nvoid Prim(MGraph g, int v)\n{\n    int lowcost[MAXV], min, n = g.n;\n    int closest[MAXV], i, j, k;\n    for (i = 0; i < n; i++)\n    {\n        lowcost[i] = g.edges[v][i];\n        closest[i] = v;\n    }\n    for (i = 1; i < n; i++)   // 找出n - 1个顶点\n    {\n        min = INF;\n        for (j = 0; j < n; j++)\n        {\n            if (lowcost[j] != 0 && lowcost[j] < min)\n            {\n                min = lowcost[j];\n                k = j;\n            }\n        }\n        printf(\"    边（%d， %d）权为：%d\\n\", closest[k], k, min);\n        lowcost[k] = 0;      // 标记k已经加入U\n        for (j = 0; j < n; j++)\n        {\n            if (g.edges[k][j] != 0 && g.edges[k][j] < lowcost[j])\n            {\n                lowcost[j] = g.edges[k][j];\n                lowcost[j] = k;\n            }\n        }\n    }\n}\n```\n\n\n## Kruskal算法\n实现克鲁斯卡尔算法的关键是**判断选取的边是否与生成树中已保留的边形成回路，这可以通过判断边的两个顶点所在的连通分量来解决**（给顶点所在连通分量编号）。\n```\ntypedef struct\n{\n    int u;      // 边的起始顶点\n    int v;      // 边的终止顶点\n    int w;      // 边的权值\n} Edge;\n\nvoid Kruskal(MGraph g, int v)\n{\n    int i, j, u1, v1, sn1, sn2, k;\n    int vset[MAXV];         // 存放所有边\n    Edge E[MaxSize];        // e数组的下标从0开始计\n    k = 0;\n    for (i = 0; i < g.n; i++)   // 由g产生的边集E\n    {\n        for (j = 0; j < g.n; j++)\n        {\n            if (g.edges[i][j] != 0 && g.edges[i][j] != INF)\n            {\n                E[k].u = i;\n                E[k].v = i;\n                E[k].w = g.edges[i][j];\n                k++;\n            }\n            \n        }\n    }\n    InsertSort(E, g.e);\n    for (i = 0; i < g.n; i++)\n    {\n        vset[i] = i;\n    }\n    k = 1;                      // k表示当前构造生成树的第几条边，初值为1\n    j = 0;                      // E中边的下标，初值为0\n    while (k < g.n)\n    {\n        u1 = E[j].u;\n        v1 = E[j].v;\n        sn1 = vset[u1];\n        sn2 = vset[v1];\n        if (sn1 != sn2)\n        {\n            printf(\" (%d, %d): %d\\n\", u1, v1, E[j].w);\n            k++;               // 生成边数增1\n            for (i = 0; i < g.n; i++)      // 两个集合统一编号\n            {\n                if (vset[i] == sn2)        // 集合编号为sn2的改为sn1\n                {\n                    if (vset[i] == sn2)\n                    {\n                        vset[i] = sn1;\n                    }\n                }\n                \n            }\n        }\n        j++;\n    }\n}\n```\n\n\n\n\n\n\n算法参考：\n* 《数据结构教程（第4版）》（李春葆）","source":"_posts/min_spanning_tree.md","raw":"title: 最小生成树回顾\nauthor: Salamander\ntags:\n  - 图\n  - 最小生成树\n  - 数据结构\ncategories:\n  - 算法\n  - ''\ndate: 2019-12-10 20:00:00\n---\n![docker logo](/images/MST.png)\n\n解决`最小生成树`（Minimum spanning tree）问题的算法，书上介绍了两个：`Prime`算法和`Kruskal`算法。\n\n\n<!-- more -->\n\n## Prim算法\n```C++\n#include <stdio.h>\n#include \"graph.h\"\n\nextern void DispMat1(MGraph);\nvoid Prim(MGraph g, int v)\n{\n    int lowcost[MAXV], min, n = g.n;\n    int closest[MAXV], i, j, k;\n    for (i = 0; i < n; i++)\n    {\n        lowcost[i] = g.edges[v][i];\n        closest[i] = v;\n    }\n    for (i = 1; i < n; i++)   // 找出n - 1个顶点\n    {\n        min = INF;\n        for (j = 0; j < n; j++)\n        {\n            if (lowcost[j] != 0 && lowcost[j] < min)\n            {\n                min = lowcost[j];\n                k = j;\n            }\n        }\n        printf(\"    边（%d， %d）权为：%d\\n\", closest[k], k, min);\n        lowcost[k] = 0;      // 标记k已经加入U\n        for (j = 0; j < n; j++)\n        {\n            if (g.edges[k][j] != 0 && g.edges[k][j] < lowcost[j])\n            {\n                lowcost[j] = g.edges[k][j];\n                lowcost[j] = k;\n            }\n        }\n    }\n}\n```\n\n\n## Kruskal算法\n实现克鲁斯卡尔算法的关键是**判断选取的边是否与生成树中已保留的边形成回路，这可以通过判断边的两个顶点所在的连通分量来解决**（给顶点所在连通分量编号）。\n```\ntypedef struct\n{\n    int u;      // 边的起始顶点\n    int v;      // 边的终止顶点\n    int w;      // 边的权值\n} Edge;\n\nvoid Kruskal(MGraph g, int v)\n{\n    int i, j, u1, v1, sn1, sn2, k;\n    int vset[MAXV];         // 存放所有边\n    Edge E[MaxSize];        // e数组的下标从0开始计\n    k = 0;\n    for (i = 0; i < g.n; i++)   // 由g产生的边集E\n    {\n        for (j = 0; j < g.n; j++)\n        {\n            if (g.edges[i][j] != 0 && g.edges[i][j] != INF)\n            {\n                E[k].u = i;\n                E[k].v = i;\n                E[k].w = g.edges[i][j];\n                k++;\n            }\n            \n        }\n    }\n    InsertSort(E, g.e);\n    for (i = 0; i < g.n; i++)\n    {\n        vset[i] = i;\n    }\n    k = 1;                      // k表示当前构造生成树的第几条边，初值为1\n    j = 0;                      // E中边的下标，初值为0\n    while (k < g.n)\n    {\n        u1 = E[j].u;\n        v1 = E[j].v;\n        sn1 = vset[u1];\n        sn2 = vset[v1];\n        if (sn1 != sn2)\n        {\n            printf(\" (%d, %d): %d\\n\", u1, v1, E[j].w);\n            k++;               // 生成边数增1\n            for (i = 0; i < g.n; i++)      // 两个集合统一编号\n            {\n                if (vset[i] == sn2)        // 集合编号为sn2的改为sn1\n                {\n                    if (vset[i] == sn2)\n                    {\n                        vset[i] = sn1;\n                    }\n                }\n                \n            }\n        }\n        j++;\n    }\n}\n```\n\n\n\n\n\n\n算法参考：\n* 《数据结构教程（第4版）》（李春葆）","slug":"min_spanning_tree","published":1,"updated":"2023-03-21T02:48:19.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40lg002y2o3mfxym67cd","content":"<figure>\r\n<img src=\"/images/MST.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<p>解决<code>最小生成树</code>（Minimum spanning\r\ntree）问题的算法，书上介绍了两个：<code>Prime</code>算法和<code>Kruskal</code>算法。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"prim算法\">Prim算法</h2>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;graph.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> <span class=\"title\">DispMat1</span><span class=\"params\">(MGraph)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Prim</span><span class=\"params\">(MGraph g, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> lowcost[MAXV], min, n = g.n;</span><br><span class=\"line\">    <span class=\"type\">int</span> closest[MAXV], i, j, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lowcost[i] = g.edges[v][i];</span><br><span class=\"line\">        closest[i] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)   <span class=\"comment\">// 找出n - 1个顶点</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        min = INF;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lowcost[j] != <span class=\"number\">0</span> &amp;&amp; lowcost[j] &lt; min)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                min = lowcost[j];</span><br><span class=\"line\">                k = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;    边（%d， %d）权为：%d\\n&quot;</span>, closest[k], k, min);</span><br><span class=\"line\">        lowcost[k] = <span class=\"number\">0</span>;      <span class=\"comment\">// 标记k已经加入U</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g.edges[k][j] != <span class=\"number\">0</span> &amp;&amp; g.edges[k][j] &lt; lowcost[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                lowcost[j] = g.edges[k][j];</span><br><span class=\"line\">                lowcost[j] = k;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"kruskal算法\">Kruskal算法</h2>\r\n<p>实现克鲁斯卡尔算法的关键是<strong>判断选取的边是否与生成树中已保留的边形成回路，这可以通过判断边的两个顶点所在的连通分量来解决</strong>（给顶点所在连通分量编号）。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int u;      // 边的起始顶点</span><br><span class=\"line\">    int v;      // 边的终止顶点</span><br><span class=\"line\">    int w;      // 边的权值</span><br><span class=\"line\">&#125; Edge;</span><br><span class=\"line\"></span><br><span class=\"line\">void Kruskal(MGraph g, int v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i, j, u1, v1, sn1, sn2, k;</span><br><span class=\"line\">    int vset[MAXV];         // 存放所有边</span><br><span class=\"line\">    Edge E[MaxSize];        // e数组的下标从0开始计</span><br><span class=\"line\">    k = 0;</span><br><span class=\"line\">    for (i = 0; i &lt; g.n; i++)   // 由g产生的边集E</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for (j = 0; j &lt; g.n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (g.edges[i][j] != 0 &amp;&amp; g.edges[i][j] != INF)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                E[k].u = i;</span><br><span class=\"line\">                E[k].v = i;</span><br><span class=\"line\">                E[k].w = g.edges[i][j];</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    InsertSort(E, g.e);</span><br><span class=\"line\">    for (i = 0; i &lt; g.n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vset[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    k = 1;                      // k表示当前构造生成树的第几条边，初值为1</span><br><span class=\"line\">    j = 0;                      // E中边的下标，初值为0</span><br><span class=\"line\">    while (k &lt; g.n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        u1 = E[j].u;</span><br><span class=\"line\">        v1 = E[j].v;</span><br><span class=\"line\">        sn1 = vset[u1];</span><br><span class=\"line\">        sn2 = vset[v1];</span><br><span class=\"line\">        if (sn1 != sn2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot; (%d, %d): %d\\n&quot;, u1, v1, E[j].w);</span><br><span class=\"line\">            k++;               // 生成边数增1</span><br><span class=\"line\">            for (i = 0; i &lt; g.n; i++)      // 两个集合统一编号</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (vset[i] == sn2)        // 集合编号为sn2的改为sn1</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    if (vset[i] == sn2)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        vset[i] = sn1;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>算法参考： * 《数据结构教程（第4版）》（李春葆）</p>\r\n","site":{"data":{}},"excerpt":"<figure>\r\n<img src=\"/images/MST.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<p>解决<code>最小生成树</code>（Minimum spanning\r\ntree）问题的算法，书上介绍了两个：<code>Prime</code>算法和<code>Kruskal</code>算法。</p>","more":"<h2 id=\"prim算法\">Prim算法</h2>\r\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;graph.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"type\">void</span> <span class=\"title\">DispMat1</span><span class=\"params\">(MGraph)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Prim</span><span class=\"params\">(MGraph g, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> lowcost[MAXV], min, n = g.n;</span><br><span class=\"line\">    <span class=\"type\">int</span> closest[MAXV], i, j, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        lowcost[i] = g.edges[v][i];</span><br><span class=\"line\">        closest[i] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; n; i++)   <span class=\"comment\">// 找出n - 1个顶点</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        min = INF;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lowcost[j] != <span class=\"number\">0</span> &amp;&amp; lowcost[j] &lt; min)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                min = lowcost[j];</span><br><span class=\"line\">                k = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;    边（%d， %d）权为：%d\\n&quot;</span>, closest[k], k, min);</span><br><span class=\"line\">        lowcost[k] = <span class=\"number\">0</span>;      <span class=\"comment\">// 标记k已经加入U</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g.edges[k][j] != <span class=\"number\">0</span> &amp;&amp; g.edges[k][j] &lt; lowcost[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                lowcost[j] = g.edges[k][j];</span><br><span class=\"line\">                lowcost[j] = k;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"kruskal算法\">Kruskal算法</h2>\r\n<p>实现克鲁斯卡尔算法的关键是<strong>判断选取的边是否与生成树中已保留的边形成回路，这可以通过判断边的两个顶点所在的连通分量来解决</strong>（给顶点所在连通分量编号）。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int u;      // 边的起始顶点</span><br><span class=\"line\">    int v;      // 边的终止顶点</span><br><span class=\"line\">    int w;      // 边的权值</span><br><span class=\"line\">&#125; Edge;</span><br><span class=\"line\"></span><br><span class=\"line\">void Kruskal(MGraph g, int v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i, j, u1, v1, sn1, sn2, k;</span><br><span class=\"line\">    int vset[MAXV];         // 存放所有边</span><br><span class=\"line\">    Edge E[MaxSize];        // e数组的下标从0开始计</span><br><span class=\"line\">    k = 0;</span><br><span class=\"line\">    for (i = 0; i &lt; g.n; i++)   // 由g产生的边集E</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for (j = 0; j &lt; g.n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (g.edges[i][j] != 0 &amp;&amp; g.edges[i][j] != INF)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                E[k].u = i;</span><br><span class=\"line\">                E[k].v = i;</span><br><span class=\"line\">                E[k].w = g.edges[i][j];</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    InsertSort(E, g.e);</span><br><span class=\"line\">    for (i = 0; i &lt; g.n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vset[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    k = 1;                      // k表示当前构造生成树的第几条边，初值为1</span><br><span class=\"line\">    j = 0;                      // E中边的下标，初值为0</span><br><span class=\"line\">    while (k &lt; g.n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        u1 = E[j].u;</span><br><span class=\"line\">        v1 = E[j].v;</span><br><span class=\"line\">        sn1 = vset[u1];</span><br><span class=\"line\">        sn2 = vset[v1];</span><br><span class=\"line\">        if (sn1 != sn2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot; (%d, %d): %d\\n&quot;, u1, v1, E[j].w);</span><br><span class=\"line\">            k++;               // 生成边数增1</span><br><span class=\"line\">            for (i = 0; i &lt; g.n; i++)      // 两个集合统一编号</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if (vset[i] == sn2)        // 集合编号为sn2的改为sn1</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    if (vset[i] == sn2)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        vset[i] = sn1;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n<p>算法参考： * 《数据结构教程（第4版）》（李春葆）</p>"},{"title":"Puppeteer使用例子","author":"Salamander","date":"2021-03-05T01:00:00.000Z","_content":"![Puppeteer](https://s3.ax1x.com/2021/03/05/6eGwVJ.png)  \n这篇文章很简单呢，就是记录一下用**Puppeteer**的一些snippet。\n\n<!-- more -->\n\n\n## 访问网站后截图\n```\nconst puppeteer = require('puppeteer');\nconst url = 'https://segmentfault.com';\n\n(async() => {\n    const browser = await puppeteer.launch({\n        headless: true,\n        args: [\"--no-sandbox\", \"--single-process\"],\n    });\n    const page = await browser.newPage();\n    await page.setViewport({ width: 1920, height: 1080 });\n    // ‘networkidle2’ means that there are no more than 2 active requests open. \n    // This is a good setting because for some websites (e.g. websites using websockets) there will always be connections open\n    await page.goto(url, {\n        waitUntil: 'networkidle2',\n        timeout: 1000 * 60 * 5, // 毫秒 超时参数需要加上，有时候网络不好，会导致等着\n    });\n    await page.screenshot({path: './data/website.png', type: 'png'});\n    page.close();\n    browser.close();\n})();\n```","source":"_posts/puppeteer使用例子.md","raw":"title: Puppeteer使用例子\nauthor: Salamander\ntags:\n  - puppeteer\n  - Nodejs\ncategories: []\ndate: 2021-03-05 09:00:00\n---\n![Puppeteer](https://s3.ax1x.com/2021/03/05/6eGwVJ.png)  \n这篇文章很简单呢，就是记录一下用**Puppeteer**的一些snippet。\n\n<!-- more -->\n\n\n## 访问网站后截图\n```\nconst puppeteer = require('puppeteer');\nconst url = 'https://segmentfault.com';\n\n(async() => {\n    const browser = await puppeteer.launch({\n        headless: true,\n        args: [\"--no-sandbox\", \"--single-process\"],\n    });\n    const page = await browser.newPage();\n    await page.setViewport({ width: 1920, height: 1080 });\n    // ‘networkidle2’ means that there are no more than 2 active requests open. \n    // This is a good setting because for some websites (e.g. websites using websockets) there will always be connections open\n    await page.goto(url, {\n        waitUntil: 'networkidle2',\n        timeout: 1000 * 60 * 5, // 毫秒 超时参数需要加上，有时候网络不好，会导致等着\n    });\n    await page.screenshot({path: './data/website.png', type: 'png'});\n    page.close();\n    browser.close();\n})();\n```","slug":"puppeteer使用例子","published":1,"updated":"2023-03-21T02:48:19.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40lg00302o3m302q4glu","content":"<p><img src=\"https://s3.ax1x.com/2021/03/05/6eGwVJ.png\"\r\nalt=\"Puppeteer\" /><br />\r\n这篇文章很简单呢，就是记录一下用<strong>Puppeteer</strong>的一些snippet。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"访问网站后截图\">访问网站后截图</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const puppeteer = require(&#x27;puppeteer&#x27;);</span><br><span class=\"line\">const url = &#x27;https://segmentfault.com&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">(async() =&gt; &#123;</span><br><span class=\"line\">    const browser = await puppeteer.launch(&#123;</span><br><span class=\"line\">        headless: true,</span><br><span class=\"line\">        args: [&quot;--no-sandbox&quot;, &quot;--single-process&quot;],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    const page = await browser.newPage();</span><br><span class=\"line\">    await page.setViewport(&#123; width: 1920, height: 1080 &#125;);</span><br><span class=\"line\">    // ‘networkidle2’ means that there are no more than 2 active requests open. </span><br><span class=\"line\">    // This is a good setting because for some websites (e.g. websites using websockets) there will always be connections open</span><br><span class=\"line\">    await page.goto(url, &#123;</span><br><span class=\"line\">        waitUntil: &#x27;networkidle2&#x27;,</span><br><span class=\"line\">        timeout: 1000 * 60 * 5, // 毫秒 超时参数需要加上，有时候网络不好，会导致等着</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    await page.screenshot(&#123;path: &#x27;./data/website.png&#x27;, type: &#x27;png&#x27;&#125;);</span><br><span class=\"line\">    page.close();</span><br><span class=\"line\">    browser.close();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"excerpt":"<p><img src=\"https://s3.ax1x.com/2021/03/05/6eGwVJ.png\"\r\nalt=\"Puppeteer\" /><br />\r\n这篇文章很简单呢，就是记录一下用<strong>Puppeteer</strong>的一些snippet。</p>","more":"<h2 id=\"访问网站后截图\">访问网站后截图</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const puppeteer = require(&#x27;puppeteer&#x27;);</span><br><span class=\"line\">const url = &#x27;https://segmentfault.com&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">(async() =&gt; &#123;</span><br><span class=\"line\">    const browser = await puppeteer.launch(&#123;</span><br><span class=\"line\">        headless: true,</span><br><span class=\"line\">        args: [&quot;--no-sandbox&quot;, &quot;--single-process&quot;],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    const page = await browser.newPage();</span><br><span class=\"line\">    await page.setViewport(&#123; width: 1920, height: 1080 &#125;);</span><br><span class=\"line\">    // ‘networkidle2’ means that there are no more than 2 active requests open. </span><br><span class=\"line\">    // This is a good setting because for some websites (e.g. websites using websockets) there will always be connections open</span><br><span class=\"line\">    await page.goto(url, &#123;</span><br><span class=\"line\">        waitUntil: &#x27;networkidle2&#x27;,</span><br><span class=\"line\">        timeout: 1000 * 60 * 5, // 毫秒 超时参数需要加上，有时候网络不好，会导致等着</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    await page.screenshot(&#123;path: &#x27;./data/website.png&#x27;, type: &#x27;png&#x27;&#125;);</span><br><span class=\"line\">    page.close();</span><br><span class=\"line\">    browser.close();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>"},{"title":"栈应用之四则运算","author":"Salamander","date":"2019-08-19T09:02:00.000Z","_content":"## 四则运算\n四则运算表达式是我们小学就接触的内容，它遵循“先乘除，后加减，从左到右，括号内先算”的法则，例如“7 + (5 - 3) * 4 + 6 / 3”，这个表达式先算**5 - 3**得**2**，再算**2 \\* 4**和**6 / 3**，最后计算**7 + 8 +2**，这个过程很简单，口算就能完成，但是如果让我们在程序里实现这个功能，该如何实现呢？我们遇到的困难在于乘除优在加减的后面，却要先运算，另外还要考虑括号，问题就复杂了。\n\n<!-- more -->\n\n## 后缀表达式\n波兰有位科学家也想到了这个问题，他想出了一种新的**不需要括号**的表达式：“后缀表达式”，它更有利于计算机计算。让我们看看它的样子：对于“7 + (5 - 3) * 4 + 6 / 3”，后缀表达式为“7 5 3 - 4 * + 6 3 / +”，叫后缀的原因在于**运算符在操作数之后**。我们人类喜欢看到的表达式叫“中缀表达式”（因为运算符在操作数中间），但是计算机不喜欢它。\n\n### 后缀表达式的方法\n为了看到后缀表达式的好处，我们先看看，计算机如何利用后缀表达式计算出最终结果。\n* 后缀表达式：**7 5 3 - 4 \\* + 6 3 / +**\n* 规则：从左到右遍历字符串，遇到数字则进栈，遇到符号则将栈顶的两个数字出栈，进行计算，运算结果进栈，一直到最终获得结果。\n\n1. 初始化一个空栈，此栈用来对要运算的数字进出使用。\n2. 字符串中前三个都是数字，所以7，5，3进栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGkVZ6.jpg)\n\n\n3. 接下来是“-”，所以5和3出栈，5作为被减数，3作为减数，5减3得到2，并将2入栈。\n4. 接着是4入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGkByn.jpg)\n\n5. 接下来是”\\*“，所以4和2出栈，4乘以2得8，8入栈。\n6. 下面是“+”，7和8出栈，7加8得15，15入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGk7TK.jpg)\n\n7. 接下来6和3数字入栈。\n8. 遇到符号“/”，所以6和3出栈，6作为被除数，3作为除数，6除3得2，2入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGA9Tf.jpg)\n\n9. 最后遇到符号“+”，15和2出栈，15加2得17，17入栈，遍历结束，将最后结果出栈，得到17。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGAV6s.jpg)\n\n\n### 中缀表达式转后缀表达式\n可以看到利用**栈**就很容易计算后缀表达式的值，那么现在我们的问题就是中缀转后缀。\n\n* 中缀表达式：“8 + (7 - 2 * 3 + 2) * 3 + 10 / 2”\n* 规则：遍历字符串，遇到数字则输出，即成为后缀表达式一部分；若是操作符，则判断与栈顶符号的优先级（乘除优先级比加减优先级高，乘除优先级一样，加和减也一样），如果高于栈顶符号，则压栈，否则从栈顶开始弹出元素直到遇到遇到优先级更低的符号（或者遇到“(”，“(”只有遇到“)”才会弹出），弹出完这些符号后，把当前符号压栈。\n\n\n1. 初始化一空栈，用来对符号进出栈使用。\n2. 第一个字符是数字8，输出8，后面符号是“+”，进栈。\n\n![过程](https://s2.ax1x.com/2019/08/21/mUD2S1.png)\n\n3. 第三个字符是“(”，因为是左括号，所以压栈，第四个字符是7，输出，总表达式为8 7。\n4. 接着是“-”，因为栈顶是“(”，所以压栈。后面字符是2，输出，总表达式为8 7 2。\n\n![过程](https://s2.ax1x.com/2019/08/25/mgNyRO.png)\n\n5. 之后符号是“\\*”，它的优先级比栈顶“-”高，所以压栈，再之后是数字3，输出，总表达式为8 7 2 3。\n6. 接着是符号“+”，它比“\\*”的优先级低，所以“\\*”弹出栈输出，而“-”优先级和“+”一样，也要弹出栈输出，接下来碰到符号“(”，就要把“+”压栈。接着是数字2，输出，总表达式为8 7 2 3 \\* - 2。\n\n![过程](https://s2.ax1x.com/2019/08/25/mgUPlF.png)\n\n7. 接着是符号“)”，这时需要从栈顶开始依次弹出符号输出，直到遇到“(”（“(”也要弹出，只是不输出），“(”之后只剩一个“+”，所以弹出“+”输出，接下来是符号“\\*”，优先级比“+”高，所以压栈，总表达式为8 7 2 3 \\* - 2 +。\n8. 接下来是数字3，输出，紧接着是符号“+”，它比栈顶“\\*”优先级低，所以弹出“\\*”输出，而之后比较的“+”优先级一样，也弹出栈输出，最后“+”压栈，总表达式为8 7 2 3 \\* - 2 + 3 \\* +。\n\n![过程](https://s2.ax1x.com/2019/08/28/moOHG6.jpg)\n\n9. 接着是数字10，输出，接下来是符号“/”，比符号“+”优先级高，所以压栈，总表达式为8 7 2 3 \\* - 2 + 3 \\* + 10。\n10. 接着是数字2，输出。遍历结束，依次弹出栈中元素，最后总表达式为8 7 2 3 \\* - 2 + 3 \\* + 10 2 / +。\n\n![过程](https://s2.ax1x.com/2019/08/28/moXELQ.jpg)\n\n### 代码示例\n```\n// 预先生成运算符的tokens\nprepareTokens() {\n    this.tokens = [\n        new Token('#', TOKEN_TYPE.ENDEXPR),\n        new Token('(', TOKEN_TYPE.LEFTPAREN),\n        new Token(')', TOKEN_TYPE.RIGHTPAREN),\n        new Token('~', TOKEN_TYPE.UNARYOP, 6),       // 负号\n        new Token('abs', TOKEN_TYPE.UNARYOP, 6),     // 求绝对值\n        new Token('sqrt', TOKEN_TYPE.UNARYOP, 6),    // 开平方根\n        new Token('exp', TOKEN_TYPE.UNARYOP, 6),     // e的x次\n        new Token('ln', TOKEN_TYPE.UNARYOP, 6),      // e为底数的对数\n        new Token('log10', TOKEN_TYPE.UNARYOP, 6),   // 10为底数的对数\n        new Token('sin', TOKEN_TYPE.UNARYOP, 6),     // 求sin x\n        new Token('cos', TOKEN_TYPE.UNARYOP, 6),     // 求cos x\n        new Token('tan', TOKEN_TYPE.UNARYOP, 6),     // 求tan x\n        new Token('+', TOKEN_TYPE.BINARYOP, 4),      // 二元+\n        new Token('-', TOKEN_TYPE.BINARYOP, 4),      // 二元-\n        new Token('*', TOKEN_TYPE.BINARYOP, 5),      // 乘法\n        new Token('/', TOKEN_TYPE.BINARYOP, 5),      // 除法\n        new Token('%', TOKEN_TYPE.BINARYOP, 5),      // 除模取余\n        new Token('^', TOKEN_TYPE.BINARYOP, 6),      // 指数运算\n    ]\n}\n\n/**\n * 中缀表达式转化为后缀表达式\n * @return {Array}\n */\ntransform() {\n    const postExp = []\n    const opStack = []\n    for (let i = 0; i < this.infixExp.length; i++) {\n        const pos = this.infixExp[i]\n        const token = this.tokens[pos]\n        switch (token.type) {\n            case TOKEN_TYPE.OPRAND:\n                postExp.push(pos)\n                break;\n            case TOKEN_TYPE.LEFTPAREN:  // “(”直接入栈\n                opStack.push(pos)\n                break;\n            case TOKEN_TYPE.RIGHTPAREN: // 为“)”，出栈直到遇到运算符“(”\n                let prePos = opStack.pop()\n                while (prePos in this.tokens && opStack.length >= 0 &&\n                this.tokens[prePos].type !== TOKEN_TYPE.LEFTPAREN) {\n                    postExp.push(prePos)\n                    prePos = opStack.pop()\n                }\n                break;\n            case TOKEN_TYPE.UNARYOP:\n            case TOKEN_TYPE.BINARYOP:\n                let endright = 0\n                while (endright === 0) {\n                    if (opStack.length <= 0)\n                        endright = 1\n                    else if (this.tokens[opStack[opStack.length - 1]].type === TOKEN_TYPE.LEFTPAREN) {\n                        endright = 1\n                    } else if (this.tokens[opStack[opStack.length - 1]].priority < token.priority) {\n                        endright = 1\n                    } else if (this.tokens[opStack[opStack.length - 1]].priority === token.priority &&\n                                token.priority === MAX_PRIORITY) {\n                        endright = 1\n                    } else {\n                        postExp.push(opStack.pop())\n                        endright = 0\n                    }\n                }\n                opStack.push(pos)\n                break\n            case TOKEN_TYPE.ENDEXPR:\n                while (opStack.length >= 1) {\n                    postExp.push(opStack.pop())\n                }\n                break\n            default:\n                break\n        }\n    }\n\n    postExp.push(0)  // 添加终止符\n    return postExp\n}\n\n```\n中缀表达式`infixExp`中存的是`this.tokens`中的索引，完整代码[Github](https://github.com/salamander-mh/calculator)","source":"_posts/stack_si_ze.md","raw":"title: 栈应用之四则运算\ntags:\n  - 栈\n  - 四则运算\ncategories:\n  - 算法\nauthor: Salamander\ndate: 2019-08-19 17:02:00\n---\n## 四则运算\n四则运算表达式是我们小学就接触的内容，它遵循“先乘除，后加减，从左到右，括号内先算”的法则，例如“7 + (5 - 3) * 4 + 6 / 3”，这个表达式先算**5 - 3**得**2**，再算**2 \\* 4**和**6 / 3**，最后计算**7 + 8 +2**，这个过程很简单，口算就能完成，但是如果让我们在程序里实现这个功能，该如何实现呢？我们遇到的困难在于乘除优在加减的后面，却要先运算，另外还要考虑括号，问题就复杂了。\n\n<!-- more -->\n\n## 后缀表达式\n波兰有位科学家也想到了这个问题，他想出了一种新的**不需要括号**的表达式：“后缀表达式”，它更有利于计算机计算。让我们看看它的样子：对于“7 + (5 - 3) * 4 + 6 / 3”，后缀表达式为“7 5 3 - 4 * + 6 3 / +”，叫后缀的原因在于**运算符在操作数之后**。我们人类喜欢看到的表达式叫“中缀表达式”（因为运算符在操作数中间），但是计算机不喜欢它。\n\n### 后缀表达式的方法\n为了看到后缀表达式的好处，我们先看看，计算机如何利用后缀表达式计算出最终结果。\n* 后缀表达式：**7 5 3 - 4 \\* + 6 3 / +**\n* 规则：从左到右遍历字符串，遇到数字则进栈，遇到符号则将栈顶的两个数字出栈，进行计算，运算结果进栈，一直到最终获得结果。\n\n1. 初始化一个空栈，此栈用来对要运算的数字进出使用。\n2. 字符串中前三个都是数字，所以7，5，3进栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGkVZ6.jpg)\n\n\n3. 接下来是“-”，所以5和3出栈，5作为被减数，3作为减数，5减3得到2，并将2入栈。\n4. 接着是4入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGkByn.jpg)\n\n5. 接下来是”\\*“，所以4和2出栈，4乘以2得8，8入栈。\n6. 下面是“+”，7和8出栈，7加8得15，15入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGk7TK.jpg)\n\n7. 接下来6和3数字入栈。\n8. 遇到符号“/”，所以6和3出栈，6作为被除数，3作为除数，6除3得2，2入栈。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGA9Tf.jpg)\n\n9. 最后遇到符号“+”，15和2出栈，15加2得17，17入栈，遍历结束，将最后结果出栈，得到17。\n\n![过程](https://s2.ax1x.com/2019/08/20/mGAV6s.jpg)\n\n\n### 中缀表达式转后缀表达式\n可以看到利用**栈**就很容易计算后缀表达式的值，那么现在我们的问题就是中缀转后缀。\n\n* 中缀表达式：“8 + (7 - 2 * 3 + 2) * 3 + 10 / 2”\n* 规则：遍历字符串，遇到数字则输出，即成为后缀表达式一部分；若是操作符，则判断与栈顶符号的优先级（乘除优先级比加减优先级高，乘除优先级一样，加和减也一样），如果高于栈顶符号，则压栈，否则从栈顶开始弹出元素直到遇到遇到优先级更低的符号（或者遇到“(”，“(”只有遇到“)”才会弹出），弹出完这些符号后，把当前符号压栈。\n\n\n1. 初始化一空栈，用来对符号进出栈使用。\n2. 第一个字符是数字8，输出8，后面符号是“+”，进栈。\n\n![过程](https://s2.ax1x.com/2019/08/21/mUD2S1.png)\n\n3. 第三个字符是“(”，因为是左括号，所以压栈，第四个字符是7，输出，总表达式为8 7。\n4. 接着是“-”，因为栈顶是“(”，所以压栈。后面字符是2，输出，总表达式为8 7 2。\n\n![过程](https://s2.ax1x.com/2019/08/25/mgNyRO.png)\n\n5. 之后符号是“\\*”，它的优先级比栈顶“-”高，所以压栈，再之后是数字3，输出，总表达式为8 7 2 3。\n6. 接着是符号“+”，它比“\\*”的优先级低，所以“\\*”弹出栈输出，而“-”优先级和“+”一样，也要弹出栈输出，接下来碰到符号“(”，就要把“+”压栈。接着是数字2，输出，总表达式为8 7 2 3 \\* - 2。\n\n![过程](https://s2.ax1x.com/2019/08/25/mgUPlF.png)\n\n7. 接着是符号“)”，这时需要从栈顶开始依次弹出符号输出，直到遇到“(”（“(”也要弹出，只是不输出），“(”之后只剩一个“+”，所以弹出“+”输出，接下来是符号“\\*”，优先级比“+”高，所以压栈，总表达式为8 7 2 3 \\* - 2 +。\n8. 接下来是数字3，输出，紧接着是符号“+”，它比栈顶“\\*”优先级低，所以弹出“\\*”输出，而之后比较的“+”优先级一样，也弹出栈输出，最后“+”压栈，总表达式为8 7 2 3 \\* - 2 + 3 \\* +。\n\n![过程](https://s2.ax1x.com/2019/08/28/moOHG6.jpg)\n\n9. 接着是数字10，输出，接下来是符号“/”，比符号“+”优先级高，所以压栈，总表达式为8 7 2 3 \\* - 2 + 3 \\* + 10。\n10. 接着是数字2，输出。遍历结束，依次弹出栈中元素，最后总表达式为8 7 2 3 \\* - 2 + 3 \\* + 10 2 / +。\n\n![过程](https://s2.ax1x.com/2019/08/28/moXELQ.jpg)\n\n### 代码示例\n```\n// 预先生成运算符的tokens\nprepareTokens() {\n    this.tokens = [\n        new Token('#', TOKEN_TYPE.ENDEXPR),\n        new Token('(', TOKEN_TYPE.LEFTPAREN),\n        new Token(')', TOKEN_TYPE.RIGHTPAREN),\n        new Token('~', TOKEN_TYPE.UNARYOP, 6),       // 负号\n        new Token('abs', TOKEN_TYPE.UNARYOP, 6),     // 求绝对值\n        new Token('sqrt', TOKEN_TYPE.UNARYOP, 6),    // 开平方根\n        new Token('exp', TOKEN_TYPE.UNARYOP, 6),     // e的x次\n        new Token('ln', TOKEN_TYPE.UNARYOP, 6),      // e为底数的对数\n        new Token('log10', TOKEN_TYPE.UNARYOP, 6),   // 10为底数的对数\n        new Token('sin', TOKEN_TYPE.UNARYOP, 6),     // 求sin x\n        new Token('cos', TOKEN_TYPE.UNARYOP, 6),     // 求cos x\n        new Token('tan', TOKEN_TYPE.UNARYOP, 6),     // 求tan x\n        new Token('+', TOKEN_TYPE.BINARYOP, 4),      // 二元+\n        new Token('-', TOKEN_TYPE.BINARYOP, 4),      // 二元-\n        new Token('*', TOKEN_TYPE.BINARYOP, 5),      // 乘法\n        new Token('/', TOKEN_TYPE.BINARYOP, 5),      // 除法\n        new Token('%', TOKEN_TYPE.BINARYOP, 5),      // 除模取余\n        new Token('^', TOKEN_TYPE.BINARYOP, 6),      // 指数运算\n    ]\n}\n\n/**\n * 中缀表达式转化为后缀表达式\n * @return {Array}\n */\ntransform() {\n    const postExp = []\n    const opStack = []\n    for (let i = 0; i < this.infixExp.length; i++) {\n        const pos = this.infixExp[i]\n        const token = this.tokens[pos]\n        switch (token.type) {\n            case TOKEN_TYPE.OPRAND:\n                postExp.push(pos)\n                break;\n            case TOKEN_TYPE.LEFTPAREN:  // “(”直接入栈\n                opStack.push(pos)\n                break;\n            case TOKEN_TYPE.RIGHTPAREN: // 为“)”，出栈直到遇到运算符“(”\n                let prePos = opStack.pop()\n                while (prePos in this.tokens && opStack.length >= 0 &&\n                this.tokens[prePos].type !== TOKEN_TYPE.LEFTPAREN) {\n                    postExp.push(prePos)\n                    prePos = opStack.pop()\n                }\n                break;\n            case TOKEN_TYPE.UNARYOP:\n            case TOKEN_TYPE.BINARYOP:\n                let endright = 0\n                while (endright === 0) {\n                    if (opStack.length <= 0)\n                        endright = 1\n                    else if (this.tokens[opStack[opStack.length - 1]].type === TOKEN_TYPE.LEFTPAREN) {\n                        endright = 1\n                    } else if (this.tokens[opStack[opStack.length - 1]].priority < token.priority) {\n                        endright = 1\n                    } else if (this.tokens[opStack[opStack.length - 1]].priority === token.priority &&\n                                token.priority === MAX_PRIORITY) {\n                        endright = 1\n                    } else {\n                        postExp.push(opStack.pop())\n                        endright = 0\n                    }\n                }\n                opStack.push(pos)\n                break\n            case TOKEN_TYPE.ENDEXPR:\n                while (opStack.length >= 1) {\n                    postExp.push(opStack.pop())\n                }\n                break\n            default:\n                break\n        }\n    }\n\n    postExp.push(0)  // 添加终止符\n    return postExp\n}\n\n```\n中缀表达式`infixExp`中存的是`this.tokens`中的索引，完整代码[Github](https://github.com/salamander-mh/calculator)","slug":"stack_si_ze","published":1,"updated":"2023-03-21T02:48:20.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40lh00322o3m23sg5qos","content":"<h2 id=\"四则运算\">四则运算</h2>\r\n<p>四则运算表达式是我们小学就接触的内容，它遵循“先乘除，后加减，从左到右，括号内先算”的法则，例如“7\r\n+ (5 - 3) * 4 + 6 / 3”，这个表达式先算<strong>5 -\r\n3</strong>得<strong>2</strong>，再算<strong>2 * 4</strong>和<strong>6 /\r\n3</strong>，最后计算<strong>7 + 8\r\n+2</strong>，这个过程很简单，口算就能完成，但是如果让我们在程序里实现这个功能，该如何实现呢？我们遇到的困难在于乘除优在加减的后面，却要先运算，另外还要考虑括号，问题就复杂了。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"后缀表达式\">后缀表达式</h2>\r\n<p>波兰有位科学家也想到了这个问题，他想出了一种新的<strong>不需要括号</strong>的表达式：“后缀表达式”，它更有利于计算机计算。让我们看看它的样子：对于“7\r\n+ (5 - 3) * 4 + 6 / 3”，后缀表达式为“7 5 3 - 4 * + 6 3 /\r\n+”，叫后缀的原因在于<strong>运算符在操作数之后</strong>。我们人类喜欢看到的表达式叫“中缀表达式”（因为运算符在操作数中间），但是计算机不喜欢它。</p>\r\n<h3 id=\"后缀表达式的方法\">后缀表达式的方法</h3>\r\n<p>为了看到后缀表达式的好处，我们先看看，计算机如何利用后缀表达式计算出最终结果。\r\n* 后缀表达式：<strong>7 5 3 - 4 * + 6 3 / +</strong> *\r\n规则：从左到右遍历字符串，遇到数字则进栈，遇到符号则将栈顶的两个数字出栈，进行计算，运算结果进栈，一直到最终获得结果。</p>\r\n<ol type=\"1\">\r\n<li>初始化一个空栈，此栈用来对要运算的数字进出使用。</li>\r\n<li>字符串中前三个都是数字，所以7，5，3进栈。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/20/mGkVZ6.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"3\" type=\"1\">\r\n<li>接下来是“-”，所以5和3出栈，5作为被减数，3作为减数，5减3得到2，并将2入栈。</li>\r\n<li>接着是4入栈。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/20/mGkByn.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"5\" type=\"1\">\r\n<li>接下来是”*“，所以4和2出栈，4乘以2得8，8入栈。</li>\r\n<li>下面是“+”，7和8出栈，7加8得15，15入栈。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/20/mGk7TK.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"7\" type=\"1\">\r\n<li>接下来6和3数字入栈。</li>\r\n<li>遇到符号“/”，所以6和3出栈，6作为被除数，3作为除数，6除3得2，2入栈。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/20/mGA9Tf.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"9\" type=\"1\">\r\n<li>最后遇到符号“+”，15和2出栈，15加2得17，17入栈，遍历结束，将最后结果出栈，得到17。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/20/mGAV6s.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<h3 id=\"中缀表达式转后缀表达式\">中缀表达式转后缀表达式</h3>\r\n<p>可以看到利用<strong>栈</strong>就很容易计算后缀表达式的值，那么现在我们的问题就是中缀转后缀。</p>\r\n<ul>\r\n<li>中缀表达式：“8 + (7 - 2 * 3 + 2) * 3 + 10 / 2”</li>\r\n<li>规则：遍历字符串，遇到数字则输出，即成为后缀表达式一部分；若是操作符，则判断与栈顶符号的优先级（乘除优先级比加减优先级高，乘除优先级一样，加和减也一样），如果高于栈顶符号，则压栈，否则从栈顶开始弹出元素直到遇到遇到优先级更低的符号（或者遇到“(”，“(”只有遇到“)”才会弹出），弹出完这些符号后，把当前符号压栈。</li>\r\n</ul>\r\n<ol type=\"1\">\r\n<li>初始化一空栈，用来对符号进出栈使用。</li>\r\n<li>第一个字符是数字8，输出8，后面符号是“+”，进栈。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/21/mUD2S1.png\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"3\" type=\"1\">\r\n<li>第三个字符是“(”，因为是左括号，所以压栈，第四个字符是7，输出，总表达式为8\r\n7。</li>\r\n<li>接着是“-”，因为栈顶是“(”，所以压栈。后面字符是2，输出，总表达式为8 7\r\n2。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/25/mgNyRO.png\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"5\" type=\"1\">\r\n<li>之后符号是“*”，它的优先级比栈顶“-”高，所以压栈，再之后是数字3，输出，总表达式为8\r\n7 2 3。</li>\r\n<li>接着是符号“+”，它比“*”的优先级低，所以“*”弹出栈输出，而“-”优先级和“+”一样，也要弹出栈输出，接下来碰到符号“(”，就要把“+”压栈。接着是数字2，输出，总表达式为8\r\n7 2 3 * - 2。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/25/mgUPlF.png\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"7\" type=\"1\">\r\n<li>接着是符号“)”，这时需要从栈顶开始依次弹出符号输出，直到遇到“(”（“(”也要弹出，只是不输出），“(”之后只剩一个“+”，所以弹出“+”输出，接下来是符号“*”，优先级比“+”高，所以压栈，总表达式为8\r\n7 2 3 * - 2 +。</li>\r\n<li>接下来是数字3，输出，紧接着是符号“+”，它比栈顶“*”优先级低，所以弹出“*”输出，而之后比较的“+”优先级一样，也弹出栈输出，最后“+”压栈，总表达式为8\r\n7 2 3 * - 2 + 3 * +。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/28/moOHG6.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"9\" type=\"1\">\r\n<li>接着是数字10，输出，接下来是符号“/”，比符号“+”优先级高，所以压栈，总表达式为8\r\n7 2 3 * - 2 + 3 * + 10。</li>\r\n<li>接着是数字2，输出。遍历结束，依次弹出栈中元素，最后总表达式为8 7 2 3\r\n* - 2 + 3 * + 10 2 / +。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/28/moXELQ.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<h3 id=\"代码示例\">代码示例</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 预先生成运算符的tokens</span><br><span class=\"line\">prepareTokens() &#123;</span><br><span class=\"line\">    this.tokens = [</span><br><span class=\"line\">        new Token(&#x27;#&#x27;, TOKEN_TYPE.ENDEXPR),</span><br><span class=\"line\">        new Token(&#x27;(&#x27;, TOKEN_TYPE.LEFTPAREN),</span><br><span class=\"line\">        new Token(&#x27;)&#x27;, TOKEN_TYPE.RIGHTPAREN),</span><br><span class=\"line\">        new Token(&#x27;~&#x27;, TOKEN_TYPE.UNARYOP, 6),       // 负号</span><br><span class=\"line\">        new Token(&#x27;abs&#x27;, TOKEN_TYPE.UNARYOP, 6),     // 求绝对值</span><br><span class=\"line\">        new Token(&#x27;sqrt&#x27;, TOKEN_TYPE.UNARYOP, 6),    // 开平方根</span><br><span class=\"line\">        new Token(&#x27;exp&#x27;, TOKEN_TYPE.UNARYOP, 6),     // e的x次</span><br><span class=\"line\">        new Token(&#x27;ln&#x27;, TOKEN_TYPE.UNARYOP, 6),      // e为底数的对数</span><br><span class=\"line\">        new Token(&#x27;log10&#x27;, TOKEN_TYPE.UNARYOP, 6),   // 10为底数的对数</span><br><span class=\"line\">        new Token(&#x27;sin&#x27;, TOKEN_TYPE.UNARYOP, 6),     // 求sin x</span><br><span class=\"line\">        new Token(&#x27;cos&#x27;, TOKEN_TYPE.UNARYOP, 6),     // 求cos x</span><br><span class=\"line\">        new Token(&#x27;tan&#x27;, TOKEN_TYPE.UNARYOP, 6),     // 求tan x</span><br><span class=\"line\">        new Token(&#x27;+&#x27;, TOKEN_TYPE.BINARYOP, 4),      // 二元+</span><br><span class=\"line\">        new Token(&#x27;-&#x27;, TOKEN_TYPE.BINARYOP, 4),      // 二元-</span><br><span class=\"line\">        new Token(&#x27;*&#x27;, TOKEN_TYPE.BINARYOP, 5),      // 乘法</span><br><span class=\"line\">        new Token(&#x27;/&#x27;, TOKEN_TYPE.BINARYOP, 5),      // 除法</span><br><span class=\"line\">        new Token(&#x27;%&#x27;, TOKEN_TYPE.BINARYOP, 5),      // 除模取余</span><br><span class=\"line\">        new Token(&#x27;^&#x27;, TOKEN_TYPE.BINARYOP, 6),      // 指数运算</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 中缀表达式转化为后缀表达式</span><br><span class=\"line\"> * @return &#123;Array&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">transform() &#123;</span><br><span class=\"line\">    const postExp = []</span><br><span class=\"line\">    const opStack = []</span><br><span class=\"line\">    for (let i = 0; i &lt; this.infixExp.length; i++) &#123;</span><br><span class=\"line\">        const pos = this.infixExp[i]</span><br><span class=\"line\">        const token = this.tokens[pos]</span><br><span class=\"line\">        switch (token.type) &#123;</span><br><span class=\"line\">            case TOKEN_TYPE.OPRAND:</span><br><span class=\"line\">                postExp.push(pos)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.LEFTPAREN:  // “(”直接入栈</span><br><span class=\"line\">                opStack.push(pos)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.RIGHTPAREN: // 为“)”，出栈直到遇到运算符“(”</span><br><span class=\"line\">                let prePos = opStack.pop()</span><br><span class=\"line\">                while (prePos in this.tokens &amp;&amp; opStack.length &gt;= 0 &amp;&amp;</span><br><span class=\"line\">                this.tokens[prePos].type !== TOKEN_TYPE.LEFTPAREN) &#123;</span><br><span class=\"line\">                    postExp.push(prePos)</span><br><span class=\"line\">                    prePos = opStack.pop()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.UNARYOP:</span><br><span class=\"line\">            case TOKEN_TYPE.BINARYOP:</span><br><span class=\"line\">                let endright = 0</span><br><span class=\"line\">                while (endright === 0) &#123;</span><br><span class=\"line\">                    if (opStack.length &lt;= 0)</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    else if (this.tokens[opStack[opStack.length - 1]].type === TOKEN_TYPE.LEFTPAREN) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else if (this.tokens[opStack[opStack.length - 1]].priority &lt; token.priority) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else if (this.tokens[opStack[opStack.length - 1]].priority === token.priority &amp;&amp;</span><br><span class=\"line\">                                token.priority === MAX_PRIORITY) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        postExp.push(opStack.pop())</span><br><span class=\"line\">                        endright = 0</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                opStack.push(pos)</span><br><span class=\"line\">                break</span><br><span class=\"line\">            case TOKEN_TYPE.ENDEXPR:</span><br><span class=\"line\">                while (opStack.length &gt;= 1) &#123;</span><br><span class=\"line\">                    postExp.push(opStack.pop())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    postExp.push(0)  // 添加终止符</span><br><span class=\"line\">    return postExp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>中缀表达式<code>infixExp</code>中存的是<code>this.tokens</code>中的索引，完整代码<a\r\nhref=\"https://github.com/salamander-mh/calculator\">Github</a></p>\r\n","site":{"data":{}},"excerpt":"<h2 id=\"四则运算\">四则运算</h2>\r\n<p>四则运算表达式是我们小学就接触的内容，它遵循“先乘除，后加减，从左到右，括号内先算”的法则，例如“7\r\n+ (5 - 3) * 4 + 6 / 3”，这个表达式先算<strong>5 -\r\n3</strong>得<strong>2</strong>，再算<strong>2 * 4</strong>和<strong>6 /\r\n3</strong>，最后计算<strong>7 + 8\r\n+2</strong>，这个过程很简单，口算就能完成，但是如果让我们在程序里实现这个功能，该如何实现呢？我们遇到的困难在于乘除优在加减的后面，却要先运算，另外还要考虑括号，问题就复杂了。</p>","more":"<h2 id=\"后缀表达式\">后缀表达式</h2>\r\n<p>波兰有位科学家也想到了这个问题，他想出了一种新的<strong>不需要括号</strong>的表达式：“后缀表达式”，它更有利于计算机计算。让我们看看它的样子：对于“7\r\n+ (5 - 3) * 4 + 6 / 3”，后缀表达式为“7 5 3 - 4 * + 6 3 /\r\n+”，叫后缀的原因在于<strong>运算符在操作数之后</strong>。我们人类喜欢看到的表达式叫“中缀表达式”（因为运算符在操作数中间），但是计算机不喜欢它。</p>\r\n<h3 id=\"后缀表达式的方法\">后缀表达式的方法</h3>\r\n<p>为了看到后缀表达式的好处，我们先看看，计算机如何利用后缀表达式计算出最终结果。\r\n* 后缀表达式：<strong>7 5 3 - 4 * + 6 3 / +</strong> *\r\n规则：从左到右遍历字符串，遇到数字则进栈，遇到符号则将栈顶的两个数字出栈，进行计算，运算结果进栈，一直到最终获得结果。</p>\r\n<ol type=\"1\">\r\n<li>初始化一个空栈，此栈用来对要运算的数字进出使用。</li>\r\n<li>字符串中前三个都是数字，所以7，5，3进栈。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/20/mGkVZ6.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"3\" type=\"1\">\r\n<li>接下来是“-”，所以5和3出栈，5作为被减数，3作为减数，5减3得到2，并将2入栈。</li>\r\n<li>接着是4入栈。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/20/mGkByn.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"5\" type=\"1\">\r\n<li>接下来是”*“，所以4和2出栈，4乘以2得8，8入栈。</li>\r\n<li>下面是“+”，7和8出栈，7加8得15，15入栈。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/20/mGk7TK.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"7\" type=\"1\">\r\n<li>接下来6和3数字入栈。</li>\r\n<li>遇到符号“/”，所以6和3出栈，6作为被除数，3作为除数，6除3得2，2入栈。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/20/mGA9Tf.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"9\" type=\"1\">\r\n<li>最后遇到符号“+”，15和2出栈，15加2得17，17入栈，遍历结束，将最后结果出栈，得到17。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/20/mGAV6s.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<h3 id=\"中缀表达式转后缀表达式\">中缀表达式转后缀表达式</h3>\r\n<p>可以看到利用<strong>栈</strong>就很容易计算后缀表达式的值，那么现在我们的问题就是中缀转后缀。</p>\r\n<ul>\r\n<li>中缀表达式：“8 + (7 - 2 * 3 + 2) * 3 + 10 / 2”</li>\r\n<li>规则：遍历字符串，遇到数字则输出，即成为后缀表达式一部分；若是操作符，则判断与栈顶符号的优先级（乘除优先级比加减优先级高，乘除优先级一样，加和减也一样），如果高于栈顶符号，则压栈，否则从栈顶开始弹出元素直到遇到遇到优先级更低的符号（或者遇到“(”，“(”只有遇到“)”才会弹出），弹出完这些符号后，把当前符号压栈。</li>\r\n</ul>\r\n<ol type=\"1\">\r\n<li>初始化一空栈，用来对符号进出栈使用。</li>\r\n<li>第一个字符是数字8，输出8，后面符号是“+”，进栈。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/21/mUD2S1.png\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"3\" type=\"1\">\r\n<li>第三个字符是“(”，因为是左括号，所以压栈，第四个字符是7，输出，总表达式为8\r\n7。</li>\r\n<li>接着是“-”，因为栈顶是“(”，所以压栈。后面字符是2，输出，总表达式为8 7\r\n2。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/25/mgNyRO.png\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"5\" type=\"1\">\r\n<li>之后符号是“*”，它的优先级比栈顶“-”高，所以压栈，再之后是数字3，输出，总表达式为8\r\n7 2 3。</li>\r\n<li>接着是符号“+”，它比“*”的优先级低，所以“*”弹出栈输出，而“-”优先级和“+”一样，也要弹出栈输出，接下来碰到符号“(”，就要把“+”压栈。接着是数字2，输出，总表达式为8\r\n7 2 3 * - 2。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/25/mgUPlF.png\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"7\" type=\"1\">\r\n<li>接着是符号“)”，这时需要从栈顶开始依次弹出符号输出，直到遇到“(”（“(”也要弹出，只是不输出），“(”之后只剩一个“+”，所以弹出“+”输出，接下来是符号“*”，优先级比“+”高，所以压栈，总表达式为8\r\n7 2 3 * - 2 +。</li>\r\n<li>接下来是数字3，输出，紧接着是符号“+”，它比栈顶“*”优先级低，所以弹出“*”输出，而之后比较的“+”优先级一样，也弹出栈输出，最后“+”压栈，总表达式为8\r\n7 2 3 * - 2 + 3 * +。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/28/moOHG6.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<ol start=\"9\" type=\"1\">\r\n<li>接着是数字10，输出，接下来是符号“/”，比符号“+”优先级高，所以压栈，总表达式为8\r\n7 2 3 * - 2 + 3 * + 10。</li>\r\n<li>接着是数字2，输出。遍历结束，依次弹出栈中元素，最后总表达式为8 7 2 3\r\n* - 2 + 3 * + 10 2 / +。</li>\r\n</ol>\r\n<figure>\r\n<img src=\"https://s2.ax1x.com/2019/08/28/moXELQ.jpg\" alt=\"过程\" />\r\n<figcaption aria-hidden=\"true\">过程</figcaption>\r\n</figure>\r\n<h3 id=\"代码示例\">代码示例</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 预先生成运算符的tokens</span><br><span class=\"line\">prepareTokens() &#123;</span><br><span class=\"line\">    this.tokens = [</span><br><span class=\"line\">        new Token(&#x27;#&#x27;, TOKEN_TYPE.ENDEXPR),</span><br><span class=\"line\">        new Token(&#x27;(&#x27;, TOKEN_TYPE.LEFTPAREN),</span><br><span class=\"line\">        new Token(&#x27;)&#x27;, TOKEN_TYPE.RIGHTPAREN),</span><br><span class=\"line\">        new Token(&#x27;~&#x27;, TOKEN_TYPE.UNARYOP, 6),       // 负号</span><br><span class=\"line\">        new Token(&#x27;abs&#x27;, TOKEN_TYPE.UNARYOP, 6),     // 求绝对值</span><br><span class=\"line\">        new Token(&#x27;sqrt&#x27;, TOKEN_TYPE.UNARYOP, 6),    // 开平方根</span><br><span class=\"line\">        new Token(&#x27;exp&#x27;, TOKEN_TYPE.UNARYOP, 6),     // e的x次</span><br><span class=\"line\">        new Token(&#x27;ln&#x27;, TOKEN_TYPE.UNARYOP, 6),      // e为底数的对数</span><br><span class=\"line\">        new Token(&#x27;log10&#x27;, TOKEN_TYPE.UNARYOP, 6),   // 10为底数的对数</span><br><span class=\"line\">        new Token(&#x27;sin&#x27;, TOKEN_TYPE.UNARYOP, 6),     // 求sin x</span><br><span class=\"line\">        new Token(&#x27;cos&#x27;, TOKEN_TYPE.UNARYOP, 6),     // 求cos x</span><br><span class=\"line\">        new Token(&#x27;tan&#x27;, TOKEN_TYPE.UNARYOP, 6),     // 求tan x</span><br><span class=\"line\">        new Token(&#x27;+&#x27;, TOKEN_TYPE.BINARYOP, 4),      // 二元+</span><br><span class=\"line\">        new Token(&#x27;-&#x27;, TOKEN_TYPE.BINARYOP, 4),      // 二元-</span><br><span class=\"line\">        new Token(&#x27;*&#x27;, TOKEN_TYPE.BINARYOP, 5),      // 乘法</span><br><span class=\"line\">        new Token(&#x27;/&#x27;, TOKEN_TYPE.BINARYOP, 5),      // 除法</span><br><span class=\"line\">        new Token(&#x27;%&#x27;, TOKEN_TYPE.BINARYOP, 5),      // 除模取余</span><br><span class=\"line\">        new Token(&#x27;^&#x27;, TOKEN_TYPE.BINARYOP, 6),      // 指数运算</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 中缀表达式转化为后缀表达式</span><br><span class=\"line\"> * @return &#123;Array&#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">transform() &#123;</span><br><span class=\"line\">    const postExp = []</span><br><span class=\"line\">    const opStack = []</span><br><span class=\"line\">    for (let i = 0; i &lt; this.infixExp.length; i++) &#123;</span><br><span class=\"line\">        const pos = this.infixExp[i]</span><br><span class=\"line\">        const token = this.tokens[pos]</span><br><span class=\"line\">        switch (token.type) &#123;</span><br><span class=\"line\">            case TOKEN_TYPE.OPRAND:</span><br><span class=\"line\">                postExp.push(pos)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.LEFTPAREN:  // “(”直接入栈</span><br><span class=\"line\">                opStack.push(pos)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.RIGHTPAREN: // 为“)”，出栈直到遇到运算符“(”</span><br><span class=\"line\">                let prePos = opStack.pop()</span><br><span class=\"line\">                while (prePos in this.tokens &amp;&amp; opStack.length &gt;= 0 &amp;&amp;</span><br><span class=\"line\">                this.tokens[prePos].type !== TOKEN_TYPE.LEFTPAREN) &#123;</span><br><span class=\"line\">                    postExp.push(prePos)</span><br><span class=\"line\">                    prePos = opStack.pop()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case TOKEN_TYPE.UNARYOP:</span><br><span class=\"line\">            case TOKEN_TYPE.BINARYOP:</span><br><span class=\"line\">                let endright = 0</span><br><span class=\"line\">                while (endright === 0) &#123;</span><br><span class=\"line\">                    if (opStack.length &lt;= 0)</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    else if (this.tokens[opStack[opStack.length - 1]].type === TOKEN_TYPE.LEFTPAREN) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else if (this.tokens[opStack[opStack.length - 1]].priority &lt; token.priority) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else if (this.tokens[opStack[opStack.length - 1]].priority === token.priority &amp;&amp;</span><br><span class=\"line\">                                token.priority === MAX_PRIORITY) &#123;</span><br><span class=\"line\">                        endright = 1</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        postExp.push(opStack.pop())</span><br><span class=\"line\">                        endright = 0</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                opStack.push(pos)</span><br><span class=\"line\">                break</span><br><span class=\"line\">            case TOKEN_TYPE.ENDEXPR:</span><br><span class=\"line\">                while (opStack.length &gt;= 1) &#123;</span><br><span class=\"line\">                    postExp.push(opStack.pop())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                break</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    postExp.push(0)  // 添加终止符</span><br><span class=\"line\">    return postExp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>中缀表达式<code>infixExp</code>中存的是<code>this.tokens</code>中的索引，完整代码<a\r\nhref=\"https://github.com/salamander-mh/calculator\">Github</a></p>"},{"title":"Linux网络虚拟化技术之tun/tap","author":"Salamander","date":"2020-01-13T07:00:00.000Z","_content":"我们都知道，Linux实际是通过**网络设备**去操作和使用网卡的，系统安装了一个网卡之后会为其生成一个网络设备实例，比如**eth0**（或者叫**enp7s0**，不同发行版默认网卡命名规则不同）。随着网络虚拟化技术的发展，Linux支持创建出虚拟化的设备，可以通过虚拟化设备的组合实现多种多样的功能和网络拓扑。  \n常见的虚拟化设备有**tun/tap**、**Veth**、**Bridge**、**802.1q VLAN device**。  \n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n\n\n<!-- more -->\n\n先回顾一下经典的**OSI**七层网络模型：  \n┌───────┐  \n  │　应用层　│←第七层  \n├───────┤  \n│　表示层　│  \n├───────┤  \n│　会话层　│  \n├───────┤  \n│　传输层　│  \n├───────┤  \n│　网络层　│   \n├───────┤  \n│数据链路层│  \n├───────┤  \n│　物理层　│←第一层  \n└───────┘ \n\nOSI七层参考模型\n\n## 虚拟设备和物理设备的区别\n对于一个网络设备来说，就像一个管道（pipe）一样，**有两端**，从其中任意一端收到的数据将从另一端发送出去。  \n\n比如一个物理网卡eth0，它的两端分别是内核协议栈（通过内核网络设备管理模块间接的通信）和外面的物理网络，从物理网络收到的数据，会转发给内核协议栈，而应用程序从协议栈发过来的数据将会通过物理网络发送出去。  \n\n那么对于一个虚拟网络设备呢？首先它也归内核的网络设备管理子系统管理，对于Linux内核网络设备管理模块来说，虚拟设备和物理设备没有区别，都是网络设备，都能配置IP，从网络设备来的数据，都会转发给协议栈，协议栈过来的数据，也会交由网络设备发送出去，至于是怎么发送出去的，发到哪里去，那是设备驱动的事情，跟Linux内核就没关系了，所以说虚拟网络设备的一端也是协议栈，而另一端是什么取决于虚拟网络设备的驱动实现。\n\n## tun/tap\n### tun分析实验\n先上图说话：  \n![](https://s2.ax1x.com/2020/01/13/l7D6zT.png)\n\n上图中是**tun**设备的数据走向。\n图中**nsfocus_tun0**就是tun0，是一个tun/tap虚拟设备，而**eno16777736**就是eth0。  \nsocket、协议栈（Newwork Protocol Stack）和网络设备（eth0和tun0）部分都在内核层，其实socket是协议栈的一部分，这里分开来的目的是为了看的更直观。\n\n从上图中可以看出它和物理设备eth0的差别，它们的一端虽然都连着协议栈，但另一端不一样，eth0的另一端是物理网络，这个物理网络可能就是一个交换机，而tun0的另一端是一个用户层的程序，协议栈发给tun0的数据包能被这个应用程序读取到，并且应用程序能直接向tun0写数据。  \n\n数据流向分析：\n1. User Application A通过套接字（socket A）发数据发给使用与**eno16777736**处于同一个网段ip的应用程序，数据走向为通过socket A发给协议栈，最后通过netdevice子系统中的eno16777736的设备驱动（以太网驱动）发送出去，这个是通过真实的物理网卡发送出去。\n2. User Application B通过套接字（socket B）发送数据给使用与**nsfocus_tun0**处于同一个网段ip的应用程序，数据走向为通过socket B发送给协议栈，最后通过netdevice子系统中的**nsfocus_tun0**的设备驱动（tun驱动）发送出去。由于tun设备没有对应真实的物理网卡，所以nsfocus_tun0对端收取数据的是User Application C。User Application C通过读写/dev/tun设备文件进行数据的收发。\n\n其实一般**User Application C**就是个VPN程序（例如openvpn），它收到数据包之后，做一些跟业务相关的处理，然后构造一个新的数据包，将原来的数据包嵌入在新的数据包中，最后通过socket B将数据包转发出去，这时候新数据包的源地址变成了eth0的地址，而目的IP地址变成了一个其它的地址，比如是10.33.0.1（VPN服务器地址），协议栈根据本地路由，发现这个数据包应该要通过**eth0**发送出去，于是将数据包交给eth0，最后**eth0**通过物理网络将数据包发送出去。\n\n\n从上面的流程中可以看出，数据包选择走哪个网络设备完全由**路由表**控制，所以如果我们想让某些网络流量走应用程序B的转发流程，就需要配置路由表让这部分数据走tun0。\n\n\n\n### 示例程序\n为了使用tun/tap设备，用户层程序需要通过系统调用打开/dev/net/tun获得一个读写该设备的文件描述符(FD)，并且调用ioctl()向内核注册一个TUN或TAP类型的虚拟网卡(实例化一个tun/tap设备)，其名称可能是**tap7b7ee9a9-c1/vnetXX/tunXX/tap0**等。\n\n这里写了一个程序，它收到tun设备的数据包之后，只打印出收到了多少字节的数据包，其它的什么都不做。\n```\n#include <net/if.h>\n#include <sys/ioctl.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <string.h>\n#include <sys/types.h>\n#include <linux/if_tun.h>\n#include<stdlib.h>\n#include<stdio.h>\n\nint tun_alloc(int flags)\n{\n\n    struct ifreq ifr;\n    int fd, err;\n    char *clonedev = \"/dev/net/tun\";\n\n    if ((fd = open(clonedev, O_RDWR)) < 0) {\n        return fd;\n    }\n\n    memset(&ifr, 0, sizeof(ifr));\n    ifr.ifr_flags = flags;\n\n    if ((err = ioctl(fd, TUNSETIFF, (void *) &ifr)) < 0) {\n        close(fd);\n        return err;\n    }\n\n    printf(\"Open tun/tap device: %s for reading...\\n\", ifr.ifr_name);\n\n    return fd;\n}\n\nint main()\n{\n\n    int tun_fd, nread;\n    char buffer[1500];\n\n    /* Flags: IFF_TUN   - TUN device (no Ethernet headers)\n     *        IFF_TAP   - TAP device\n     *        IFF_NO_PI - Do not provide packet information\n     */\n    tun_fd = tun_alloc(IFF_TUN | IFF_NO_PI);\n\n    if (tun_fd < 0) {\n        perror(\"Allocating interface\");\n        exit(1);\n    }\n\n    while (1) {\n        nread = read(tun_fd, buffer, sizeof(buffer));\n        if (nread < 0) {\n            perror(\"Reading from interface\");\n            close(tun_fd);\n            exit(1);\n        }\n\n        printf(\"Read %d bytes from tun/tap device\\n\", nread);\n    }\n    return 0;\n}\n```\n编译、运行程序，会发现多出一个网络设备\n```\n$ gcc -o tun tun.c\n$ sudo ./tun\nOpen tun/tap device: tun0 for reading...\n\n\n$ ip addr\n...\n8: tun0: <POINTOPOINT,MULTICAST,NOARP> mtu 1500 qdisc noop state DOWN group default qlen 500\n    link/none\n```\n`tun0`就是新增的网络设备，现在给它配置一个ip，查看接口信息\n```\n$ sudo ifconfig tun0 192.168.10.11/24\n$ ip addr\n...\n8: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 500\n    link/none \n    inet 192.168.10.11/24 scope global tun0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::dd59:736:65ee:e31a/64 scope link stable-privacy \n       valid_lft forever preferred_lft forever\n```\n这时候我们ping地址`192.168.10.12`\n```\nping 192.168.10.12 -c 2\n```\n发现`tun`程序收到了数据\n![](https://s2.ax1x.com/2020/01/13/l7oJfS.png)\n\n\n### tun和tap区别\n两者很类似，只是tun和tap设备他们工作的协议栈层次不同，tap等同于一个以太网设备，用户层程序向tap设备读写的是二层数据包如以太网数据帧，tap设备最常用的就是作为虚拟机网卡。tun则模拟了网络层设备，操作第三层数据包比如IP数据包，openvpn使用TUN设备在C/S间建立VPN隧道。\n\n\n### tap分析实验\ntap设备最常见的用途就是作为虚拟机网卡。\n\n\n\n\n\n\n\n\n\n\n\n## 参考文章\n* [Linux虚拟网络设备之tun/tap](https://segmentfault.com/a/1190000009249039)\n* [云计算底层技术-虚拟网络设备(tun/tap,veth)\n](https://opengers.github.io/openstack/openstack-base-virtual-network-devices-tuntap-veth/)","source":"_posts/tun-tap.md","raw":"title: Linux网络虚拟化技术之tun/tap\nauthor: Salamander\ntags:\n  - network\n  - linux\n  - tun\n  - tap\ncategories:\n  - linux\ndate: 2020-01-13 15:00:00\n---\n我们都知道，Linux实际是通过**网络设备**去操作和使用网卡的，系统安装了一个网卡之后会为其生成一个网络设备实例，比如**eth0**（或者叫**enp7s0**，不同发行版默认网卡命名规则不同）。随着网络虚拟化技术的发展，Linux支持创建出虚拟化的设备，可以通过虚拟化设备的组合实现多种多样的功能和网络拓扑。  \n常见的虚拟化设备有**tun/tap**、**Veth**、**Bridge**、**802.1q VLAN device**。  \n\n本文环境：\n* OS：Ubuntu 18.04.3 LTS\n\n\n<!-- more -->\n\n先回顾一下经典的**OSI**七层网络模型：  \n┌───────┐  \n  │　应用层　│←第七层  \n├───────┤  \n│　表示层　│  \n├───────┤  \n│　会话层　│  \n├───────┤  \n│　传输层　│  \n├───────┤  \n│　网络层　│   \n├───────┤  \n│数据链路层│  \n├───────┤  \n│　物理层　│←第一层  \n└───────┘ \n\nOSI七层参考模型\n\n## 虚拟设备和物理设备的区别\n对于一个网络设备来说，就像一个管道（pipe）一样，**有两端**，从其中任意一端收到的数据将从另一端发送出去。  \n\n比如一个物理网卡eth0，它的两端分别是内核协议栈（通过内核网络设备管理模块间接的通信）和外面的物理网络，从物理网络收到的数据，会转发给内核协议栈，而应用程序从协议栈发过来的数据将会通过物理网络发送出去。  \n\n那么对于一个虚拟网络设备呢？首先它也归内核的网络设备管理子系统管理，对于Linux内核网络设备管理模块来说，虚拟设备和物理设备没有区别，都是网络设备，都能配置IP，从网络设备来的数据，都会转发给协议栈，协议栈过来的数据，也会交由网络设备发送出去，至于是怎么发送出去的，发到哪里去，那是设备驱动的事情，跟Linux内核就没关系了，所以说虚拟网络设备的一端也是协议栈，而另一端是什么取决于虚拟网络设备的驱动实现。\n\n## tun/tap\n### tun分析实验\n先上图说话：  \n![](https://s2.ax1x.com/2020/01/13/l7D6zT.png)\n\n上图中是**tun**设备的数据走向。\n图中**nsfocus_tun0**就是tun0，是一个tun/tap虚拟设备，而**eno16777736**就是eth0。  \nsocket、协议栈（Newwork Protocol Stack）和网络设备（eth0和tun0）部分都在内核层，其实socket是协议栈的一部分，这里分开来的目的是为了看的更直观。\n\n从上图中可以看出它和物理设备eth0的差别，它们的一端虽然都连着协议栈，但另一端不一样，eth0的另一端是物理网络，这个物理网络可能就是一个交换机，而tun0的另一端是一个用户层的程序，协议栈发给tun0的数据包能被这个应用程序读取到，并且应用程序能直接向tun0写数据。  \n\n数据流向分析：\n1. User Application A通过套接字（socket A）发数据发给使用与**eno16777736**处于同一个网段ip的应用程序，数据走向为通过socket A发给协议栈，最后通过netdevice子系统中的eno16777736的设备驱动（以太网驱动）发送出去，这个是通过真实的物理网卡发送出去。\n2. User Application B通过套接字（socket B）发送数据给使用与**nsfocus_tun0**处于同一个网段ip的应用程序，数据走向为通过socket B发送给协议栈，最后通过netdevice子系统中的**nsfocus_tun0**的设备驱动（tun驱动）发送出去。由于tun设备没有对应真实的物理网卡，所以nsfocus_tun0对端收取数据的是User Application C。User Application C通过读写/dev/tun设备文件进行数据的收发。\n\n其实一般**User Application C**就是个VPN程序（例如openvpn），它收到数据包之后，做一些跟业务相关的处理，然后构造一个新的数据包，将原来的数据包嵌入在新的数据包中，最后通过socket B将数据包转发出去，这时候新数据包的源地址变成了eth0的地址，而目的IP地址变成了一个其它的地址，比如是10.33.0.1（VPN服务器地址），协议栈根据本地路由，发现这个数据包应该要通过**eth0**发送出去，于是将数据包交给eth0，最后**eth0**通过物理网络将数据包发送出去。\n\n\n从上面的流程中可以看出，数据包选择走哪个网络设备完全由**路由表**控制，所以如果我们想让某些网络流量走应用程序B的转发流程，就需要配置路由表让这部分数据走tun0。\n\n\n\n### 示例程序\n为了使用tun/tap设备，用户层程序需要通过系统调用打开/dev/net/tun获得一个读写该设备的文件描述符(FD)，并且调用ioctl()向内核注册一个TUN或TAP类型的虚拟网卡(实例化一个tun/tap设备)，其名称可能是**tap7b7ee9a9-c1/vnetXX/tunXX/tap0**等。\n\n这里写了一个程序，它收到tun设备的数据包之后，只打印出收到了多少字节的数据包，其它的什么都不做。\n```\n#include <net/if.h>\n#include <sys/ioctl.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <string.h>\n#include <sys/types.h>\n#include <linux/if_tun.h>\n#include<stdlib.h>\n#include<stdio.h>\n\nint tun_alloc(int flags)\n{\n\n    struct ifreq ifr;\n    int fd, err;\n    char *clonedev = \"/dev/net/tun\";\n\n    if ((fd = open(clonedev, O_RDWR)) < 0) {\n        return fd;\n    }\n\n    memset(&ifr, 0, sizeof(ifr));\n    ifr.ifr_flags = flags;\n\n    if ((err = ioctl(fd, TUNSETIFF, (void *) &ifr)) < 0) {\n        close(fd);\n        return err;\n    }\n\n    printf(\"Open tun/tap device: %s for reading...\\n\", ifr.ifr_name);\n\n    return fd;\n}\n\nint main()\n{\n\n    int tun_fd, nread;\n    char buffer[1500];\n\n    /* Flags: IFF_TUN   - TUN device (no Ethernet headers)\n     *        IFF_TAP   - TAP device\n     *        IFF_NO_PI - Do not provide packet information\n     */\n    tun_fd = tun_alloc(IFF_TUN | IFF_NO_PI);\n\n    if (tun_fd < 0) {\n        perror(\"Allocating interface\");\n        exit(1);\n    }\n\n    while (1) {\n        nread = read(tun_fd, buffer, sizeof(buffer));\n        if (nread < 0) {\n            perror(\"Reading from interface\");\n            close(tun_fd);\n            exit(1);\n        }\n\n        printf(\"Read %d bytes from tun/tap device\\n\", nread);\n    }\n    return 0;\n}\n```\n编译、运行程序，会发现多出一个网络设备\n```\n$ gcc -o tun tun.c\n$ sudo ./tun\nOpen tun/tap device: tun0 for reading...\n\n\n$ ip addr\n...\n8: tun0: <POINTOPOINT,MULTICAST,NOARP> mtu 1500 qdisc noop state DOWN group default qlen 500\n    link/none\n```\n`tun0`就是新增的网络设备，现在给它配置一个ip，查看接口信息\n```\n$ sudo ifconfig tun0 192.168.10.11/24\n$ ip addr\n...\n8: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 500\n    link/none \n    inet 192.168.10.11/24 scope global tun0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::dd59:736:65ee:e31a/64 scope link stable-privacy \n       valid_lft forever preferred_lft forever\n```\n这时候我们ping地址`192.168.10.12`\n```\nping 192.168.10.12 -c 2\n```\n发现`tun`程序收到了数据\n![](https://s2.ax1x.com/2020/01/13/l7oJfS.png)\n\n\n### tun和tap区别\n两者很类似，只是tun和tap设备他们工作的协议栈层次不同，tap等同于一个以太网设备，用户层程序向tap设备读写的是二层数据包如以太网数据帧，tap设备最常用的就是作为虚拟机网卡。tun则模拟了网络层设备，操作第三层数据包比如IP数据包，openvpn使用TUN设备在C/S间建立VPN隧道。\n\n\n### tap分析实验\ntap设备最常见的用途就是作为虚拟机网卡。\n\n\n\n\n\n\n\n\n\n\n\n## 参考文章\n* [Linux虚拟网络设备之tun/tap](https://segmentfault.com/a/1190000009249039)\n* [云计算底层技术-虚拟网络设备(tun/tap,veth)\n](https://opengers.github.io/openstack/openstack-base-virtual-network-devices-tuntap-veth/)","slug":"tun-tap","published":1,"updated":"2023-03-21T02:48:20.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40lh00342o3m62b2cq8c","content":"<p>我们都知道，Linux实际是通过<strong>网络设备</strong>去操作和使用网卡的，系统安装了一个网卡之后会为其生成一个网络设备实例，比如<strong>eth0</strong>（或者叫<strong>enp7s0</strong>，不同发行版默认网卡命名规则不同）。随着网络虚拟化技术的发展，Linux支持创建出虚拟化的设备，可以通过虚拟化设备的组合实现多种多样的功能和网络拓扑。<br />\r\n常见的虚拟化设备有<strong>tun/tap</strong>、<strong>Veth</strong>、<strong>Bridge</strong>、<strong>802.1q\r\nVLAN device</strong>。</p>\r\n<p>本文环境： * OS：Ubuntu 18.04.3 LTS</p>\r\n<span id=\"more\"></span>\r\n<p>先回顾一下经典的<strong>OSI</strong>七层网络模型：<br />\r\n┌───────┐<br />\r\n│　应用层　│←第七层<br />\r\n├───────┤<br />\r\n│　表示层　│<br />\r\n├───────┤<br />\r\n│　会话层　│<br />\r\n├───────┤<br />\r\n│　传输层　│<br />\r\n├───────┤<br />\r\n│　网络层　│<br />\r\n├───────┤<br />\r\n│数据链路层│<br />\r\n├───────┤<br />\r\n│　物理层　│←第一层<br />\r\n└───────┘ </p>\r\n<p>OSI七层参考模型</p>\r\n<h2 id=\"虚拟设备和物理设备的区别\">虚拟设备和物理设备的区别</h2>\r\n<p>对于一个网络设备来说，就像一个管道（pipe）一样，<strong>有两端</strong>，从其中任意一端收到的数据将从另一端发送出去。</p>\r\n<p>比如一个物理网卡eth0，它的两端分别是内核协议栈（通过内核网络设备管理模块间接的通信）和外面的物理网络，从物理网络收到的数据，会转发给内核协议栈，而应用程序从协议栈发过来的数据将会通过物理网络发送出去。</p>\r\n<p>那么对于一个虚拟网络设备呢？首先它也归内核的网络设备管理子系统管理，对于Linux内核网络设备管理模块来说，虚拟设备和物理设备没有区别，都是网络设备，都能配置IP，从网络设备来的数据，都会转发给协议栈，协议栈过来的数据，也会交由网络设备发送出去，至于是怎么发送出去的，发到哪里去，那是设备驱动的事情，跟Linux内核就没关系了，所以说虚拟网络设备的一端也是协议栈，而另一端是什么取决于虚拟网络设备的驱动实现。</p>\r\n<h2 id=\"tuntap\">tun/tap</h2>\r\n<h3 id=\"tun分析实验\">tun分析实验</h3>\r\n<p>先上图说话：<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/13/l7D6zT.png\" /></p>\r\n<p>上图中是<strong>tun</strong>设备的数据走向。\r\n图中<strong>nsfocus_tun0</strong>就是tun0，是一个tun/tap虚拟设备，而<strong>eno16777736</strong>就是eth0。<br />\r\nsocket、协议栈（Newwork Protocol\r\nStack）和网络设备（eth0和tun0）部分都在内核层，其实socket是协议栈的一部分，这里分开来的目的是为了看的更直观。</p>\r\n<p>从上图中可以看出它和物理设备eth0的差别，它们的一端虽然都连着协议栈，但另一端不一样，eth0的另一端是物理网络，这个物理网络可能就是一个交换机，而tun0的另一端是一个用户层的程序，协议栈发给tun0的数据包能被这个应用程序读取到，并且应用程序能直接向tun0写数据。</p>\r\n<p>数据流向分析： 1. User Application A通过套接字（socket\r\nA）发数据发给使用与<strong>eno16777736</strong>处于同一个网段ip的应用程序，数据走向为通过socket\r\nA发给协议栈，最后通过netdevice子系统中的eno16777736的设备驱动（以太网驱动）发送出去，这个是通过真实的物理网卡发送出去。\r\n2. User Application B通过套接字（socket\r\nB）发送数据给使用与<strong>nsfocus_tun0</strong>处于同一个网段ip的应用程序，数据走向为通过socket\r\nB发送给协议栈，最后通过netdevice子系统中的<strong>nsfocus_tun0</strong>的设备驱动（tun驱动）发送出去。由于tun设备没有对应真实的物理网卡，所以nsfocus_tun0对端收取数据的是User\r\nApplication C。User Application\r\nC通过读写/dev/tun设备文件进行数据的收发。</p>\r\n<p>其实一般<strong>User Application\r\nC</strong>就是个VPN程序（例如openvpn），它收到数据包之后，做一些跟业务相关的处理，然后构造一个新的数据包，将原来的数据包嵌入在新的数据包中，最后通过socket\r\nB将数据包转发出去，这时候新数据包的源地址变成了eth0的地址，而目的IP地址变成了一个其它的地址，比如是10.33.0.1（VPN服务器地址），协议栈根据本地路由，发现这个数据包应该要通过<strong>eth0</strong>发送出去，于是将数据包交给eth0，最后<strong>eth0</strong>通过物理网络将数据包发送出去。</p>\r\n<p>从上面的流程中可以看出，数据包选择走哪个网络设备完全由<strong>路由表</strong>控制，所以如果我们想让某些网络流量走应用程序B的转发流程，就需要配置路由表让这部分数据走tun0。</p>\r\n<h3 id=\"示例程序\">示例程序</h3>\r\n<p>为了使用tun/tap设备，用户层程序需要通过系统调用打开/dev/net/tun获得一个读写该设备的文件描述符(FD)，并且调用ioctl()向内核注册一个TUN或TAP类型的虚拟网卡(实例化一个tun/tap设备)，其名称可能是<strong>tap7b7ee9a9-c1/vnetXX/tunXX/tap0</strong>等。</p>\r\n<p>这里写了一个程序，它收到tun设备的数据包之后，只打印出收到了多少字节的数据包，其它的什么都不做。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;net/if.h&gt;</span><br><span class=\"line\">#include &lt;sys/ioctl.h&gt;</span><br><span class=\"line\">#include &lt;sys/stat.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;linux/if_tun.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int tun_alloc(int flags)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct ifreq ifr;</span><br><span class=\"line\">    int fd, err;</span><br><span class=\"line\">    char *clonedev = &quot;/dev/net/tun&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((fd = open(clonedev, O_RDWR)) &lt; 0) &#123;</span><br><span class=\"line\">        return fd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    memset(&amp;ifr, 0, sizeof(ifr));</span><br><span class=\"line\">    ifr.ifr_flags = flags;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((err = ioctl(fd, TUNSETIFF, (void *) &amp;ifr)) &lt; 0) &#123;</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        return err;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Open tun/tap device: %s for reading...\\n&quot;, ifr.ifr_name);</span><br><span class=\"line\"></span><br><span class=\"line\">    return fd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int tun_fd, nread;</span><br><span class=\"line\">    char buffer[1500];</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Flags: IFF_TUN   - TUN device (no Ethernet headers)</span><br><span class=\"line\">     *        IFF_TAP   - TAP device</span><br><span class=\"line\">     *        IFF_NO_PI - Do not provide packet information</span><br><span class=\"line\">     */</span><br><span class=\"line\">    tun_fd = tun_alloc(IFF_TUN | IFF_NO_PI);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (tun_fd &lt; 0) &#123;</span><br><span class=\"line\">        perror(&quot;Allocating interface&quot;);</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (1) &#123;</span><br><span class=\"line\">        nread = read(tun_fd, buffer, sizeof(buffer));</span><br><span class=\"line\">        if (nread &lt; 0) &#123;</span><br><span class=\"line\">            perror(&quot;Reading from interface&quot;);</span><br><span class=\"line\">            close(tun_fd);</span><br><span class=\"line\">            exit(1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        printf(&quot;Read %d bytes from tun/tap device\\n&quot;, nread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 编译、运行程序，会发现多出一个网络设备 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o tun tun.c</span><br><span class=\"line\">$ sudo ./tun</span><br><span class=\"line\">Open tun/tap device: tun0 for reading...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ ip addr</span><br><span class=\"line\">...</span><br><span class=\"line\">8: tun0: &lt;POINTOPOINT,MULTICAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 500</span><br><span class=\"line\">    link/none</span><br></pre></td></tr></table></figure>\r\n<code>tun0</code>就是新增的网络设备，现在给它配置一个ip，查看接口信息\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ifconfig tun0 192.168.10.11/24</span><br><span class=\"line\">$ ip addr</span><br><span class=\"line\">...</span><br><span class=\"line\">8: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 500</span><br><span class=\"line\">    link/none </span><br><span class=\"line\">    inet 192.168.10.11/24 scope global tun0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::dd59:736:65ee:e31a/64 scope link stable-privacy </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure> 这时候我们ping地址<code>192.168.10.12</code> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 192.168.10.12 -c 2</span><br></pre></td></tr></table></figure>\r\n发现<code>tun</code>程序收到了数据 <img\r\nsrc=\"https://s2.ax1x.com/2020/01/13/l7oJfS.png\" /></p>\r\n<h3 id=\"tun和tap区别\">tun和tap区别</h3>\r\n<p>两者很类似，只是tun和tap设备他们工作的协议栈层次不同，tap等同于一个以太网设备，用户层程序向tap设备读写的是二层数据包如以太网数据帧，tap设备最常用的就是作为虚拟机网卡。tun则模拟了网络层设备，操作第三层数据包比如IP数据包，openvpn使用TUN设备在C/S间建立VPN隧道。</p>\r\n<h3 id=\"tap分析实验\">tap分析实验</h3>\r\n<p>tap设备最常见的用途就是作为虚拟机网卡。</p>\r\n<h2 id=\"参考文章\">参考文章</h2>\r\n<ul>\r\n<li><a\r\nhref=\"https://segmentfault.com/a/1190000009249039\">Linux虚拟网络设备之tun/tap</a></li>\r\n<li><a\r\nhref=\"https://opengers.github.io/openstack/openstack-base-virtual-network-devices-tuntap-veth/\">云计算底层技术-虚拟网络设备(tun/tap,veth)</a></li>\r\n</ul>\r\n","site":{"data":{}},"excerpt":"<p>我们都知道，Linux实际是通过<strong>网络设备</strong>去操作和使用网卡的，系统安装了一个网卡之后会为其生成一个网络设备实例，比如<strong>eth0</strong>（或者叫<strong>enp7s0</strong>，不同发行版默认网卡命名规则不同）。随着网络虚拟化技术的发展，Linux支持创建出虚拟化的设备，可以通过虚拟化设备的组合实现多种多样的功能和网络拓扑。<br />\r\n常见的虚拟化设备有<strong>tun/tap</strong>、<strong>Veth</strong>、<strong>Bridge</strong>、<strong>802.1q\r\nVLAN device</strong>。</p>\r\n<p>本文环境： * OS：Ubuntu 18.04.3 LTS</p>","more":"<p>先回顾一下经典的<strong>OSI</strong>七层网络模型：<br />\r\n┌───────┐<br />\r\n│　应用层　│←第七层<br />\r\n├───────┤<br />\r\n│　表示层　│<br />\r\n├───────┤<br />\r\n│　会话层　│<br />\r\n├───────┤<br />\r\n│　传输层　│<br />\r\n├───────┤<br />\r\n│　网络层　│<br />\r\n├───────┤<br />\r\n│数据链路层│<br />\r\n├───────┤<br />\r\n│　物理层　│←第一层<br />\r\n└───────┘ </p>\r\n<p>OSI七层参考模型</p>\r\n<h2 id=\"虚拟设备和物理设备的区别\">虚拟设备和物理设备的区别</h2>\r\n<p>对于一个网络设备来说，就像一个管道（pipe）一样，<strong>有两端</strong>，从其中任意一端收到的数据将从另一端发送出去。</p>\r\n<p>比如一个物理网卡eth0，它的两端分别是内核协议栈（通过内核网络设备管理模块间接的通信）和外面的物理网络，从物理网络收到的数据，会转发给内核协议栈，而应用程序从协议栈发过来的数据将会通过物理网络发送出去。</p>\r\n<p>那么对于一个虚拟网络设备呢？首先它也归内核的网络设备管理子系统管理，对于Linux内核网络设备管理模块来说，虚拟设备和物理设备没有区别，都是网络设备，都能配置IP，从网络设备来的数据，都会转发给协议栈，协议栈过来的数据，也会交由网络设备发送出去，至于是怎么发送出去的，发到哪里去，那是设备驱动的事情，跟Linux内核就没关系了，所以说虚拟网络设备的一端也是协议栈，而另一端是什么取决于虚拟网络设备的驱动实现。</p>\r\n<h2 id=\"tuntap\">tun/tap</h2>\r\n<h3 id=\"tun分析实验\">tun分析实验</h3>\r\n<p>先上图说话：<br />\r\n<img src=\"https://s2.ax1x.com/2020/01/13/l7D6zT.png\" /></p>\r\n<p>上图中是<strong>tun</strong>设备的数据走向。\r\n图中<strong>nsfocus_tun0</strong>就是tun0，是一个tun/tap虚拟设备，而<strong>eno16777736</strong>就是eth0。<br />\r\nsocket、协议栈（Newwork Protocol\r\nStack）和网络设备（eth0和tun0）部分都在内核层，其实socket是协议栈的一部分，这里分开来的目的是为了看的更直观。</p>\r\n<p>从上图中可以看出它和物理设备eth0的差别，它们的一端虽然都连着协议栈，但另一端不一样，eth0的另一端是物理网络，这个物理网络可能就是一个交换机，而tun0的另一端是一个用户层的程序，协议栈发给tun0的数据包能被这个应用程序读取到，并且应用程序能直接向tun0写数据。</p>\r\n<p>数据流向分析： 1. User Application A通过套接字（socket\r\nA）发数据发给使用与<strong>eno16777736</strong>处于同一个网段ip的应用程序，数据走向为通过socket\r\nA发给协议栈，最后通过netdevice子系统中的eno16777736的设备驱动（以太网驱动）发送出去，这个是通过真实的物理网卡发送出去。\r\n2. User Application B通过套接字（socket\r\nB）发送数据给使用与<strong>nsfocus_tun0</strong>处于同一个网段ip的应用程序，数据走向为通过socket\r\nB发送给协议栈，最后通过netdevice子系统中的<strong>nsfocus_tun0</strong>的设备驱动（tun驱动）发送出去。由于tun设备没有对应真实的物理网卡，所以nsfocus_tun0对端收取数据的是User\r\nApplication C。User Application\r\nC通过读写/dev/tun设备文件进行数据的收发。</p>\r\n<p>其实一般<strong>User Application\r\nC</strong>就是个VPN程序（例如openvpn），它收到数据包之后，做一些跟业务相关的处理，然后构造一个新的数据包，将原来的数据包嵌入在新的数据包中，最后通过socket\r\nB将数据包转发出去，这时候新数据包的源地址变成了eth0的地址，而目的IP地址变成了一个其它的地址，比如是10.33.0.1（VPN服务器地址），协议栈根据本地路由，发现这个数据包应该要通过<strong>eth0</strong>发送出去，于是将数据包交给eth0，最后<strong>eth0</strong>通过物理网络将数据包发送出去。</p>\r\n<p>从上面的流程中可以看出，数据包选择走哪个网络设备完全由<strong>路由表</strong>控制，所以如果我们想让某些网络流量走应用程序B的转发流程，就需要配置路由表让这部分数据走tun0。</p>\r\n<h3 id=\"示例程序\">示例程序</h3>\r\n<p>为了使用tun/tap设备，用户层程序需要通过系统调用打开/dev/net/tun获得一个读写该设备的文件描述符(FD)，并且调用ioctl()向内核注册一个TUN或TAP类型的虚拟网卡(实例化一个tun/tap设备)，其名称可能是<strong>tap7b7ee9a9-c1/vnetXX/tunXX/tap0</strong>等。</p>\r\n<p>这里写了一个程序，它收到tun设备的数据包之后，只打印出收到了多少字节的数据包，其它的什么都不做。\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;net/if.h&gt;</span><br><span class=\"line\">#include &lt;sys/ioctl.h&gt;</span><br><span class=\"line\">#include &lt;sys/stat.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;linux/if_tun.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int tun_alloc(int flags)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct ifreq ifr;</span><br><span class=\"line\">    int fd, err;</span><br><span class=\"line\">    char *clonedev = &quot;/dev/net/tun&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((fd = open(clonedev, O_RDWR)) &lt; 0) &#123;</span><br><span class=\"line\">        return fd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    memset(&amp;ifr, 0, sizeof(ifr));</span><br><span class=\"line\">    ifr.ifr_flags = flags;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((err = ioctl(fd, TUNSETIFF, (void *) &amp;ifr)) &lt; 0) &#123;</span><br><span class=\"line\">        close(fd);</span><br><span class=\"line\">        return err;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Open tun/tap device: %s for reading...\\n&quot;, ifr.ifr_name);</span><br><span class=\"line\"></span><br><span class=\"line\">    return fd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    int tun_fd, nread;</span><br><span class=\"line\">    char buffer[1500];</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Flags: IFF_TUN   - TUN device (no Ethernet headers)</span><br><span class=\"line\">     *        IFF_TAP   - TAP device</span><br><span class=\"line\">     *        IFF_NO_PI - Do not provide packet information</span><br><span class=\"line\">     */</span><br><span class=\"line\">    tun_fd = tun_alloc(IFF_TUN | IFF_NO_PI);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (tun_fd &lt; 0) &#123;</span><br><span class=\"line\">        perror(&quot;Allocating interface&quot;);</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (1) &#123;</span><br><span class=\"line\">        nread = read(tun_fd, buffer, sizeof(buffer));</span><br><span class=\"line\">        if (nread &lt; 0) &#123;</span><br><span class=\"line\">            perror(&quot;Reading from interface&quot;);</span><br><span class=\"line\">            close(tun_fd);</span><br><span class=\"line\">            exit(1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        printf(&quot;Read %d bytes from tun/tap device\\n&quot;, nread);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> 编译、运行程序，会发现多出一个网络设备 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc -o tun tun.c</span><br><span class=\"line\">$ sudo ./tun</span><br><span class=\"line\">Open tun/tap device: tun0 for reading...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ ip addr</span><br><span class=\"line\">...</span><br><span class=\"line\">8: tun0: &lt;POINTOPOINT,MULTICAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 500</span><br><span class=\"line\">    link/none</span><br></pre></td></tr></table></figure>\r\n<code>tun0</code>就是新增的网络设备，现在给它配置一个ip，查看接口信息\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ifconfig tun0 192.168.10.11/24</span><br><span class=\"line\">$ ip addr</span><br><span class=\"line\">...</span><br><span class=\"line\">8: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 500</span><br><span class=\"line\">    link/none </span><br><span class=\"line\">    inet 192.168.10.11/24 scope global tun0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::dd59:736:65ee:e31a/64 scope link stable-privacy </span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure> 这时候我们ping地址<code>192.168.10.12</code> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 192.168.10.12 -c 2</span><br></pre></td></tr></table></figure>\r\n发现<code>tun</code>程序收到了数据 <img\r\nsrc=\"https://s2.ax1x.com/2020/01/13/l7oJfS.png\" /></p>\r\n<h3 id=\"tun和tap区别\">tun和tap区别</h3>\r\n<p>两者很类似，只是tun和tap设备他们工作的协议栈层次不同，tap等同于一个以太网设备，用户层程序向tap设备读写的是二层数据包如以太网数据帧，tap设备最常用的就是作为虚拟机网卡。tun则模拟了网络层设备，操作第三层数据包比如IP数据包，openvpn使用TUN设备在C/S间建立VPN隧道。</p>\r\n<h3 id=\"tap分析实验\">tap分析实验</h3>\r\n<p>tap设备最常见的用途就是作为虚拟机网卡。</p>\r\n<h2 id=\"参考文章\">参考文章</h2>\r\n<ul>\r\n<li><a\r\nhref=\"https://segmentfault.com/a/1190000009249039\">Linux虚拟网络设备之tun/tap</a></li>\r\n<li><a\r\nhref=\"https://opengers.github.io/openstack/openstack-base-virtual-network-devices-tuntap-veth/\">云计算底层技术-虚拟网络设备(tun/tap,veth)</a></li>\r\n</ul>"},{"title":"一步步自己做个Docker之Docker网络原理","author":"Salamander","date":"2020-04-28T07:00:00.000Z","_content":"![docker logo](/images/docker-logo.png)\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS\n* Golang版本：1.12.13\n\n\n<!-- more -->\n\n\n## 自己创建Docker网络\n\n>当 Docker 启动时，会自动在主机上创建一个 docker0 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。 同时，Docker 随机分配一个本地未占用的私有网段（在 RFC1918 中定义）中的一个地址给 docker0 接口。比如典型的 172.17.42.1，掩码为 255.255.0.0。此后启动的容器内的网口也会自动分配一个同一网段（172.17.0.0/16）的地址。 当创建一个 Docker 容器的时候，同时会创建了一对 veth pair 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 eth0；另一端在本地并被挂载到 docker0 网桥，名称以 veth 开头（例如 vethAQI2QT）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。如图\n![upload successful](https://s1.ax1x.com/2020/04/29/J7aODe.png)\n\n\n下面以自定义的容器方式，一步步配置网络, 达到以下目标:\n* 容器间能够通信\n* 容器能够联外网\n首先创建一个容器，但不使用默认网络配置，使用`--net=none`选项:\n```\ndocker run -t -i --net=none ubuntu:14.04 bash\ndocker ps # 获取容器id=6414d7278905\n```\n获取容器pid:\n```\ndocker inspect 6414d7278905 | grep -i \"\\<pid\\\"\"\n#  \"Pid\": 11776,\npid=11776\n```\n创建一个新的netns，并把容器放入新建的netns中。（根据约定，命名的 network namespace 是可以打开的 **/var/run/netns/** 目录下的一个对象。比如有一个名称为 net1 的 network namespace 对象，则可以由打开 **/var/run/netns/net1** 对象产生的文件描述符引用 network namespace net1。通过引用该文件描述符，可以修改进程的 network namespace。）\n```\nsudo ip netns add netns666 # 会产生一个/var/run/netns/netns666的文件\nsudo ip netns ls # 查看新创建netns\nnetns666\nsudo mount --bind /proc/$pid/ns/net /var/run/netns/netns666 # 加入新的netns\nsudo ip netns pids netns666   # 查看netns666中进程的 PID\n11776\n```\n\n接下来创建一个veth对，其中一个设置为容器所在的netns，即`netns666`\n```\nsudo ip link add name veth_d366 type veth peer name veth_d366_peer\nsudo ip link set veth_d366_peer netns netns666\n```\n进入`netns666` netns设置网卡名称和ip:\n```\nsudo ip netns exec netns666 bash\nsudo ip link set veth_d366_peer name eth0\nsudo ifconfig  eth0 10.0.0.2/24 # 设置ip为10.0.0.2\nping 10.0.0.2 # 能ping通\nexit\n```\n上述命令给veth_d366_peer配置完ip的情况：\n```\nip addr show\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n36: eth0@if37: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state LOWERLAYERDOWN group default qlen 1000\n    link/ether 9e:67:30:e3:65:34 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.0.0.2/24 brd 10.0.0.255 scope global eth0\n       valid_lft forever preferred_lft forever\n```\n在容器中ping 10.0.0.2也能ping通,说明设置正确\n```\nping 10.0.0.2 # 宿主机上应该不通\ndocker exec 6414d7278905 ping 10.0.0.2 # 成功ping通\n```\n创建网桥，并把veth另一端的虚拟网卡加入新创建的网桥中:\n```\nsudo brctl addbr br666 # 创建新网桥br666\nsudo brctl addif br666 veth_d366 # 把虚拟网卡加入网桥br666中\nsudo ifconfig br666 10.0.0.1/24 # 设置网桥ip\nsudo ip link set veth_d366 up # 启动虚拟网卡\n```\n测试下：\n```\nping 10.0.0.2 # 宿主机上成功ping通\ndocker exec 6414d7278905 ping 10.0.0.1 # 成功ping通\n```\n若以上两个都能ping通说明配置成功！  \n最后，我们需要使得容器能够联外网，需要设置NAT，使用iptables设置:  \n```\nsudo iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o em1 -j MASQUERADE\n```\n`em1`是真正的物理网卡对应的网络设备，不同电脑上名字不一样，我的Ubuntu上为`enp7s0`。  \n另外，还需要设置`FORWARD`规则（允许`br666`转发，IP forwarding要开启，使用`sudo sysctl -w net.ipv4.ip_forward=1`）\n```\nsudo iptables -A FORWARD -i br666 -o br666  -j ACCEPT\nsudo iptables -A FORWARD -i br666 ! -o br666  -j ACCEPT\nsudo iptables -A FORWARD ! -i br666  -o br666  -j ACCEPT\n```\n\n\n设置容器默认路由为网桥ip（注意在容器内使用route add 添加, 会出现SIOCADDRT: Operation not permitted错误), 因此只能使用ip netns exec设置:\n```\nsudo ip netns exec netns666 route add default gw 10.0.0.1\n```\n测试，此时请确保宿主机能够联外网,进入容器内部:\n```\nping baidu.com # 成功ping通，确保icmp没有被禁\n```\n效果图：  \n\n![upload successful](/images/my_docker_ping.png)\n\n\n## Docker网络和虚拟机网络区别\n\n### 虚拟机\n虚拟机，如图，虚拟机通过tun/tap或者其它类似的虚拟网络设备，将虚拟机内的网卡同br0连接起来，这样就达到和真实交换机一样的效果，虚拟机发出去的数据包先到达br0，然后由br0交给eth0发送出去，数据包都不需要经过host机器的协议栈，效率高。  \n\n![image](https://s1.ax1x.com/2020/04/30/Jb090O.png)\n\n### Docker\ndocker，如图，由于容器运行在自己单独的network namespace里面，所以都有自己单独的协议栈，情况和上面的虚拟机差不多，但它采用了另一种方式来和外界通信\n\n![](https://s1.ax1x.com/2020/04/30/JbrFNF.png)\n\n容器中配置网关为.9.1，发出去的数据包先到达`br0`，然后交给host机器的协议栈，由于目的IP是外网IP，且host机器开启了`IP forward`功能，于是数据包会通过eth0发送出去，由于.9.1是内网IP，所以一般发出去之前会先做NAT转换（NAT转换和IP forward功能都需要自己配置）。**由于要经过host机器的协议栈，并且还要做NAT转换，所以性能没有上面虚拟机那种方案好**，优点是容器处于内网中，安全性相对要高点。（由于数据包统一由IP层从eth0转发出去，所以不存在mac地址的问题，在无线网络环境下也工作良好）\n\n\n\n\n参考：\n* [Linux ip netns 命令](https://www.cnblogs.com/sparkdev/p/9253409.html)\n* [docker网络原理.md](https://github.com/int32bit/notes/blob/master/cloud/docker%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86.md)\n* [Docker 网络之理解 bridge 驱动](https://www.cnblogs.com/sparkdev/p/9217310.html)\n* [Linux内核网络设备——bridge设备](http://blog.nsfocus.net/linux-bridge/)","source":"_posts/step_to_step_Docker之Docker_network_underlying.md","raw":"title: 一步步自己做个Docker之Docker网络原理\nauthor: Salamander\ntags:\n  - Docker\n  - Linux\ncategories:\n  - Docker\n  - Linux\ndate: 2020-04-28 15:00:00\n---\n![docker logo](/images/docker-logo.png)\n\n本文环境：\n* OS：Ubuntu 18.04.4 LTS\n* Golang版本：1.12.13\n\n\n<!-- more -->\n\n\n## 自己创建Docker网络\n\n>当 Docker 启动时，会自动在主机上创建一个 docker0 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。 同时，Docker 随机分配一个本地未占用的私有网段（在 RFC1918 中定义）中的一个地址给 docker0 接口。比如典型的 172.17.42.1，掩码为 255.255.0.0。此后启动的容器内的网口也会自动分配一个同一网段（172.17.0.0/16）的地址。 当创建一个 Docker 容器的时候，同时会创建了一对 veth pair 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 eth0；另一端在本地并被挂载到 docker0 网桥，名称以 veth 开头（例如 vethAQI2QT）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。如图\n![upload successful](https://s1.ax1x.com/2020/04/29/J7aODe.png)\n\n\n下面以自定义的容器方式，一步步配置网络, 达到以下目标:\n* 容器间能够通信\n* 容器能够联外网\n首先创建一个容器，但不使用默认网络配置，使用`--net=none`选项:\n```\ndocker run -t -i --net=none ubuntu:14.04 bash\ndocker ps # 获取容器id=6414d7278905\n```\n获取容器pid:\n```\ndocker inspect 6414d7278905 | grep -i \"\\<pid\\\"\"\n#  \"Pid\": 11776,\npid=11776\n```\n创建一个新的netns，并把容器放入新建的netns中。（根据约定，命名的 network namespace 是可以打开的 **/var/run/netns/** 目录下的一个对象。比如有一个名称为 net1 的 network namespace 对象，则可以由打开 **/var/run/netns/net1** 对象产生的文件描述符引用 network namespace net1。通过引用该文件描述符，可以修改进程的 network namespace。）\n```\nsudo ip netns add netns666 # 会产生一个/var/run/netns/netns666的文件\nsudo ip netns ls # 查看新创建netns\nnetns666\nsudo mount --bind /proc/$pid/ns/net /var/run/netns/netns666 # 加入新的netns\nsudo ip netns pids netns666   # 查看netns666中进程的 PID\n11776\n```\n\n接下来创建一个veth对，其中一个设置为容器所在的netns，即`netns666`\n```\nsudo ip link add name veth_d366 type veth peer name veth_d366_peer\nsudo ip link set veth_d366_peer netns netns666\n```\n进入`netns666` netns设置网卡名称和ip:\n```\nsudo ip netns exec netns666 bash\nsudo ip link set veth_d366_peer name eth0\nsudo ifconfig  eth0 10.0.0.2/24 # 设置ip为10.0.0.2\nping 10.0.0.2 # 能ping通\nexit\n```\n上述命令给veth_d366_peer配置完ip的情况：\n```\nip addr show\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n36: eth0@if37: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state LOWERLAYERDOWN group default qlen 1000\n    link/ether 9e:67:30:e3:65:34 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 10.0.0.2/24 brd 10.0.0.255 scope global eth0\n       valid_lft forever preferred_lft forever\n```\n在容器中ping 10.0.0.2也能ping通,说明设置正确\n```\nping 10.0.0.2 # 宿主机上应该不通\ndocker exec 6414d7278905 ping 10.0.0.2 # 成功ping通\n```\n创建网桥，并把veth另一端的虚拟网卡加入新创建的网桥中:\n```\nsudo brctl addbr br666 # 创建新网桥br666\nsudo brctl addif br666 veth_d366 # 把虚拟网卡加入网桥br666中\nsudo ifconfig br666 10.0.0.1/24 # 设置网桥ip\nsudo ip link set veth_d366 up # 启动虚拟网卡\n```\n测试下：\n```\nping 10.0.0.2 # 宿主机上成功ping通\ndocker exec 6414d7278905 ping 10.0.0.1 # 成功ping通\n```\n若以上两个都能ping通说明配置成功！  \n最后，我们需要使得容器能够联外网，需要设置NAT，使用iptables设置:  \n```\nsudo iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o em1 -j MASQUERADE\n```\n`em1`是真正的物理网卡对应的网络设备，不同电脑上名字不一样，我的Ubuntu上为`enp7s0`。  \n另外，还需要设置`FORWARD`规则（允许`br666`转发，IP forwarding要开启，使用`sudo sysctl -w net.ipv4.ip_forward=1`）\n```\nsudo iptables -A FORWARD -i br666 -o br666  -j ACCEPT\nsudo iptables -A FORWARD -i br666 ! -o br666  -j ACCEPT\nsudo iptables -A FORWARD ! -i br666  -o br666  -j ACCEPT\n```\n\n\n设置容器默认路由为网桥ip（注意在容器内使用route add 添加, 会出现SIOCADDRT: Operation not permitted错误), 因此只能使用ip netns exec设置:\n```\nsudo ip netns exec netns666 route add default gw 10.0.0.1\n```\n测试，此时请确保宿主机能够联外网,进入容器内部:\n```\nping baidu.com # 成功ping通，确保icmp没有被禁\n```\n效果图：  \n\n![upload successful](/images/my_docker_ping.png)\n\n\n## Docker网络和虚拟机网络区别\n\n### 虚拟机\n虚拟机，如图，虚拟机通过tun/tap或者其它类似的虚拟网络设备，将虚拟机内的网卡同br0连接起来，这样就达到和真实交换机一样的效果，虚拟机发出去的数据包先到达br0，然后由br0交给eth0发送出去，数据包都不需要经过host机器的协议栈，效率高。  \n\n![image](https://s1.ax1x.com/2020/04/30/Jb090O.png)\n\n### Docker\ndocker，如图，由于容器运行在自己单独的network namespace里面，所以都有自己单独的协议栈，情况和上面的虚拟机差不多，但它采用了另一种方式来和外界通信\n\n![](https://s1.ax1x.com/2020/04/30/JbrFNF.png)\n\n容器中配置网关为.9.1，发出去的数据包先到达`br0`，然后交给host机器的协议栈，由于目的IP是外网IP，且host机器开启了`IP forward`功能，于是数据包会通过eth0发送出去，由于.9.1是内网IP，所以一般发出去之前会先做NAT转换（NAT转换和IP forward功能都需要自己配置）。**由于要经过host机器的协议栈，并且还要做NAT转换，所以性能没有上面虚拟机那种方案好**，优点是容器处于内网中，安全性相对要高点。（由于数据包统一由IP层从eth0转发出去，所以不存在mac地址的问题，在无线网络环境下也工作良好）\n\n\n\n\n参考：\n* [Linux ip netns 命令](https://www.cnblogs.com/sparkdev/p/9253409.html)\n* [docker网络原理.md](https://github.com/int32bit/notes/blob/master/cloud/docker%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86.md)\n* [Docker 网络之理解 bridge 驱动](https://www.cnblogs.com/sparkdev/p/9217310.html)\n* [Linux内核网络设备——bridge设备](http://blog.nsfocus.net/linux-bridge/)","slug":"step_to_step_Docker之Docker_network_underlying","published":1,"updated":"2023-03-21T02:48:20.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40li00382o3m788zd5wb","content":"<figure>\r\n<img src=\"/images/docker-logo.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS * Golang版本：1.12.13</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"自己创建docker网络\">自己创建Docker网络</h2>\r\n<blockquote>\r\n<p>当 Docker 启动时，会自动在主机上创建一个 docker0 虚拟网桥，实际上是\r\nLinux 的一个\r\nbridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。\r\n同时，Docker 随机分配一个本地未占用的私有网段（在 RFC1918\r\n中定义）中的一个地址给 docker0 接口。比如典型的 172.17.42.1，掩码为\r\n255.255.0.0。此后启动的容器内的网口也会自动分配一个同一网段（172.17.0.0/16）的地址。\r\n当创建一个 Docker 容器的时候，同时会创建了一对 veth pair\r\n接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即\r\neth0；另一端在本地并被挂载到 docker0 网桥，名称以 veth 开头（例如\r\nvethAQI2QT）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker\r\n就创建了在主机和所有容器之间一个虚拟共享网络。如图 <img\r\nsrc=\"https://s1.ax1x.com/2020/04/29/J7aODe.png\"\r\nalt=\"upload successful\" /></p>\r\n</blockquote>\r\n<p>下面以自定义的容器方式，一步步配置网络, 达到以下目标: *\r\n容器间能够通信 * 容器能够联外网\r\n首先创建一个容器，但不使用默认网络配置，使用<code>--net=none</code>选项:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i --net=none ubuntu:14.04 bash</span><br><span class=\"line\">docker ps # 获取容器id=6414d7278905</span><br></pre></td></tr></table></figure> 获取容器pid: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect 6414d7278905 | grep -i &quot;\\&lt;pid\\&quot;&quot;</span><br><span class=\"line\">#  &quot;Pid&quot;: 11776,</span><br><span class=\"line\">pid=11776</span><br></pre></td></tr></table></figure>\r\n创建一个新的netns，并把容器放入新建的netns中。（根据约定，命名的 network\r\nnamespace 是可以打开的 <strong>/var/run/netns/</strong>\r\n目录下的一个对象。比如有一个名称为 net1 的 network namespace\r\n对象，则可以由打开 <strong>/var/run/netns/net1</strong>\r\n对象产生的文件描述符引用 network namespace\r\nnet1。通过引用该文件描述符，可以修改进程的 network namespace。）\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns add netns666 # 会产生一个/var/run/netns/netns666的文件</span><br><span class=\"line\">sudo ip netns ls # 查看新创建netns</span><br><span class=\"line\">netns666</span><br><span class=\"line\">sudo mount --bind /proc/$pid/ns/net /var/run/netns/netns666 # 加入新的netns</span><br><span class=\"line\">sudo ip netns pids netns666   # 查看netns666中进程的 PID</span><br><span class=\"line\">11776</span><br></pre></td></tr></table></figure></p>\r\n<p>接下来创建一个veth对，其中一个设置为容器所在的netns，即<code>netns666</code>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip link add name veth_d366 type veth peer name veth_d366_peer</span><br><span class=\"line\">sudo ip link set veth_d366_peer netns netns666</span><br></pre></td></tr></table></figure> 进入<code>netns666</code> netns设置网卡名称和ip:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec netns666 bash</span><br><span class=\"line\">sudo ip link set veth_d366_peer name eth0</span><br><span class=\"line\">sudo ifconfig  eth0 10.0.0.2/24 # 设置ip为10.0.0.2</span><br><span class=\"line\">ping 10.0.0.2 # 能ping通</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure> 上述命令给veth_d366_peer配置完ip的情况： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr show</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">36: eth0@if37: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state LOWERLAYERDOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 9e:67:30:e3:65:34 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet 10.0.0.2/24 brd 10.0.0.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\r\n在容器中ping 10.0.0.2也能ping通,说明设置正确 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 10.0.0.2 # 宿主机上应该不通</span><br><span class=\"line\">docker exec 6414d7278905 ping 10.0.0.2 # 成功ping通</span><br></pre></td></tr></table></figure>\r\n创建网桥，并把veth另一端的虚拟网卡加入新创建的网桥中: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo brctl addbr br666 # 创建新网桥br666</span><br><span class=\"line\">sudo brctl addif br666 veth_d366 # 把虚拟网卡加入网桥br666中</span><br><span class=\"line\">sudo ifconfig br666 10.0.0.1/24 # 设置网桥ip</span><br><span class=\"line\">sudo ip link set veth_d366 up # 启动虚拟网卡</span><br></pre></td></tr></table></figure>\r\n测试下： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 10.0.0.2 # 宿主机上成功ping通</span><br><span class=\"line\">docker exec 6414d7278905 ping 10.0.0.1 # 成功ping通</span><br></pre></td></tr></table></figure> 若以上两个都能ping通说明配置成功！<br />\r\n最后，我们需要使得容器能够联外网，需要设置NAT，使用iptables设置:<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o em1 -j MASQUERADE</span><br></pre></td></tr></table></figure>\r\n<code>em1</code>是真正的物理网卡对应的网络设备，不同电脑上名字不一样，我的Ubuntu上为<code>enp7s0</code>。<br />\r\n另外，还需要设置<code>FORWARD</code>规则（允许<code>br666</code>转发，IP\r\nforwarding要开启，使用<code>sudo sysctl -w net.ipv4.ip_forward=1</code>）\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -A FORWARD -i br666 -o br666  -j ACCEPT</span><br><span class=\"line\">sudo iptables -A FORWARD -i br666 ! -o br666  -j ACCEPT</span><br><span class=\"line\">sudo iptables -A FORWARD ! -i br666  -o br666  -j ACCEPT</span><br></pre></td></tr></table></figure></p>\r\n<p>设置容器默认路由为网桥ip（注意在容器内使用route add 添加,\r\n会出现SIOCADDRT: Operation not permitted错误), 因此只能使用ip netns\r\nexec设置: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec netns666 route add default gw 10.0.0.1</span><br></pre></td></tr></table></figure> 测试，此时请确保宿主机能够联外网,进入容器内部:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping baidu.com # 成功ping通，确保icmp没有被禁</span><br></pre></td></tr></table></figure> 效果图：</p>\r\n<figure>\r\n<img src=\"/images/my_docker_ping.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<h2 id=\"docker网络和虚拟机网络区别\">Docker网络和虚拟机网络区别</h2>\r\n<h3 id=\"虚拟机\">虚拟机</h3>\r\n<p>虚拟机，如图，虚拟机通过tun/tap或者其它类似的虚拟网络设备，将虚拟机内的网卡同br0连接起来，这样就达到和真实交换机一样的效果，虚拟机发出去的数据包先到达br0，然后由br0交给eth0发送出去，数据包都不需要经过host机器的协议栈，效率高。</p>\r\n<figure>\r\n<img src=\"https://s1.ax1x.com/2020/04/30/Jb090O.png\" alt=\"image\" />\r\n<figcaption aria-hidden=\"true\">image</figcaption>\r\n</figure>\r\n<h3 id=\"docker\">Docker</h3>\r\n<p>docker，如图，由于容器运行在自己单独的network\r\nnamespace里面，所以都有自己单独的协议栈，情况和上面的虚拟机差不多，但它采用了另一种方式来和外界通信</p>\r\n<p><img src=\"https://s1.ax1x.com/2020/04/30/JbrFNF.png\" /></p>\r\n<p>容器中配置网关为.9.1，发出去的数据包先到达<code>br0</code>，然后交给host机器的协议栈，由于目的IP是外网IP，且host机器开启了<code>IP forward</code>功能，于是数据包会通过eth0发送出去，由于.9.1是内网IP，所以一般发出去之前会先做NAT转换（NAT转换和IP\r\nforward功能都需要自己配置）。<strong>由于要经过host机器的协议栈，并且还要做NAT转换，所以性能没有上面虚拟机那种方案好</strong>，优点是容器处于内网中，安全性相对要高点。（由于数据包统一由IP层从eth0转发出去，所以不存在mac地址的问题，在无线网络环境下也工作良好）</p>\r\n<p>参考： * <a\r\nhref=\"https://www.cnblogs.com/sparkdev/p/9253409.html\">Linux ip netns\r\n命令</a> * <a\r\nhref=\"https://github.com/int32bit/notes/blob/master/cloud/docker%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86.md\">docker网络原理.md</a>\r\n* <a href=\"https://www.cnblogs.com/sparkdev/p/9217310.html\">Docker\r\n网络之理解 bridge 驱动</a> * <a\r\nhref=\"http://blog.nsfocus.net/linux-bridge/\">Linux内核网络设备——bridge设备</a></p>\r\n","site":{"data":{}},"excerpt":"<figure>\r\n<img src=\"/images/docker-logo.png\" alt=\"docker logo\" />\r\n<figcaption aria-hidden=\"true\">docker logo</figcaption>\r\n</figure>\r\n<p>本文环境： * OS：Ubuntu 18.04.4 LTS * Golang版本：1.12.13</p>","more":"<h2 id=\"自己创建docker网络\">自己创建Docker网络</h2>\r\n<blockquote>\r\n<p>当 Docker 启动时，会自动在主机上创建一个 docker0 虚拟网桥，实际上是\r\nLinux 的一个\r\nbridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。\r\n同时，Docker 随机分配一个本地未占用的私有网段（在 RFC1918\r\n中定义）中的一个地址给 docker0 接口。比如典型的 172.17.42.1，掩码为\r\n255.255.0.0。此后启动的容器内的网口也会自动分配一个同一网段（172.17.0.0/16）的地址。\r\n当创建一个 Docker 容器的时候，同时会创建了一对 veth pair\r\n接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即\r\neth0；另一端在本地并被挂载到 docker0 网桥，名称以 veth 开头（例如\r\nvethAQI2QT）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker\r\n就创建了在主机和所有容器之间一个虚拟共享网络。如图 <img\r\nsrc=\"https://s1.ax1x.com/2020/04/29/J7aODe.png\"\r\nalt=\"upload successful\" /></p>\r\n</blockquote>\r\n<p>下面以自定义的容器方式，一步步配置网络, 达到以下目标: *\r\n容器间能够通信 * 容器能够联外网\r\n首先创建一个容器，但不使用默认网络配置，使用<code>--net=none</code>选项:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i --net=none ubuntu:14.04 bash</span><br><span class=\"line\">docker ps # 获取容器id=6414d7278905</span><br></pre></td></tr></table></figure> 获取容器pid: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect 6414d7278905 | grep -i &quot;\\&lt;pid\\&quot;&quot;</span><br><span class=\"line\">#  &quot;Pid&quot;: 11776,</span><br><span class=\"line\">pid=11776</span><br></pre></td></tr></table></figure>\r\n创建一个新的netns，并把容器放入新建的netns中。（根据约定，命名的 network\r\nnamespace 是可以打开的 <strong>/var/run/netns/</strong>\r\n目录下的一个对象。比如有一个名称为 net1 的 network namespace\r\n对象，则可以由打开 <strong>/var/run/netns/net1</strong>\r\n对象产生的文件描述符引用 network namespace\r\nnet1。通过引用该文件描述符，可以修改进程的 network namespace。）\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns add netns666 # 会产生一个/var/run/netns/netns666的文件</span><br><span class=\"line\">sudo ip netns ls # 查看新创建netns</span><br><span class=\"line\">netns666</span><br><span class=\"line\">sudo mount --bind /proc/$pid/ns/net /var/run/netns/netns666 # 加入新的netns</span><br><span class=\"line\">sudo ip netns pids netns666   # 查看netns666中进程的 PID</span><br><span class=\"line\">11776</span><br></pre></td></tr></table></figure></p>\r\n<p>接下来创建一个veth对，其中一个设置为容器所在的netns，即<code>netns666</code>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip link add name veth_d366 type veth peer name veth_d366_peer</span><br><span class=\"line\">sudo ip link set veth_d366_peer netns netns666</span><br></pre></td></tr></table></figure> 进入<code>netns666</code> netns设置网卡名称和ip:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec netns666 bash</span><br><span class=\"line\">sudo ip link set veth_d366_peer name eth0</span><br><span class=\"line\">sudo ifconfig  eth0 10.0.0.2/24 # 设置ip为10.0.0.2</span><br><span class=\"line\">ping 10.0.0.2 # 能ping通</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure> 上述命令给veth_d366_peer配置完ip的情况： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr show</span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">36: eth0@if37: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state LOWERLAYERDOWN group default qlen 1000</span><br><span class=\"line\">    link/ether 9e:67:30:e3:65:34 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet 10.0.0.2/24 brd 10.0.0.255 scope global eth0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\r\n在容器中ping 10.0.0.2也能ping通,说明设置正确 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 10.0.0.2 # 宿主机上应该不通</span><br><span class=\"line\">docker exec 6414d7278905 ping 10.0.0.2 # 成功ping通</span><br></pre></td></tr></table></figure>\r\n创建网桥，并把veth另一端的虚拟网卡加入新创建的网桥中: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo brctl addbr br666 # 创建新网桥br666</span><br><span class=\"line\">sudo brctl addif br666 veth_d366 # 把虚拟网卡加入网桥br666中</span><br><span class=\"line\">sudo ifconfig br666 10.0.0.1/24 # 设置网桥ip</span><br><span class=\"line\">sudo ip link set veth_d366 up # 启动虚拟网卡</span><br></pre></td></tr></table></figure>\r\n测试下： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping 10.0.0.2 # 宿主机上成功ping通</span><br><span class=\"line\">docker exec 6414d7278905 ping 10.0.0.1 # 成功ping通</span><br></pre></td></tr></table></figure> 若以上两个都能ping通说明配置成功！<br />\r\n最后，我们需要使得容器能够联外网，需要设置NAT，使用iptables设置:<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o em1 -j MASQUERADE</span><br></pre></td></tr></table></figure>\r\n<code>em1</code>是真正的物理网卡对应的网络设备，不同电脑上名字不一样，我的Ubuntu上为<code>enp7s0</code>。<br />\r\n另外，还需要设置<code>FORWARD</code>规则（允许<code>br666</code>转发，IP\r\nforwarding要开启，使用<code>sudo sysctl -w net.ipv4.ip_forward=1</code>）\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo iptables -A FORWARD -i br666 -o br666  -j ACCEPT</span><br><span class=\"line\">sudo iptables -A FORWARD -i br666 ! -o br666  -j ACCEPT</span><br><span class=\"line\">sudo iptables -A FORWARD ! -i br666  -o br666  -j ACCEPT</span><br></pre></td></tr></table></figure></p>\r\n<p>设置容器默认路由为网桥ip（注意在容器内使用route add 添加,\r\n会出现SIOCADDRT: Operation not permitted错误), 因此只能使用ip netns\r\nexec设置: <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip netns exec netns666 route add default gw 10.0.0.1</span><br></pre></td></tr></table></figure> 测试，此时请确保宿主机能够联外网,进入容器内部:\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping baidu.com # 成功ping通，确保icmp没有被禁</span><br></pre></td></tr></table></figure> 效果图：</p>\r\n<figure>\r\n<img src=\"/images/my_docker_ping.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<h2 id=\"docker网络和虚拟机网络区别\">Docker网络和虚拟机网络区别</h2>\r\n<h3 id=\"虚拟机\">虚拟机</h3>\r\n<p>虚拟机，如图，虚拟机通过tun/tap或者其它类似的虚拟网络设备，将虚拟机内的网卡同br0连接起来，这样就达到和真实交换机一样的效果，虚拟机发出去的数据包先到达br0，然后由br0交给eth0发送出去，数据包都不需要经过host机器的协议栈，效率高。</p>\r\n<figure>\r\n<img src=\"https://s1.ax1x.com/2020/04/30/Jb090O.png\" alt=\"image\" />\r\n<figcaption aria-hidden=\"true\">image</figcaption>\r\n</figure>\r\n<h3 id=\"docker\">Docker</h3>\r\n<p>docker，如图，由于容器运行在自己单独的network\r\nnamespace里面，所以都有自己单独的协议栈，情况和上面的虚拟机差不多，但它采用了另一种方式来和外界通信</p>\r\n<p><img src=\"https://s1.ax1x.com/2020/04/30/JbrFNF.png\" /></p>\r\n<p>容器中配置网关为.9.1，发出去的数据包先到达<code>br0</code>，然后交给host机器的协议栈，由于目的IP是外网IP，且host机器开启了<code>IP forward</code>功能，于是数据包会通过eth0发送出去，由于.9.1是内网IP，所以一般发出去之前会先做NAT转换（NAT转换和IP\r\nforward功能都需要自己配置）。<strong>由于要经过host机器的协议栈，并且还要做NAT转换，所以性能没有上面虚拟机那种方案好</strong>，优点是容器处于内网中，安全性相对要高点。（由于数据包统一由IP层从eth0转发出去，所以不存在mac地址的问题，在无线网络环境下也工作良好）</p>\r\n<p>参考： * <a\r\nhref=\"https://www.cnblogs.com/sparkdev/p/9253409.html\">Linux ip netns\r\n命令</a> * <a\r\nhref=\"https://github.com/int32bit/notes/blob/master/cloud/docker%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86.md\">docker网络原理.md</a>\r\n* <a href=\"https://www.cnblogs.com/sparkdev/p/9217310.html\">Docker\r\n网络之理解 bridge 驱动</a> * <a\r\nhref=\"http://blog.nsfocus.net/linux-bridge/\">Linux内核网络设备——bridge设备</a></p>"},{"title":"wxWidgets使用","author":"pigLoveRabbit","date":"2022-08-15T01:30:00.000Z","_content":"![](https://www.wxwidgets.org/assets/img/header-logo.png)\n\n<!-- more -->\n\n## 源码编译安装\n前往wxWidgets[官网](https://www.wxwidgets.org/downloads/)，下载wxWidgets\n\n![upload successful](/images/wxWidgets_home.png)\n\n打开`Developer Command Prompt for VS 2022`工具，进入 `build\\msw` 目录，编译\n```\n nmake /f makefile.vc BUILD=debug SHARED=0 TARGET_CPU=X64\n```\n这里我编译了64位debug版的静态库，这里`x64`和`debug`两个关键字很重要，你在VS中开发时，也要选择相应的配置  \n![tip](https://user-images.githubusercontent.com/16663435/175751439-7e86aa58-4ba4-4b8f-8082-25fb3a7d0070.png \"tip\")  \n\n在**属性管理器**窗口添加**wxWidgets**目录下的wxwidgets.props文件  \n![tip](https://user-images.githubusercontent.com/16663435/175751577-a88e9bbb-c3a2-4321-a93b-3c2ae26be0b6.png \"tip\")  \n这里我们还需要额外注意一下，因为我们跑的是GUI程序，所以需要在项目的**属性**中，把项目设置成`窗口`\n![upload](/images/wxWidgets_vs_settings.jpg)  \n跑个简单的程序，hello.cpp\n```\n// wxWidgets \"Hello world\" Program\n// For compilers that support precompilation, includes \"wx/wx.h\".\n#include <wx/wxprec.h>\n#ifndef WX_PRECOMP\n#include <wx/wx.h>\n#endif\nclass MyApp : public wxApp\n{\npublic:\n    virtual bool OnInit();\n};\nclass MyFrame : public wxFrame\n{\npublic:\n    MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size);\nprivate:\n    void OnHello(wxCommandEvent& event);\n    void OnExit(wxCommandEvent& event);\n    void OnAbout(wxCommandEvent& event);\n    wxDECLARE_EVENT_TABLE();\n};\nenum\n{\n    ID_Hello = 1\n};\nwxBEGIN_EVENT_TABLE(MyFrame, wxFrame)\nEVT_MENU(ID_Hello, MyFrame::OnHello)\nEVT_MENU(wxID_EXIT, MyFrame::OnExit)\nEVT_MENU(wxID_ABOUT, MyFrame::OnAbout)\nwxEND_EVENT_TABLE()\nwxIMPLEMENT_APP(MyApp);\nbool MyApp::OnInit()\n{\n    MyFrame* frame = new MyFrame(\"Hello World\", wxPoint(50, 50), wxSize(450, 340));\n    frame->Show(true);\n    return true;\n}\nMyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)\n    : wxFrame(NULL, wxID_ANY, title, pos, size)\n{\n    wxMenu* menuFile = new wxMenu;\n    menuFile->Append(ID_Hello, \"&Hello...\\tCtrl-H\",\n        \"Help string shown in status bar for this menu item\");\n    menuFile->AppendSeparator();\n    menuFile->Append(wxID_EXIT);\n    wxMenu* menuHelp = new wxMenu;\n    menuHelp->Append(wxID_ABOUT);\n    wxMenuBar* menuBar = new wxMenuBar;\n    menuBar->Append(menuFile, \"&File\");\n    menuBar->Append(menuHelp, \"&Help\");\n    SetMenuBar(menuBar);\n    CreateStatusBar();\n    SetStatusText(\"Welcome to wxWidgets!\");\n}\nvoid MyFrame::OnExit(wxCommandEvent& event)\n{\n    Close(true);\n}\nvoid MyFrame::OnAbout(wxCommandEvent& event)\n{\n    wxMessageBox(\"This is a wxWidgets' Hello world sample\",\n        \"About Hello World\", wxOK | wxICON_INFORMATION);\n}\nvoid MyFrame::OnHello(wxCommandEvent& event)\n{\n    wxLogMessage(\"Hello world from wxWidgets!\");\n}\n```","source":"_posts/wxWidgets使用.md","raw":"title: wxWidgets使用\nauthor: pigLoveRabbit\ntags:\n  - C++\ncategories:\n  - C++\n  - wxWidgets\ndate: 2022-08-15 09:30:00\n---\n![](https://www.wxwidgets.org/assets/img/header-logo.png)\n\n<!-- more -->\n\n## 源码编译安装\n前往wxWidgets[官网](https://www.wxwidgets.org/downloads/)，下载wxWidgets\n\n![upload successful](/images/wxWidgets_home.png)\n\n打开`Developer Command Prompt for VS 2022`工具，进入 `build\\msw` 目录，编译\n```\n nmake /f makefile.vc BUILD=debug SHARED=0 TARGET_CPU=X64\n```\n这里我编译了64位debug版的静态库，这里`x64`和`debug`两个关键字很重要，你在VS中开发时，也要选择相应的配置  \n![tip](https://user-images.githubusercontent.com/16663435/175751439-7e86aa58-4ba4-4b8f-8082-25fb3a7d0070.png \"tip\")  \n\n在**属性管理器**窗口添加**wxWidgets**目录下的wxwidgets.props文件  \n![tip](https://user-images.githubusercontent.com/16663435/175751577-a88e9bbb-c3a2-4321-a93b-3c2ae26be0b6.png \"tip\")  \n这里我们还需要额外注意一下，因为我们跑的是GUI程序，所以需要在项目的**属性**中，把项目设置成`窗口`\n![upload](/images/wxWidgets_vs_settings.jpg)  \n跑个简单的程序，hello.cpp\n```\n// wxWidgets \"Hello world\" Program\n// For compilers that support precompilation, includes \"wx/wx.h\".\n#include <wx/wxprec.h>\n#ifndef WX_PRECOMP\n#include <wx/wx.h>\n#endif\nclass MyApp : public wxApp\n{\npublic:\n    virtual bool OnInit();\n};\nclass MyFrame : public wxFrame\n{\npublic:\n    MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size);\nprivate:\n    void OnHello(wxCommandEvent& event);\n    void OnExit(wxCommandEvent& event);\n    void OnAbout(wxCommandEvent& event);\n    wxDECLARE_EVENT_TABLE();\n};\nenum\n{\n    ID_Hello = 1\n};\nwxBEGIN_EVENT_TABLE(MyFrame, wxFrame)\nEVT_MENU(ID_Hello, MyFrame::OnHello)\nEVT_MENU(wxID_EXIT, MyFrame::OnExit)\nEVT_MENU(wxID_ABOUT, MyFrame::OnAbout)\nwxEND_EVENT_TABLE()\nwxIMPLEMENT_APP(MyApp);\nbool MyApp::OnInit()\n{\n    MyFrame* frame = new MyFrame(\"Hello World\", wxPoint(50, 50), wxSize(450, 340));\n    frame->Show(true);\n    return true;\n}\nMyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)\n    : wxFrame(NULL, wxID_ANY, title, pos, size)\n{\n    wxMenu* menuFile = new wxMenu;\n    menuFile->Append(ID_Hello, \"&Hello...\\tCtrl-H\",\n        \"Help string shown in status bar for this menu item\");\n    menuFile->AppendSeparator();\n    menuFile->Append(wxID_EXIT);\n    wxMenu* menuHelp = new wxMenu;\n    menuHelp->Append(wxID_ABOUT);\n    wxMenuBar* menuBar = new wxMenuBar;\n    menuBar->Append(menuFile, \"&File\");\n    menuBar->Append(menuHelp, \"&Help\");\n    SetMenuBar(menuBar);\n    CreateStatusBar();\n    SetStatusText(\"Welcome to wxWidgets!\");\n}\nvoid MyFrame::OnExit(wxCommandEvent& event)\n{\n    Close(true);\n}\nvoid MyFrame::OnAbout(wxCommandEvent& event)\n{\n    wxMessageBox(\"This is a wxWidgets' Hello world sample\",\n        \"About Hello World\", wxOK | wxICON_INFORMATION);\n}\nvoid MyFrame::OnHello(wxCommandEvent& event)\n{\n    wxLogMessage(\"Hello world from wxWidgets!\");\n}\n```","slug":"wxWidgets使用","published":1,"updated":"2023-03-21T02:48:20.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40li00392o3m3no2dbfs","content":"<p><img\r\nsrc=\"https://www.wxwidgets.org/assets/img/header-logo.png\" /></p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"源码编译安装\">源码编译安装</h2>\r\n<p>前往wxWidgets<a\r\nhref=\"https://www.wxwidgets.org/downloads/\">官网</a>，下载wxWidgets</p>\r\n<figure>\r\n<img src=\"/images/wxWidgets_home.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>打开<code>Developer Command Prompt for VS 2022</code>工具，进入\r\n<code>build\\msw</code> 目录，编译 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmake /f makefile.vc BUILD=debug SHARED=0 TARGET_CPU=X64</span><br></pre></td></tr></table></figure>\r\n这里我编译了64位debug版的静态库，这里<code>x64</code>和<code>debug</code>两个关键字很重要，你在VS中开发时，也要选择相应的配置<br />\r\n<img\r\nsrc=\"https://user-images.githubusercontent.com/16663435/175751439-7e86aa58-4ba4-4b8f-8082-25fb3a7d0070.png\"\r\ntitle=\"tip\" alt=\"tip\" /></p>\r\n<p>在<strong>属性管理器</strong>窗口添加<strong>wxWidgets</strong>目录下的wxwidgets.props文件<br />\r\n<img\r\nsrc=\"https://user-images.githubusercontent.com/16663435/175751577-a88e9bbb-c3a2-4321-a93b-3c2ae26be0b6.png\"\r\ntitle=\"tip\" alt=\"tip\" /><br />\r\n这里我们还需要额外注意一下，因为我们跑的是GUI程序，所以需要在项目的<strong>属性</strong>中，把项目设置成<code>窗口</code>\r\n<img src=\"/images/wxWidgets_vs_settings.jpg\" alt=\"upload\" /><br />\r\n跑个简单的程序，hello.cpp <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// wxWidgets &quot;Hello world&quot; Program</span><br><span class=\"line\">// For compilers that support precompilation, includes &quot;wx/wx.h&quot;.</span><br><span class=\"line\">#include &lt;wx/wxprec.h&gt;</span><br><span class=\"line\">#ifndef WX_PRECOMP</span><br><span class=\"line\">#include &lt;wx/wx.h&gt;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">class MyApp : public wxApp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    virtual bool OnInit();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class MyFrame : public wxFrame</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    MyFrame(const wxString&amp; title, const wxPoint&amp; pos, const wxSize&amp; size);</span><br><span class=\"line\">private:</span><br><span class=\"line\">    void OnHello(wxCommandEvent&amp; event);</span><br><span class=\"line\">    void OnExit(wxCommandEvent&amp; event);</span><br><span class=\"line\">    void OnAbout(wxCommandEvent&amp; event);</span><br><span class=\"line\">    wxDECLARE_EVENT_TABLE();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">enum</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ID_Hello = 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)</span><br><span class=\"line\">EVT_MENU(ID_Hello, MyFrame::OnHello)</span><br><span class=\"line\">EVT_MENU(wxID_EXIT, MyFrame::OnExit)</span><br><span class=\"line\">EVT_MENU(wxID_ABOUT, MyFrame::OnAbout)</span><br><span class=\"line\">wxEND_EVENT_TABLE()</span><br><span class=\"line\">wxIMPLEMENT_APP(MyApp);</span><br><span class=\"line\">bool MyApp::OnInit()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MyFrame* frame = new MyFrame(&quot;Hello World&quot;, wxPoint(50, 50), wxSize(450, 340));</span><br><span class=\"line\">    frame-&gt;Show(true);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MyFrame::MyFrame(const wxString&amp; title, const wxPoint&amp; pos, const wxSize&amp; size)</span><br><span class=\"line\">    : wxFrame(NULL, wxID_ANY, title, pos, size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wxMenu* menuFile = new wxMenu;</span><br><span class=\"line\">    menuFile-&gt;Append(ID_Hello, &quot;&amp;Hello...\\tCtrl-H&quot;,</span><br><span class=\"line\">        &quot;Help string shown in status bar for this menu item&quot;);</span><br><span class=\"line\">    menuFile-&gt;AppendSeparator();</span><br><span class=\"line\">    menuFile-&gt;Append(wxID_EXIT);</span><br><span class=\"line\">    wxMenu* menuHelp = new wxMenu;</span><br><span class=\"line\">    menuHelp-&gt;Append(wxID_ABOUT);</span><br><span class=\"line\">    wxMenuBar* menuBar = new wxMenuBar;</span><br><span class=\"line\">    menuBar-&gt;Append(menuFile, &quot;&amp;File&quot;);</span><br><span class=\"line\">    menuBar-&gt;Append(menuHelp, &quot;&amp;Help&quot;);</span><br><span class=\"line\">    SetMenuBar(menuBar);</span><br><span class=\"line\">    CreateStatusBar();</span><br><span class=\"line\">    SetStatusText(&quot;Welcome to wxWidgets!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void MyFrame::OnExit(wxCommandEvent&amp; event)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Close(true);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void MyFrame::OnAbout(wxCommandEvent&amp; event)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wxMessageBox(&quot;This is a wxWidgets&#x27; Hello world sample&quot;,</span><br><span class=\"line\">        &quot;About Hello World&quot;, wxOK | wxICON_INFORMATION);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void MyFrame::OnHello(wxCommandEvent&amp; event)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wxLogMessage(&quot;Hello world from wxWidgets!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\r\n","site":{"data":{}},"excerpt":"<p><img\r\nsrc=\"https://www.wxwidgets.org/assets/img/header-logo.png\" /></p>","more":"<h2 id=\"源码编译安装\">源码编译安装</h2>\r\n<p>前往wxWidgets<a\r\nhref=\"https://www.wxwidgets.org/downloads/\">官网</a>，下载wxWidgets</p>\r\n<figure>\r\n<img src=\"/images/wxWidgets_home.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>打开<code>Developer Command Prompt for VS 2022</code>工具，进入\r\n<code>build\\msw</code> 目录，编译 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmake /f makefile.vc BUILD=debug SHARED=0 TARGET_CPU=X64</span><br></pre></td></tr></table></figure>\r\n这里我编译了64位debug版的静态库，这里<code>x64</code>和<code>debug</code>两个关键字很重要，你在VS中开发时，也要选择相应的配置<br />\r\n<img\r\nsrc=\"https://user-images.githubusercontent.com/16663435/175751439-7e86aa58-4ba4-4b8f-8082-25fb3a7d0070.png\"\r\ntitle=\"tip\" alt=\"tip\" /></p>\r\n<p>在<strong>属性管理器</strong>窗口添加<strong>wxWidgets</strong>目录下的wxwidgets.props文件<br />\r\n<img\r\nsrc=\"https://user-images.githubusercontent.com/16663435/175751577-a88e9bbb-c3a2-4321-a93b-3c2ae26be0b6.png\"\r\ntitle=\"tip\" alt=\"tip\" /><br />\r\n这里我们还需要额外注意一下，因为我们跑的是GUI程序，所以需要在项目的<strong>属性</strong>中，把项目设置成<code>窗口</code>\r\n<img src=\"/images/wxWidgets_vs_settings.jpg\" alt=\"upload\" /><br />\r\n跑个简单的程序，hello.cpp <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// wxWidgets &quot;Hello world&quot; Program</span><br><span class=\"line\">// For compilers that support precompilation, includes &quot;wx/wx.h&quot;.</span><br><span class=\"line\">#include &lt;wx/wxprec.h&gt;</span><br><span class=\"line\">#ifndef WX_PRECOMP</span><br><span class=\"line\">#include &lt;wx/wx.h&gt;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">class MyApp : public wxApp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    virtual bool OnInit();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class MyFrame : public wxFrame</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    MyFrame(const wxString&amp; title, const wxPoint&amp; pos, const wxSize&amp; size);</span><br><span class=\"line\">private:</span><br><span class=\"line\">    void OnHello(wxCommandEvent&amp; event);</span><br><span class=\"line\">    void OnExit(wxCommandEvent&amp; event);</span><br><span class=\"line\">    void OnAbout(wxCommandEvent&amp; event);</span><br><span class=\"line\">    wxDECLARE_EVENT_TABLE();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">enum</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ID_Hello = 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">wxBEGIN_EVENT_TABLE(MyFrame, wxFrame)</span><br><span class=\"line\">EVT_MENU(ID_Hello, MyFrame::OnHello)</span><br><span class=\"line\">EVT_MENU(wxID_EXIT, MyFrame::OnExit)</span><br><span class=\"line\">EVT_MENU(wxID_ABOUT, MyFrame::OnAbout)</span><br><span class=\"line\">wxEND_EVENT_TABLE()</span><br><span class=\"line\">wxIMPLEMENT_APP(MyApp);</span><br><span class=\"line\">bool MyApp::OnInit()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MyFrame* frame = new MyFrame(&quot;Hello World&quot;, wxPoint(50, 50), wxSize(450, 340));</span><br><span class=\"line\">    frame-&gt;Show(true);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MyFrame::MyFrame(const wxString&amp; title, const wxPoint&amp; pos, const wxSize&amp; size)</span><br><span class=\"line\">    : wxFrame(NULL, wxID_ANY, title, pos, size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wxMenu* menuFile = new wxMenu;</span><br><span class=\"line\">    menuFile-&gt;Append(ID_Hello, &quot;&amp;Hello...\\tCtrl-H&quot;,</span><br><span class=\"line\">        &quot;Help string shown in status bar for this menu item&quot;);</span><br><span class=\"line\">    menuFile-&gt;AppendSeparator();</span><br><span class=\"line\">    menuFile-&gt;Append(wxID_EXIT);</span><br><span class=\"line\">    wxMenu* menuHelp = new wxMenu;</span><br><span class=\"line\">    menuHelp-&gt;Append(wxID_ABOUT);</span><br><span class=\"line\">    wxMenuBar* menuBar = new wxMenuBar;</span><br><span class=\"line\">    menuBar-&gt;Append(menuFile, &quot;&amp;File&quot;);</span><br><span class=\"line\">    menuBar-&gt;Append(menuHelp, &quot;&amp;Help&quot;);</span><br><span class=\"line\">    SetMenuBar(menuBar);</span><br><span class=\"line\">    CreateStatusBar();</span><br><span class=\"line\">    SetStatusText(&quot;Welcome to wxWidgets!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void MyFrame::OnExit(wxCommandEvent&amp; event)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Close(true);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void MyFrame::OnAbout(wxCommandEvent&amp; event)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wxMessageBox(&quot;This is a wxWidgets&#x27; Hello world sample&quot;,</span><br><span class=\"line\">        &quot;About Hello World&quot;, wxOK | wxICON_INFORMATION);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void MyFrame::OnHello(wxCommandEvent&amp; event)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    wxLogMessage(&quot;Hello world from wxWidgets!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"基于Zookeeper的分布式锁","author":"Salamander","date":"2020-03-12T08:00:00.000Z","_content":"<img src=\"/images/zk-logo.png\" width=\"300px\" >\n\n\nZookeeper 是 Apache 的一个顶级项目，为分布式应用提供高效、高可用的分布式协调服务，提供了诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知和分布式锁等分布式基础服务。\n由于 ZooKeeper 便捷的使用方式、卓越的性能和良好的稳定性，被广泛地应用于诸如 Hadoop、HBase、Kafka 和 Dubbo 等大型分布式系统中。\n\n\n<!-- more -->\n\n## 搭建Zookeeper集群\n这里我们用Docker在本机上快速搭建一个zk集群，根据官方的[zookeeper镜像](https://hub.docker.com/_/zookeeper)给的docker-compose文件，我们稍加修改就可以了：\n```\nversion: '2'\n\nservices:\n  zoo1:\n    image: zookeeper:3.4\n    restart: always\n    hostname: zoo1\n    ports:\n      - 2181:2181\n    environment:\n      ZOO_MY_ID: 1\n      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    volumes:\n    - ./zoo1/data:/data\n    - ./zoo1/datalog:/datalog\n\n  zoo2:\n    image: zookeeper:3.4\n    restart: always\n    hostname: zoo2\n    ports:\n      - 2182:2181\n    environment:\n      ZOO_MY_ID: 2\n      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888\n    volumes:\n    - ./zoo2/data:/data\n    - ./zoo2/datalog:/datalog\n\n  zoo3:\n    image: zookeeper:3.4\n    restart: always\n    hostname: zoo3\n    ports:\n      - 2183:2181\n    environment:\n      ZOO_MY_ID: 3\n      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888\n    volumes:\n    - ./zoo3/data:/data\n    - ./zoo3/datalog:/datalog\n```\n`docker-compose up` 启动集群，然后查看服务状态：\n```\n$ docker-compose ps\n          Name                        Command               State                          Ports                        \n------------------------------------------------------------------------------------------------------------------------\nzookeeper-cluster_zoo1_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2181->2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp\nzookeeper-cluster_zoo2_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2182->2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp\nzookeeper-cluster_zoo3_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2183->2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp\n\n$ docker-compose exec zoo1 ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower\n\n$ docker-compose exec zoo2 ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower\n\n$ docker-compose exec zoo3 ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: leader\n```\n可以看到zoo3这个节点是leader节点（`zookeeper`3.5的镜像似乎有点问题，集群起来后有个节点一直出错，所以我用了3.4）。\n\n## zookeeper配置文件\nzoo.cfg配置文件常见配置\n```\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataLogDir=/opt/zookeeper/logs\ndataDir=/opt/zookeeper/data\nclientPort=2181\nautopurge.snapRetainCount=500\nautopurge.purgeInterval=24\nserver.1= 192.168.1.148:2888:3888\nserver.2= 192.168.1.149:2888:3888\nserver.3= 192.168.1.150:2888:3888\n```\nzoo.cfg配置文件参数详细说明  \n\n| 参数名                                                    | 说明                                                                                                                                                                                                                                              |\n|--------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| clientPort                                             | 客户端连接server的端口，即对外服务端口，一般设置为2181吧。                                                                                                                                                                                                              |\n| dataDir                                                | 存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数dataLogDir, 事务日志的写性能直接影响zk性能。                                                                                                                                                                       |\n| tickTime                                               | ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。例如，session的最小超时时间是2\\*tickTime。                                                                                                                                                                          |\n| dataLogDir                                             | 事务日志输出目录。尽量给事务日志的输出配置单独的磁盘或是挂载点，这将极大的提升ZK性能。 （No Java system property）                                                                                                                                                                          |\n| globalOutstandingLimit                                 | 最大请求堆积数。默认是1000。ZK运行的时候， 尽管server已经没有空闲来处理更多的客户端请求了，但是还是允许客户端将请求提交到服务器上来，以提高吞吐性能。当然，为了防止Server内存溢出，这个请求堆积数还是需要限制下的。 \\(Java system property:zookeeper\\.globalOutstandingLimit\\. \\)                                                               |\n| preAllocSize                                           | 预先开辟磁盘空间，用于后续写入事务日志。默认是64M，每个事务日志大小就是64M。如果ZK的快照频率较大的话，建议适当减小这个参数。\\(Java system property:zookeeper\\.preAllocSize \\)                                                                                                                             |\n| snapCount                                              | 每进行snapCount次事务日志输出后，触发一次快照\\(snapshot\\), 此时，ZK会生成一个snapshot\\.文件，同时创建一个新的事务日志文件log\\.。默认是100000\\.（真正的代码实现中，会进行一定的随机数处理，以避免所有服务器在同一时间进行快照而影响性能）\\(Java system property:zookeeper\\.snapCount \\)                                                      |\n| traceFile                                              | 用于记录所有请求的log，一般调试过程中可以使用，但是生产环境不建议使用，会严重影响性能。\\(Java system property:? requestTraceFile \\)                                                                                                                                                       |\n| maxClientCnxns                                         | 单个客户端与单台服务器之间的连接数的限制，是ip级别的，默认是60，如果设置为0，那么表明不作任何限制。请注意这个限制的使用范围，仅仅是单台客户端机器与单台ZK服务器之间的连接数限制，不是针对指定客户端IP，也不是ZK集群的连接数限制，也不是单台ZK对所有客户端的连接数限制。指定客户端IP的限制策略，这里有一个patch，可以尝试一下：http://rdc\\.taobao\\.com/team/jm/archives/1334（No Java system property） |\n| clientPortAddress                                      | 对于多网卡的机器，可以为每个IP指定不同的监听端口。默认情况是所有IP都监听 clientPort 指定的端口。 New in 3\\.3\\.0                                                                                                                                                                         |\n| minSessionTimeoutmaxSessionTimeoutSession              | 超时时间限制，如果客户端设置的超时时间不在这个范围，那么会被强制设置为最大或最小时间。默认的Session超时时间是在2 \\* tickTime ~ 20 \\* tickTime 这个范围 New in 3\\.3\\.0                                                                                                                                   |\n| fsync\\.warningthresholdms                              | 事务日志输出时，如果调用fsync方法超过指定的超时时间，那么会在日志中输出警告信息。默认是1000ms。\\(Java system property: fsync\\.warningthresholdms \\)New in 3\\.3\\.4                                                                                                                         |\n| autopurge\\.purgeInterval                               | 在上文中已经提到，3\\.4\\.0及之后版本，ZK提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时，需要配置一个1或更大的整数，默认是0，表示不开启自动清理功能。\\(No Java system property\\) New in 3\\.4\\.0                                                                                                         |\n| autopurge\\.snapRetainCount                             | 这个参数和上面的参数搭配使用，这个参数指定了需要保留的文件数目。默认是保留3个。\\(No Java system property\\) New in 3\\.4\\.0                                                                                                                                                              |\n| electionAlg                                            | 在之前的版本中， 这个参数配置是允许我们选择leader选举算法，但是由于在以后的版本中，只会留下一种“TCP\\-based version of fast leader election”算法，所以这个参数目前看来没有用了，这里也不详细展开说了。\\(No Java system property\\)                                                                                         |\n| initLimitFollowe                                       | r在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许F在 initLimit 时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。\\(No Java system property\\)                                                  |\n| syncLimit                                              | 在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。\\(No Java system property\\)                                                                                   |\n| leaderServes                                           | 默认情况下，Leader是会接受客户端连接，并提供正常的读写服务。但是，如果你想让Leader专注于集群中机器的协调，那么可以将这个参数设置为no，这样一来，会大大提高写操作的性能。\\(Java system property: zookeeper\\. leaderServes \\)。                                                                                                 |\n| server\\.x=\\[hostname\\]:nnnnn\\[:nnnnn\\]                 | 这里的x是一个数字，与myid文件中的id是一致的。右边可以配置两个端口，第一个端口用于F和L之间的数据同步和其它通信，第二个端口用于Leader选举过程中投票通信。 \\(No Java system property\\)                                                                                                                                 |\n| group\\.x=nnnnn\\[:nnnnn\\]weight\\.x=nnnnn                | 对机器分组和权重设置，可以 参见这里\\(No Java system property\\)                                                                                                                                                                                                   |\n| cnxTimeoutLeader                                       | 选举过程中，打开一次连接的超时时间，默认是5s。\\(Java system property: zookeeper\\. cnxTimeout\\)                                                                                                                                                                        |\n| zookeeper\\.DigestAuthenticationProvider\\.superDigestZK | 权限设置相关，具体参见 《 使用super 身份对有权限的节点进行操作 》  和 《 ZooKeeper 权限控制 》                                                                                                                                                                                     |\n| skipACL                                                | 对所有客户端请求都不作ACL检查。如果之前节点上设置有权限限制，一旦服务器上打开这个开头，那么也将失效。\\(Java system property: zookeeper\\.skipACL \\)                                                                                                                                               |\n| forceSync                                              | 这个参数确定了是否需要在事务日志提交的时候调用 FileChannel \\.force来保证数据完全同步到磁盘。\\(Java system property: zookeeper\\.forceSync \\)                                                                                                                                         |\n| jute\\.maxbuffer                                        | 每个节点最大数据量，是默认是1M。这个限制必须在server和client端都进行设置才会生效。\\(Java system property: jute\\.maxbuffer \\)                                                                                                                                                      |\n\n\n上面的`docker-compose.yml`文件中，我没用配置文件，但是上面的配置项其实可以用`zookeeper镜像`里的环境变量来实现，例如`ZOO_TICK_TIME`。\n\n## Zookeeper分布式锁实现\n\n### Zookeeper的节点\n要用Zookeeper实现分布式锁，我就不得不说说Zookeeper的数据存储。首先zookeeper的核心保存结构是一个DataTree数据结构，其实内部是一个Map<String, DataNode> nodes的数据结构，其中key是path，DataNode才是真正保存数据的核心数据结构，DataNode核心字段包括byte data[]用于保存节点内容。  \n\n节点是Zookeeper（zk）中数据存储的基础结构，zk中万物皆节点，就好比Java中万物皆对象一样。zk的数据模型就是基于节点的树形结构，但zk规定每个节点的引用规则是路径引用。每个节点中包含子节点引用、存储数据、访问权限以及节点元数据等四部分。\n\n\n![upload successful](/images/pasted-2.png)  \n\nzookeeper中提供了节点类型主要有：  \n* **持久节点**：节点创建后，就一直存在，直到有删除操作来主动清除。\n* **顺序节点**：假如当前有一个父节点为/lock，我们可以在这个父节点下面创建子节点；zk提供了一个可选的有序特性，例如我们可以创建子节点“/lock/test_”并且指明有序，那么zk在生成子节点时会根据当前子节点数量自动添加整数序号，如果第一个子节点为/lock/test_0000000000，下一个节点则为/lock/test_0000000001，依次类推。\n* **临时节点**：客户端可以建立一个临时节点，在会话结束或者会话超时后，zookeeper会自动删除该节点。","source":"_posts/zookeeper_cluster_lock.md","raw":"title: 基于Zookeeper的分布式锁\nauthor: Salamander\ntags:\n  - zookeeper\n  - Java\ncategories:\n  - Java\ndate: 2020-03-12 16:00:00\n---\n<img src=\"/images/zk-logo.png\" width=\"300px\" >\n\n\nZookeeper 是 Apache 的一个顶级项目，为分布式应用提供高效、高可用的分布式协调服务，提供了诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知和分布式锁等分布式基础服务。\n由于 ZooKeeper 便捷的使用方式、卓越的性能和良好的稳定性，被广泛地应用于诸如 Hadoop、HBase、Kafka 和 Dubbo 等大型分布式系统中。\n\n\n<!-- more -->\n\n## 搭建Zookeeper集群\n这里我们用Docker在本机上快速搭建一个zk集群，根据官方的[zookeeper镜像](https://hub.docker.com/_/zookeeper)给的docker-compose文件，我们稍加修改就可以了：\n```\nversion: '2'\n\nservices:\n  zoo1:\n    image: zookeeper:3.4\n    restart: always\n    hostname: zoo1\n    ports:\n      - 2181:2181\n    environment:\n      ZOO_MY_ID: 1\n      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888\n    volumes:\n    - ./zoo1/data:/data\n    - ./zoo1/datalog:/datalog\n\n  zoo2:\n    image: zookeeper:3.4\n    restart: always\n    hostname: zoo2\n    ports:\n      - 2182:2181\n    environment:\n      ZOO_MY_ID: 2\n      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888\n    volumes:\n    - ./zoo2/data:/data\n    - ./zoo2/datalog:/datalog\n\n  zoo3:\n    image: zookeeper:3.4\n    restart: always\n    hostname: zoo3\n    ports:\n      - 2183:2181\n    environment:\n      ZOO_MY_ID: 3\n      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888\n    volumes:\n    - ./zoo3/data:/data\n    - ./zoo3/datalog:/datalog\n```\n`docker-compose up` 启动集群，然后查看服务状态：\n```\n$ docker-compose ps\n          Name                        Command               State                          Ports                        \n------------------------------------------------------------------------------------------------------------------------\nzookeeper-cluster_zoo1_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2181->2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp\nzookeeper-cluster_zoo2_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2182->2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp\nzookeeper-cluster_zoo3_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2183->2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp\n\n$ docker-compose exec zoo1 ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower\n\n$ docker-compose exec zoo2 ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: follower\n\n$ docker-compose exec zoo3 ./bin/zkServer.sh status\nZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nMode: leader\n```\n可以看到zoo3这个节点是leader节点（`zookeeper`3.5的镜像似乎有点问题，集群起来后有个节点一直出错，所以我用了3.4）。\n\n## zookeeper配置文件\nzoo.cfg配置文件常见配置\n```\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataLogDir=/opt/zookeeper/logs\ndataDir=/opt/zookeeper/data\nclientPort=2181\nautopurge.snapRetainCount=500\nautopurge.purgeInterval=24\nserver.1= 192.168.1.148:2888:3888\nserver.2= 192.168.1.149:2888:3888\nserver.3= 192.168.1.150:2888:3888\n```\nzoo.cfg配置文件参数详细说明  \n\n| 参数名                                                    | 说明                                                                                                                                                                                                                                              |\n|--------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| clientPort                                             | 客户端连接server的端口，即对外服务端口，一般设置为2181吧。                                                                                                                                                                                                              |\n| dataDir                                                | 存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数dataLogDir, 事务日志的写性能直接影响zk性能。                                                                                                                                                                       |\n| tickTime                                               | ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。例如，session的最小超时时间是2\\*tickTime。                                                                                                                                                                          |\n| dataLogDir                                             | 事务日志输出目录。尽量给事务日志的输出配置单独的磁盘或是挂载点，这将极大的提升ZK性能。 （No Java system property）                                                                                                                                                                          |\n| globalOutstandingLimit                                 | 最大请求堆积数。默认是1000。ZK运行的时候， 尽管server已经没有空闲来处理更多的客户端请求了，但是还是允许客户端将请求提交到服务器上来，以提高吞吐性能。当然，为了防止Server内存溢出，这个请求堆积数还是需要限制下的。 \\(Java system property:zookeeper\\.globalOutstandingLimit\\. \\)                                                               |\n| preAllocSize                                           | 预先开辟磁盘空间，用于后续写入事务日志。默认是64M，每个事务日志大小就是64M。如果ZK的快照频率较大的话，建议适当减小这个参数。\\(Java system property:zookeeper\\.preAllocSize \\)                                                                                                                             |\n| snapCount                                              | 每进行snapCount次事务日志输出后，触发一次快照\\(snapshot\\), 此时，ZK会生成一个snapshot\\.文件，同时创建一个新的事务日志文件log\\.。默认是100000\\.（真正的代码实现中，会进行一定的随机数处理，以避免所有服务器在同一时间进行快照而影响性能）\\(Java system property:zookeeper\\.snapCount \\)                                                      |\n| traceFile                                              | 用于记录所有请求的log，一般调试过程中可以使用，但是生产环境不建议使用，会严重影响性能。\\(Java system property:? requestTraceFile \\)                                                                                                                                                       |\n| maxClientCnxns                                         | 单个客户端与单台服务器之间的连接数的限制，是ip级别的，默认是60，如果设置为0，那么表明不作任何限制。请注意这个限制的使用范围，仅仅是单台客户端机器与单台ZK服务器之间的连接数限制，不是针对指定客户端IP，也不是ZK集群的连接数限制，也不是单台ZK对所有客户端的连接数限制。指定客户端IP的限制策略，这里有一个patch，可以尝试一下：http://rdc\\.taobao\\.com/team/jm/archives/1334（No Java system property） |\n| clientPortAddress                                      | 对于多网卡的机器，可以为每个IP指定不同的监听端口。默认情况是所有IP都监听 clientPort 指定的端口。 New in 3\\.3\\.0                                                                                                                                                                         |\n| minSessionTimeoutmaxSessionTimeoutSession              | 超时时间限制，如果客户端设置的超时时间不在这个范围，那么会被强制设置为最大或最小时间。默认的Session超时时间是在2 \\* tickTime ~ 20 \\* tickTime 这个范围 New in 3\\.3\\.0                                                                                                                                   |\n| fsync\\.warningthresholdms                              | 事务日志输出时，如果调用fsync方法超过指定的超时时间，那么会在日志中输出警告信息。默认是1000ms。\\(Java system property: fsync\\.warningthresholdms \\)New in 3\\.3\\.4                                                                                                                         |\n| autopurge\\.purgeInterval                               | 在上文中已经提到，3\\.4\\.0及之后版本，ZK提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时，需要配置一个1或更大的整数，默认是0，表示不开启自动清理功能。\\(No Java system property\\) New in 3\\.4\\.0                                                                                                         |\n| autopurge\\.snapRetainCount                             | 这个参数和上面的参数搭配使用，这个参数指定了需要保留的文件数目。默认是保留3个。\\(No Java system property\\) New in 3\\.4\\.0                                                                                                                                                              |\n| electionAlg                                            | 在之前的版本中， 这个参数配置是允许我们选择leader选举算法，但是由于在以后的版本中，只会留下一种“TCP\\-based version of fast leader election”算法，所以这个参数目前看来没有用了，这里也不详细展开说了。\\(No Java system property\\)                                                                                         |\n| initLimitFollowe                                       | r在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许F在 initLimit 时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。\\(No Java system property\\)                                                  |\n| syncLimit                                              | 在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。\\(No Java system property\\)                                                                                   |\n| leaderServes                                           | 默认情况下，Leader是会接受客户端连接，并提供正常的读写服务。但是，如果你想让Leader专注于集群中机器的协调，那么可以将这个参数设置为no，这样一来，会大大提高写操作的性能。\\(Java system property: zookeeper\\. leaderServes \\)。                                                                                                 |\n| server\\.x=\\[hostname\\]:nnnnn\\[:nnnnn\\]                 | 这里的x是一个数字，与myid文件中的id是一致的。右边可以配置两个端口，第一个端口用于F和L之间的数据同步和其它通信，第二个端口用于Leader选举过程中投票通信。 \\(No Java system property\\)                                                                                                                                 |\n| group\\.x=nnnnn\\[:nnnnn\\]weight\\.x=nnnnn                | 对机器分组和权重设置，可以 参见这里\\(No Java system property\\)                                                                                                                                                                                                   |\n| cnxTimeoutLeader                                       | 选举过程中，打开一次连接的超时时间，默认是5s。\\(Java system property: zookeeper\\. cnxTimeout\\)                                                                                                                                                                        |\n| zookeeper\\.DigestAuthenticationProvider\\.superDigestZK | 权限设置相关，具体参见 《 使用super 身份对有权限的节点进行操作 》  和 《 ZooKeeper 权限控制 》                                                                                                                                                                                     |\n| skipACL                                                | 对所有客户端请求都不作ACL检查。如果之前节点上设置有权限限制，一旦服务器上打开这个开头，那么也将失效。\\(Java system property: zookeeper\\.skipACL \\)                                                                                                                                               |\n| forceSync                                              | 这个参数确定了是否需要在事务日志提交的时候调用 FileChannel \\.force来保证数据完全同步到磁盘。\\(Java system property: zookeeper\\.forceSync \\)                                                                                                                                         |\n| jute\\.maxbuffer                                        | 每个节点最大数据量，是默认是1M。这个限制必须在server和client端都进行设置才会生效。\\(Java system property: jute\\.maxbuffer \\)                                                                                                                                                      |\n\n\n上面的`docker-compose.yml`文件中，我没用配置文件，但是上面的配置项其实可以用`zookeeper镜像`里的环境变量来实现，例如`ZOO_TICK_TIME`。\n\n## Zookeeper分布式锁实现\n\n### Zookeeper的节点\n要用Zookeeper实现分布式锁，我就不得不说说Zookeeper的数据存储。首先zookeeper的核心保存结构是一个DataTree数据结构，其实内部是一个Map<String, DataNode> nodes的数据结构，其中key是path，DataNode才是真正保存数据的核心数据结构，DataNode核心字段包括byte data[]用于保存节点内容。  \n\n节点是Zookeeper（zk）中数据存储的基础结构，zk中万物皆节点，就好比Java中万物皆对象一样。zk的数据模型就是基于节点的树形结构，但zk规定每个节点的引用规则是路径引用。每个节点中包含子节点引用、存储数据、访问权限以及节点元数据等四部分。\n\n\n![upload successful](/images/pasted-2.png)  \n\nzookeeper中提供了节点类型主要有：  \n* **持久节点**：节点创建后，就一直存在，直到有删除操作来主动清除。\n* **顺序节点**：假如当前有一个父节点为/lock，我们可以在这个父节点下面创建子节点；zk提供了一个可选的有序特性，例如我们可以创建子节点“/lock/test_”并且指明有序，那么zk在生成子节点时会根据当前子节点数量自动添加整数序号，如果第一个子节点为/lock/test_0000000000，下一个节点则为/lock/test_0000000001，依次类推。\n* **临时节点**：客户端可以建立一个临时节点，在会话结束或者会话超时后，zookeeper会自动删除该节点。","slug":"zookeeper_cluster_lock","published":1,"updated":"2023-03-21T02:48:20.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfhq40m0007o2o3mfv1gd5yr","content":"<p><img src=\"/images/zk-logo.png\" width=\"300px\" ></p>\r\n<p>Zookeeper 是 Apache\r\n的一个顶级项目，为分布式应用提供高效、高可用的分布式协调服务，提供了诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知和分布式锁等分布式基础服务。\r\n由于 ZooKeeper\r\n便捷的使用方式、卓越的性能和良好的稳定性，被广泛地应用于诸如\r\nHadoop、HBase、Kafka 和 Dubbo 等大型分布式系统中。</p>\r\n<span id=\"more\"></span>\r\n<h2 id=\"搭建zookeeper集群\">搭建Zookeeper集群</h2>\r\n<p>这里我们用Docker在本机上快速搭建一个zk集群，根据官方的<a\r\nhref=\"https://hub.docker.com/_/zookeeper\">zookeeper镜像</a>给的docker-compose文件，我们稍加修改就可以了：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;2&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  zoo1:</span><br><span class=\"line\">    image: zookeeper:3.4</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    hostname: zoo1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 2181:2181</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      ZOO_MY_ID: 1</span><br><span class=\"line\">      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">    - ./zoo1/data:/data</span><br><span class=\"line\">    - ./zoo1/datalog:/datalog</span><br><span class=\"line\"></span><br><span class=\"line\">  zoo2:</span><br><span class=\"line\">    image: zookeeper:3.4</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    hostname: zoo2</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 2182:2181</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      ZOO_MY_ID: 2</span><br><span class=\"line\">      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">    - ./zoo2/data:/data</span><br><span class=\"line\">    - ./zoo2/datalog:/datalog</span><br><span class=\"line\"></span><br><span class=\"line\">  zoo3:</span><br><span class=\"line\">    image: zookeeper:3.4</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    hostname: zoo3</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 2183:2181</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      ZOO_MY_ID: 3</span><br><span class=\"line\">      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">    - ./zoo3/data:/data</span><br><span class=\"line\">    - ./zoo3/datalog:/datalog</span><br></pre></td></tr></table></figure> <code>docker-compose up</code>\r\n启动集群，然后查看服务状态： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose ps</span><br><span class=\"line\">          Name                        Command               State                          Ports                        </span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">zookeeper-cluster_zoo1_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2181-&gt;2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp</span><br><span class=\"line\">zookeeper-cluster_zoo2_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2182-&gt;2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp</span><br><span class=\"line\">zookeeper-cluster_zoo3_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2183-&gt;2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker-compose exec zoo1 ./bin/zkServer.sh status</span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /conf/zoo.cfg</span><br><span class=\"line\">Mode: follower</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker-compose exec zoo2 ./bin/zkServer.sh status</span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /conf/zoo.cfg</span><br><span class=\"line\">Mode: follower</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker-compose exec zoo3 ./bin/zkServer.sh status</span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /conf/zoo.cfg</span><br><span class=\"line\">Mode: leader</span><br></pre></td></tr></table></figure>\r\n可以看到zoo3这个节点是leader节点（<code>zookeeper</code>3.5的镜像似乎有点问题，集群起来后有个节点一直出错，所以我用了3.4）。</p>\r\n<h2 id=\"zookeeper配置文件\">zookeeper配置文件</h2>\r\n<p>zoo.cfg配置文件常见配置 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\">dataLogDir=/opt/zookeeper/logs</span><br><span class=\"line\">dataDir=/opt/zookeeper/data</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\">autopurge.snapRetainCount=500</span><br><span class=\"line\">autopurge.purgeInterval=24</span><br><span class=\"line\">server.1= 192.168.1.148:2888:3888</span><br><span class=\"line\">server.2= 192.168.1.149:2888:3888</span><br><span class=\"line\">server.3= 192.168.1.150:2888:3888</span><br></pre></td></tr></table></figure> zoo.cfg配置文件参数详细说明</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 81%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>参数名</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>clientPort</td>\r\n<td>客户端连接server的端口，即对外服务端口，一般设置为2181吧。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>dataDir</td>\r\n<td>存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数dataLogDir,\r\n事务日志的写性能直接影响zk性能。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>tickTime</td>\r\n<td>ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。例如，session的最小超时时间是2*tickTime。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>dataLogDir</td>\r\n<td>事务日志输出目录。尽量给事务日志的输出配置单独的磁盘或是挂载点，这将极大的提升ZK性能。\r\n（No Java system property）</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>globalOutstandingLimit</td>\r\n<td>最大请求堆积数。默认是1000。ZK运行的时候，\r\n尽管server已经没有空闲来处理更多的客户端请求了，但是还是允许客户端将请求提交到服务器上来，以提高吞吐性能。当然，为了防止Server内存溢出，这个请求堆积数还是需要限制下的。\r\n(Java system property:zookeeper.globalOutstandingLimit. )</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>preAllocSize</td>\r\n<td>预先开辟磁盘空间，用于后续写入事务日志。默认是64M，每个事务日志大小就是64M。如果ZK的快照频率较大的话，建议适当减小这个参数。(Java\r\nsystem property:zookeeper.preAllocSize )</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>snapCount</td>\r\n<td>每进行snapCount次事务日志输出后，触发一次快照(snapshot),\r\n此时，ZK会生成一个snapshot.文件，同时创建一个新的事务日志文件log.。默认是100000.（真正的代码实现中，会进行一定的随机数处理，以避免所有服务器在同一时间进行快照而影响性能）(Java\r\nsystem property:zookeeper.snapCount )</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>traceFile</td>\r\n<td>用于记录所有请求的log，一般调试过程中可以使用，但是生产环境不建议使用，会严重影响性能。(Java\r\nsystem property:? requestTraceFile )</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>maxClientCnxns</td>\r\n<td>单个客户端与单台服务器之间的连接数的限制，是ip级别的，默认是60，如果设置为0，那么表明不作任何限制。请注意这个限制的使用范围，仅仅是单台客户端机器与单台ZK服务器之间的连接数限制，不是针对指定客户端IP，也不是ZK集群的连接数限制，也不是单台ZK对所有客户端的连接数限制。指定客户端IP的限制策略，这里有一个patch，可以尝试一下：http://rdc.taobao.com/team/jm/archives/1334（No\r\nJava system property）</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>clientPortAddress</td>\r\n<td>对于多网卡的机器，可以为每个IP指定不同的监听端口。默认情况是所有IP都监听\r\nclientPort 指定的端口。 New in 3.3.0</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>minSessionTimeoutmaxSessionTimeoutSession</td>\r\n<td>超时时间限制，如果客户端设置的超时时间不在这个范围，那么会被强制设置为最大或最小时间。默认的Session超时时间是在2\r\n* tickTime ~ 20 * tickTime 这个范围 New in 3.3.0</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>fsync.warningthresholdms</td>\r\n<td>事务日志输出时，如果调用fsync方法超过指定的超时时间，那么会在日志中输出警告信息。默认是1000ms。(Java\r\nsystem property: fsync.warningthresholdms )New in 3.3.4</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>autopurge.purgeInterval</td>\r\n<td>在上文中已经提到，3.4.0及之后版本，ZK提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时，需要配置一个1或更大的整数，默认是0，表示不开启自动清理功能。(No\r\nJava system property) New in 3.4.0</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>autopurge.snapRetainCount</td>\r\n<td>这个参数和上面的参数搭配使用，这个参数指定了需要保留的文件数目。默认是保留3个。(No\r\nJava system property) New in 3.4.0</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>electionAlg</td>\r\n<td>在之前的版本中，\r\n这个参数配置是允许我们选择leader选举算法，但是由于在以后的版本中，只会留下一种“TCP-based\r\nversion of fast leader\r\nelection”算法，所以这个参数目前看来没有用了，这里也不详细展开说了。(No\r\nJava system property)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>initLimitFollowe</td>\r\n<td>r在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许F在\r\ninitLimit\r\n时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。(No\r\nJava system property)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>syncLimit</td>\r\n<td>在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。(No\r\nJava system property)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>leaderServes</td>\r\n<td>默认情况下，Leader是会接受客户端连接，并提供正常的读写服务。但是，如果你想让Leader专注于集群中机器的协调，那么可以将这个参数设置为no，这样一来，会大大提高写操作的性能。(Java\r\nsystem property: zookeeper. leaderServes )。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>server.x=[hostname]:nnnnn[:nnnnn]</td>\r\n<td>这里的x是一个数字，与myid文件中的id是一致的。右边可以配置两个端口，第一个端口用于F和L之间的数据同步和其它通信，第二个端口用于Leader选举过程中投票通信。\r\n(No Java system property)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>group.x=nnnnn[:nnnnn]weight.x=nnnnn</td>\r\n<td>对机器分组和权重设置，可以 参见这里(No Java system property)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>cnxTimeoutLeader</td>\r\n<td>选举过程中，打开一次连接的超时时间，默认是5s。(Java system property:\r\nzookeeper. cnxTimeout)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>zookeeper.DigestAuthenticationProvider.superDigestZK</td>\r\n<td>权限设置相关，具体参见 《 使用super 身份对有权限的节点进行操作 》 和\r\n《 ZooKeeper 权限控制 》</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>skipACL</td>\r\n<td>对所有客户端请求都不作ACL检查。如果之前节点上设置有权限限制，一旦服务器上打开这个开头，那么也将失效。(Java\r\nsystem property: zookeeper.skipACL )</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>forceSync</td>\r\n<td>这个参数确定了是否需要在事务日志提交的时候调用 FileChannel\r\n.force来保证数据完全同步到磁盘。(Java system property:\r\nzookeeper.forceSync )</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>jute.maxbuffer</td>\r\n<td>每个节点最大数据量，是默认是1M。这个限制必须在server和client端都进行设置才会生效。(Java\r\nsystem property: jute.maxbuffer )</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>上面的<code>docker-compose.yml</code>文件中，我没用配置文件，但是上面的配置项其实可以用<code>zookeeper镜像</code>里的环境变量来实现，例如<code>ZOO_TICK_TIME</code>。</p>\r\n<h2 id=\"zookeeper分布式锁实现\">Zookeeper分布式锁实现</h2>\r\n<h3 id=\"zookeeper的节点\">Zookeeper的节点</h3>\r\n<p>要用Zookeeper实现分布式锁，我就不得不说说Zookeeper的数据存储。首先zookeeper的核心保存结构是一个DataTree数据结构，其实内部是一个Map&lt;String,\r\nDataNode&gt;\r\nnodes的数据结构，其中key是path，DataNode才是真正保存数据的核心数据结构，DataNode核心字段包括byte\r\ndata[]用于保存节点内容。</p>\r\n<p>节点是Zookeeper（zk）中数据存储的基础结构，zk中万物皆节点，就好比Java中万物皆对象一样。zk的数据模型就是基于节点的树形结构，但zk规定每个节点的引用规则是路径引用。每个节点中包含子节点引用、存储数据、访问权限以及节点元数据等四部分。</p>\r\n<figure>\r\n<img src=\"/images/pasted-2.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>zookeeper中提供了节点类型主要有：<br />\r\n*\r\n<strong>持久节点</strong>：节点创建后，就一直存在，直到有删除操作来主动清除。\r\n*\r\n<strong>顺序节点</strong>：假如当前有一个父节点为/lock，我们可以在这个父节点下面创建子节点；zk提供了一个可选的有序特性，例如我们可以创建子节点“/lock/test_”并且指明有序，那么zk在生成子节点时会根据当前子节点数量自动添加整数序号，如果第一个子节点为/lock/test_0000000000，下一个节点则为/lock/test_0000000001，依次类推。\r\n*\r\n<strong>临时节点</strong>：客户端可以建立一个临时节点，在会话结束或者会话超时后，zookeeper会自动删除该节点。</p>\r\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/zk-logo.png\" width=\"300px\" ></p>\r\n<p>Zookeeper 是 Apache\r\n的一个顶级项目，为分布式应用提供高效、高可用的分布式协调服务，提供了诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知和分布式锁等分布式基础服务。\r\n由于 ZooKeeper\r\n便捷的使用方式、卓越的性能和良好的稳定性，被广泛地应用于诸如\r\nHadoop、HBase、Kafka 和 Dubbo 等大型分布式系统中。</p>","more":"<h2 id=\"搭建zookeeper集群\">搭建Zookeeper集群</h2>\r\n<p>这里我们用Docker在本机上快速搭建一个zk集群，根据官方的<a\r\nhref=\"https://hub.docker.com/_/zookeeper\">zookeeper镜像</a>给的docker-compose文件，我们稍加修改就可以了：\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;2&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">services:</span><br><span class=\"line\">  zoo1:</span><br><span class=\"line\">    image: zookeeper:3.4</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    hostname: zoo1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 2181:2181</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      ZOO_MY_ID: 1</span><br><span class=\"line\">      ZOO_SERVERS: server.1=0.0.0.0:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">    - ./zoo1/data:/data</span><br><span class=\"line\">    - ./zoo1/datalog:/datalog</span><br><span class=\"line\"></span><br><span class=\"line\">  zoo2:</span><br><span class=\"line\">    image: zookeeper:3.4</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    hostname: zoo2</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 2182:2181</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      ZOO_MY_ID: 2</span><br><span class=\"line\">      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zoo3:2888:3888</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">    - ./zoo2/data:/data</span><br><span class=\"line\">    - ./zoo2/datalog:/datalog</span><br><span class=\"line\"></span><br><span class=\"line\">  zoo3:</span><br><span class=\"line\">    image: zookeeper:3.4</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\">    hostname: zoo3</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 2183:2181</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      ZOO_MY_ID: 3</span><br><span class=\"line\">      ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=0.0.0.0:2888:3888</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">    - ./zoo3/data:/data</span><br><span class=\"line\">    - ./zoo3/datalog:/datalog</span><br></pre></td></tr></table></figure> <code>docker-compose up</code>\r\n启动集群，然后查看服务状态： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker-compose ps</span><br><span class=\"line\">          Name                        Command               State                          Ports                        </span><br><span class=\"line\">------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">zookeeper-cluster_zoo1_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2181-&gt;2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp</span><br><span class=\"line\">zookeeper-cluster_zoo2_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2182-&gt;2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp</span><br><span class=\"line\">zookeeper-cluster_zoo3_1   /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2183-&gt;2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker-compose exec zoo1 ./bin/zkServer.sh status</span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /conf/zoo.cfg</span><br><span class=\"line\">Mode: follower</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker-compose exec zoo2 ./bin/zkServer.sh status</span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /conf/zoo.cfg</span><br><span class=\"line\">Mode: follower</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker-compose exec zoo3 ./bin/zkServer.sh status</span><br><span class=\"line\">ZooKeeper JMX enabled by default</span><br><span class=\"line\">Using config: /conf/zoo.cfg</span><br><span class=\"line\">Mode: leader</span><br></pre></td></tr></table></figure>\r\n可以看到zoo3这个节点是leader节点（<code>zookeeper</code>3.5的镜像似乎有点问题，集群起来后有个节点一直出错，所以我用了3.4）。</p>\r\n<h2 id=\"zookeeper配置文件\">zookeeper配置文件</h2>\r\n<p>zoo.cfg配置文件常见配置 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\">dataLogDir=/opt/zookeeper/logs</span><br><span class=\"line\">dataDir=/opt/zookeeper/data</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\">autopurge.snapRetainCount=500</span><br><span class=\"line\">autopurge.purgeInterval=24</span><br><span class=\"line\">server.1= 192.168.1.148:2888:3888</span><br><span class=\"line\">server.2= 192.168.1.149:2888:3888</span><br><span class=\"line\">server.3= 192.168.1.150:2888:3888</span><br></pre></td></tr></table></figure> zoo.cfg配置文件参数详细说明</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 18%\" />\r\n<col style=\"width: 81%\" />\r\n</colgroup>\r\n<thead>\r\n<tr class=\"header\">\r\n<th>参数名</th>\r\n<th>说明</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td>clientPort</td>\r\n<td>客户端连接server的端口，即对外服务端口，一般设置为2181吧。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>dataDir</td>\r\n<td>存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数dataLogDir,\r\n事务日志的写性能直接影响zk性能。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>tickTime</td>\r\n<td>ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。例如，session的最小超时时间是2*tickTime。</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>dataLogDir</td>\r\n<td>事务日志输出目录。尽量给事务日志的输出配置单独的磁盘或是挂载点，这将极大的提升ZK性能。\r\n（No Java system property）</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>globalOutstandingLimit</td>\r\n<td>最大请求堆积数。默认是1000。ZK运行的时候，\r\n尽管server已经没有空闲来处理更多的客户端请求了，但是还是允许客户端将请求提交到服务器上来，以提高吞吐性能。当然，为了防止Server内存溢出，这个请求堆积数还是需要限制下的。\r\n(Java system property:zookeeper.globalOutstandingLimit. )</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>preAllocSize</td>\r\n<td>预先开辟磁盘空间，用于后续写入事务日志。默认是64M，每个事务日志大小就是64M。如果ZK的快照频率较大的话，建议适当减小这个参数。(Java\r\nsystem property:zookeeper.preAllocSize )</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>snapCount</td>\r\n<td>每进行snapCount次事务日志输出后，触发一次快照(snapshot),\r\n此时，ZK会生成一个snapshot.文件，同时创建一个新的事务日志文件log.。默认是100000.（真正的代码实现中，会进行一定的随机数处理，以避免所有服务器在同一时间进行快照而影响性能）(Java\r\nsystem property:zookeeper.snapCount )</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>traceFile</td>\r\n<td>用于记录所有请求的log，一般调试过程中可以使用，但是生产环境不建议使用，会严重影响性能。(Java\r\nsystem property:? requestTraceFile )</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>maxClientCnxns</td>\r\n<td>单个客户端与单台服务器之间的连接数的限制，是ip级别的，默认是60，如果设置为0，那么表明不作任何限制。请注意这个限制的使用范围，仅仅是单台客户端机器与单台ZK服务器之间的连接数限制，不是针对指定客户端IP，也不是ZK集群的连接数限制，也不是单台ZK对所有客户端的连接数限制。指定客户端IP的限制策略，这里有一个patch，可以尝试一下：http://rdc.taobao.com/team/jm/archives/1334（No\r\nJava system property）</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>clientPortAddress</td>\r\n<td>对于多网卡的机器，可以为每个IP指定不同的监听端口。默认情况是所有IP都监听\r\nclientPort 指定的端口。 New in 3.3.0</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>minSessionTimeoutmaxSessionTimeoutSession</td>\r\n<td>超时时间限制，如果客户端设置的超时时间不在这个范围，那么会被强制设置为最大或最小时间。默认的Session超时时间是在2\r\n* tickTime ~ 20 * tickTime 这个范围 New in 3.3.0</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>fsync.warningthresholdms</td>\r\n<td>事务日志输出时，如果调用fsync方法超过指定的超时时间，那么会在日志中输出警告信息。默认是1000ms。(Java\r\nsystem property: fsync.warningthresholdms )New in 3.3.4</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>autopurge.purgeInterval</td>\r\n<td>在上文中已经提到，3.4.0及之后版本，ZK提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时，需要配置一个1或更大的整数，默认是0，表示不开启自动清理功能。(No\r\nJava system property) New in 3.4.0</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>autopurge.snapRetainCount</td>\r\n<td>这个参数和上面的参数搭配使用，这个参数指定了需要保留的文件数目。默认是保留3个。(No\r\nJava system property) New in 3.4.0</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>electionAlg</td>\r\n<td>在之前的版本中，\r\n这个参数配置是允许我们选择leader选举算法，但是由于在以后的版本中，只会留下一种“TCP-based\r\nversion of fast leader\r\nelection”算法，所以这个参数目前看来没有用了，这里也不详细展开说了。(No\r\nJava system property)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>initLimitFollowe</td>\r\n<td>r在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许F在\r\ninitLimit\r\n时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。(No\r\nJava system property)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>syncLimit</td>\r\n<td>在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。(No\r\nJava system property)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>leaderServes</td>\r\n<td>默认情况下，Leader是会接受客户端连接，并提供正常的读写服务。但是，如果你想让Leader专注于集群中机器的协调，那么可以将这个参数设置为no，这样一来，会大大提高写操作的性能。(Java\r\nsystem property: zookeeper. leaderServes )。</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>server.x=[hostname]:nnnnn[:nnnnn]</td>\r\n<td>这里的x是一个数字，与myid文件中的id是一致的。右边可以配置两个端口，第一个端口用于F和L之间的数据同步和其它通信，第二个端口用于Leader选举过程中投票通信。\r\n(No Java system property)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>group.x=nnnnn[:nnnnn]weight.x=nnnnn</td>\r\n<td>对机器分组和权重设置，可以 参见这里(No Java system property)</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>cnxTimeoutLeader</td>\r\n<td>选举过程中，打开一次连接的超时时间，默认是5s。(Java system property:\r\nzookeeper. cnxTimeout)</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>zookeeper.DigestAuthenticationProvider.superDigestZK</td>\r\n<td>权限设置相关，具体参见 《 使用super 身份对有权限的节点进行操作 》 和\r\n《 ZooKeeper 权限控制 》</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>skipACL</td>\r\n<td>对所有客户端请求都不作ACL检查。如果之前节点上设置有权限限制，一旦服务器上打开这个开头，那么也将失效。(Java\r\nsystem property: zookeeper.skipACL )</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td>forceSync</td>\r\n<td>这个参数确定了是否需要在事务日志提交的时候调用 FileChannel\r\n.force来保证数据完全同步到磁盘。(Java system property:\r\nzookeeper.forceSync )</td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td>jute.maxbuffer</td>\r\n<td>每个节点最大数据量，是默认是1M。这个限制必须在server和client端都进行设置才会生效。(Java\r\nsystem property: jute.maxbuffer )</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>上面的<code>docker-compose.yml</code>文件中，我没用配置文件，但是上面的配置项其实可以用<code>zookeeper镜像</code>里的环境变量来实现，例如<code>ZOO_TICK_TIME</code>。</p>\r\n<h2 id=\"zookeeper分布式锁实现\">Zookeeper分布式锁实现</h2>\r\n<h3 id=\"zookeeper的节点\">Zookeeper的节点</h3>\r\n<p>要用Zookeeper实现分布式锁，我就不得不说说Zookeeper的数据存储。首先zookeeper的核心保存结构是一个DataTree数据结构，其实内部是一个Map&lt;String,\r\nDataNode&gt;\r\nnodes的数据结构，其中key是path，DataNode才是真正保存数据的核心数据结构，DataNode核心字段包括byte\r\ndata[]用于保存节点内容。</p>\r\n<p>节点是Zookeeper（zk）中数据存储的基础结构，zk中万物皆节点，就好比Java中万物皆对象一样。zk的数据模型就是基于节点的树形结构，但zk规定每个节点的引用规则是路径引用。每个节点中包含子节点引用、存储数据、访问权限以及节点元数据等四部分。</p>\r\n<figure>\r\n<img src=\"/images/pasted-2.png\" alt=\"upload successful\" />\r\n<figcaption aria-hidden=\"true\">upload successful</figcaption>\r\n</figure>\r\n<p>zookeeper中提供了节点类型主要有：<br />\r\n*\r\n<strong>持久节点</strong>：节点创建后，就一直存在，直到有删除操作来主动清除。\r\n*\r\n<strong>顺序节点</strong>：假如当前有一个父节点为/lock，我们可以在这个父节点下面创建子节点；zk提供了一个可选的有序特性，例如我们可以创建子节点“/lock/test_”并且指明有序，那么zk在生成子节点时会根据当前子节点数量自动添加整数序号，如果第一个子节点为/lock/test_0000000000，下一个节点则为/lock/test_0000000001，依次类推。\r\n*\r\n<strong>临时节点</strong>：客户端可以建立一个临时节点，在会话结束或者会话超时后，zookeeper会自动删除该节点。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"clfhq40kn00012o3maq09a5a9","category_id":"clfhq40kr00042o3m20nggyko","_id":"clfhq40kw000e2o3mcl3i9eau"},{"post_id":"clfhq40ku00092o3m2sg7f4f4","category_id":"clfhq40kr00042o3m20nggyko","_id":"clfhq40kx000i2o3ma6eh6ily"},{"post_id":"clfhq40kq00032o3m0ddr4ack","category_id":"clfhq40kv000a2o3m0y6x0r89","_id":"clfhq40ky000m2o3mea8uhson"},{"post_id":"clfhq40kt00072o3m6mxwd3og","category_id":"clfhq40kw000f2o3mg1hfhjps","_id":"clfhq40kz000s2o3m4f7wgmq7"},{"post_id":"clfhq40ku00082o3mdwuz243j","category_id":"clfhq40ky000n2o3m8z7maw0n","_id":"clfhq40l1000x2o3m6pw2f9xh"},{"post_id":"clfhq40kv000c2o3m3jgt9a87","category_id":"clfhq40kr00042o3m20nggyko","_id":"clfhq40l200132o3m15cg9vel"},{"post_id":"clfhq40kv000c2o3m3jgt9a87","category_id":"clfhq40kz000t2o3mes5t2j7e","_id":"clfhq40l300172o3mhduvbtfl"},{"post_id":"clfhq40l100112o3me042fv0q","category_id":"clfhq40l1000z2o3m5v7t50nl","_id":"clfhq40l4001a2o3m0wad3sh3"},{"post_id":"clfhq40kw000d2o3mdn6r9ph0","category_id":"clfhq40l1000z2o3m5v7t50nl","_id":"clfhq40l5001f2o3mer9pbbw4"},{"post_id":"clfhq40kx000h2o3mf7u1b9gc","category_id":"clfhq40l200142o3m7ou515hp","_id":"clfhq40l6001j2o3m025nedx1"},{"post_id":"clfhq40kx000k2o3meuckb6mj","category_id":"clfhq40l1000z2o3m5v7t50nl","_id":"clfhq40l7001p2o3madtn0pmy"},{"post_id":"clfhq40ky000p2o3m30vjejns","category_id":"clfhq40l1000z2o3m5v7t50nl","_id":"clfhq40l9001w2o3ma8ka9fq5"},{"post_id":"clfhq40kz000r2o3m05vt9b81","category_id":"clfhq40l1000z2o3m5v7t50nl","_id":"clfhq40la00222o3mhfbxbkfj"},{"post_id":"clfhq40l0000v2o3m2h2g56s2","category_id":"clfhq40l9001v2o3mdoq11zhr","_id":"clfhq40lb00282o3m6nly7m8u"},{"post_id":"clfhq40l0000w2o3m5zn96xke","category_id":"clfhq40la00232o3mgutb0py0","_id":"clfhq40ld002f2o3mdyceb53b"},{"post_id":"clfhq40lb00292o3mafsuetfe","category_id":"clfhq40kr00042o3m20nggyko","_id":"clfhq40ld002k2o3mcgmu5np3"},{"post_id":"clfhq40l1000y2o3m89ug44o5","category_id":"clfhq40lb002a2o3macxs5dez","_id":"clfhq40le002m2o3m932vb4d2"},{"post_id":"clfhq40l300162o3m3zseejee","category_id":"clfhq40ld002g2o3m15h98sqa","_id":"clfhq40lf002s2o3m57dchmcp"},{"post_id":"clfhq40ld002l2o3ma3q9bil6","category_id":"clfhq40lb002a2o3macxs5dez","_id":"clfhq40lg002x2o3m6e8g4v1t"},{"post_id":"clfhq40l5001h2o3m5v2a2bq8","category_id":"clfhq40lg002z2o3m97wqguv6","_id":"clfhq40lj003a2o3m6b863br5"},{"post_id":"clfhq40lh00342o3m62b2cq8c","category_id":"clfhq40l9001v2o3mdoq11zhr","_id":"clfhq40lj003e2o3mcd89h2cu"},{"post_id":"clfhq40l6001l2o3m8xoga4xu","category_id":"clfhq40l1000z2o3m5v7t50nl","_id":"clfhq40lj003g2o3mdgirce9m"},{"post_id":"clfhq40l6001l2o3m8xoga4xu","category_id":"clfhq40li00352o3m23ha5uc5","_id":"clfhq40lk003k2o3mhdiocmzw"},{"post_id":"clfhq40l7001n2o3m0h6cctl7","category_id":"clfhq40lj003b2o3mazd51ii9","_id":"clfhq40lk003m2o3m1t3xhm4o"},{"post_id":"clfhq40l8001r2o3m3in7axd3","category_id":"clfhq40lj003h2o3mc6wr308d","_id":"clfhq40lk003q2o3md0q0a2wi"},{"post_id":"clfhq40l8001u2o3m7a5we2cm","category_id":"clfhq40lk003n2o3m4uyeh23m","_id":"clfhq40ll003u2o3m9lg3dsmv"},{"post_id":"clfhq40la00212o3m4v2xhoew","category_id":"clfhq40lk003s2o3mae7n48wh","_id":"clfhq40ll003y2o3m20hqd05p"},{"post_id":"clfhq40lb00272o3m9odp0v4p","category_id":"clfhq40ll003v2o3m8s9f89m7","_id":"clfhq40lm00422o3mdbpfdkkt"},{"post_id":"clfhq40lc002c2o3m2uzcf45m","category_id":"clfhq40ll00402o3md9qi67ah","_id":"clfhq40lm00452o3mgcuo5v6t"},{"post_id":"clfhq40lc002e2o3m58v18sni","category_id":"clfhq40lm00432o3mdk67d97v","_id":"clfhq40ln00492o3mdqleh5bv"},{"post_id":"clfhq40le002o2o3m73s96rif","category_id":"clfhq40lm00462o3m5hnceknl","_id":"clfhq40ln004h2o3mgdwaakfz"},{"post_id":"clfhq40l400192o3mayykgemd","category_id":"clfhq40le002n2o3mgynta35v","_id":"clfhq40lo004o2o3m6pckg813"},{"post_id":"clfhq40l400192o3mayykgemd","category_id":"clfhq40ln004j2o3m4lagg00t","_id":"clfhq40lo004r2o3m9nt9cjyy"},{"post_id":"clfhq40lg002y2o3mfxym67cd","category_id":"clfhq40lo004p2o3m89r31ixq","_id":"clfhq40lp004x2o3m8zexdnzm"},{"post_id":"clfhq40l5001e2o3m3gzda6sh","category_id":"clfhq40le002n2o3mgynta35v","_id":"clfhq40lp00512o3mgfp7fiq7"},{"post_id":"clfhq40l5001e2o3m3gzda6sh","category_id":"clfhq40ln004j2o3m4lagg00t","_id":"clfhq40lq00542o3m6atahlsq"},{"post_id":"clfhq40lh00322o3m23sg5qos","category_id":"clfhq40lo004p2o3m89r31ixq","_id":"clfhq40lq00562o3mcuz43fz3"},{"post_id":"clfhq40li00382o3m788zd5wb","category_id":"clfhq40kr00042o3m20nggyko","_id":"clfhq40lq005a2o3med7bc2lh"},{"post_id":"clfhq40li00382o3m788zd5wb","category_id":"clfhq40lp00502o3m0glzc8m7","_id":"clfhq40lq005d2o3m3bql85vo"},{"post_id":"clfhq40li00392o3m3no2dbfs","category_id":"clfhq40le002n2o3mgynta35v","_id":"clfhq40lr005e2o3mei68c5pz"},{"post_id":"clfhq40li00392o3m3no2dbfs","category_id":"clfhq40lq00572o3m32xkerkb","_id":"clfhq40lr005h2o3m6lc3dg12"},{"post_id":"clfhq40ld002j2o3mc4ru0n2y","category_id":"clfhq40lm00462o3m5hnceknl","_id":"clfhq40lr005i2o3m4vfd30vm"},{"post_id":"clfhq40ld002j2o3mc4ru0n2y","category_id":"clfhq40lq005b2o3mbmbl2dog","_id":"clfhq40lr005l2o3m1eg60vhr"},{"post_id":"clfhq40lf002r2o3mck6le05k","category_id":"clfhq40ln004e2o3m9z8w5n4w","_id":"clfhq40lr005n2o3m1cx0akur"},{"post_id":"clfhq40lf002r2o3mck6le05k","category_id":"clfhq40lr005f2o3m5lgyc8ue","_id":"clfhq40ls005q2o3mdahihwb2"},{"post_id":"clfhq40lf002v2o3mc7cw90ac","category_id":"clfhq40lo004m2o3mezr32phb","_id":"clfhq40ls005s2o3m2qgkcqjh"},{"post_id":"clfhq40lf002v2o3mc7cw90ac","category_id":"clfhq40lr005j2o3mbkwvbtpo","_id":"clfhq40ls005u2o3m60kw1tb7"},{"post_id":"clfhq40m0007o2o3mfv1gd5yr","category_id":"clfhq40l1000z2o3m5v7t50nl","_id":"clfhq40m1007q2o3mck1ddrtu"},{"post_id":"clfhq40l200122o3m3b5x39jy","category_id":"clfhqsksj007u2o3m7d5g5ard","_id":"clfhqsksk007w2o3me8cb0842"}],"PostTag":[{"post_id":"clfhq40kn00012o3maq09a5a9","tag_id":"clfhq40ks00052o3m8fkldn5q","_id":"clfhq40kx000j2o3m3nzvbj1l"},{"post_id":"clfhq40kn00012o3maq09a5a9","tag_id":"clfhq40kv000b2o3m3vux33tk","_id":"clfhq40ky000l2o3meffpa36c"},{"post_id":"clfhq40kq00032o3m0ddr4ack","tag_id":"clfhq40kx000g2o3ma55qh38f","_id":"clfhq40kz000q2o3m1bp385y5"},{"post_id":"clfhq40kt00072o3m6mxwd3og","tag_id":"clfhq40ky000o2o3ma0rmcx29","_id":"clfhq40l300182o3mdu906i6b"},{"post_id":"clfhq40kt00072o3m6mxwd3og","tag_id":"clfhq40l0000u2o3m526q0z9c","_id":"clfhq40l4001b2o3m87tke51b"},{"post_id":"clfhq40kt00072o3m6mxwd3og","tag_id":"clfhq40l100102o3ma1617qa0","_id":"clfhq40l5001g2o3m7d7w383f"},{"post_id":"clfhq40ku00082o3mdwuz243j","tag_id":"clfhq40l300152o3m49jwd6rj","_id":"clfhq40l7001m2o3mhqvhfd3y"},{"post_id":"clfhq40ku00082o3mdwuz243j","tag_id":"clfhq40l4001d2o3m1qzsg45k","_id":"clfhq40l7001q2o3m72amdesg"},{"post_id":"clfhq40ku00092o3m2sg7f4f4","tag_id":"clfhq40ks00052o3m8fkldn5q","_id":"clfhq40l8001t2o3mcjyddsz5"},{"post_id":"clfhq40ku00092o3m2sg7f4f4","tag_id":"clfhq40l6001k2o3m210o6y6y","_id":"clfhq40l9001x2o3m4k0z20e8"},{"post_id":"clfhq40kv000c2o3m3jgt9a87","tag_id":"clfhq40ks00052o3m8fkldn5q","_id":"clfhq40l900202o3mc6e7dwb8"},{"post_id":"clfhq40kv000c2o3m3jgt9a87","tag_id":"clfhq40l4001d2o3m1qzsg45k","_id":"clfhq40la00242o3m71hofu6f"},{"post_id":"clfhq40kw000d2o3mdn6r9ph0","tag_id":"clfhq40l9001z2o3m40ev4hvl","_id":"clfhq40lc002d2o3m7aak4w86"},{"post_id":"clfhq40kw000d2o3mdn6r9ph0","tag_id":"clfhq40la00262o3m5sw6egnh","_id":"clfhq40ld002h2o3m25oweiqc"},{"post_id":"clfhq40kx000h2o3mf7u1b9gc","tag_id":"clfhq40lc002b2o3m0suwfrmg","_id":"clfhq40le002q2o3m7x8027ol"},{"post_id":"clfhq40kx000h2o3mf7u1b9gc","tag_id":"clfhq40ld002i2o3mhwaxe9si","_id":"clfhq40lf002u2o3mby1a316d"},{"post_id":"clfhq40kx000k2o3meuckb6mj","tag_id":"clfhq40l9001z2o3m40ev4hvl","_id":"clfhq40lh00332o3mcdhl60po"},{"post_id":"clfhq40kx000k2o3meuckb6mj","tag_id":"clfhq40lf002w2o3mb13s56qu","_id":"clfhq40li00362o3m0sli6esz"},{"post_id":"clfhq40li00382o3m788zd5wb","tag_id":"clfhq40ks00052o3m8fkldn5q","_id":"clfhq40lj003d2o3mdcn6dp4x"},{"post_id":"clfhq40li00382o3m788zd5wb","tag_id":"clfhq40l4001d2o3m1qzsg45k","_id":"clfhq40lj003f2o3m97uu9pnz"},{"post_id":"clfhq40ky000p2o3m30vjejns","tag_id":"clfhq40lh00312o3m2apj9i09","_id":"clfhq40lk003i2o3m3sgieti4"},{"post_id":"clfhq40ky000p2o3m30vjejns","tag_id":"clfhq40l9001z2o3m40ev4hvl","_id":"clfhq40lk003l2o3majb35d24"},{"post_id":"clfhq40kz000r2o3m05vt9b81","tag_id":"clfhq40lj003c2o3m5ovgd5fx","_id":"clfhq40lk003p2o3md7kienop"},{"post_id":"clfhq40kz000r2o3m05vt9b81","tag_id":"clfhq40lk003j2o3m626633yw","_id":"clfhq40lk003r2o3m5qsvg0xa"},{"post_id":"clfhq40l0000v2o3m2h2g56s2","tag_id":"clfhq40lk003o2o3mbs1wdyru","_id":"clfhq40ll003x2o3m0mpw4sbo"},{"post_id":"clfhq40l0000v2o3m2h2g56s2","tag_id":"clfhq40lk003t2o3m5aem6k5d","_id":"clfhq40ll003z2o3m926z6ma2"},{"post_id":"clfhq40l0000w2o3m5zn96xke","tag_id":"clfhq40ll003w2o3m22kk9tnp","_id":"clfhq40ln00482o3m99qe384j"},{"post_id":"clfhq40l0000w2o3m5zn96xke","tag_id":"clfhq40ll00412o3m4ojafbkm","_id":"clfhq40ln004a2o3m5grsa2ql"},{"post_id":"clfhq40l0000w2o3m5zn96xke","tag_id":"clfhq40lm00442o3mdy7798t7","_id":"clfhq40ln004d2o3m4w7l96mq"},{"post_id":"clfhq40l1000y2o3m89ug44o5","tag_id":"clfhq40l4001d2o3m1qzsg45k","_id":"clfhq40ln004g2o3m11nm5ovp"},{"post_id":"clfhq40l1000y2o3m89ug44o5","tag_id":"clfhq40ln004c2o3mejdbh6lx","_id":"clfhq40ln004i2o3mfgzp5wu2"},{"post_id":"clfhq40l100112o3me042fv0q","tag_id":"clfhq40ln004f2o3m6y4j4i96","_id":"clfhq40lo004l2o3mdaskapl5"},{"post_id":"clfhq40l300162o3m3zseejee","tag_id":"clfhq40lo004k2o3meaa26iff","_id":"clfhq40lo004s2o3m3dpo8ma6"},{"post_id":"clfhq40l300162o3m3zseejee","tag_id":"clfhq40lo004n2o3mfcogcizr","_id":"clfhq40lp004t2o3m6o288zdd"},{"post_id":"clfhq40l400192o3mayykgemd","tag_id":"clfhq40lo004q2o3m0q23e94q","_id":"clfhq40lp004z2o3mfwj55roy"},{"post_id":"clfhq40l400192o3mayykgemd","tag_id":"clfhq40lp004v2o3medu11475","_id":"clfhq40lq00522o3md4ub6ksd"},{"post_id":"clfhq40l5001e2o3m3gzda6sh","tag_id":"clfhq40lo004q2o3m0q23e94q","_id":"clfhq40lq00552o3m6cf4arur"},{"post_id":"clfhq40l5001h2o3m5v2a2bq8","tag_id":"clfhq40lq00532o3mh6s33q7y","_id":"clfhq40lq00592o3mhlkd8qpv"},{"post_id":"clfhq40l6001l2o3m8xoga4xu","tag_id":"clfhq40lq00582o3mf0cneijd","_id":"clfhq40lr005m2o3medmpcbx8"},{"post_id":"clfhq40l6001l2o3m8xoga4xu","tag_id":"clfhq40lq005c2o3m7vkra0jl","_id":"clfhq40ls005o2o3mc55j4zpc"},{"post_id":"clfhq40l6001l2o3m8xoga4xu","tag_id":"clfhq40ln004f2o3m6y4j4i96","_id":"clfhq40ls005r2o3mblix9efj"},{"post_id":"clfhq40l7001n2o3m0h6cctl7","tag_id":"clfhq40lr005k2o3m5sik1xbf","_id":"clfhq40ls005w2o3m7aq849i3"},{"post_id":"clfhq40l7001n2o3m0h6cctl7","tag_id":"clfhq40ls005p2o3m9uwtgy47","_id":"clfhq40ls005x2o3mda2uftim"},{"post_id":"clfhq40l7001n2o3m0h6cctl7","tag_id":"clfhq40ls005t2o3mevck000q","_id":"clfhq40ls005z2o3mfuxcfchr"},{"post_id":"clfhq40l8001r2o3m3in7axd3","tag_id":"clfhq40ls005v2o3mbeg0bwim","_id":"clfhq40ls00602o3m44bf43le"},{"post_id":"clfhq40l8001u2o3m7a5we2cm","tag_id":"clfhq40ls005y2o3m23lq3kdq","_id":"clfhq40lt00642o3m81v627hn"},{"post_id":"clfhq40l8001u2o3m7a5we2cm","tag_id":"clfhq40ls00612o3m8al6g44c","_id":"clfhq40lt00652o3mf56tdcau"},{"post_id":"clfhq40l8001u2o3m7a5we2cm","tag_id":"clfhq40lt00622o3m5ot6c4d6","_id":"clfhq40lt00672o3meyjm2vpa"},{"post_id":"clfhq40la00212o3m4v2xhoew","tag_id":"clfhq40lt00632o3mh3prfisz","_id":"clfhq40lt00692o3mdudnaetk"},{"post_id":"clfhq40la00212o3m4v2xhoew","tag_id":"clfhq40lt00662o3m8mahcpr7","_id":"clfhq40lt006a2o3mfhos0fyn"},{"post_id":"clfhq40la00252o3mahn9brw1","tag_id":"clfhq40lt00682o3m1ibd2ijv","_id":"clfhq40lt006c2o3m1y3pbilh"},{"post_id":"clfhq40lb00272o3m9odp0v4p","tag_id":"clfhq40lt006b2o3m7obn6qon","_id":"clfhq40lu006e2o3mf50y5ug2"},{"post_id":"clfhq40lb00292o3mafsuetfe","tag_id":"clfhq40ks00052o3m8fkldn5q","_id":"clfhq40lu006h2o3mfta87dll"},{"post_id":"clfhq40lb00292o3mafsuetfe","tag_id":"clfhq40lt006d2o3meg046tcl","_id":"clfhq40lu006i2o3mhcm996u2"},{"post_id":"clfhq40lb00292o3mafsuetfe","tag_id":"clfhq40lu006f2o3m9y45ajr9","_id":"clfhq40lu006k2o3m13miajlt"},{"post_id":"clfhq40lc002c2o3m2uzcf45m","tag_id":"clfhq40lu006g2o3m7waq5pjx","_id":"clfhq40lu006l2o3m1ld385dt"},{"post_id":"clfhq40lc002e2o3m58v18sni","tag_id":"clfhq40lu006j2o3m6k9i5awg","_id":"clfhq40lu006n2o3m1zo40kyh"},{"post_id":"clfhq40ld002j2o3mc4ru0n2y","tag_id":"clfhq40lu006m2o3mapk4hj37","_id":"clfhq40lv006q2o3m8b00civz"},{"post_id":"clfhq40ld002j2o3mc4ru0n2y","tag_id":"clfhq40lu006o2o3m92lc8ly7","_id":"clfhq40lv006r2o3mhqxe5j3d"},{"post_id":"clfhq40ld002l2o3ma3q9bil6","tag_id":"clfhq40lv006p2o3mhbyn9o6j","_id":"clfhq40lv006t2o3mhjmvf86i"},{"post_id":"clfhq40ld002l2o3ma3q9bil6","tag_id":"clfhq40l4001d2o3m1qzsg45k","_id":"clfhq40lv006u2o3m709nezcx"},{"post_id":"clfhq40le002o2o3m73s96rif","tag_id":"clfhq40lv006s2o3mg32dbsdx","_id":"clfhq40lv006w2o3m91ww3jwc"},{"post_id":"clfhq40lf002r2o3mck6le05k","tag_id":"clfhq40lv006v2o3m3zzy16o8","_id":"clfhq40lv006z2o3mg8end2yn"},{"post_id":"clfhq40lf002r2o3mck6le05k","tag_id":"clfhq40lv006x2o3mgz1sgtyo","_id":"clfhq40lw00702o3me5t6c0ad"},{"post_id":"clfhq40lg002y2o3mfxym67cd","tag_id":"clfhq40lv006y2o3m242lge2i","_id":"clfhq40lw00742o3m541c7czo"},{"post_id":"clfhq40lg002y2o3mfxym67cd","tag_id":"clfhq40lw00712o3m8yg111k9","_id":"clfhq40lw00752o3m0togey3v"},{"post_id":"clfhq40lg002y2o3mfxym67cd","tag_id":"clfhq40lw00722o3meq3c6mvy","_id":"clfhq40lw00772o3mem0d5r7o"},{"post_id":"clfhq40lg00302o3m302q4glu","tag_id":"clfhq40lw00732o3m86njc0q5","_id":"clfhq40lw00792o3m9ktidm85"},{"post_id":"clfhq40lg00302o3m302q4glu","tag_id":"clfhq40lw00762o3mabizc1nm","_id":"clfhq40lw007a2o3m67loh0g6"},{"post_id":"clfhq40lh00322o3m23sg5qos","tag_id":"clfhq40lw00782o3m67686h4e","_id":"clfhq40lx007d2o3m3abmhbe2"},{"post_id":"clfhq40lh00322o3m23sg5qos","tag_id":"clfhq40lw007b2o3mdfb015et","_id":"clfhq40lx007e2o3mf0j5b2l3"},{"post_id":"clfhq40lh00342o3m62b2cq8c","tag_id":"clfhq40lk003t2o3m5aem6k5d","_id":"clfhq40ly007j2o3mfmrh1qje"},{"post_id":"clfhq40lh00342o3m62b2cq8c","tag_id":"clfhq40lk003o2o3mbs1wdyru","_id":"clfhq40ly007k2o3mghge3ya1"},{"post_id":"clfhq40lh00342o3m62b2cq8c","tag_id":"clfhq40lx007g2o3mei68ao6q","_id":"clfhq40ly007l2o3mfrfk1psi"},{"post_id":"clfhq40lh00342o3m62b2cq8c","tag_id":"clfhq40lx007h2o3majmr3w26","_id":"clfhq40ly007m2o3m8zr289a4"},{"post_id":"clfhq40li00392o3m3no2dbfs","tag_id":"clfhq40lx007i2o3mf5hr989k","_id":"clfhq40ly007n2o3m2nqq3xpm"},{"post_id":"clfhq40m0007o2o3mfv1gd5yr","tag_id":"clfhq40m1007p2o3m3tmt7cx8","_id":"clfhq40m1007r2o3m2c73198e"},{"post_id":"clfhq40m0007o2o3mfv1gd5yr","tag_id":"clfhq40l9001z2o3m40ev4hvl","_id":"clfhq40m1007s2o3m5ajcf5l9"},{"post_id":"clfhq40l200122o3m3b5x39jy","tag_id":"clfhqsksj007t2o3m71l16go8","_id":"clfhqsksj007v2o3m56l43it2"}],"Tag":[{"name":"Docker","_id":"clfhq40ks00052o3m8fkldn5q"},{"name":"WIndows","_id":"clfhq40kv000b2o3m3vux33tk"},{"name":"C","_id":"clfhq40kx000g2o3ma55qh38f"},{"name":"C#","_id":"clfhq40ky000o2o3ma0rmcx29"},{"name":"CefSharp","_id":"clfhq40l0000u2o3m526q0z9c"},{"name":"WPF","_id":"clfhq40l100102o3ma1617qa0"},{"name":"PHP","_id":"clfhq40l300152o3m49jwd6rj"},{"name":"Linux","_id":"clfhq40l4001d2o3m1qzsg45k"},{"name":"Cgroups","_id":"clfhq40l6001k2o3m210o6y6y"},{"name":"Java","_id":"clfhq40l9001z2o3m40ev4hvl"},{"name":"Elasticsearch","_id":"clfhq40la00262o3m5sw6egnh"},{"name":"JavaScript","_id":"clfhq40lc002b2o3m0suwfrmg"},{"name":"class","_id":"clfhq40ld002i2o3mhwaxe9si"},{"name":"Java Web","_id":"clfhq40lf002w2o3mb13s56qu"},{"name":"GC","_id":"clfhq40lh00312o3m2apj9i09"},{"name":"synchronized","_id":"clfhq40lj003c2o3m5ovgd5fx"},{"name":"java","_id":"clfhq40lk003j2o3m626633yw"},{"name":"linux","_id":"clfhq40lk003o2o3mbs1wdyru"},{"name":"network","_id":"clfhq40lk003t2o3m5aem6k5d"},{"name":"jenkins","_id":"clfhq40ll003w2o3m22kk9tnp"},{"name":"ci","_id":"clfhq40ll00412o3m4ojafbkm"},{"name":"docker","_id":"clfhq40lm00442o3mdy7798t7"},{"name":"iptables","_id":"clfhq40ln004c2o3mejdbh6lx"},{"name":"MyBatis","_id":"clfhq40ln004f2o3m6y4j4i96"},{"name":"Python","_id":"clfhq40lo004k2o3meaa26iff"},{"name":"Matplotlib","_id":"clfhq40lo004n2o3mfcogcizr"},{"name":"Qt","_id":"clfhq40lo004q2o3m0q23e94q"},{"name":"Qt Creator","_id":"clfhq40lp004v2o3medu11475"},{"name":"RabbitMQ","_id":"clfhq40lq00532o3mh6s33q7y"},{"name":"Spring","_id":"clfhq40lq00582o3mf0cneijd"},{"name":"Spring Boot","_id":"clfhq40lq005c2o3m7vkra0jl"},{"name":"NVI","_id":"clfhq40lr005k2o3m5sik1xbf"},{"name":"CUDA","_id":"clfhq40ls005p2o3m9uwtgy47"},{"name":"cuDNN","_id":"clfhq40ls005t2o3mevck000q"},{"name":"Typescript","_id":"clfhq40ls005v2o3mbeg0bwim"},{"name":"kubernetes","_id":"clfhq40ls005y2o3m23lq3kdq"},{"name":"vagrant","_id":"clfhq40ls00612o3m8al6g44c"},{"name":"virtualbox","_id":"clfhq40lt00622o3m5ot6c4d6"},{"name":"arduino","_id":"clfhq40lt00632o3mh3prfisz"},{"name":"传感器","_id":"clfhq40lt00662o3m8mahcpr7"},{"name":"Assembly","_id":"clfhq40lt00682o3m1ibd2ijv"},{"name":"OS","_id":"clfhq40lt006b2o3m7obn6qon"},{"name":"Namespace","_id":"clfhq40lt006d2o3meg046tcl"},{"name":"Cgroup","_id":"clfhq40lu006f2o3m9y45ajr9"},{"name":"nodejs","_id":"clfhq40lu006g2o3m7waq5pjx"},{"name":"c","_id":"clfhq40lu006j2o3m6k9i5awg"},{"name":"rpc","_id":"clfhq40lu006m2o3mapk4hj37"},{"name":"go","_id":"clfhq40lu006o2o3m92lc8ly7"},{"name":"gdb","_id":"clfhq40lv006p2o3mhbyn9o6j"},{"name":"Go","_id":"clfhq40lv006s2o3mg32dbsdx"},{"name":"https","_id":"clfhq40lv006v2o3m3zzy16o8"},{"name":"协议","_id":"clfhq40lv006x2o3mgz1sgtyo"},{"name":"图","_id":"clfhq40lv006y2o3m242lge2i"},{"name":"最小生成树","_id":"clfhq40lw00712o3m8yg111k9"},{"name":"数据结构","_id":"clfhq40lw00722o3meq3c6mvy"},{"name":"puppeteer","_id":"clfhq40lw00732o3m86njc0q5"},{"name":"Nodejs","_id":"clfhq40lw00762o3mabizc1nm"},{"name":"栈","_id":"clfhq40lw00782o3m67686h4e"},{"name":"四则运算","_id":"clfhq40lw007b2o3mdfb015et"},{"name":"tun","_id":"clfhq40lx007g2o3mei68ao6q"},{"name":"tap","_id":"clfhq40lx007h2o3majmr3w26"},{"name":"C++","_id":"clfhq40lx007i2o3mf5hr989k"},{"name":"zookeeper","_id":"clfhq40m1007p2o3m3tmt7cx8"},{"name":"矩阵","_id":"clfhqsksj007t2o3m71l16go8"}]}}